{"version":3,"sources":["availity-angular.js","/source/index.js","/source/strings.js","/source/uuid.js","/source/urls.js","/source/print.js","/source/throttle.js","/source/logger.js","/source/logger-config.js","/source/polling.js","/source/api-factory.js","/source/api-users.js","/source/api-coverages.js","/source/api-configurations.js","/source/api-log-messages.js","/source/api-documents.js","/source/api-organizations.js","/source/api-codes.js","/source/api-user-permissions.js","/source/user-authorizations.js","/source/session.js","/source/idle.js","/source/idle-interceptor.js","/source/validator.js","/source/validator-utils.js","/source/validator-size.js","/source/validator-pattern.js","/source/validator-required.js","/source/validator-date-range.js","/source/validator-date-format.js","/source/validator-npi.js","/source/validator-phone.js","/source/validator-email.js","/source/globals.js","/source/analytics.js","/source/analytics-util.js","/source/analytics-splunk.js","/source/analytics-piwik.js","/source/analytics-exceptions.js","/source/analytics-config.js","/source/date-polyfill.js","/source/messages-constants.js","/source/messages.js"],"names":["root","availity","VERSION","MODULE","core","angular","module","originalModule","modules","name","deps","_","indexOf","window","__karma__","Error","push","exports","_stringify","object","isBlank","str","test","uid","uuid","prefix","index","length","digit","charCodeAt","join","String","fromCharCode","unshift","REGEX_API_URL","getRelativeUrl","url","result","match","print","document","queryCommandSupported","execCommand","focus","constant","OPTIONS","wait","update","trailing","leading","factory","AV_THROTTLE","$timeout","fn","options","merge","THRESHOLD","isDefined","UPDATE","timer","context","this","args","arguments","apply","later","provider","_enabled","enabled","$get","$injector","AvLogger","$delegate","$log","proto","prototype","supplant","supplantData","_supplant","key","replace","isObject","element","elemStr","isUndefined","constructor","toString","getFormattedTimestamp","date","getHours","getMinutes","getSeconds","getMilliseconds","_log","originalFn","hash","location","now","Date","message","stack","errorMessage","formatError","get","params","log","info","warn","debug","arg","sourceURL","line","error","config","$provide","decorator","INTERVAL","MAX_ELAPSED_TIME","MAX_RETRY","DECAY","EVENTS","REGEX_URL","PollingServiceFactory","$rootScope","$q","AV_POLLING","AV_API","AvPollingService","pendingRequests","response","isAsyncResponse","onAsyncReponse","when","setDefaults","defaultOptions","pollingInterval","pollingDecay","pollingMaxInterval","pollingRetryCount","pollingStartTime","getTime","extend","responseError","reject","api","status","isFunction","headers","HEADERS","SERVER","LOCATION","deferred","defer","queueRequest","notify","promise","getUrl","self","_url","_config","method","pollingMaxRetry","_pollingDecay","cache","request","id","timeout","getPollingTimeout","retryRequest","pushRequest","popRequest","i","splice","isPollingMaxTimeout","elaspedTime","isElapsed","isMaxRetried","isPollable","_isTimeout","_isMax","cancel","increment","successCallback","resolve","errorCallback","$http","then","incrementCounter","incrementDecay","clearRequests","forEach","ID","STATUS","GLOBAL_ID","CLIENT","SESSION_ID","AUTH","OVERRIDE","CALLBACK_URL","CUSTOMER_ID","RESPONSE_ENCODING","path","resourceGroup","version","level","suffix","X-Response-Encoding-Context","ApiResourcesProvider","setOptions","getOptions","copy","setHttpCommonHeaders","$httpProvider","defaults","common","avPollingService","AvApiResource","isString","charAt","_cacheBust","cacheBust","_getUrl","_getApiUrl","_createResponse","data","_request","afterCallback","success","_response","_promise","successResponse","call","errorResponse","notifyResponse","always","normalize","joined","slice","create","beforeCreate","afterCreate","afterGet","query","afterQuery","isNumber","beforeUpdate","afterUpdate","remove","afterRemove","UserServiceFactory","AvUsersResource","user","me","LogMessagesFactory","AvLogMessagesResource","buildRequest","entries","requestPayload","AvDocumentsResourceFactory","AvDocumentsResource","getContents","getContentsUrl","OrganizationResourceFactory","OrganizationResource","getOrganizations","organizations","AvCodesResourceFactory","AvCodesResource","getCodes","page","offset","list","q","results","codes","has","each","code","moreVal","totalCount","limit","more","AvUserPermissionsResourceFactory","AvUserPermissionsResource","sessionDate","moment","toISOString","axiUserPermissions","getPermissions","permissionIds","region","permissionId","AvUserAuthorizationsFactory","avUserPermissionsResource","AvUserAuthorizations","setRegion","setPermissionIds","isArray","isAuthorized","getPermission","permission","isAnyAuthorized","permissions","findWhere","undefined","_permissions","union","toPermissionMap","getPayers","organizationId","organization","resources","map","toPermission","description","geographies","SESSION_TIMEOUT","NOT_AUTHORIZED","avUsersResource","AvSession","getUser","destroy","permisions","IDLE_INACTIVE","IDLE_ACTIVE","SESSION_TIMEOUT_ACTIVE","SESSION_TIMEOUT_REDIRECT","HUMAN","MACHINE","INTERVALS","PING","IDLE","SESSION","URLS","HOME","AV_IDLE","pingUrl","redirectUrl","sessionTimeout","idleTimeout","pingTimeout","enable","value","setSessionTimeout","setIdleTimeout","setPingTimeout","setPingUrl","$document","avThrottle","AvIdle","_idleTimer","_sessionTimer","_pingTimer","_keepAlive","idleActive","sessionActive","listeners","init","stop","start","listener","setRedirectUrl","$on","find","on","event","onEvent","oldUrl","newUrl","href","startIdleTimer","startSessionTimer","off","stopPing","stopSessionTimer","stopIdleTimer","isEnabled","isApiRequest","$broadcast","startPing","keepAlive","avIdle","interceptors","classes","valid","invalid","dirty","pristine","touched","untouched","submitted","validators","REVALIDATE","SUBMITTED","FAILED","RESET","DEBOUNCE","DATE_FORMAT","SIMPLE","PATTERNS","ALPHA_ONLY","NUMERIC_ONLY","rules","services","addRules","_rules","addValidators","_validators","concat","avValConfig","AV_VAL","AvValidation","initValidators","addValidator","validator","validate","ruleName","ruleConfig","contraints","el","violations","_valid","rule","contraintName","validationResult","field","isValid","all","isEmpty","$","trim","avValUtils","min","max","type","toLowerCase","isNull","parseInt","REGEX","asRegExp","pattern","RegExp","values","expresion","ctrl","$isEmpty","getStartDate","setMin","add","units","getEndDate","end","setMax","set","validation","startDate","endDate","format","isBetween","isSame","INTEGER_REGEX","npi","firstDigit","substring","alternate","total","next","roundUp","Math","ceil","calculatedCheck","avValPattern","PHONE_PATTERN","EMAIL_PATTERN","REGIONS","AV_ANALYTICS","VIRTUAL_PAGE_TRACKING","SERVICES","PIWIK","SPLUNK","PAGE","DEFAULT","PRE_FIX","IGNORE","ENV","PROD","DOMAIN","URL","QA","avAnalyticsConfigProvider","avAnalyticsConfig","plugins","virtualPageTracking","appId","registerPlugins","_plugins","setVirtualPageTracking","isVirtualPageTracking","setAppID","$location","AvAnalytics","plugin","err","trackPageView","absUrl","handler","trackEvent","properties","promises","getAppId","AnalyticsUtils","getProperties","attributes","props","isValidAttribute","isNotIgnored","getAttribute","isExternalLink","attrs","ngClick","ignored","includes","lowercase","substr","simpleKey","toNum","parsed","isNaN","trackingValues","toUpperCase","avLogMessagesResource","SplunkAnalyticsService","$$absUrl","siteId","customVariables","_setCustomVariable","valueName","scope","setSiteID","_siteID","setVisitVariables","items","item","setPageVariables","avAnalyticsUtils","AvPiwikAnalytics","_paq","category","action","label","isFinite","$$host","variable","getScript","MESSAGES","NOT_APPLICABLE","TYPES","EXCEPTION","setAppId","_id","AV_EXCEPTIONS","AvExceptionAnalytics","TraceKit","remoteFetching","surroundingLinesToCollect","report","subscribe","stacktrace","onError","prettyPrint","padLeft","func","column","userAgent","navigator","errorDate","errorName","errorStack","userLanguage","referrer","host","domain","screenWidth","width","screenHeight","height","sdkVersion","exception","computeStackTrace","cause","errorTacking","run","avExceptionAnalytics","analytics","avAnalytics","pad","number","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","toFixed","MESSAGE","RESIZE","UNLOAD","AV_RESIZE","AV_RECEIVED","AV_MAXIMIZE","AV_MINIMIZE","AV_LOGIN","AV_LOGOUT","AV_SESSION_TIMEOUT","RESIZE_DEBOUNCE","LOCAL","AV_MESSAGES","AvMessages","$window","onMessage","onResize","send","resize","debounce","isDomain","_event","originalEvent","source","origin","fromJson","$root","isIframe","parent","hostname","protocol","port","payload","JSON","stringify","postMessage","avMessages"],"mappings":"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","file":"availity-angular.min.js","sourcesContent":["/**\n * availity-angular v1.11.1 -- June-17\n * Copyright 2016 Availity, LLC \n */\n\n// Source: -v1/lib/core/index.js\n\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity || {};\n  availity.VERSION = 'v1.11.1';\n  availity.MODULE = 'availity';\n  availity.core = angular.module(availity.MODULE, ['ng']);\n\n  var originalModule = angular.module;\n  var modules = [];\n\n  angular.module = function(name, deps) {\n\n    if(deps && _.indexOf(modules, name) !== -1 && !window.__karma__) {\n      throw new Error('redefining module: ' + name);\n    }\n\n    modules.push(name);\n\n    return originalModule(name, deps);\n  };\n\n  root.availity = availity;\n\n  if(typeof module !== 'undefined' && module.exports) {\n    module.exports = availity;\n  }\n\n})(window);\n\n\n// Source: -v1/lib/core/utils/strings.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/helper/makeString.js\n  availity._stringify = function(object) {\n    if(object === null) {\n      return '';\n    }\n    return '' + object;\n  };\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/isBlank.js\n  availity.isBlank = function(str) {\n    return (/^\\s*$/).test(availity._stringify(str));\n  };\n\n})(window);\n\n// Source: -v1/lib/core/utils/uuid.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var uid = ['0', '0', '0'];\n\n  availity.uuid = function(prefix) {\n    var index = uid.length;\n    var digit;\n\n    while(index) {\n      index--;\n      digit = uid[index].charCodeAt(0);\n      if(digit === 57 /*'9'*/) {\n        uid[index] = 'A';\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n      if(digit === 90  /*'Z'*/) {\n        uid[index] = '0';\n      } else {\n        uid[index] = String.fromCharCode(digit + 1);\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n    }\n    uid.unshift('0');\n    return prefix ? prefix + uid.join('') : uid.join('');\n  };\n\n})(window);\n\n// Source: -v1/lib/core/utils/urls.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.REGEX_API_URL = /^.*?api.availity.com(.*)$/;\n\n  availity.getRelativeUrl = function(url) {\n    var result = url.match(availity.REGEX_API_URL);\n    if(result && result[1]) {\n      return '/api' + result[1];\n    }\n\n    return url;\n  };\n\n})(window);\n\n// Source: -v1/lib/core/utils/print.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // https://github.com/jasonday/printThis/commit/66f9cbd0e3760767342eed4ef32cf8294417b227\n  availity.print = function() {\n\n    if(document.queryCommandSupported('print')) {\n      document.execCommand('print', false, null);\n    } else {\n      window.focus();\n      window.print();\n    }\n  };\n\n})(window);\n\n// Source: -v1/lib/core/utils/throttle.js\n// Original => https://github.com/mgcrea/angular-strap/blob/master/src/helpers/debounce.js\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_THROTTLE', {\n    OPTIONS: {\n      wait: 1000,\n      update: false,\n      trailing: true,\n      leading: false\n    }\n  });\n\n  availity.core.factory('avThrottle', function(AV_THROTTLE, $timeout) {\n\n    return function(fn, wait, options) {\n\n      options = _.merge({}, AV_THROTTLE.OPTIONS, options);\n\n      wait = wait ? wait : AV_THROTTLE.THRESHOLD;\n      var update = angular.isDefined(options.update) ? options.update : AV_THROTTLE.UPDATE;\n      var timer = null;\n\n      return function() {\n        var context = options.context || this;\n        var args = arguments;\n\n        if(!timer) {\n          if(options.leading !== false) {\n            fn.apply(context, args);\n          }\n\n          var later = function() {\n            timer = null;\n            if(options.trailing !== false) {\n              fn.apply(context, args);\n            }\n          };\n\n          timer = $timeout(later, wait, update);\n        }\n\n        return timer;\n\n      };\n    };\n  });\n\n})(window);\n\n// Source: -v1/lib/core/logger/logger.js\n// Orginal => https://github.com/ericzon/angular-ny-logger/blob/0c594e864c93e7f33d36141200096bc6139ddde1/angular-ny-logger.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.provider('AvLogger', function() {\n\n    var _enabled = false;\n\n    this.enabled = function(enabled) {\n      _enabled = !!enabled;\n    };\n\n    this.$get = function($injector) {\n\n      var AvLogger = function(context, $delegate) {\n\n        this.context = context || '';\n        this.$log = $delegate;\n\n      };\n\n      var proto = AvLogger.prototype;\n\n      AvLogger.supplant = function(str, supplantData) {\n        if (!supplantData) {\n          return str;\n        }\n\n        var _supplant = function (match, key) {\n          var result = supplantData[key];\n          return result;\n        };\n\n        return str.replace(/\\{([^{}]*)\\}/g, _supplant);\n      };\n\n      AvLogger.isObject = function(element) {\n        var elemStr = ( !angular.isUndefined(element) && !angular.isUndefined(element.constructor) ) ? element.constructor.toString() : '';\n        return (elemStr.indexOf('Object') > -1);\n      };\n\n      AvLogger.getFormattedTimestamp = function(date) {\n\n        return AvLogger.supplant('{0}:{1}:{2}:{3}', [\n          date.getHours(),\n          date.getMinutes(),\n          date.getSeconds(),\n          date.getMilliseconds()\n        ]);\n\n      };\n\n      proto._log = function(originalFn, args) {\n\n        // Allow enabling logger through query params\n        // Ex:\n        //\n        // http://localhost:3000/ui.html#avLogger\n\n        var hash = window.location.hash;\n        hash = hash || '';\n\n        if(!_enabled && hash.indexOf('avLogger') < 0 && originalFn !== 'error') {\n          return;\n        }\n\n        var now  = AvLogger.getFormattedTimestamp(new Date());\n        var message = '';\n        var supplantData = [];\n\n        var context = this.context ? ' [' + this.context + '] ' : '';\n\n        switch(args.length) {\n          case 1:\n            // (1) If the user supplied one argument, then the argument must be\n            // the message itself and _log()\n            // will print: <timestamp> - <context>: <message>\n            supplantData = args[0];\n            message = AvLogger.supplant('{0}{1} - {2}', [now, context, args[0]]);\n            break;\n          case 3:\n            // (3) If the user supplied three arguments, then the first argument\n            // is a method name, the second is the message and the third is an\n            // object of variables to interpolate with the message. For this, _log()\n            // will print: <timestamp> - <context> - <method name>('<message>')\n            supplantData = args[2];\n            message = AvLogger.supplant(\"{0}{1} - {2}(\\'{3}\\')\", [now, context, args[0], args[1]]);\n            break;\n          case 2:\n            // (2) If the user provided two arguments, we need to find out whether\n            // they supplied a method name or an interpolation object.\n            // In order to figure that out, we’ll check the type of the last argument.\n            // If it is a string, then it has to be the message itself while the\n            // first argument is the method name. Otherwise consider the first argument\n            // as the message and the second as array of interpolation variables.\n            // The output print will be according to this check.\n            if(typeof args[1] === 'string') {\n\n              message = AvLogger.supplant(\"{0}{1} - {2}(\\'{3}\\')\", [now, context, args[0], args[1]]);\n\n            } else {\n\n              // If the message is an error, there may be a stack included. If so, we\n              // should include the stack in the message to make it more meaningful.\n              if(args[0].stack) {\n                var errorMessage = this.formatError(args[0]);\n                message = AvLogger.supplant('{0}{1} - {2}', [now, context, errorMessage]);\n                supplantData = args[1];\n\n              }else {\n                supplantData = args[1];\n\n              }\n\n            }\n            break;\n        }\n\n        var $log = this.$log || $injector.get('$log');\n\n        var params = (AvLogger.isObject(supplantData)) ? [message, supplantData] : [AvLogger.supplant(message, supplantData)];\n        $log[originalFn].apply(null, params);\n\n      };\n\n      proto.log = function() {\n        this._log('log', arguments);\n      };\n\n      proto.info = function() {\n        this._log('info', arguments);\n      };\n\n      proto.warn = function() {\n        this._log('warn', arguments);\n      };\n\n      proto.debug = function() {\n        this._log('debug', arguments);\n      };\n\n      // https://github.com/angular/angular.js/blob/v1.2.27/src/ng/log.js#L122\n      proto.formatError = function(arg) {\n        if(arg instanceof Error) {\n          if(arg.stack) {\n\n            arg = (arg.message && arg.stack.indexOf(arg.message) === -1) ?\n              'Error: ' + arg.message + '\\n' + arg.stack : arg.stack;\n\n          } else if(arg.sourceURL) {\n            arg = arg.message + '\\n' + arg.sourceURL + ':' + arg.line;\n          }\n        }\n        return arg;\n      };\n\n      proto.error = function() {\n        this._log('error', arguments);\n      };\n\n      return AvLogger;\n\n    };\n\n  });\n\n\n})(window);\n\n// Source: -v1/lib/core/logger/logger-config.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.config(function($provide) {\n\n    $provide.decorator('$log', function($delegate, AvLogger) {\n      return new AvLogger(null, $delegate);\n    });\n\n  });\n\n})(window);\n\n// Source: -v1/lib/core/polling/polling.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_POLLING', {\n    INTERVAL: 1000, // delay in ms before retrying an async request\n    MAX_ELAPSED_TIME: 5000, // max time in ms before polling stops and rejects original request\n    MAX_RETRY: 30, // # of times the request will be tried\n    DECAY: 1.2, // % the polling interval decays after every retry\n    // maximum time polling is allowed before rejecting the request\n    EVENTS: {\n      MAX_RETRY: 'av:polling:max:retry'\n    },\n    REGEX_URL: /^.*?api.availity.com(.*)$/ // capture the relative url from API\n  });\n\n  var PollingServiceFactory = function($rootScope, $q, $injector, $timeout, $log, AV_POLLING, AV_API) {\n\n    var AvPollingService = function() {\n      this.pendingRequests = []; // stores all request for polling\n    };\n\n    var proto = AvPollingService.prototype;\n\n    proto.response = function(response) {\n\n      if(this.isAsyncResponse(response)) {\n        return this.onAsyncReponse(response);\n      }\n\n      return response || $q.when(response);\n    };\n\n    proto.setDefaults = function(config) {\n\n      var defaultOptions = {\n        pollingInterval: AV_POLLING.INTERVAL,\n        pollingDecay: AV_POLLING.DECAY,\n        pollingMaxInterval: AV_POLLING.MAX_ELAPSED_TIME,\n        pollingRetryCount: 0,\n        pollingStartTime: new Date().getTime()\n      };\n\n      return _.extend(defaultOptions, config);\n    };\n\n    proto.responseError = function(response) {\n      // Return the promise rejection\n      return $q.reject(response);\n    };\n\n    /**\n     * API layer return a link with a polling url for\n     * async responses.\n     *\n     * @param  {Object}  response ajax response\n     * @return {Boolean} true if response has status of 202 (accepted) and location param in header with uri+session link\n     */\n    proto.isAsyncResponse = function(response) {\n\n      return response &&\n        response.config &&\n        response.config.api &&\n        response.status &&\n        response.status === 202 &&\n        angular.isFunction(response.headers) && !availity.isBlank(response.headers(AV_API.HEADERS.SERVER.LOCATION));\n    };\n\n    proto.onAsyncReponse = function(response) {\n\n      response.config = this.setDefaults(response.config);\n\n      var deferred = $q.defer();\n\n      this.queueRequest(deferred, response);\n\n      // [rm3]: Can't call notify before you return promise object?\n      $timeout(function() {\n        // Notify deferred listeners with the original server response\n        deferred.notify(response);\n      }, 0, false);\n\n      return deferred.promise;\n    };\n\n    proto.getUrl = function(url) {\n\n      var result = url.match(AV_POLLING.REGEX_URL);\n      if(result && result[1]) {\n        return '/api' + result[1];\n      }\n\n      return url;\n    };\n\n    proto.queueRequest = function(deferred, response) {\n\n      var self = this;\n      // server replies with location header so set the url into config\n      var _url = availity.getRelativeUrl(response.headers(AV_API.HEADERS.SERVER.LOCATION));\n      var _config = response.config;\n\n\n      // headers – {Object} – Map of strings or functions which return strings representing HTTP headers\n      //  to send to the server. If the return value of a function is null, the header\n      //  will not be sent. Functions accept a config object as an argument.\n      var config = {\n        method: 'GET',\n        api: true,\n        headers: _config.headers,\n        pollingInterval: _config.pollingInterval,\n        pollingMaxRetry: _config.pollingMaxRetry,\n        pollingMaxInterval: _config.pollingMaxInterval,\n        pollingStartTime: _config.pollingStartTime,\n        _pollingDecay: _config._pollingDecay,\n        pollingRetryCount: _config.pollingRetryCount,\n        pollingDecay: _config.pollingDecay,\n        url: _url, /* set the url from the server response */\n        cache: false\n      };\n\n      var request = {\n        id: availity.uuid('request-'),\n        config: config,\n        deferred: deferred\n      };\n\n      var timeout = this.getPollingTimeout(config);\n\n      // each async request should run on its own timer\n      var timer = $timeout(function() {\n        self.retryRequest(request.id);\n      }, timeout, false);\n\n      request.timer = timer;\n\n      // add the async request to the queue\n      this.pushRequest(request);\n\n    };\n\n    proto.popRequest = function(id) {\n\n      var index = null;\n      var request = null;\n\n      for(var i = 0; i < this.pendingRequests.length; i++) {\n        if(this.pendingRequests[i].id === id) {\n          index = i;\n          break;\n        }\n      }\n\n      request = this.pendingRequests[index];\n      this.pendingRequests.splice(index, 1);\n\n      return request;\n    };\n\n    proto.pushRequest = function(request) {\n      this.pendingRequests.push(request);\n    };\n\n    proto.getPollingTimeout = function(config) {\n      return config.pollingDecay * config.pollingInterval;\n    };\n\n    proto.isPollingMaxTimeout = function(config) {\n      var now = new Date().getTime();\n      var elaspedTime = now - config.pollingStartTime;\n      var isElapsed = elaspedTime > config.pollingMaxInterval;\n      return isElapsed;\n    },\n\n      proto.isMaxRetried = function(config) {\n        return config.pollingRetryCount >= AV_POLLING.MAX_RETRY;\n      };\n\n    proto.isPollable = function(config) {\n      var _isTimeout = this.isPollingMaxTimeout(config);\n      var _isMax = this.isMaxRetried(config);\n\n      return _isTimeout || _isMax ? false : true;\n\n    };\n\n    proto.retryRequest = function(id) {\n\n      var self = this;\n      var request = this.popRequest(id);\n      $timeout.cancel(request.timer);\n\n      var config = request.config;\n\n      var deferred = request.deferred;\n\n      if(!this.isPollable(config)) {\n        $log.info('Rejecting pollable response due to timeout');\n        return deferred.reject(request);\n      }\n\n      // increment counters and polling timeouts\n      this.increment(config);\n\n      function successCallback(response) {\n        if(self.isAsyncResponse(response)) {\n          deferred.notify(response);\n          self.queueRequest(request.deferred, response);\n        } else {\n          deferred.resolve(response);\n        }\n      }\n\n      function errorCallback(response) {\n        deferred.reject(response);\n      }\n\n      // Silly circular dependency trick\n      var $http = $injector.get('$http');\n\n      $http(config).then(successCallback, errorCallback);\n\n    };\n\n    proto.increment = function(config) {\n      this.incrementCounter(config);\n      this.incrementDecay(config);\n    };\n\n    proto.incrementDecay = function(config) {\n      if(!config._pollingDecay) {\n        // store the original decay param\n        config._pollingDecay = config.pollingDecay;\n      }\n      config.pollingDecay *= config._pollingDecay;\n    };\n\n    proto.incrementCounter = function(config) {\n      config.pollingRetryCount++;\n    };\n\n    proto.clearRequests = function() {\n      angular.forEach(this.pendingRequests, function(request) {\n        $timeout.cancel(request.timer);\n      });\n      this.pendingRequests = [];\n    };\n\n    return new AvPollingService();\n\n  };\n\n  availity.core.factory('avPollingService', PollingServiceFactory);\n\n})(window);\n\n// Source: -v1/lib/core/api/api-factory.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_API', {\n    HEADERS: {\n      SERVER: {\n        ID: 'X-API-ID',\n        LOCATION: 'Location',\n        STATUS: 'X-Status-Message',\n        GLOBAL_ID: 'X-Global-Transaction-ID'\n      },\n      CLIENT: {\n        SESSION_ID: 'X-Session-ID',\n        AUTH: 'Authorization',\n        OVERRIDE: 'X-HTTP-Method-Override',\n        CALLBACK_URL: 'X-Callback-URL',\n        CUSTOMER_ID: 'X-Availity-Customer-ID',\n        RESPONSE_ENCODING: 'X-Response-Encoding-Context'\n      }\n    },\n    OPTIONS: {\n      // pre-prend the url with a value like `/public` so we can build urls like `public/api/v1/*`\n      prefix: '',\n      // default base url for endpoints\n      path: '/api',\n      // url resource group, such as `/foo`, for urls like `public/api/foo/v1/*`\n      resourceGroup: '',\n      // url to resource endpoint like `coverages` or `payers`\n      url: null,\n      // defaults to version 1\n      version: '/v1',\n      // governance level `/internal`\n      level: '',\n      // post-pend the url with `.json`, `.txt` or `.xml`\n      suffix: '',\n      // cache all request by default\n      cache: true,\n      // flag used to enable behaviors around the Availity Rest API\n      api: true,\n      // # of times the polling service has tried to get a response\n      pollingRetryCount: 0,\n      // in ms\n      pollingInterval: 1000,\n      // % the polling interval decays after every retry\n      pollingDecay: 1.2,\n      // maximum time polling is allowed before rejecting the request\n      pollingMaxInterval: 30000,\n      // default headers\n      headers: {\n        // Turn off content encoding for angular apis\n        'X-Response-Encoding-Context': 'NONE'\n      }\n    }\n  });\n\n  // Factory that creates ApiResourcess\n  var ApiResourcesProvider = function(AV_API) {\n\n    // Provider default options that can be overridden at config time\n    var defaultOptions = _.merge({}, AV_API.OPTIONS);\n\n    // Allow overrides in config phase\n    this.setOptions = function(options) {\n      _.merge(defaultOptions, options);\n    };\n\n    this.getOptions = function() {\n      return angular.copy(defaultOptions);\n    };\n\n    // helper method to global set http common headers\n    this.setHttpCommonHeaders = function($httpProvider) {\n      _.merge($httpProvider.defaults.headers.common, defaultOptions.headers);\n    };\n\n    /**\n     * Main get method for creating new resource\n     * @param $http\n     * @param $q\n     * @param avPollingService\n     * @returns {AvApiResource}\n     */\n    this.$get = function($http, $q, avPollingService) {\n\n      var AvApiResource = function(options) {\n\n        if (!options) {\n          throw new Error('[options] cannot be null or undefined');\n        }\n\n        // if string the assume url is being passed in\n        if (angular.isString(options)) {\n          options = options.charAt(0) === '/' ? options : '/' + options;\n          options = angular.extend({}, {url: options});\n        }\n\n        if (!options.url) {\n          throw new Error('[url] cannot be null');\n        }\n\n        // get the default options and merge into this instance\n        this.options = angular.extend({}, defaultOptions, (options || {}));\n      };\n\n      // Alias the prototype\n      var proto = AvApiResource.prototype;\n\n      proto._config = function(config) {\n        return _.merge({}, this.options, (config || {}));\n      };\n\n      proto._cacheBust = function(config) {\n        config.cacheBust = null;\n        config.params = config.params || {};\n        config.params.cacheBust = new Date().getTime();\n        return config;\n      };\n\n      proto._getUrl = function(id) {\n        if (this.options.api) {\n          return this._getApiUrl(id);\n        }\n\n        return this.options.url;\n      };\n\n      proto._createResponse = function(data, status, headers, config) {\n        return {\n          data: data,\n          status: status,\n          headers: headers,\n          config: config\n        };\n      };\n\n      proto._request = function(config, afterCallback) {\n\n        var self = this;\n        var defer = $q.defer();\n\n        $http(config)\n          .success(function(data, status, headers, _config) {\n\n            var _response = {\n              data: data,\n              status: status,\n              headers: headers,\n              config: _config\n            };\n\n            // handle the async response if applicable\n            var _promise = $q.when(avPollingService.response(_response));\n            // notify the promise listener of the original response\n            defer.notify(_response);\n\n            // handle the polling service promise\n            _promise.then(function(successResponse) {\n\n              // if service has a callback then call it\n              // var response = self._createResponse(data, status, headers, _config);\n              if (afterCallback) {\n                successResponse = afterCallback.call(self, successResponse, config.data);\n              }\n              defer.resolve(successResponse);\n            }, function(errorResponse) {\n              defer.reject(errorResponse);\n            }, function(notifyResponse) {\n              defer.notify(notifyResponse);\n            });\n\n          }).error(function(data, status, headers, _config) {\n          var response = self._createResponse(data, status, headers, _config);\n          defer.reject(response);\n        });\n\n        var promise = defer.promise;\n\n        // recreate the success callback ala $http\n        promise.success = function(fn) {\n          promise.then(function(response) {\n            fn(response.data, response.status, response.headers, response.config);\n          });\n          return promise;\n        };\n\n        // recreate the error callback ala $http\n        promise.error = function(fn) {\n          promise.then(null, function(response) {\n            fn(response.data, response.status, response.headers, config);\n          });\n          return promise;\n        };\n\n        promise.always = promise['finally'];\n\n        return promise;\n      };\n\n      proto.normalize = function(url) {\n        return url\n          .replace(/[\\/]+/g, '/')\n          .replace(/\\/$/, '');\n      };\n\n      proto.join = function() {\n        var joined = [].slice.call(arguments, 0).join('/');\n        return this.normalize(joined);\n      };\n\n      proto._getApiUrl = function(id) {\n\n        id = id ? '/' + id : '';\n\n        var url = this.join(\n          this.options.prefix,\n          this.options.path,\n          this.options.level,\n          this.options.resourceGroup,\n          this.options.version,\n          this.options.url,\n          id);\n\n        return url + this.options.suffix;\n      };\n\n      proto.create = function(data, config) {\n\n        if (!data) {\n          throw new Error('called method without [data]');\n        }\n\n        if (this.beforeCreate) {\n          data = this.beforeCreate(data);\n        }\n\n        config = this._config(config);\n        config.method = 'POST';\n        config.url = this._getUrl();\n        config.data = data;\n\n        return this._request(config, this.afterCreate);\n\n      };\n\n      proto.get = function(id, config) {\n\n        if (!id) {\n          throw new Error('called method without [id]');\n        }\n\n        config = this._config(config);\n        if (config.cacheBust) {\n          config = this._cacheBust(config);\n        }\n        config.method = 'GET';\n        config.url = this._getUrl(id);\n\n        return this._request(config, this.afterGet);\n\n      };\n\n      proto.query = function(config) {\n\n        config = this._config(config);\n        if (config.cacheBust) {\n          config = this._cacheBust(config);\n        }\n        config.method = 'GET';\n        config.url = this._getUrl();\n\n        return this._request(config, this.afterQuery);\n\n      };\n\n      proto.update = function(id, data, config) {\n\n        var url;\n\n        if (_.isString(id) || _.isNumber(id)) {\n          url = this._getUrl(id);\n        } else {\n          url = this._getUrl();\n          // At this point the function signature becomes:\n          //\n          // proto.update = function(data, config) {} a.k.a function(id, data)\n          //\n          config = data;  // config is really the 2nd param\n          data = id; // data is really the first param\n        }\n\n        if (this.beforeUpdate) {\n          data = this.beforeUpdate(data);\n        }\n\n        config = this._config(config);\n        config.method = 'PUT';\n        config.url = url;\n        config.data = data;\n\n        return this._request(config, this.afterUpdate);\n\n      };\n\n      proto.remove = function(id, config) {\n\n        var url;\n        var data;\n\n        if (_.isString(id) || _.isNumber(id)) {\n          url = this._getUrl(id);\n        } else {\n          // At this point the function signature becomes:\n          //\n          // proto.remove = function(data, config)\n          //\n          url = this._getUrl();\n          data = id;\n        }\n\n        config = this._config(config);\n        config.method = 'DELETE';\n        config.url = url;\n        config.data = data;\n\n        return this._request(config, this.afterRemove);\n      };\n\n      proto.beforeCreate = null;\n      proto.afterCreate = null;\n      proto.afterQuery = null;\n      proto.afterGet = null;\n      proto.beforeUpdate = null;\n      proto.afterUpdate = null;\n      proto.afterRemove = null;\n\n      return AvApiResource;\n    };\n\n  };\n\n  availity.core.provider('AvApiResource', ApiResourcesProvider);\n\n})(window);\n\n// Source: -v1/lib/core/api/api-users.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  var UserServiceFactory = function(AvApiResource) {\n\n    var AvUsersResource = function() {\n      AvApiResource.call(this, 'users');\n    };\n\n    angular.extend(AvUsersResource.prototype, AvApiResource.prototype, {\n\n      afterGet: function(response) {\n        var user = response.data.user ? response.data.user : response.data;\n        return user;\n      },\n\n      me: function(config) {\n        return this.get('me', config);\n      }\n\n    });\n\n    return new AvUsersResource();\n\n  };\n\n  availity.core.factory('avUsersResource', UserServiceFactory);\n\n})(window);\n\n// Source: -v1/lib/core/api/api-coverages.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avCoveragesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations', cache: false});\n  });\n\n})(window);\n\n// Source: -v1/lib/core/api/api-configurations.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avConfigurationsResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations'});\n  });\n\n})(window);\n\n// Source: -v1/lib/core/api/api-log-messages.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var LogMessagesFactory = function(AvApiResource) {\n\n    var AvLogMessagesResource = function() {\n\n      AvApiResource.call(this, {\n        version: '/v1',\n        url: '/log-messages'\n      });\n    };\n\n    angular.extend(AvLogMessagesResource.prototype, AvApiResource.prototype, {\n\n      buildRequest: function(level, entries) {\n\n        var requestPayload = {};\n\n        if(entries.level) {\n          delete entries.level;\n        }\n\n        requestPayload.level = level;\n        requestPayload.entries = entries;\n\n        return requestPayload;\n      },\n\n      debug: function(entries) {\n        return this.create(this.buildRequest('debug', entries));\n      },\n\n      info: function(entries) {\n        return this.create(this.buildRequest('info', entries));\n      },\n\n      warn: function(entries) {\n        return this.create(this.buildRequest('warn', entries));\n      },\n\n      error: function(entries) {\n        return this.create(this.buildRequest('error', entries));\n      }\n\n    });\n\n    return new AvLogMessagesResource();\n\n  };\n\n  availity.core.factory('avLogMessagesResource', LogMessagesFactory);\n\n})(window);\n\n// Source: -v1/lib/core/api/api-documents.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvDocumentsResourceFactory = function(AvApiResource) {\n\n    var AvDocumentsResource = function() {\n      AvApiResource.call(this, 'documents');\n    };\n\n    angular.extend(AvDocumentsResource.prototype, AvApiResource.prototype, {\n\n      getContents: function(id) {\n        var config = this._config();\n        config.url = this.getContentsUrl(id);\n        return this._request(config);\n      },\n\n      getContentsUrl: function(id) {\n        return this._getUrl(id) + '/contents';\n      }\n\n    });\n\n    return new AvDocumentsResource();\n\n  };\n\n  availity.core.factory('avDocumentsResource', AvDocumentsResourceFactory);\n\n})(window);\n\n// Source: -v1/lib/core/api/api-organizations.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var OrganizationResourceFactory = function(AvApiResource) {\n\n    var OrganizationResource = function() {\n      AvApiResource.call(this, 'organizations');\n    };\n\n    angular.extend(OrganizationResource.prototype, AvApiResource.prototype, {\n\n      getOrganizations: function(config) {\n        return this.query(config).then(function(response) {\n          return response.data.organizations ? response.data.organizations : response.data;\n        });\n      }\n\n    });\n\n    return new OrganizationResource();\n  };\n\n  availity.core.factory('avOrganizationsResource', OrganizationResourceFactory);\n\n})(window);\n\n// Source: -v1/lib/core/api/api-codes.js\n(function(root) {\n\n  'use strict';\n\n\n  var availity = root.availity;\n\n  availity.core.factory('avCodesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/codes'});\n  });\n\n  var AvCodesResourceFactory = function(AvApiResource) {\n\n    var AvCodesResource = function () {\n      AvApiResource.call(this, 'codes');\n    };\n\n    angular.extend(AvCodesResource.prototype, AvApiResource.prototype, {\n\n      getCodes: function (data) {\n\n        // config for the api resource query\n        var config = {};\n        config.params = {};\n\n        if(data.page) {\n          config.params.offset = 50 * (data.page - 1);\n        }\n        if(data.offset) {\n          config.params.offset = data.offset;\n        }\n        if(data.list) {\n          config.params.list = data.list;\n        }\n        if(data.q) {\n          config.params.q = data.q;\n        }\n\n        return this.query(config).then(function (response) {\n          // Format the response into something select2 can read\n          var results = response.data.codes;\n          if(results && !_.has(results[0], 'id')) {\n            _.each(results, function (code) {\n              code.id = code.code;\n            });\n          }\n\n          // calculate if we want to continue searching\n          var moreVal = response.data.offset < response.data.totalCount - response.data.limit;\n          return {\n            more: moreVal,\n            results: results\n          };\n\n        });\n      }\n\n    });\n\n    return new AvCodesResource();\n\n  };\n\n  availity.core.factory('avCodesResource', AvCodesResourceFactory);\n\n})(window);\n\n// Source: -v1/lib/core/api/api-user-permissions.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvUserPermissionsResourceFactory = function(AvApiResource) {\n\n    var AvUserPermissionsResource = function() {\n      AvApiResource.call(this, {\n        level: '/internal',\n        version: '/v1',\n        url: '/axi-user-permissions'\n      });\n      this.sessionDate = moment().toISOString();\n    };\n\n    angular.extend(AvUserPermissionsResource.prototype, AvApiResource.prototype, {\n\n      afterQuery: function(response) {\n        return response.data.axiUserPermissions ? response.data.axiUserPermissions : [];\n      },\n\n      getPermissions: function(permissionIds, region) {\n        var self = this;\n        return this.query({\n          params: {\n            permissionId: permissionIds,\n            region: region,\n            sessionDate: self.sessionDate\n          }\n        });\n      }\n\n    });\n\n    return new AvUserPermissionsResource();\n\n  };\n\n  availity.core.factory('avUserPermissionsResource', AvUserPermissionsResourceFactory);\n\n})(window);\n\n// Source: -v1/lib/core/authorizations/user-authorizations.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvUserAuthorizationsFactory = function($q, $log, avUserPermissionsResource) {\n\n    /**\n     *\n     * @constructor\n     */\n    var AvUserAuthorizations = function() {\n      /**\n       * Region is used to return permission/resources relative to region. If null service will\n       * return all permission relative to current.  If value 'ALL' used it will return value relative\n       * to all regions the user has access to.\n       * @type {string}\n       */\n      this.region = null;\n      /**\n       * PermissionIds contains the set of permissionIds to request from service. If user of service calls\n       * setPermissionIds() or call getPermissions() with complete set of permissionIds needed by application,\n       * then service should only make that one hit to retrieve permission information.\n       * @type {Array}\n       */\n      this.permissionIds = [];\n    };\n\n    var proto = AvUserAuthorizations.prototype;\n\n    proto.setRegion = function(region) {\n      this.region = region;\n      return this;\n    };\n\n    proto.setPermissionIds = function(permissionIds) {\n      if(!angular.isArray(permissionIds)) {\n        throw new Error('permissionsIds must be an array of string IDs for avUserAuthorizations#addPermissionIds');\n      }\n      this.permissionIds = permissionIds;\n      return this;\n    };\n\n    proto.isAuthorized = function(permissionId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        return permission.isAuthorized;\n      });\n    };\n\n    proto.isAnyAuthorized = function(permissionIds) {\n      return this.getPermissions(permissionIds).then(function(permissions) {\n        var permission = _.findWhere(permissions, {isAuthorized: true});\n        return permission !== undefined;\n      });\n    };\n\n    proto.getPermission = function(permissionId) {\n      if(!angular.isString(permissionId)) {\n        throw new Error('permissionsId must be a string ID for avUserAuthorizations#getPermission');\n      }\n\n      return this.getPermissions([permissionId])\n        .then(function(_permissions) {\n          return _permissions[permissionId];\n        });\n    };\n\n    proto.getPermissions = function(permissionIds) {\n      var self = this;\n\n      if(!angular.isArray(permissionIds)) {\n        throw new Error('permissionsIds must be an array of string IDs for avUserAuthorizations#getPermissions');\n      }\n      // merge permission ids to reduce calls to backend\n      self.permissionIds = _.union(self.permissionIds, permissionIds);\n\n      return avUserPermissionsResource\n        .getPermissions(self.permissionIds, self.region)\n        .then(function(_permissions) {\n          return self.toPermissionMap(permissionIds, _permissions);\n        });\n    };\n\n    proto.getOrganizations = function(permissionId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        return permission.organizations;\n      });\n    };\n\n    proto.getPayers = function(permissionId, organizationId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        var organization = _.findWhere(permission.organizations, {id: organizationId});\n\n        if(organization && organization.resources) {\n          return organization.resources;\n        }\n        return [];\n      });\n\n    };\n\n    /**\n     * Converts array permissions to map with value for each permissionId, creating empty permission\n     * if can't find permission in array\n     * @private\n     */\n    proto.toPermissionMap = function(permissionIds, permissions) {\n      var self = this;\n      var map = {};\n      permissions = _.slice(permissions);\n      _.forEach(permissionIds, function(permissionId) {\n        var key = {id: permissionId};\n        var permission = _.findWhere(permissions, key);\n        permission = permission ? self.toPermission(permission) : self.toPermission(key);\n        map[permission.id] = permission;\n      });\n      return map;\n    };\n\n    /**\n     * Convert a permission resource into a structure that is easier to work with.\n     * @private\n     */\n    proto.toPermission = function(permission) {\n      return {\n        id: permission.id,\n        description: permission.description ? permission.description : '',\n        geographies: permission.geographies ? permission.geographies : [],\n        organizations: permission.organizations ? permission.organizations : [],\n        isAuthorized: permission.organizations ? permission.organizations.length > 0 : false\n      };\n    };\n\n    return new AvUserAuthorizations();\n\n  };\n\n  availity.core.factory('avUserAuthorizations', AvUserAuthorizationsFactory);\n\n})(window);\n\n// Source: -v1/lib/core/session/session.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_SESSION', {\n    SESSION_TIMEOUT: 'av:auth:session:timeout',\n    NOT_AUTHORIZED: 'av:auth:not:authorized'\n  });\n\n  availity.core.factory('avSession', function($q, avUsersResource) {\n\n    var AvSession = function() {\n      this.user = null;\n      this.permissions = null;\n    };\n\n    var proto = AvSession.prototype;\n\n    proto.getUser = function() {\n      var self = this;\n\n      if(this.user) {\n        return $q.when(this.user);\n      }\n\n      return avUsersResource.me().then(function(user) {\n        self.user = user;\n        return self.user;\n      });\n    };\n\n\n    proto.destroy = function() {\n      this.user = null;\n      this.permisions = null;\n    };\n\n    return new AvSession();\n  });\n\n})(window);\n\n// Source: -v1/lib/core/idle/idle.js\n// Inspiration => https://github.com/HackedByChinese/ng-idle\n//\n// Rules:\n//\n//  * ping after 3 minutes from last human activity\n//  * reset session after api success except 401\n//  * idle show after 25 of inactivity\n//\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_IDLE', {\n    EVENTS: {\n      IDLE_INACTIVE: 'av:idle:inactive',\n      IDLE_ACTIVE: 'av:idle:active',\n      SESSION_TIMEOUT_ACTIVE: 'av:idle:session:active',\n      SESSION_TIMEOUT_REDIRECT: 'av:idle:session:redirect',\n      HUMAN: 'keydown.av.idle mousedown.av.idle keydown.av.idle',\n      MACHINE: '$locationChangeSuccess'\n    },\n    INTERVALS: {\n      PING: 3 * 60 * 1000, // 3 minutes\n      IDLE: 25 * 60 * 1000, // 25 minutes\n      SESSION: 30 * 60 * 1000 // 30 minutes\n    },\n    URLS: {\n      HOME: '/availity/web/public.elegant.login',\n      PING: '/api/v1/users/me'\n    }\n  });\n\n  availity.core.provider('avIdle', function(AV_IDLE) {\n\n    var enabled = false;\n    var pingUrl;\n    var redirectUrl;\n    var sessionTimeout;\n    var idleTimeout;\n    var pingTimeout;\n\n    this.enable = function(value) {\n      if(arguments.length) {\n        enabled = !!value;\n      }\n      return enabled;\n    };\n\n    this.setSessionTimeout = function(timeout) {\n      sessionTimeout = timeout || AV_IDLE.INTERVALS.SESSION;\n    };\n\n    this.setIdleTimeout = function(timeout) {\n      idleTimeout = timeout || AV_IDLE.INTERVALS.IDLE;\n    };\n\n    this.setPingTimeout = function(timeout) {\n      pingTimeout = timeout || AV_IDLE.INTERVALS.PING;\n    };\n\n    this.setPingUrl = function(url) {\n      pingUrl = url || AV_IDLE.URLS.PING;\n    };\n\n    this.$get = function(AV_IDLE, $log, $document, $rootScope, $timeout, avThrottle, $q, $injector) {\n\n      var AvIdle = function() {\n\n        // $timeout references\n        this._idleTimer = null;\n        this._sessionTimer = null;\n        this._pingTimer = null;\n        this._keepAlive = null;\n\n        // flag used to track if the if user is idle or session expired\n        this.idleActive = false;\n        this.sessionActive = false;\n\n        this.listeners = [];\n\n        this.init();\n\n      };\n\n      var proto = AvIdle.prototype;\n\n      proto.init = function() {\n\n        if(!enabled) {\n          this.stop();\n          return;\n        }\n\n        this.start();\n      };\n\n      proto.start = function() {\n\n        $log.info('avIdle start');\n\n        var self = this;\n        var listener;\n\n        !sessionTimeout && this.setSessionTimeout();\n        !idleTimeout && this.setIdleTimeout();\n        !pingTimeout && this.setPingTimeout();\n        !pingUrl && this.setPingUrl();\n        !redirectUrl && this.setRedirectUrl();\n\n        $rootScope.$on('$destroy', function() {\n          self.stop();\n        });\n\n        $document.find('body').on(AV_IDLE.EVENTS.HUMAN, function(event) {\n          self.onEvent(event);\n        });\n\n        listener = $rootScope.$on(AV_IDLE.EVENTS.MACHINE, function(event, oldUrl, newUrl) {\n          if(oldUrl !== newUrl) {\n            self.onEvent(event);\n          }\n        });\n        this.listeners.push(listener);\n\n        $rootScope.$on(AV_IDLE.EVENTS.SESSION_TIMEOUT_REDIRECT, function() {\n          document.location.href = redirectUrl;\n        });\n\n        this.startIdleTimer();\n        this.startSessionTimer();\n      };\n\n      proto.stop = function() {\n\n        $document.find('body').off(AV_IDLE.EVENTS.HUMAN);\n\n        // turns off Angular event listeners @see http://stackoverflow.com/a/14898795\n        _.each(this.listeners, function(listener) {\n          listener();\n        });\n\n        this.stopPing();\n        this.stopSessionTimer();\n        this.stopIdleTimer();\n      };\n\n      proto.isEnabled = function() {\n        return enabled;\n      };\n\n      proto.enable = function(value) {\n        if(arguments.length) {\n          enabled = !!value;\n        }\n\n        return this;\n      };\n\n      proto.setSessionTimeout = function(timeout) {\n        sessionTimeout = timeout || AV_IDLE.INTERVALS.SESSION;\n        return this;\n      };\n\n      proto.setIdleTimeout = function(timeout) {\n        idleTimeout = timeout || AV_IDLE.INTERVALS.IDLE;\n        return this;\n      };\n\n      proto.setPingTimeout = function(timeout) {\n        pingTimeout = timeout || AV_IDLE.INTERVALS.PING;\n        return this;\n      };\n\n      proto.setPingUrl = function(url) {\n        pingUrl = url || AV_IDLE.URLS.PING;\n        return this;\n      };\n\n      proto.setRedirectUrl = function(url) {\n        redirectUrl = url || AV_IDLE.URLS.HOME;\n        return this;\n      };\n\n      proto.response = function(response) {\n\n        if(this.isApiRequest(response)) {\n          this.startSessionTimer();\n        }\n\n        return response;\n      };\n\n      proto.isApiRequest = function(response) {\n        return response && response.config && response.config.api;\n      };\n\n      proto.responseError = function(response) {\n\n        if(this.isApiRequest(response) && response.status !== 401) {\n          this.startSessionTimer();\n        }\n\n        if(this.isApiRequest() && response.status === 401) {\n          this.stopPing();\n        }\n\n        return $q.reject(response);\n      };\n\n      proto.startSessionTimer = function() {\n\n        var self = this;\n\n        this.stopSessionTimer();\n\n        var later = function() {\n          $log.info('avIdle session has TIMED OUT');\n          self.stop();\n          $rootScope.$broadcast(AV_IDLE.EVENTS.SESSION_TIMEOUT_ACTIVE);\n        };\n\n        $log.info('avIdle session timer has STARTED');\n        this._sessionTimer = $timeout(later, sessionTimeout, false);\n\n      };\n\n      proto.stopSessionTimer = function() {\n        $log.info('avIdle session timer has STOPPED');\n        $timeout.cancel(this._sessionTimer);\n      };\n\n      proto.startIdleTimer = function() {\n\n        var self = this;\n\n        this.stopIdleTimer();\n\n        var later = function() {\n          self.stopIdleTimer();\n          $log.info('avIdle is IDLING');\n          $rootScope.$broadcast(AV_IDLE.EVENTS.IDLE_ACTIVE);\n        };\n\n        $log.info('avIdle idle timer has STARTED');\n        this._idleTimer = $timeout(later, idleTimeout, false);\n      };\n\n      proto.stopIdleTimer = function() {\n        $log.info('avIdle idle timer has STOPPED');\n        $timeout.cancel(this._idleTimer);\n      };\n\n      proto.startPing = function() {\n\n        if(!this._keepAlive) {\n          $log.info('avIdle ping timer has STARTED');\n          this._keepAlive = avThrottle(this.keepAlive, pingTimeout, {context: this});\n        }\n\n        this._pingTimer = this._keepAlive();\n      };\n\n      proto.stopPing = function() {\n        $log.info('avIdle ping timer has STOPPED');\n        if(this._pingTimer) {\n          $timeout.cancel(this._pingTimer);\n        }\n      };\n\n      proto.keepAlive = function() {\n\n        // destroy the reference to that a new throttle gets created upon\n        // next user or system event\n        this._keepAlive = null;\n        var $http = $injector.get('$http');\n\n        $http.get(pingUrl, {\n          cache: false,\n          api: true\n        }).success(function() {\n          $log.info('avIdle keep-alive SUCCESS');\n        }).error(function() {\n          $log.error('avIdle keep-alive FAILURE');\n        });\n      };\n\n      proto.onEvent = function() {\n        this.startIdleTimer();\n        this.startPing();\n      };\n\n      return new AvIdle();\n\n    };\n\n  });\n\n})(window);\n\n// Source: -v1/lib/core/idle/idle-interceptor.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avIdleInterceptor', function(avIdle) {\n    return {\n      response: function(response) {\n        return avIdle.response(response);\n      },\n      responseError: function(response) {\n        return avIdle.responseError(response);\n      }\n    };\n\n  });\n\n  availity.core.config(function($httpProvider) {\n    $httpProvider.interceptors.push('avIdleInterceptor');\n  });\n\n})(window);\n\n// Source: -v1/lib/core/validation/validator.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.value('avValConfig', {\n    classes: {\n      valid: 'ng-valid',\n      invalid: 'ng-invalid',\n      dirty: 'ng-dirty',\n      pristine: 'ng-pristine',\n      touched: 'ng-touched',\n      untouched: 'ng-untouched',\n      submitted: 'ng-submitted'\n    },\n    validators: [\n      'avValPattern',\n      'avValSize',\n      'avValRequired',\n      'avValDateRange',\n      'avValDate',\n      'avValPhone',\n      'avValEmail',\n      'avValNpi'\n    ]\n  });\n\n  availity.core.constant('AV_VAL', {\n    EVENTS: {\n      REVALIDATE: 'av:val:revalidate',\n      SUBMITTED: 'av:val:submitted',\n      FAILED: 'av:val:failed',\n      RESET: 'av:val:reset'\n    },\n    DEBOUNCE: 800,\n    DATE_FORMAT: {\n      SIMPLE: 'MM/DD/YYYY'\n    },\n    PATTERNS: {\n      ALPHA_ONLY: /[^A-Za-z]+/g,\n      NUMERIC_ONLY: /[^0-9]+/g\n    }\n  });\n\n  availity.core.provider('avVal', function() {\n\n    var validators = [];\n    var rules = {};\n    var services = {};\n\n    this.addRules = function(_rules) {\n      rules = angular.extend({}, rules, _rules);\n      return rules;\n    };\n\n    this.addValidators = function(_validators) {\n      validators = validators.concat(_validators);\n      return validators;\n    };\n\n    this.$get = function($injector, $rootScope, $http, $log, avValConfig, AV_VAL) {\n\n      var AvValidation = function() {\n        this.initValidators();\n      };\n\n      var proto = AvValidation.prototype;\n\n      proto.initValidators = function() {\n        var self = this;\n\n        validators = avValConfig.validators.concat(validators);\n\n        angular.forEach(validators, function(name) {\n          self.addValidator(name);\n        });\n\n      };\n\n      proto.addValidator = function(name) {\n        var validator = $injector.get(name);\n        services[validator.name] = validator;\n      };\n\n      proto.addRules = function(_rules) {\n        rules = angular.extend({}, rules, _rules);\n        $rootScope.$broadcast(AV_VAL.EVENTS.REVALIDATE);\n      };\n\n      proto.validate = function(key, element, value, ruleName) {\n\n        var ruleConfig = rules[key];\n        if(!ruleConfig) {\n          $log.error('Failed to get rules key [' + key + '].  Forms must be tagged with a rules set name for validation to work.');\n          return;\n        }\n\n        var contraints = ruleConfig[ruleName];\n        if(!contraints) {\n          $log.info('Rule named [' + ruleName + '] could not be found in the current schema.');\n          contraints = [];\n        }\n\n        var el = element[0];\n        var results  = [];\n        var violations = [];\n        var _valid = true;\n\n        angular.forEach(contraints, function(rule, contraintName) {\n\n          if(!rule) {\n            // when extended rule sets, a user can pass nulls to cancel out a rule so if\n            // one doesn't exist just continue\n            return;\n          }\n\n          var validator = services[contraintName];\n\n          if(angular.isUndefined(validator)) {\n            $log.warn('No validator defined for `' + name + '`');\n            return;\n          }\n\n          var valid = validator.validate(value, rule, element);\n\n          var validationResult = {\n            valid: valid,\n            ruleName: ruleName,\n            contraintName: contraintName,\n            value: value,\n            message: rule.message,\n            field: el.name || el.id\n          };\n\n          var result = angular.extend({}, rule, validationResult);\n\n          results.push(result);\n          if(!valid) {\n            violations.push(validationResult);\n          }\n          _valid = _valid && valid;\n\n        });\n\n        return {\n          isValid: _valid,\n          all: results, // all the constraint results\n          violations: violations\n        };\n\n      };\n\n      return new AvValidation();\n\n    };\n\n  });\n})(window);\n\n// Source: -v1/lib/core/validation/validators/validator-utils.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValUtils', function() {\n\n    return {\n\n      isDefined: function(value) {\n        return angular.isDefined(value) && value !== '' && value !== null;\n      },\n\n      isEmpty: function(value) {\n        return !this.isDefined(value) || $.trim(value) === '';\n      }\n    };\n\n  });\n})(window);\n\n\n// Source: -v1/lib/core/validation/validators/validator-size.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValSize', function(avValUtils) {\n\n    var validator =  {\n\n      name: 'size',\n\n      validate: function(value, rule) {\n\n        var min = rule.min || 0;\n        var max = rule.max;\n        var type = rule.type ? rule.type.toLowerCase() : 'text';\n\n        if(_.isNull(value) || _.isUndefined(value)) {\n          value = '';\n        }\n\n        if(type === 'text') {\n          value = value + '';\n          return  avValUtils.isEmpty(value) || value.length >= min && (max === undefined || value.length <= max);\n        }\n\n        // ... must be a Number\n        if(!_.isNumber(value) && /^\\d+$/.test(value)) {\n          value = parseInt(value, 10);\n        }\n\n        return avValUtils.isEmpty(value) || value >= min && (max === undefined || value <= max);\n\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n\n// Source: -v1/lib/core/validation/validators/validator-pattern.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValPattern', function(avValUtils) {\n\n    var validator =  {\n      name: 'pattern',\n      REGEX: /^\\/(.*)\\/([gim]*)$/, //regular expression to test a regular expression\n      asRegExp: function(pattern) {\n        var match;\n\n        if(pattern.test) {\n          return pattern;\n        } else {\n          match = pattern.match(validator.REGEX);\n          if(match) {\n            return new RegExp(match[1], match[2]);\n          } else {\n            throw ('Expected ' + pattern + ' to be a RegExp');\n          }\n        }\n      },\n      validate: function(value, rule) {\n        var values = _.isArray(rule.value) ? rule.value : [rule.value];\n\n        var valid = false;\n\n        _.each(values, function(expresion) {\n          var pattern = validator.asRegExp(expresion);\n          if(avValUtils.isEmpty(value) || pattern.test(value)) {\n            valid = true;\n          }\n        });\n\n        return valid;\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n\n// Source: -v1/lib/core/validation/validators/validator-required.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValRequired', function(avValUtils) {\n\n    var validator =  {\n      name: 'required',\n      validate: function(value, rule, element) {\n\n        // Using ngModelController.$isEmpty for required checks.  A form component being empty is dependent on the\n        // type of field:\n        //\n        //    - radio\n        //    - checkbox\n        //    - text\n        //    - lists\n        //\n        // You can override $isEmpty for input directives whose concept of being empty is different to the\n        // default. Radio and checkboxes directive do this because in its case a value of `false`\n        // implies empty.\n        //\n        var ctrl = element && element.data('$ngModelController');\n        if(ctrl) {\n          return !ctrl.$isEmpty(value);\n        }\n\n        return !avValUtils.isEmpty(value);\n\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n\n// Source: -v1/lib/core/validation/validators/validator-date-range.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDateRange', function(AV_VAL, avValUtils) {\n\n    var validator = {\n\n      name: 'dateRange',\n\n      getStartDate: function(start) {\n        return validator.setMin(moment().add(start.value, start.units));\n      },\n\n      getEndDate: function(end) {\n        return validator.setMax(moment().add(end.value, end.units) );\n      },\n\n      setMin: function(value) {\n\n        // [fix]: if time is provided this may cause issues.\n        value.set('hours', 0);\n        value.set('minutes', 0);\n        value.set('seconds', 0);\n\n        return value;\n      },\n\n      setMax: function(value) {\n\n        // [fix]: if time is provided this may cause issues.\n        value.set('hours', 23);\n        value.set('minutes', 59);\n        value.set('seconds', 59);\n\n        return value;\n      },\n\n      validation: function(value, rules) {\n\n        var date;\n        var startDate;\n        var endDate;\n\n        date = moment(value, rules.format || AV_VAL.DATE_FORMAT.SIMPLE);\n        date.set('hours', 0);\n        date.set('minutes', 0);\n        date.set('seconds', 0);\n\n        if(!avValUtils.isEmpty(rules.start.units) && !avValUtils.isEmpty(rules.end.units)) {\n          startDate = validator.getStartDate(rules.start);\n          endDate = validator.getEndDate(rules.end);\n        } else {\n          startDate = moment(rules.start.value, rules.format);\n          endDate = validator.setMax(moment(rules.end.value, rules.format));\n        }\n        return date.isValid() && date.isBetween(startDate, endDate, 'day') || date.isSame(startDate, 'day') || date.isSame(endDate, 'day');\n      },\n\n      validate: function(value, rule) {\n        return avValUtils.isEmpty(value) || validator.validation(value, rule);\n      }\n\n    };\n\n    return validator;\n  });\n})(window);\n\n// Source: -v1/lib/core/validation/validators/validator-date-format.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDate', function(AV_VAL, avValUtils) {\n\n    var validator = {\n      name: 'dateFormat',\n      validate: function(value, rules) {\n        var format = rules && rules.format ? rules.format : AV_VAL.DATE_FORMAT.SIMPLE;\n        return avValUtils.isEmpty(value) || moment(value, format, true).isValid();\n      }\n    };\n\n    return validator;\n  });\n})(window);\n\n// Source: -v1/lib/core/validation/validators/validator-npi.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValNpi', function(avValUtils) {\n\n\n    var validator =  {\n\n      name: 'npi',\n\n      INTEGER_REGEX:  /^\\d*$/,\n\n      validate: function(value) {\n\n        var npi = value || '';\n\n        if(avValUtils.isEmpty(npi)) {\n          return true;\n        }\n\n        if (!validator.INTEGER_REGEX.test(npi) || npi.length !== 10) {\n          return false;\n        }\n\n        var firstDigit = npi.charAt(0);\n        if(!('1' === firstDigit || '2' === firstDigit || '3' === firstDigit || '4' === firstDigit)) {\n          return false;\n        }\n\n        var digit = parseInt(npi.charAt(9), 10);\n        npi = npi.substring(0, 9);\n        npi = \"80840\" + npi;\n\n        var alternate = true;\n        var total = 0;\n\n        for (var i = npi.length; i > 0; i--) {\n          var next = parseInt(npi.charAt(i-1), 10);\n          if (alternate) {\n            next = next*2;\n            if (next > 9) {\n              next = (next % 10) + 1;\n            }\n          }\n          total += next;\n          alternate = !alternate;\n        }\n\n        var roundUp = Math.ceil(total / 10) * 10;\n        var calculatedCheck = roundUp - total;\n\n        if (calculatedCheck !== digit) {\n          return false;\n        }\n\n        return true;\n      }\n\n    };\n\n    return validator;\n\n  });\n\n})(window);\n\n// Source: -v1/lib/core/validation/validators/validator-phone.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValPhone', function(avValPattern) {\n\n    var PHONE_PATTERN = /^([0-9][\\.\\-]?)?[(]{0,1}[0-9]{3}[)\\.\\- ]{0,1}[0-9]{3}[\\.\\- ]{0,1}[0-9]{4}$/;\n\n    var validator =  {\n      name: 'phone',\n      validate: function(value, rule) {\n        return avValPattern.validate(value, angular.extend({}, rule, { value: PHONE_PATTERN }));\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n\n// Source: -v1/lib/core/validation/validators/validator-email.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValEmail', function(avValPattern) {\n\n    var EMAIL_PATTERN = /[a-z0-9!#$%&'*+\\/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+\\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n\n    var validator =  {\n      name: 'email',\n      validate: function(value, rule) {\n        return avValPattern.validate(value, angular.extend({}, rule, { value: EMAIL_PATTERN }));\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n\n// Source: -v1/lib/core/utils/globals.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_GLOBALS', {\n    REGIONS: [\n      {\n        'name': 'Alabama',\n        'code': 'AL'\n      },\n      {\n        'name': 'Alaska',\n        'code': 'AK'\n      },\n      {\n        'name': 'Arizona',\n        'code': 'AZ'\n      },\n      {\n        'name': 'Arkansas',\n        'code': 'AR'\n      },\n      {\n        'name': 'California',\n        'code': 'CA'\n      },\n      {\n        'name': 'Colorado',\n        'code': 'CO'\n      },\n      {\n        'name': 'Connecticut',\n        'code': 'CT'\n      },\n      {\n        'name': 'Delaware',\n        'code': 'DE'\n      },\n      {\n        'name': 'District Of Columbia',\n        'code': 'DC'\n      },\n      {\n        'name': 'Florida',\n        'code': 'FL'\n      },\n      {\n        'name': 'Georgia',\n        'code': 'GA'\n      },\n      {\n        'name': 'Hawaii',\n        'code': 'HI'\n      },\n      {\n        'name': 'Idaho',\n        'code': 'ID'\n      },\n      {\n        'name': 'Illinois',\n        'code': 'IL'\n      },\n      {\n        'name': 'Indiana',\n        'code': 'IN'\n      },\n      {\n        'name': 'Iowa',\n        'code': 'IA'\n      },\n      {\n        'name': 'Kansas',\n        'code': 'KS'\n      },\n      {\n        'name': 'Kentucky',\n        'code': 'KY'\n      },\n      {\n        'name': 'Louisiana',\n        'code': 'LA'\n      },\n      {\n        'name': 'Maine',\n        'code': 'ME'\n      },\n      {\n        'name': 'Maryland',\n        'code': 'MD'\n      },\n      {\n        'name': 'Massachusetts',\n        'code': 'MA'\n      },\n      {\n        'name': 'Michigan',\n        'code': 'MI'\n      },\n      {\n        'name': 'Minnesota',\n        'code': 'MN'\n      },\n      {\n        'name': 'Mississippi',\n        'code': 'MS'\n      },\n      {\n        'name': 'Missouri',\n        'code': 'MO'\n      },\n      {\n        'name': 'Montana',\n        'code': 'MT'\n      },\n      {\n        'name': 'Nebraska',\n        'code': 'NE'\n      },\n      {\n        'name': 'Nevada',\n        'code': 'NV'\n      },\n      {\n        'name': 'New Hampshire',\n        'code': 'NH'\n      },\n      {\n        'name': 'New Jersey',\n        'code': 'NJ'\n      },\n      {\n        'name': 'New Mexico',\n        'code': 'NM'\n      },\n      {\n        'name': 'New York',\n        'code': 'NY'\n      },\n      {\n        'name': 'North Carolina',\n        'code': 'NC'\n      },\n      {\n        'name': 'North Dakota',\n        'code': 'ND'\n      },\n      {\n        'name': 'Ohio',\n        'code': 'OH'\n      },\n      {\n        'name': 'Oklahoma',\n        'code': 'OK'\n      },\n      {\n        'name': 'Oregon',\n        'code': 'OR'\n      },\n      {\n        'name': 'Pennsylvania',\n        'code': 'PA'\n      },\n      {\n        'name': 'Rhode Island',\n        'code': 'RI'\n      },\n      {\n        'name': 'South Carolina',\n        'code': 'SC'\n      },\n      {\n        'name': 'South Dakota',\n        'code': 'SD'\n      },\n      {\n        'name': 'Tennessee',\n        'code': 'TN'\n      },\n      {\n        'name': 'Texas',\n        'code': 'TX'\n      },\n      {\n        'name': 'Utah',\n        'code': 'UT'\n      },\n      {\n        'name': 'Vermont',\n        'code': 'VT'\n      },\n      {\n        'name': 'Virginia',\n        'code': 'VA'\n      },\n      {\n        'name': 'Washington',\n        'code': 'WA'\n      },\n      {\n        'name': 'West Virginia',\n        'code': 'WV'\n      },\n      {\n        'name': 'Wisconsin',\n        'code': 'WI'\n      },\n      {\n        'name': 'Wyoming',\n        'code': 'WY'\n      }\n    ]\n  });\n\n})(window);\n\n// Source: -v1/lib/core/analytics/analytics.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.provider('avAnalyticsConfig', function(AV_ANALYTICS) {\n\n    var config = {\n      VIRTUAL_PAGE_TRACKING: true,\n      SERVICES: {\n        PIWIK: 'avPiwikAnalytics',\n        SPLUNK: 'avSplunkAnalytics'\n      },\n      EVENTS: {\n        PAGE: '$locationChangeSuccess',\n        DEFAULT: 'click'\n      },\n      PRE_FIX: /^avAnalytics(.*)$/,\n      // should ignore these since they are part of the directives API\n      IGNORE: ['avAnalyticsOn', 'avAnalyticsIf'],\n      ENV: { // not sure if this should live here\n        PROD: {\n          DOMAIN: 'apps.availity.com',\n          URL: 'https://piwik.availity.com/piwik/'\n        },\n        QA: {\n          URL: 'https://qa-piwik.availity.com/piwik/'\n        }\n      }\n    };\n\n    this.set = function(options) {\n      _.merge(config, options);\n      // TODO: remove when AV_ANALYTICS is no longer supported\n      // ensures avAnalyticsConfig and AV_ANALYTICS constant stay in sync\n      _.merge(AV_ANALYTICS, config);\n    };\n\n    this.$get = function(AV_ANALYTICS) {\n      /*\n      * TODO: remove merge when AV_ANALYTICS is no longer supported.\n      * Applies AV_ANALYTICS overrides to avAnalyticsConfig provider.\n      */\n      return angular.copy(_.merge(config, AV_ANALYTICS));\n    };\n\n    this.set(AV_ANALYTICS);\n  });\n\n  // DEPRECATED: use avAnalyticsConfig\n  availity.core.constant('AV_ANALYTICS', {});\n\n  availity.core.provider('avAnalytics', function(avAnalyticsConfigProvider) {\n\n    var avAnalyticsConfig = avAnalyticsConfigProvider.$get();\n    var plugins = [];\n    var virtualPageTracking = avAnalyticsConfig.VIRTUAL_PAGE_TRACKING;\n    var appId;\n\n    this.registerPlugins = function(_plugins) {\n\n      if(angular.isString(_plugins)) {\n        _plugins = [_plugins];\n      }\n\n      if(_.isArray(_plugins)) {\n        plugins = _plugins;\n      } else {\n        throw new Error('AvAnalytics.registerPlugins() expects a string or an array.');\n      }\n\n      return plugins;\n    };\n\n    this.setVirtualPageTracking = function(value) {\n      if(arguments.length) {\n        virtualPageTracking = !!value;\n      }\n    };\n\n    this.isVirtualPageTracking = function() {\n      return virtualPageTracking;\n    };\n\n    this.setAppID = function(id) {\n      appId = id;\n      return appId;\n    };\n\n    this.$get = function($injector, $q, $log, $rootScope, $location) {\n\n      var AvAnalytics = function() {\n\n        var self = this;\n        this.services = {};\n\n        if(!plugins || plugins.length === 0) {\n          plugins = [avAnalyticsConfig.SERVICES.PIWIK, avAnalyticsConfig.SERVICES.SPLUNK];\n        }\n\n        angular.forEach(plugins, function(plugin) {\n\n          try {\n            self.services[plugin] = $injector.get(plugin);\n          } catch(err) {\n            $log.error('Could not load `{0}` plugin', [plugin]);\n          }\n        });\n\n      };\n\n      var proto = AvAnalytics.prototype;\n\n      proto.init = function() {\n\n        var self = this;\n\n        if(this.isVirtualPageTracking()) {\n          $rootScope.$on(avAnalyticsConfig.EVENTS.PAGE, function() {\n            self.trackPageView($location.absUrl());\n          });\n        }\n\n        angular.forEach(this.services, function(handler) {\n          if(handler.isEnabled() && handler.init) {\n            handler.init();\n          }\n        });\n\n      };\n\n      proto.trackEvent = function(properties) {\n        var promises = [];\n\n        angular.forEach(this.services, function(handler) {\n          var promise = handler.trackEvent(properties);\n          promises.push(promise);\n        });\n\n        return $q.all(promises);\n      };\n\n      proto.getAppId = function() {\n        return appId;\n      };\n\n      proto.isVirtualPageTracking = function() {\n        return virtualPageTracking;\n      };\n\n      proto.trackPageView = function(url) {\n\n        var promises = [];\n\n        angular.forEach(this.services, function(handler) {\n          var promise = handler.trackPageView(url);\n          promises.push(promise);\n        });\n\n        return $q.all(promises);\n      };\n\n      return new AvAnalytics();\n    };\n\n  });\n\n})(window);\n\n// Source: -v1/lib/core/analytics/analytics-util.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avAnalyticsUtils', function(avAnalyticsConfig, $log) {\n\n    var AnalyticsUtils = function() {};\n\n    var proto = AnalyticsUtils.prototype;\n\n    proto.getProperties = function(attributes) {\n\n      var self = this;\n      var props = {};\n\n      _.forEach(attributes, function(value, key) {\n        if(self.isValidAttribute(key) && self.isNotIgnored(key)) {\n          var result = self.getAttribute(key, value);\n          props[result.key] = result.value;\n        }\n      });\n\n      return props;\n    };\n\n    // Function detects external links in order to allow the analytics framework to run\n    // before the browser follows a link.\n    //\n    //    - target=\"_self\" - This opens an anchor in the same frame\n    //    - target=\"_parent\" - Opens the in the next level up of a frame if they were nested to inside one another\n    //    - target=\"_top\" - Opens the link as top document in the browser window\n    //    - target=\"_blank\" - Opens link in new tab new tab\n    //\n    proto.isExternalLink = function(attrs) {\n      return attrs.href && !attrs.ngClick;\n    };\n\n    proto.isNotIgnored = function(key) {\n      var ignored = _.includes(avAnalyticsConfig.IGNORE, key);\n      return !ignored;\n    };\n\n    proto.isValidAttribute = function(key) {\n      return avAnalyticsConfig.PRE_FIX.test(key);\n    };\n\n    proto.lowercase = function(str) {\n      return str.substr(0, 1).toLowerCase() + str.substr(1);\n    };\n\n    proto.getAttribute = function(key, value) {\n      var simpleKey = key.match(avAnalyticsConfig.PRE_FIX);\n\n      if(simpleKey && simpleKey[1]) {\n        return {\n          key: this.lowercase(simpleKey[1]),\n          value: value\n        };\n      }\n    };\n\n    proto.toNum = function(value) {\n      var parsed = parseInt(value, 10);\n      value = isNaN(parsed) ? 0 : parsed;\n      return value;\n    };\n\n    proto.isValid = function(trackingValues) {\n      var valid = true;\n\n      if(trackingValues.value || trackingValues.value === 0) {\n        delete trackingValues.value;\n      }\n\n      _.forEach(trackingValues, function(key, value) {\n        if(availity.isBlank(value) || _.isUndefined(value)) {\n          $log.warn('The analytic tracking value for ' + key.toUpperCase() +' is not defined.');\n          valid = false;\n        }\n      });\n\n      return valid;\n    };\n\n    return new AnalyticsUtils();\n  });\n})(window);\n\n// Source: -v1/lib/core/analytics/analytics-splunk.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avSplunkAnalytics', function($log, avLogMessagesResource, $location) {\n\n    var SplunkAnalyticsService = function() {};\n\n    var proto = SplunkAnalyticsService.prototype;\n\n    proto.trackEvent = function(properties) {\n      properties.url = $location.$$absUrl || 'N/A';\n      properties.level = properties.level || 'info';\n\n      return avLogMessagesResource[properties.level](properties);\n    };\n\n    proto.trackPageView  = function(url) {\n\n      var properties = {\n        event: 'page',\n        level: 'info',\n        url: url || $location.$$absUrl()\n      };\n\n      return avLogMessagesResource[properties.level](properties);\n    };\n\n    proto.isEnabled = function() {\n      return true;\n    };\n\n    return new SplunkAnalyticsService();\n  });\n\n})(window);\n\n// Source: -v1/lib/core/analytics/analytics-piwik.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.provider('avPiwikAnalytics', function() {\n\n    var self;\n    var siteId;\n    var enabled = false;\n    var customVariables = [];\n\n    this.enabled = function(_enabled) {\n      enabled = !!_enabled;\n    };\n\n    // can not push these items to `_paq` because it is defined\n    // after page has loaded\n    this._setCustomVariable = function(index, valueName, value, scope) {\n\n      if(!index || isNaN(index)) {\n        throw new Error('index must be a number');\n      } else if(!valueName) {\n        throw new Error('valueName must be declared');\n      } else {\n        customVariables.push(['setCustomVariable', index, valueName, value, scope]);\n      }\n    };\n\n    this.setSiteID = function(_siteID) {\n      this.enabled(true);\n      siteId = _siteID;\n    };\n\n    // allow the user to pass a array of visit variables\n    this.setVisitVariables = function(items) {\n      _.forEach(items, function(item) {\n        self._setCustomVariable(item[0], item[1], item[2], 'visit');\n      });\n    };\n\n    this.setPageVariables = function(index, name, value) {\n      this._setCustomVariable(index, name, value, 'page');\n    };\n\n    this.$get = function(avAnalyticsUtils, avUsersResource, avAnalyticsConfig, $injector, $log, $q, $document, $location) {\n\n      var AvPiwikAnalytics = function() {\n        window._paq = window._paq || [];\n      };\n\n      var proto = AvPiwikAnalytics.prototype;\n\n      proto.trackEvent = function(properties) {\n\n        if(!window._paq) {\n          $log.warn('Piwik object `_paq` not found in global scope');\n          return $q.when(false);\n        }\n\n        // http://piwik.org/docs/event-tracking/\n        //\n        // PAQ requires that eventValue be an integer.\n        // Check to make sure value is a number if not convert it to 0.\n        //\n        if(properties.value) {\n          properties.value = avAnalyticsUtils.toNum(properties.event);\n        }\n\n        // check to make sure that data being sent to piwik is a string and not null, empty or undefined\n        if(!avAnalyticsUtils.isValid(properties)) {\n          $log.warn('Invalid properties being passed. Tracking info will not be sent.');\n          return $q.when(false);\n        }\n\n        return $q.when(window._paq.push(['trackEvent', properties.category, properties.action || properties.event, properties.label, properties.value]));\n      };\n\n      proto.trackPageView  = function(url) {\n\n        if(!window._paq) {\n          $log.warn('Piwik object `_paq` not found in global scope');\n          return $q.when(false);\n        }\n\n        return $q.when([\n          window._paq.push(['setCustomUrl', url]),\n          window._paq.push(['trackPageView', url])]\n        );\n\n      };\n\n      proto.init = function() {\n\n        avUsersResource.me().then(function(user) {\n          window._paq.push(['setUserId', user.id]);\n          // self.trackPageView(); //send another page track when the user data loads\n        });\n\n        if(!_.isFinite(siteId)) {\n          $log.warn('Invalid Piwik Site Id.  Piwik analytics has been disabled.');\n          return;\n        }\n\n        var url;\n\n\n        // Not sure if this is the correct way to call in avAnalyticsConfig\n        // only object in provider: var config = { DOMAIN: 'app.availity.com' }\n        // I believe I have to get the DOMAIN value, because avAnalyticsConfig should return an object.\n        if($location.$$host === avAnalyticsConfig.ENV.PROD.DOMAIN) {\n          url = avAnalyticsConfig.ENV.PROD.URL;\n        } else {\n          url = avAnalyticsConfig.ENV.QA.URL;\n        }\n\n        window._paq.push(['enableLinkTracking']);\n        window._paq.push(['setTrackerUrl', url + 'piwik.php']);\n        window._paq.push(['setSiteId', siteId]);\n\n        _.forEach(customVariables, function(variable) {\n          window._paq.push(variable);\n        });\n\n        $.getScript(url + 'piwik.js', function() {\n\n        });\n\n      };\n\n\n      proto.isEnabled = function() {\n        return enabled && siteId;\n      };\n\n      return new AvPiwikAnalytics();\n    };\n\n  });\n\n})(window);\n\n// Source: -v1/lib/core/analytics/analytics-exceptions.js\n\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_EXCEPTIONS', {\n    MESSAGES: {\n      NOT_APPLICABLE: 'N/A'\n    },\n    TYPES: {\n      EXCEPTION: 'exception'\n    }\n  });\n\n  availity.core.provider('avExceptionAnalytics', function() {\n\n    var _enabled = true;\n    var appId;\n\n    this.enabled = function(enabled) {\n      _enabled = !!enabled;\n    };\n\n    this.setAppId = function(_id) {\n      appId = _id;\n    };\n\n    this.$get = function(avLogMessagesResource, $location, AV_EXCEPTIONS) {\n\n      var AvExceptionAnalytics = function() {\n\n      };\n\n      var proto = AvExceptionAnalytics.prototype;\n\n      proto.init = function() {\n\n        var self = this;\n\n        if(!_enabled) {\n          return;\n        }\n\n        TraceKit.remoteFetching = false;\n        TraceKit.surroundingLinesToCollect = 11;\n\n        // subscribe() hooks into window.error\n        TraceKit.report.subscribe(function(stacktrace) {\n          self.onError(stacktrace);\n        });\n\n      };\n\n      proto.prettyPrint = function(stacktrace) {\n\n        var message = '';\n\n        var length = stacktrace.stack.length;\n\n        for(var i = 0; i < length; i++) {\n          message += [\n            '[' + _.padLeft(i + '', 2, '0') + '] ',\n            stacktrace.stack[i].func,\n            ' ',\n            stacktrace.stack[i].url,\n            ':',\n            stacktrace.stack[i].line,\n            ':',\n            stacktrace.stack[i].column,\n            i + 1 < length ? '\\n' : ''\n          ].join('');\n\n        }\n\n        return message;\n      };\n\n      proto.onError = function(stacktrace) {\n\n        var userAgent = root.navigator && root.navigator.userAgent ? root.navigator.userAgent : AV_EXCEPTIONS.MESSAGES.NOT_APPLICABLE;\n\n        var message = {\n          errorDate: moment(new Date()).format('YYYY-MM-DDTHH:mm:ssZZ'),\n          errorName: stacktrace.name,\n          errorMessage: stacktrace.message,\n          errorStack: this.prettyPrint(stacktrace),\n          url: $location.$$absUrl,\n          appId: appId || AV_EXCEPTIONS.MESSAGES.NOT_APPLICABLE,\n          // appVersion: AV_EXCEPTIONS.MESSAGES.NOT_APPLICABLE,\n          userAgent: userAgent,\n          userLanguage: navigator.userLanguage,\n          referrer: document.referrer,\n          host: document.domain,\n          screenWidth: $(window).width(),\n          screenHeight: $(window).height(),\n          sdkVersion: availity.VERSION\n        };\n\n        return this.log(message);\n\n      };\n\n      proto.log = function(message) {\n        return avLogMessagesResource['error'](message);\n      };\n\n      proto.trackEvent = function(exception) {\n\n        if(!_enabled) {\n          return;\n        }\n\n        var stacktrace = TraceKit.computeStackTrace(exception);\n\n        return this.onError(stacktrace);\n\n      };\n\n      return new AvExceptionAnalytics();\n\n    };\n  });\n\n  availity.core.config(function($provide) {\n\n    $provide.decorator('$exceptionHandler', function($delegate, $injector) {\n      return function(exception, cause) {\n        $delegate(exception, cause);\n        var errorTacking = $injector.get('avExceptionAnalytics');\n        errorTacking.trackEvent(exception);\n      };\n    });\n\n  });\n\n  availity.core.run(function(avExceptionAnalytics) {\n    avExceptionAnalytics.init();\n  });\n\n})(window);\n\n// Source: -v1/lib/core/analytics/analytics-config.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity || {};\n\n  availity.analytics = angular.module('availity.config', ['ng', 'availity']);\n\n  availity.analytics.run(function(avAnalytics) {\n\n    avAnalytics.init();\n\n  });\n\n})(window);\n\n\n// Source: -v1/lib/core/utils/date-polyfill.js\n// Issue: https://github.com/angular/angular.js/issues/11165\n// Polyfill: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\n//\n// This polyfill is needed because Angular calls toISOString()\n// when an request parameter is of type Date.  If this polyfill isn't present\n// the ajax call fails.\n//\n(function() {\n\n  'use strict';\n\n  var pad = function(number) {\n    if(number < 10) {\n      return '0' + number;\n    }\n    return number;\n  };\n\n  if(!Date.prototype.toISOString) {\n\n    Date.prototype.toISOString = function() {\n\n      return this.getUTCFullYear() +\n        '-' + pad(this.getUTCMonth() + 1) +\n        '-' + pad(this.getUTCDate()) +\n        'T' + pad(this.getUTCHours()) +\n        ':' + pad(this.getUTCMinutes()) +\n        ':' + pad(this.getUTCSeconds()) +\n        '.' + (this.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) +\n        'Z';\n    };\n  }\n\n})(window);\n\n// Source: -v1/lib/core/messages/messages-constants.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_MESSAGES', {\n\n    EVENTS: {\n\n      MESSAGE: 'message', // post message window event\n      RESIZE: 'resize', // window resize event\n      UNLOAD: 'beforeunload',\n\n      AV_RESIZE: 'av:window:resize',\n      AV_RECEIVED: 'av:message:received',\n      AV_MAXIMIZE: 'nav:left:hide',  // @deprecated,\n      AV_MINIMIZE: 'nav:left:hide',  // @deprecated\n      // MAXIMIZE: 'av:window:maximize',\n      // MINIMIZE: 'av:window:minimize',\n      AV_LOGIN: 'av:login',\n      AV_LOGOUT: 'av:logout',\n      AV_SESSION_TIMEOUT: 'av:session:timeout'\n\n    },\n\n    RESIZE_DEBOUNCE: 400,\n\n    DOMAIN: /https?:\\/\\/([\\w\\d\\-]+\\.)?availity\\.(com|net)/,\n    LOCAL: /http:\\/\\/(localhost|127\\.0\\.0\\.1|0\\.0\\.0\\.0):(\\d+)/\n\n  });\n\n})(window);\n\n// Source: -v1/lib/core/messages/messages.js\n\n\n// https://github.com/kylewelsby/angular-post-message/blob/master/src/angular-post-message.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.provider('avMessages', function() {\n\n    var enabled = true;\n\n    this.enable = function(value) {\n\n      if(arguments.length) {\n        enabled = !!value;\n      }\n\n      return enabled;\n\n    };\n\n    this.$get = function($rootScope, $log, AV_MESSAGES) {\n\n      var AvMessages = function() {\n\n      };\n\n      var proto = AvMessages.prototype;\n\n      proto.init = function() {\n\n        var self = this;\n        var $window = $(window);\n\n        $window.on(AV_MESSAGES.EVENTS.MESSAGE, function(event) {\n          self.onMessage(event);\n        });\n\n        $window.on(AV_MESSAGES.EVENTS.RESIZE, function() {\n          self.onResize();\n        });\n\n        this.send(AV_MESSAGES.EVENTS.AV_MAXIMIZE);\n\n        $rootScope.$on('$destroy', function() {\n          self.destroy();\n        });\n\n        $window.on(AV_MESSAGES.EVENTS.UNLOAD, function() {\n          self.send(AV_MESSAGES.EVENTS.AV_MINIMIZE);\n        });\n\n      };\n\n      proto.destroy = function() {\n\n        $(window).off(AV_MESSAGES.EVENTS.MESSAGE);\n        $(window).off(AV_MESSAGES.EVENTS.RESIZE);\n        $(window).off(AV_MESSAGES.EVENTS.UNLOAD);\n\n      };\n\n      proto.onResize = function() {\n\n        var self = this;\n\n        var resize =  _.debounce(function() {\n\n          var height = $('html').height();\n          self.send({\n            event: AV_MESSAGES.EVENTS.AV_RESIZE,\n            height: height\n          });\n\n        }, AV_MESSAGES.RESIZE_DEBOUNCE);\n\n        resize();\n\n      };\n\n      proto.isDomain = function(url) {\n\n        if(AV_MESSAGES.DOMAIN.test(this.domain())) {\n          return AV_MESSAGES.DOMAIN.test(url);\n        }\n\n        return AV_MESSAGES.LOCAL.test(url);\n      };\n\n      proto.isEnabled = function() {\n        return enabled;\n      };\n\n      proto.onMessage = function(_event) {\n\n        var event = _event;\n\n        event = event.originalEvent || event;  // jQuery wraps in `originalEvent`\n\n        if(!event && !event.data) {\n          // no op\n          return;\n        }\n\n        // don't process messages emitted from same window\n        if(event.source === window) {\n          return;\n        }\n\n        if(!this.isDomain(event.origin)) {\n          $log.warn('avMessages rejected a cross domain message since it does not match an *.availity.com  or localhost');\n          return;\n        }\n\n\n        var data = event.data;\n\n        try {\n          data =  angular.fromJson(data);\n        } catch(err) {\n          $log.warn('avMessages.onMessage() failed to convert event to json payload');\n        }\n\n        if(_.isString(data)) {\n          event = data;\n          data = null;\n        }else {\n          event = data.event ? data.event : AV_MESSAGES.AV_RECEIVED;\n        }\n\n        $rootScope.$root.$broadcast(event, data);\n\n      };\n\n      proto.isIframe = function() {\n        return window.self !== window.parent;\n      };\n\n      proto.domain = function() {\n\n        var window = root;\n\n        if(window.location.origin) {\n          return window.location.origin;\n        }\n\n        if(window.location.hostname) {\n          return window.location.protocol + '//' + window.location.hostname + (window.location.port ? ':' + window.location.port : '');\n        }\n\n        return '*';\n\n      };\n\n      proto.send = function(payload) {\n\n        try {\n\n          var message  = _.isString(payload) ? payload : JSON.stringify(payload);\n          this.postMessage(message, this.domain());\n\n        } catch(err) {\n          $log.error('avMessages.send() ', err);\n        }\n      };\n\n      proto.postMessage = function(message, domain) {\n        window.parent.postMessage(message, domain);\n      };\n\n      return new AvMessages();\n\n    };\n\n  });\n\n  availity.core.run(function(avMessages) {\n\n    if(avMessages.isEnabled()) {\n      avMessages.init();\n    }\n\n  });\n\n})(window);\n\n\n//# sourceMappingURL=maps/availity-angular.js.map\n","/*global module*/\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity || {};\n  availity.VERSION = 'v0.0.0';\n  availity.MODULE = 'availity';\n  availity.core = angular.module(availity.MODULE, ['ng']);\n\n  var originalModule = angular.module;\n  var modules = [];\n\n  angular.module = function(name, deps) {\n\n    if(deps && _.indexOf(modules, name) !== -1 && !window.__karma__) {\n      throw new Error('redefining module: ' + name);\n    }\n\n    modules.push(name);\n\n    return originalModule(name, deps);\n  };\n\n  root.availity = availity;\n\n  if(typeof module !== 'undefined' && module.exports) {\n    module.exports = availity;\n  }\n\n})(window);\n\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/helper/makeString.js\n  availity._stringify = function(object) {\n    if(object === null) {\n      return '';\n    }\n    return '' + object;\n  };\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/isBlank.js\n  availity.isBlank = function(str) {\n    return (/^\\s*$/).test(availity._stringify(str));\n  };\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var uid = ['0', '0', '0'];\n\n  availity.uuid = function(prefix) {\n    var index = uid.length;\n    var digit;\n\n    while(index) {\n      index--;\n      digit = uid[index].charCodeAt(0);\n      if(digit === 57 /*'9'*/) {\n        uid[index] = 'A';\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n      if(digit === 90  /*'Z'*/) {\n        uid[index] = '0';\n      } else {\n        uid[index] = String.fromCharCode(digit + 1);\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n    }\n    uid.unshift('0');\n    return prefix ? prefix + uid.join('') : uid.join('');\n  };\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.REGEX_API_URL = /^.*?api.availity.com(.*)$/;\n\n  availity.getRelativeUrl = function(url) {\n    var result = url.match(availity.REGEX_API_URL);\n    if(result && result[1]) {\n      return '/api' + result[1];\n    }\n\n    return url;\n  };\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // https://github.com/jasonday/printThis/commit/66f9cbd0e3760767342eed4ef32cf8294417b227\n  availity.print = function() {\n\n    if(document.queryCommandSupported('print')) {\n      document.execCommand('print', false, null);\n    } else {\n      window.focus();\n      window.print();\n    }\n  };\n\n})(window);\n","// Original => https://github.com/mgcrea/angular-strap/blob/master/src/helpers/debounce.js\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_THROTTLE', {\n    OPTIONS: {\n      wait: 1000,\n      update: false,\n      trailing: true,\n      leading: false\n    }\n  });\n\n  availity.core.factory('avThrottle', function(AV_THROTTLE, $timeout) {\n\n    return function(fn, wait, options) {\n\n      options = _.merge({}, AV_THROTTLE.OPTIONS, options);\n\n      wait = wait ? wait : AV_THROTTLE.THRESHOLD;\n      var update = angular.isDefined(options.update) ? options.update : AV_THROTTLE.UPDATE;\n      var timer = null;\n\n      return function() {\n        var context = options.context || this;\n        var args = arguments;\n\n        if(!timer) {\n          if(options.leading !== false) {\n            fn.apply(context, args);\n          }\n\n          var later = function() {\n            timer = null;\n            if(options.trailing !== false) {\n              fn.apply(context, args);\n            }\n          };\n\n          timer = $timeout(later, wait, update);\n        }\n\n        return timer;\n\n      };\n    };\n  });\n\n})(window);\n","// Orginal => https://github.com/ericzon/angular-ny-logger/blob/0c594e864c93e7f33d36141200096bc6139ddde1/angular-ny-logger.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.provider('AvLogger', function() {\n\n    var _enabled = false;\n\n    this.enabled = function(enabled) {\n      _enabled = !!enabled;\n    };\n\n    this.$get = function($injector) {\n\n      var AvLogger = function(context, $delegate) {\n\n        this.context = context || '';\n        this.$log = $delegate;\n\n      };\n\n      var proto = AvLogger.prototype;\n\n      AvLogger.supplant = function(str, supplantData) {\n        if (!supplantData) {\n          return str;\n        }\n\n        var _supplant = function (match, key) {\n          var result = supplantData[key];\n          return result;\n        };\n\n        return str.replace(/\\{([^{}]*)\\}/g, _supplant);\n      };\n\n      AvLogger.isObject = function(element) {\n        var elemStr = ( !angular.isUndefined(element) && !angular.isUndefined(element.constructor) ) ? element.constructor.toString() : '';\n        return (elemStr.indexOf('Object') > -1);\n      };\n\n      AvLogger.getFormattedTimestamp = function(date) {\n\n        return AvLogger.supplant('{0}:{1}:{2}:{3}', [\n          date.getHours(),\n          date.getMinutes(),\n          date.getSeconds(),\n          date.getMilliseconds()\n        ]);\n\n      };\n\n      proto._log = function(originalFn, args) {\n\n        // Allow enabling logger through query params\n        // Ex:\n        //\n        // http://localhost:3000/ui.html#avLogger\n\n        var hash = window.location.hash;\n        hash = hash || '';\n\n        if(!_enabled && hash.indexOf('avLogger') < 0 && originalFn !== 'error') {\n          return;\n        }\n\n        var now  = AvLogger.getFormattedTimestamp(new Date());\n        var message = '';\n        var supplantData = [];\n\n        var context = this.context ? ' [' + this.context + '] ' : '';\n\n        switch(args.length) {\n          case 1:\n            // (1) If the user supplied one argument, then the argument must be\n            // the message itself and _log()\n            // will print: <timestamp> - <context>: <message>\n            supplantData = args[0];\n            message = AvLogger.supplant('{0}{1} - {2}', [now, context, args[0]]);\n            break;\n          case 3:\n            // (3) If the user supplied three arguments, then the first argument\n            // is a method name, the second is the message and the third is an\n            // object of variables to interpolate with the message. For this, _log()\n            // will print: <timestamp> - <context> - <method name>('<message>')\n            supplantData = args[2];\n            message = AvLogger.supplant(\"{0}{1} - {2}(\\'{3}\\')\", [now, context, args[0], args[1]]);\n            break;\n          case 2:\n            // (2) If the user provided two arguments, we need to find out whether\n            // they supplied a method name or an interpolation object.\n            // In order to figure that out, we’ll check the type of the last argument.\n            // If it is a string, then it has to be the message itself while the\n            // first argument is the method name. Otherwise consider the first argument\n            // as the message and the second as array of interpolation variables.\n            // The output print will be according to this check.\n            if(typeof args[1] === 'string') {\n\n              message = AvLogger.supplant(\"{0}{1} - {2}(\\'{3}\\')\", [now, context, args[0], args[1]]);\n\n            } else {\n\n              // If the message is an error, there may be a stack included. If so, we\n              // should include the stack in the message to make it more meaningful.\n              if(args[0].stack) {\n                var errorMessage = this.formatError(args[0]);\n                message = AvLogger.supplant('{0}{1} - {2}', [now, context, errorMessage]);\n                supplantData = args[1];\n\n              }else {\n                supplantData = args[1];\n\n              }\n\n            }\n            break;\n        }\n\n        var $log = this.$log || $injector.get('$log');\n\n        var params = (AvLogger.isObject(supplantData)) ? [message, supplantData] : [AvLogger.supplant(message, supplantData)];\n        $log[originalFn].apply(null, params);\n\n      };\n\n      proto.log = function() {\n        this._log('log', arguments);\n      };\n\n      proto.info = function() {\n        this._log('info', arguments);\n      };\n\n      proto.warn = function() {\n        this._log('warn', arguments);\n      };\n\n      proto.debug = function() {\n        this._log('debug', arguments);\n      };\n\n      // https://github.com/angular/angular.js/blob/v1.2.27/src/ng/log.js#L122\n      proto.formatError = function(arg) {\n        if(arg instanceof Error) {\n          if(arg.stack) {\n\n            arg = (arg.message && arg.stack.indexOf(arg.message) === -1) ?\n              'Error: ' + arg.message + '\\n' + arg.stack : arg.stack;\n\n          } else if(arg.sourceURL) {\n            arg = arg.message + '\\n' + arg.sourceURL + ':' + arg.line;\n          }\n        }\n        return arg;\n      };\n\n      proto.error = function() {\n        this._log('error', arguments);\n      };\n\n      return AvLogger;\n\n    };\n\n  });\n\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.config(function($provide) {\n\n    $provide.decorator('$log', function($delegate, AvLogger) {\n      return new AvLogger(null, $delegate);\n    });\n\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_POLLING', {\n    INTERVAL: 1000, // delay in ms before retrying an async request\n    MAX_ELAPSED_TIME: 5000, // max time in ms before polling stops and rejects original request\n    MAX_RETRY: 30, // # of times the request will be tried\n    DECAY: 1.2, // % the polling interval decays after every retry\n    // maximum time polling is allowed before rejecting the request\n    EVENTS: {\n      MAX_RETRY: 'av:polling:max:retry'\n    },\n    REGEX_URL: /^.*?api.availity.com(.*)$/ // capture the relative url from API\n  });\n\n  var PollingServiceFactory = function($rootScope, $q, $injector, $timeout, $log, AV_POLLING, AV_API) {\n\n    var AvPollingService = function() {\n      this.pendingRequests = []; // stores all request for polling\n    };\n\n    var proto = AvPollingService.prototype;\n\n    proto.response = function(response) {\n\n      if(this.isAsyncResponse(response)) {\n        return this.onAsyncReponse(response);\n      }\n\n      return response || $q.when(response);\n    };\n\n    proto.setDefaults = function(config) {\n\n      var defaultOptions = {\n        pollingInterval: AV_POLLING.INTERVAL,\n        pollingDecay: AV_POLLING.DECAY,\n        pollingMaxInterval: AV_POLLING.MAX_ELAPSED_TIME,\n        pollingRetryCount: 0,\n        pollingStartTime: new Date().getTime()\n      };\n\n      return _.extend(defaultOptions, config);\n    };\n\n    proto.responseError = function(response) {\n      // Return the promise rejection\n      return $q.reject(response);\n    };\n\n    /**\n     * API layer return a link with a polling url for\n     * async responses.\n     *\n     * @param  {Object}  response ajax response\n     * @return {Boolean} true if response has status of 202 (accepted) and location param in header with uri+session link\n     */\n    proto.isAsyncResponse = function(response) {\n\n      return response &&\n        response.config &&\n        response.config.api &&\n        response.status &&\n        response.status === 202 &&\n        angular.isFunction(response.headers) && !availity.isBlank(response.headers(AV_API.HEADERS.SERVER.LOCATION));\n    };\n\n    proto.onAsyncReponse = function(response) {\n\n      response.config = this.setDefaults(response.config);\n\n      var deferred = $q.defer();\n\n      this.queueRequest(deferred, response);\n\n      // [rm3]: Can't call notify before you return promise object?\n      $timeout(function() {\n        // Notify deferred listeners with the original server response\n        deferred.notify(response);\n      }, 0, false);\n\n      return deferred.promise;\n    };\n\n    proto.getUrl = function(url) {\n\n      var result = url.match(AV_POLLING.REGEX_URL);\n      if(result && result[1]) {\n        return '/api' + result[1];\n      }\n\n      return url;\n    };\n\n    proto.queueRequest = function(deferred, response) {\n\n      var self = this;\n      // server replies with location header so set the url into config\n      var _url = availity.getRelativeUrl(response.headers(AV_API.HEADERS.SERVER.LOCATION));\n      var _config = response.config;\n\n\n      // headers – {Object} – Map of strings or functions which return strings representing HTTP headers\n      //  to send to the server. If the return value of a function is null, the header\n      //  will not be sent. Functions accept a config object as an argument.\n      var config = {\n        method: 'GET',\n        api: true,\n        headers: _config.headers,\n        pollingInterval: _config.pollingInterval,\n        pollingMaxRetry: _config.pollingMaxRetry,\n        pollingMaxInterval: _config.pollingMaxInterval,\n        pollingStartTime: _config.pollingStartTime,\n        _pollingDecay: _config._pollingDecay,\n        pollingRetryCount: _config.pollingRetryCount,\n        pollingDecay: _config.pollingDecay,\n        url: _url, /* set the url from the server response */\n        cache: false\n      };\n\n      var request = {\n        id: availity.uuid('request-'),\n        config: config,\n        deferred: deferred\n      };\n\n      var timeout = this.getPollingTimeout(config);\n\n      // each async request should run on its own timer\n      var timer = $timeout(function() {\n        self.retryRequest(request.id);\n      }, timeout, false);\n\n      request.timer = timer;\n\n      // add the async request to the queue\n      this.pushRequest(request);\n\n    };\n\n    proto.popRequest = function(id) {\n\n      var index = null;\n      var request = null;\n\n      for(var i = 0; i < this.pendingRequests.length; i++) {\n        if(this.pendingRequests[i].id === id) {\n          index = i;\n          break;\n        }\n      }\n\n      request = this.pendingRequests[index];\n      this.pendingRequests.splice(index, 1);\n\n      return request;\n    };\n\n    proto.pushRequest = function(request) {\n      this.pendingRequests.push(request);\n    };\n\n    proto.getPollingTimeout = function(config) {\n      return config.pollingDecay * config.pollingInterval;\n    };\n\n    proto.isPollingMaxTimeout = function(config) {\n      var now = new Date().getTime();\n      var elaspedTime = now - config.pollingStartTime;\n      var isElapsed = elaspedTime > config.pollingMaxInterval;\n      return isElapsed;\n    },\n\n      proto.isMaxRetried = function(config) {\n        return config.pollingRetryCount >= AV_POLLING.MAX_RETRY;\n      };\n\n    proto.isPollable = function(config) {\n      var _isTimeout = this.isPollingMaxTimeout(config);\n      var _isMax = this.isMaxRetried(config);\n\n      return _isTimeout || _isMax ? false : true;\n\n    };\n\n    proto.retryRequest = function(id) {\n\n      var self = this;\n      var request = this.popRequest(id);\n      $timeout.cancel(request.timer);\n\n      var config = request.config;\n\n      var deferred = request.deferred;\n\n      if(!this.isPollable(config)) {\n        $log.info('Rejecting pollable response due to timeout');\n        return deferred.reject(request);\n      }\n\n      // increment counters and polling timeouts\n      this.increment(config);\n\n      function successCallback(response) {\n        if(self.isAsyncResponse(response)) {\n          deferred.notify(response);\n          self.queueRequest(request.deferred, response);\n        } else {\n          deferred.resolve(response);\n        }\n      }\n\n      function errorCallback(response) {\n        deferred.reject(response);\n      }\n\n      // Silly circular dependency trick\n      var $http = $injector.get('$http');\n\n      $http(config).then(successCallback, errorCallback);\n\n    };\n\n    proto.increment = function(config) {\n      this.incrementCounter(config);\n      this.incrementDecay(config);\n    };\n\n    proto.incrementDecay = function(config) {\n      if(!config._pollingDecay) {\n        // store the original decay param\n        config._pollingDecay = config.pollingDecay;\n      }\n      config.pollingDecay *= config._pollingDecay;\n    };\n\n    proto.incrementCounter = function(config) {\n      config.pollingRetryCount++;\n    };\n\n    proto.clearRequests = function() {\n      angular.forEach(this.pendingRequests, function(request) {\n        $timeout.cancel(request.timer);\n      });\n      this.pendingRequests = [];\n    };\n\n    return new AvPollingService();\n\n  };\n\n  availity.core.factory('avPollingService', PollingServiceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_API', {\n    HEADERS: {\n      SERVER: {\n        ID: 'X-API-ID',\n        LOCATION: 'Location',\n        STATUS: 'X-Status-Message',\n        GLOBAL_ID: 'X-Global-Transaction-ID'\n      },\n      CLIENT: {\n        SESSION_ID: 'X-Session-ID',\n        AUTH: 'Authorization',\n        OVERRIDE: 'X-HTTP-Method-Override',\n        CALLBACK_URL: 'X-Callback-URL',\n        CUSTOMER_ID: 'X-Availity-Customer-ID',\n        RESPONSE_ENCODING: 'X-Response-Encoding-Context'\n      }\n    },\n    OPTIONS: {\n      // pre-prend the url with a value like `/public` so we can build urls like `public/api/v1/*`\n      prefix: '',\n      // default base url for endpoints\n      path: '/api',\n      // url resource group, such as `/foo`, for urls like `public/api/foo/v1/*`\n      resourceGroup: '',\n      // url to resource endpoint like `coverages` or `payers`\n      url: null,\n      // defaults to version 1\n      version: '/v1',\n      // governance level `/internal`\n      level: '',\n      // post-pend the url with `.json`, `.txt` or `.xml`\n      suffix: '',\n      // cache all request by default\n      cache: true,\n      // flag used to enable behaviors around the Availity Rest API\n      api: true,\n      // # of times the polling service has tried to get a response\n      pollingRetryCount: 0,\n      // in ms\n      pollingInterval: 1000,\n      // % the polling interval decays after every retry\n      pollingDecay: 1.2,\n      // maximum time polling is allowed before rejecting the request\n      pollingMaxInterval: 30000,\n      // default headers\n      headers: {\n        // Turn off content encoding for angular apis\n        'X-Response-Encoding-Context': 'NONE'\n      }\n    }\n  });\n\n  // Factory that creates ApiResourcess\n  var ApiResourcesProvider = function(AV_API) {\n\n    // Provider default options that can be overridden at config time\n    var defaultOptions = _.merge({}, AV_API.OPTIONS);\n\n    // Allow overrides in config phase\n    this.setOptions = function(options) {\n      _.merge(defaultOptions, options);\n    };\n\n    this.getOptions = function() {\n      return angular.copy(defaultOptions);\n    };\n\n    // helper method to global set http common headers\n    this.setHttpCommonHeaders = function($httpProvider) {\n      _.merge($httpProvider.defaults.headers.common, defaultOptions.headers);\n    };\n\n    /**\n     * Main get method for creating new resource\n     * @param $http\n     * @param $q\n     * @param avPollingService\n     * @returns {AvApiResource}\n     */\n    this.$get = function($http, $q, avPollingService) {\n\n      var AvApiResource = function(options) {\n\n        if (!options) {\n          throw new Error('[options] cannot be null or undefined');\n        }\n\n        // if string the assume url is being passed in\n        if (angular.isString(options)) {\n          options = options.charAt(0) === '/' ? options : '/' + options;\n          options = angular.extend({}, {url: options});\n        }\n\n        if (!options.url) {\n          throw new Error('[url] cannot be null');\n        }\n\n        // get the default options and merge into this instance\n        this.options = angular.extend({}, defaultOptions, (options || {}));\n      };\n\n      // Alias the prototype\n      var proto = AvApiResource.prototype;\n\n      proto._config = function(config) {\n        return _.merge({}, this.options, (config || {}));\n      };\n\n      proto._cacheBust = function(config) {\n        config.cacheBust = null;\n        config.params = config.params || {};\n        config.params.cacheBust = new Date().getTime();\n        return config;\n      };\n\n      proto._getUrl = function(id) {\n        if (this.options.api) {\n          return this._getApiUrl(id);\n        }\n\n        return this.options.url;\n      };\n\n      proto._createResponse = function(data, status, headers, config) {\n        return {\n          data: data,\n          status: status,\n          headers: headers,\n          config: config\n        };\n      };\n\n      proto._request = function(config, afterCallback) {\n\n        var self = this;\n        var defer = $q.defer();\n\n        $http(config)\n          .success(function(data, status, headers, _config) {\n\n            var _response = {\n              data: data,\n              status: status,\n              headers: headers,\n              config: _config\n            };\n\n            // handle the async response if applicable\n            var _promise = $q.when(avPollingService.response(_response));\n            // notify the promise listener of the original response\n            defer.notify(_response);\n\n            // handle the polling service promise\n            _promise.then(function(successResponse) {\n\n              // if service has a callback then call it\n              // var response = self._createResponse(data, status, headers, _config);\n              if (afterCallback) {\n                successResponse = afterCallback.call(self, successResponse, config.data);\n              }\n              defer.resolve(successResponse);\n            }, function(errorResponse) {\n              defer.reject(errorResponse);\n            }, function(notifyResponse) {\n              defer.notify(notifyResponse);\n            });\n\n          }).error(function(data, status, headers, _config) {\n          var response = self._createResponse(data, status, headers, _config);\n          defer.reject(response);\n        });\n\n        var promise = defer.promise;\n\n        // recreate the success callback ala $http\n        promise.success = function(fn) {\n          promise.then(function(response) {\n            fn(response.data, response.status, response.headers, response.config);\n          });\n          return promise;\n        };\n\n        // recreate the error callback ala $http\n        promise.error = function(fn) {\n          promise.then(null, function(response) {\n            fn(response.data, response.status, response.headers, config);\n          });\n          return promise;\n        };\n\n        promise.always = promise['finally'];\n\n        return promise;\n      };\n\n      proto.normalize = function(url) {\n        return url\n          .replace(/[\\/]+/g, '/')\n          .replace(/\\/$/, '');\n      };\n\n      proto.join = function() {\n        var joined = [].slice.call(arguments, 0).join('/');\n        return this.normalize(joined);\n      };\n\n      proto._getApiUrl = function(id) {\n\n        id = id ? '/' + id : '';\n\n        var url = this.join(\n          this.options.prefix,\n          this.options.path,\n          this.options.level,\n          this.options.resourceGroup,\n          this.options.version,\n          this.options.url,\n          id);\n\n        return url + this.options.suffix;\n      };\n\n      proto.create = function(data, config) {\n\n        if (!data) {\n          throw new Error('called method without [data]');\n        }\n\n        if (this.beforeCreate) {\n          data = this.beforeCreate(data);\n        }\n\n        config = this._config(config);\n        config.method = 'POST';\n        config.url = this._getUrl();\n        config.data = data;\n\n        return this._request(config, this.afterCreate);\n\n      };\n\n      proto.get = function(id, config) {\n\n        if (!id) {\n          throw new Error('called method without [id]');\n        }\n\n        config = this._config(config);\n        if (config.cacheBust) {\n          config = this._cacheBust(config);\n        }\n        config.method = 'GET';\n        config.url = this._getUrl(id);\n\n        return this._request(config, this.afterGet);\n\n      };\n\n      proto.query = function(config) {\n\n        config = this._config(config);\n        if (config.cacheBust) {\n          config = this._cacheBust(config);\n        }\n        config.method = 'GET';\n        config.url = this._getUrl();\n\n        return this._request(config, this.afterQuery);\n\n      };\n\n      proto.update = function(id, data, config) {\n\n        var url;\n\n        if (_.isString(id) || _.isNumber(id)) {\n          url = this._getUrl(id);\n        } else {\n          url = this._getUrl();\n          // At this point the function signature becomes:\n          //\n          // proto.update = function(data, config) {} a.k.a function(id, data)\n          //\n          config = data;  // config is really the 2nd param\n          data = id; // data is really the first param\n        }\n\n        if (this.beforeUpdate) {\n          data = this.beforeUpdate(data);\n        }\n\n        config = this._config(config);\n        config.method = 'PUT';\n        config.url = url;\n        config.data = data;\n\n        return this._request(config, this.afterUpdate);\n\n      };\n\n      proto.remove = function(id, config) {\n\n        var url;\n        var data;\n\n        if (_.isString(id) || _.isNumber(id)) {\n          url = this._getUrl(id);\n        } else {\n          // At this point the function signature becomes:\n          //\n          // proto.remove = function(data, config)\n          //\n          url = this._getUrl();\n          data = id;\n        }\n\n        config = this._config(config);\n        config.method = 'DELETE';\n        config.url = url;\n        config.data = data;\n\n        return this._request(config, this.afterRemove);\n      };\n\n      proto.beforeCreate = null;\n      proto.afterCreate = null;\n      proto.afterQuery = null;\n      proto.afterGet = null;\n      proto.beforeUpdate = null;\n      proto.afterUpdate = null;\n      proto.afterRemove = null;\n\n      return AvApiResource;\n    };\n\n  };\n\n  availity.core.provider('AvApiResource', ApiResourcesProvider);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  var UserServiceFactory = function(AvApiResource) {\n\n    var AvUsersResource = function() {\n      AvApiResource.call(this, 'users');\n    };\n\n    angular.extend(AvUsersResource.prototype, AvApiResource.prototype, {\n\n      afterGet: function(response) {\n        var user = response.data.user ? response.data.user : response.data;\n        return user;\n      },\n\n      me: function(config) {\n        return this.get('me', config);\n      }\n\n    });\n\n    return new AvUsersResource();\n\n  };\n\n  availity.core.factory('avUsersResource', UserServiceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avCoveragesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations', cache: false});\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avConfigurationsResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations'});\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var LogMessagesFactory = function(AvApiResource) {\n\n    var AvLogMessagesResource = function() {\n\n      AvApiResource.call(this, {\n        version: '/v1',\n        url: '/log-messages'\n      });\n    };\n\n    angular.extend(AvLogMessagesResource.prototype, AvApiResource.prototype, {\n\n      buildRequest: function(level, entries) {\n\n        var requestPayload = {};\n\n        if(entries.level) {\n          delete entries.level;\n        }\n\n        requestPayload.level = level;\n        requestPayload.entries = entries;\n\n        return requestPayload;\n      },\n\n      debug: function(entries) {\n        return this.create(this.buildRequest('debug', entries));\n      },\n\n      info: function(entries) {\n        return this.create(this.buildRequest('info', entries));\n      },\n\n      warn: function(entries) {\n        return this.create(this.buildRequest('warn', entries));\n      },\n\n      error: function(entries) {\n        return this.create(this.buildRequest('error', entries));\n      }\n\n    });\n\n    return new AvLogMessagesResource();\n\n  };\n\n  availity.core.factory('avLogMessagesResource', LogMessagesFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvDocumentsResourceFactory = function(AvApiResource) {\n\n    var AvDocumentsResource = function() {\n      AvApiResource.call(this, 'documents');\n    };\n\n    angular.extend(AvDocumentsResource.prototype, AvApiResource.prototype, {\n\n      getContents: function(id) {\n        var config = this._config();\n        config.url = this.getContentsUrl(id);\n        return this._request(config);\n      },\n\n      getContentsUrl: function(id) {\n        return this._getUrl(id) + '/contents';\n      }\n\n    });\n\n    return new AvDocumentsResource();\n\n  };\n\n  availity.core.factory('avDocumentsResource', AvDocumentsResourceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var OrganizationResourceFactory = function(AvApiResource) {\n\n    var OrganizationResource = function() {\n      AvApiResource.call(this, 'organizations');\n    };\n\n    angular.extend(OrganizationResource.prototype, AvApiResource.prototype, {\n\n      getOrganizations: function(config) {\n        return this.query(config).then(function(response) {\n          return response.data.organizations ? response.data.organizations : response.data;\n        });\n      }\n\n    });\n\n    return new OrganizationResource();\n  };\n\n  availity.core.factory('avOrganizationsResource', OrganizationResourceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n\n  var availity = root.availity;\n\n  availity.core.factory('avCodesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/codes'});\n  });\n\n  var AvCodesResourceFactory = function(AvApiResource) {\n\n    var AvCodesResource = function () {\n      AvApiResource.call(this, 'codes');\n    };\n\n    angular.extend(AvCodesResource.prototype, AvApiResource.prototype, {\n\n      getCodes: function (data) {\n\n        // config for the api resource query\n        var config = {};\n        config.params = {};\n\n        if(data.page) {\n          config.params.offset = 50 * (data.page - 1);\n        }\n        if(data.offset) {\n          config.params.offset = data.offset;\n        }\n        if(data.list) {\n          config.params.list = data.list;\n        }\n        if(data.q) {\n          config.params.q = data.q;\n        }\n\n        return this.query(config).then(function (response) {\n          // Format the response into something select2 can read\n          var results = response.data.codes;\n          if(results && !_.has(results[0], 'id')) {\n            _.each(results, function (code) {\n              code.id = code.code;\n            });\n          }\n\n          // calculate if we want to continue searching\n          var moreVal = response.data.offset < response.data.totalCount - response.data.limit;\n          return {\n            more: moreVal,\n            results: results\n          };\n\n        });\n      }\n\n    });\n\n    return new AvCodesResource();\n\n  };\n\n  availity.core.factory('avCodesResource', AvCodesResourceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvUserPermissionsResourceFactory = function(AvApiResource) {\n\n    var AvUserPermissionsResource = function() {\n      AvApiResource.call(this, {\n        level: '/internal',\n        version: '/v1',\n        url: '/axi-user-permissions'\n      });\n      this.sessionDate = moment().toISOString();\n    };\n\n    angular.extend(AvUserPermissionsResource.prototype, AvApiResource.prototype, {\n\n      afterQuery: function(response) {\n        return response.data.axiUserPermissions ? response.data.axiUserPermissions : [];\n      },\n\n      getPermissions: function(permissionIds, region) {\n        var self = this;\n        return this.query({\n          params: {\n            permissionId: permissionIds,\n            region: region,\n            sessionDate: self.sessionDate\n          }\n        });\n      }\n\n    });\n\n    return new AvUserPermissionsResource();\n\n  };\n\n  availity.core.factory('avUserPermissionsResource', AvUserPermissionsResourceFactory);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvUserAuthorizationsFactory = function($q, $log, avUserPermissionsResource) {\n\n    /**\n     *\n     * @constructor\n     */\n    var AvUserAuthorizations = function() {\n      /**\n       * Region is used to return permission/resources relative to region. If null service will\n       * return all permission relative to current.  If value 'ALL' used it will return value relative\n       * to all regions the user has access to.\n       * @type {string}\n       */\n      this.region = null;\n      /**\n       * PermissionIds contains the set of permissionIds to request from service. If user of service calls\n       * setPermissionIds() or call getPermissions() with complete set of permissionIds needed by application,\n       * then service should only make that one hit to retrieve permission information.\n       * @type {Array}\n       */\n      this.permissionIds = [];\n    };\n\n    var proto = AvUserAuthorizations.prototype;\n\n    proto.setRegion = function(region) {\n      this.region = region;\n      return this;\n    };\n\n    proto.setPermissionIds = function(permissionIds) {\n      if(!angular.isArray(permissionIds)) {\n        throw new Error('permissionsIds must be an array of string IDs for avUserAuthorizations#addPermissionIds');\n      }\n      this.permissionIds = permissionIds;\n      return this;\n    };\n\n    proto.isAuthorized = function(permissionId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        return permission.isAuthorized;\n      });\n    };\n\n    proto.isAnyAuthorized = function(permissionIds) {\n      return this.getPermissions(permissionIds).then(function(permissions) {\n        var permission = _.findWhere(permissions, {isAuthorized: true});\n        return permission !== undefined;\n      });\n    };\n\n    proto.getPermission = function(permissionId) {\n      if(!angular.isString(permissionId)) {\n        throw new Error('permissionsId must be a string ID for avUserAuthorizations#getPermission');\n      }\n\n      return this.getPermissions([permissionId])\n        .then(function(_permissions) {\n          return _permissions[permissionId];\n        });\n    };\n\n    proto.getPermissions = function(permissionIds) {\n      var self = this;\n\n      if(!angular.isArray(permissionIds)) {\n        throw new Error('permissionsIds must be an array of string IDs for avUserAuthorizations#getPermissions');\n      }\n      // merge permission ids to reduce calls to backend\n      self.permissionIds = _.union(self.permissionIds, permissionIds);\n\n      return avUserPermissionsResource\n        .getPermissions(self.permissionIds, self.region)\n        .then(function(_permissions) {\n          return self.toPermissionMap(permissionIds, _permissions);\n        });\n    };\n\n    proto.getOrganizations = function(permissionId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        return permission.organizations;\n      });\n    };\n\n    proto.getPayers = function(permissionId, organizationId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        var organization = _.findWhere(permission.organizations, {id: organizationId});\n\n        if(organization && organization.resources) {\n          return organization.resources;\n        }\n        return [];\n      });\n\n    };\n\n    /**\n     * Converts array permissions to map with value for each permissionId, creating empty permission\n     * if can't find permission in array\n     * @private\n     */\n    proto.toPermissionMap = function(permissionIds, permissions) {\n      var self = this;\n      var map = {};\n      permissions = _.slice(permissions);\n      _.forEach(permissionIds, function(permissionId) {\n        var key = {id: permissionId};\n        var permission = _.findWhere(permissions, key);\n        permission = permission ? self.toPermission(permission) : self.toPermission(key);\n        map[permission.id] = permission;\n      });\n      return map;\n    };\n\n    /**\n     * Convert a permission resource into a structure that is easier to work with.\n     * @private\n     */\n    proto.toPermission = function(permission) {\n      return {\n        id: permission.id,\n        description: permission.description ? permission.description : '',\n        geographies: permission.geographies ? permission.geographies : [],\n        organizations: permission.organizations ? permission.organizations : [],\n        isAuthorized: permission.organizations ? permission.organizations.length > 0 : false\n      };\n    };\n\n    return new AvUserAuthorizations();\n\n  };\n\n  availity.core.factory('avUserAuthorizations', AvUserAuthorizationsFactory);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_SESSION', {\n    SESSION_TIMEOUT: 'av:auth:session:timeout',\n    NOT_AUTHORIZED: 'av:auth:not:authorized'\n  });\n\n  availity.core.factory('avSession', function($q, avUsersResource) {\n\n    var AvSession = function() {\n      this.user = null;\n      this.permissions = null;\n    };\n\n    var proto = AvSession.prototype;\n\n    proto.getUser = function() {\n      var self = this;\n\n      if(this.user) {\n        return $q.when(this.user);\n      }\n\n      return avUsersResource.me().then(function(user) {\n        self.user = user;\n        return self.user;\n      });\n    };\n\n\n    proto.destroy = function() {\n      this.user = null;\n      this.permisions = null;\n    };\n\n    return new AvSession();\n  });\n\n})(window);\n","// Inspiration => https://github.com/HackedByChinese/ng-idle\n//\n// Rules:\n//\n//  * ping after 3 minutes from last human activity\n//  * reset session after api success except 401\n//  * idle show after 25 of inactivity\n//\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_IDLE', {\n    EVENTS: {\n      IDLE_INACTIVE: 'av:idle:inactive',\n      IDLE_ACTIVE: 'av:idle:active',\n      SESSION_TIMEOUT_ACTIVE: 'av:idle:session:active',\n      SESSION_TIMEOUT_REDIRECT: 'av:idle:session:redirect',\n      HUMAN: 'keydown.av.idle mousedown.av.idle keydown.av.idle',\n      MACHINE: '$locationChangeSuccess'\n    },\n    INTERVALS: {\n      PING: 3 * 60 * 1000, // 3 minutes\n      IDLE: 25 * 60 * 1000, // 25 minutes\n      SESSION: 30 * 60 * 1000 // 30 minutes\n    },\n    URLS: {\n      HOME: '/availity/web/public.elegant.login',\n      PING: '/api/v1/users/me'\n    }\n  });\n\n  availity.core.provider('avIdle', function(AV_IDLE) {\n\n    var enabled = false;\n    var pingUrl;\n    var redirectUrl;\n    var sessionTimeout;\n    var idleTimeout;\n    var pingTimeout;\n\n    this.enable = function(value) {\n      if(arguments.length) {\n        enabled = !!value;\n      }\n      return enabled;\n    };\n\n    this.setSessionTimeout = function(timeout) {\n      sessionTimeout = timeout || AV_IDLE.INTERVALS.SESSION;\n    };\n\n    this.setIdleTimeout = function(timeout) {\n      idleTimeout = timeout || AV_IDLE.INTERVALS.IDLE;\n    };\n\n    this.setPingTimeout = function(timeout) {\n      pingTimeout = timeout || AV_IDLE.INTERVALS.PING;\n    };\n\n    this.setPingUrl = function(url) {\n      pingUrl = url || AV_IDLE.URLS.PING;\n    };\n\n    this.$get = function(AV_IDLE, $log, $document, $rootScope, $timeout, avThrottle, $q, $injector) {\n\n      var AvIdle = function() {\n\n        // $timeout references\n        this._idleTimer = null;\n        this._sessionTimer = null;\n        this._pingTimer = null;\n        this._keepAlive = null;\n\n        // flag used to track if the if user is idle or session expired\n        this.idleActive = false;\n        this.sessionActive = false;\n\n        this.listeners = [];\n\n        this.init();\n\n      };\n\n      var proto = AvIdle.prototype;\n\n      proto.init = function() {\n\n        if(!enabled) {\n          this.stop();\n          return;\n        }\n\n        this.start();\n      };\n\n      proto.start = function() {\n\n        $log.info('avIdle start');\n\n        var self = this;\n        var listener;\n\n        !sessionTimeout && this.setSessionTimeout();\n        !idleTimeout && this.setIdleTimeout();\n        !pingTimeout && this.setPingTimeout();\n        !pingUrl && this.setPingUrl();\n        !redirectUrl && this.setRedirectUrl();\n\n        $rootScope.$on('$destroy', function() {\n          self.stop();\n        });\n\n        $document.find('body').on(AV_IDLE.EVENTS.HUMAN, function(event) {\n          self.onEvent(event);\n        });\n\n        listener = $rootScope.$on(AV_IDLE.EVENTS.MACHINE, function(event, oldUrl, newUrl) {\n          if(oldUrl !== newUrl) {\n            self.onEvent(event);\n          }\n        });\n        this.listeners.push(listener);\n\n        $rootScope.$on(AV_IDLE.EVENTS.SESSION_TIMEOUT_REDIRECT, function() {\n          document.location.href = redirectUrl;\n        });\n\n        this.startIdleTimer();\n        this.startSessionTimer();\n      };\n\n      proto.stop = function() {\n\n        $document.find('body').off(AV_IDLE.EVENTS.HUMAN);\n\n        // turns off Angular event listeners @see http://stackoverflow.com/a/14898795\n        _.each(this.listeners, function(listener) {\n          listener();\n        });\n\n        this.stopPing();\n        this.stopSessionTimer();\n        this.stopIdleTimer();\n      };\n\n      proto.isEnabled = function() {\n        return enabled;\n      };\n\n      proto.enable = function(value) {\n        if(arguments.length) {\n          enabled = !!value;\n        }\n\n        return this;\n      };\n\n      proto.setSessionTimeout = function(timeout) {\n        sessionTimeout = timeout || AV_IDLE.INTERVALS.SESSION;\n        return this;\n      };\n\n      proto.setIdleTimeout = function(timeout) {\n        idleTimeout = timeout || AV_IDLE.INTERVALS.IDLE;\n        return this;\n      };\n\n      proto.setPingTimeout = function(timeout) {\n        pingTimeout = timeout || AV_IDLE.INTERVALS.PING;\n        return this;\n      };\n\n      proto.setPingUrl = function(url) {\n        pingUrl = url || AV_IDLE.URLS.PING;\n        return this;\n      };\n\n      proto.setRedirectUrl = function(url) {\n        redirectUrl = url || AV_IDLE.URLS.HOME;\n        return this;\n      };\n\n      proto.response = function(response) {\n\n        if(this.isApiRequest(response)) {\n          this.startSessionTimer();\n        }\n\n        return response;\n      };\n\n      proto.isApiRequest = function(response) {\n        return response && response.config && response.config.api;\n      };\n\n      proto.responseError = function(response) {\n\n        if(this.isApiRequest(response) && response.status !== 401) {\n          this.startSessionTimer();\n        }\n\n        if(this.isApiRequest() && response.status === 401) {\n          this.stopPing();\n        }\n\n        return $q.reject(response);\n      };\n\n      proto.startSessionTimer = function() {\n\n        var self = this;\n\n        this.stopSessionTimer();\n\n        var later = function() {\n          $log.info('avIdle session has TIMED OUT');\n          self.stop();\n          $rootScope.$broadcast(AV_IDLE.EVENTS.SESSION_TIMEOUT_ACTIVE);\n        };\n\n        $log.info('avIdle session timer has STARTED');\n        this._sessionTimer = $timeout(later, sessionTimeout, false);\n\n      };\n\n      proto.stopSessionTimer = function() {\n        $log.info('avIdle session timer has STOPPED');\n        $timeout.cancel(this._sessionTimer);\n      };\n\n      proto.startIdleTimer = function() {\n\n        var self = this;\n\n        this.stopIdleTimer();\n\n        var later = function() {\n          self.stopIdleTimer();\n          $log.info('avIdle is IDLING');\n          $rootScope.$broadcast(AV_IDLE.EVENTS.IDLE_ACTIVE);\n        };\n\n        $log.info('avIdle idle timer has STARTED');\n        this._idleTimer = $timeout(later, idleTimeout, false);\n      };\n\n      proto.stopIdleTimer = function() {\n        $log.info('avIdle idle timer has STOPPED');\n        $timeout.cancel(this._idleTimer);\n      };\n\n      proto.startPing = function() {\n\n        if(!this._keepAlive) {\n          $log.info('avIdle ping timer has STARTED');\n          this._keepAlive = avThrottle(this.keepAlive, pingTimeout, {context: this});\n        }\n\n        this._pingTimer = this._keepAlive();\n      };\n\n      proto.stopPing = function() {\n        $log.info('avIdle ping timer has STOPPED');\n        if(this._pingTimer) {\n          $timeout.cancel(this._pingTimer);\n        }\n      };\n\n      proto.keepAlive = function() {\n\n        // destroy the reference to that a new throttle gets created upon\n        // next user or system event\n        this._keepAlive = null;\n        var $http = $injector.get('$http');\n\n        $http.get(pingUrl, {\n          cache: false,\n          api: true\n        }).success(function() {\n          $log.info('avIdle keep-alive SUCCESS');\n        }).error(function() {\n          $log.error('avIdle keep-alive FAILURE');\n        });\n      };\n\n      proto.onEvent = function() {\n        this.startIdleTimer();\n        this.startPing();\n      };\n\n      return new AvIdle();\n\n    };\n\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avIdleInterceptor', function(avIdle) {\n    return {\n      response: function(response) {\n        return avIdle.response(response);\n      },\n      responseError: function(response) {\n        return avIdle.responseError(response);\n      }\n    };\n\n  });\n\n  availity.core.config(function($httpProvider) {\n    $httpProvider.interceptors.push('avIdleInterceptor');\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.value('avValConfig', {\n    classes: {\n      valid: 'ng-valid',\n      invalid: 'ng-invalid',\n      dirty: 'ng-dirty',\n      pristine: 'ng-pristine',\n      touched: 'ng-touched',\n      untouched: 'ng-untouched',\n      submitted: 'ng-submitted'\n    },\n    validators: [\n      'avValPattern',\n      'avValSize',\n      'avValRequired',\n      'avValDateRange',\n      'avValDate',\n      'avValPhone',\n      'avValEmail',\n      'avValNpi'\n    ]\n  });\n\n  availity.core.constant('AV_VAL', {\n    EVENTS: {\n      REVALIDATE: 'av:val:revalidate',\n      SUBMITTED: 'av:val:submitted',\n      FAILED: 'av:val:failed',\n      RESET: 'av:val:reset'\n    },\n    DEBOUNCE: 800,\n    DATE_FORMAT: {\n      SIMPLE: 'MM/DD/YYYY'\n    },\n    PATTERNS: {\n      ALPHA_ONLY: /[^A-Za-z]+/g,\n      NUMERIC_ONLY: /[^0-9]+/g\n    }\n  });\n\n  availity.core.provider('avVal', function() {\n\n    var validators = [];\n    var rules = {};\n    var services = {};\n\n    this.addRules = function(_rules) {\n      rules = angular.extend({}, rules, _rules);\n      return rules;\n    };\n\n    this.addValidators = function(_validators) {\n      validators = validators.concat(_validators);\n      return validators;\n    };\n\n    this.$get = function($injector, $rootScope, $http, $log, avValConfig, AV_VAL) {\n\n      var AvValidation = function() {\n        this.initValidators();\n      };\n\n      var proto = AvValidation.prototype;\n\n      proto.initValidators = function() {\n        var self = this;\n\n        validators = avValConfig.validators.concat(validators);\n\n        angular.forEach(validators, function(name) {\n          self.addValidator(name);\n        });\n\n      };\n\n      proto.addValidator = function(name) {\n        var validator = $injector.get(name);\n        services[validator.name] = validator;\n      };\n\n      proto.addRules = function(_rules) {\n        rules = angular.extend({}, rules, _rules);\n        $rootScope.$broadcast(AV_VAL.EVENTS.REVALIDATE);\n      };\n\n      proto.validate = function(key, element, value, ruleName) {\n\n        var ruleConfig = rules[key];\n        if(!ruleConfig) {\n          $log.error('Failed to get rules key [' + key + '].  Forms must be tagged with a rules set name for validation to work.');\n          return;\n        }\n\n        var contraints = ruleConfig[ruleName];\n        if(!contraints) {\n          $log.info('Rule named [' + ruleName + '] could not be found in the current schema.');\n          contraints = [];\n        }\n\n        var el = element[0];\n        var results  = [];\n        var violations = [];\n        var _valid = true;\n\n        angular.forEach(contraints, function(rule, contraintName) {\n\n          if(!rule) {\n            // when extended rule sets, a user can pass nulls to cancel out a rule so if\n            // one doesn't exist just continue\n            return;\n          }\n\n          var validator = services[contraintName];\n\n          if(angular.isUndefined(validator)) {\n            $log.warn('No validator defined for `' + name + '`');\n            return;\n          }\n\n          var valid = validator.validate(value, rule, element);\n\n          var validationResult = {\n            valid: valid,\n            ruleName: ruleName,\n            contraintName: contraintName,\n            value: value,\n            message: rule.message,\n            field: el.name || el.id\n          };\n\n          var result = angular.extend({}, rule, validationResult);\n\n          results.push(result);\n          if(!valid) {\n            violations.push(validationResult);\n          }\n          _valid = _valid && valid;\n\n        });\n\n        return {\n          isValid: _valid,\n          all: results, // all the constraint results\n          violations: violations\n        };\n\n      };\n\n      return new AvValidation();\n\n    };\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValUtils', function() {\n\n    return {\n\n      isDefined: function(value) {\n        return angular.isDefined(value) && value !== '' && value !== null;\n      },\n\n      isEmpty: function(value) {\n        return !this.isDefined(value) || $.trim(value) === '';\n      }\n    };\n\n  });\n})(window);\n\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValSize', function(avValUtils) {\n\n    var validator =  {\n\n      name: 'size',\n\n      validate: function(value, rule) {\n\n        var min = rule.min || 0;\n        var max = rule.max;\n        var type = rule.type ? rule.type.toLowerCase() : 'text';\n\n        if(_.isNull(value) || _.isUndefined(value)) {\n          value = '';\n        }\n\n        if(type === 'text') {\n          value = value + '';\n          return  avValUtils.isEmpty(value) || value.length >= min && (max === undefined || value.length <= max);\n        }\n\n        // ... must be a Number\n        if(!_.isNumber(value) && /^\\d+$/.test(value)) {\n          value = parseInt(value, 10);\n        }\n\n        return avValUtils.isEmpty(value) || value >= min && (max === undefined || value <= max);\n\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValPattern', function(avValUtils) {\n\n    var validator =  {\n      name: 'pattern',\n      REGEX: /^\\/(.*)\\/([gim]*)$/, //regular expression to test a regular expression\n      asRegExp: function(pattern) {\n        var match;\n\n        if(pattern.test) {\n          return pattern;\n        } else {\n          match = pattern.match(validator.REGEX);\n          if(match) {\n            return new RegExp(match[1], match[2]);\n          } else {\n            throw ('Expected ' + pattern + ' to be a RegExp');\n          }\n        }\n      },\n      validate: function(value, rule) {\n        var values = _.isArray(rule.value) ? rule.value : [rule.value];\n\n        var valid = false;\n\n        _.each(values, function(expresion) {\n          var pattern = validator.asRegExp(expresion);\n          if(avValUtils.isEmpty(value) || pattern.test(value)) {\n            valid = true;\n          }\n        });\n\n        return valid;\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValRequired', function(avValUtils) {\n\n    var validator =  {\n      name: 'required',\n      validate: function(value, rule, element) {\n\n        // Using ngModelController.$isEmpty for required checks.  A form component being empty is dependent on the\n        // type of field:\n        //\n        //    - radio\n        //    - checkbox\n        //    - text\n        //    - lists\n        //\n        // You can override $isEmpty for input directives whose concept of being empty is different to the\n        // default. Radio and checkboxes directive do this because in its case a value of `false`\n        // implies empty.\n        //\n        var ctrl = element && element.data('$ngModelController');\n        if(ctrl) {\n          return !ctrl.$isEmpty(value);\n        }\n\n        return !avValUtils.isEmpty(value);\n\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDateRange', function(AV_VAL, avValUtils) {\n\n    var validator = {\n\n      name: 'dateRange',\n\n      getStartDate: function(start) {\n        return validator.setMin(moment().add(start.value, start.units));\n      },\n\n      getEndDate: function(end) {\n        return validator.setMax(moment().add(end.value, end.units) );\n      },\n\n      setMin: function(value) {\n\n        // [fix]: if time is provided this may cause issues.\n        value.set('hours', 0);\n        value.set('minutes', 0);\n        value.set('seconds', 0);\n\n        return value;\n      },\n\n      setMax: function(value) {\n\n        // [fix]: if time is provided this may cause issues.\n        value.set('hours', 23);\n        value.set('minutes', 59);\n        value.set('seconds', 59);\n\n        return value;\n      },\n\n      validation: function(value, rules) {\n\n        var date;\n        var startDate;\n        var endDate;\n\n        date = moment(value, rules.format || AV_VAL.DATE_FORMAT.SIMPLE);\n        date.set('hours', 0);\n        date.set('minutes', 0);\n        date.set('seconds', 0);\n\n        if(!avValUtils.isEmpty(rules.start.units) && !avValUtils.isEmpty(rules.end.units)) {\n          startDate = validator.getStartDate(rules.start);\n          endDate = validator.getEndDate(rules.end);\n        } else {\n          startDate = moment(rules.start.value, rules.format);\n          endDate = validator.setMax(moment(rules.end.value, rules.format));\n        }\n        return date.isValid() && date.isBetween(startDate, endDate, 'day') || date.isSame(startDate, 'day') || date.isSame(endDate, 'day');\n      },\n\n      validate: function(value, rule) {\n        return avValUtils.isEmpty(value) || validator.validation(value, rule);\n      }\n\n    };\n\n    return validator;\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDate', function(AV_VAL, avValUtils) {\n\n    var validator = {\n      name: 'dateFormat',\n      validate: function(value, rules) {\n        var format = rules && rules.format ? rules.format : AV_VAL.DATE_FORMAT.SIMPLE;\n        return avValUtils.isEmpty(value) || moment(value, format, true).isValid();\n      }\n    };\n\n    return validator;\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValNpi', function(avValUtils) {\n\n\n    var validator =  {\n\n      name: 'npi',\n\n      INTEGER_REGEX:  /^\\d*$/,\n\n      validate: function(value) {\n\n        var npi = value || '';\n\n        if(avValUtils.isEmpty(npi)) {\n          return true;\n        }\n\n        if (!validator.INTEGER_REGEX.test(npi) || npi.length !== 10) {\n          return false;\n        }\n\n        var firstDigit = npi.charAt(0);\n        if(!('1' === firstDigit || '2' === firstDigit || '3' === firstDigit || '4' === firstDigit)) {\n          return false;\n        }\n\n        var digit = parseInt(npi.charAt(9), 10);\n        npi = npi.substring(0, 9);\n        npi = \"80840\" + npi;\n\n        var alternate = true;\n        var total = 0;\n\n        for (var i = npi.length; i > 0; i--) {\n          var next = parseInt(npi.charAt(i-1), 10);\n          if (alternate) {\n            next = next*2;\n            if (next > 9) {\n              next = (next % 10) + 1;\n            }\n          }\n          total += next;\n          alternate = !alternate;\n        }\n\n        var roundUp = Math.ceil(total / 10) * 10;\n        var calculatedCheck = roundUp - total;\n\n        if (calculatedCheck !== digit) {\n          return false;\n        }\n\n        return true;\n      }\n\n    };\n\n    return validator;\n\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValPhone', function(avValPattern) {\n\n    var PHONE_PATTERN = /^([0-9][\\.\\-]?)?[(]{0,1}[0-9]{3}[)\\.\\- ]{0,1}[0-9]{3}[\\.\\- ]{0,1}[0-9]{4}$/;\n\n    var validator =  {\n      name: 'phone',\n      validate: function(value, rule) {\n        return avValPattern.validate(value, angular.extend({}, rule, { value: PHONE_PATTERN }));\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValEmail', function(avValPattern) {\n\n    var EMAIL_PATTERN = /[a-z0-9!#$%&'*+\\/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+\\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n\n    var validator =  {\n      name: 'email',\n      validate: function(value, rule) {\n        return avValPattern.validate(value, angular.extend({}, rule, { value: EMAIL_PATTERN }));\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_GLOBALS', {\n    REGIONS: [\n      {\n        'name': 'Alabama',\n        'code': 'AL'\n      },\n      {\n        'name': 'Alaska',\n        'code': 'AK'\n      },\n      {\n        'name': 'Arizona',\n        'code': 'AZ'\n      },\n      {\n        'name': 'Arkansas',\n        'code': 'AR'\n      },\n      {\n        'name': 'California',\n        'code': 'CA'\n      },\n      {\n        'name': 'Colorado',\n        'code': 'CO'\n      },\n      {\n        'name': 'Connecticut',\n        'code': 'CT'\n      },\n      {\n        'name': 'Delaware',\n        'code': 'DE'\n      },\n      {\n        'name': 'District Of Columbia',\n        'code': 'DC'\n      },\n      {\n        'name': 'Florida',\n        'code': 'FL'\n      },\n      {\n        'name': 'Georgia',\n        'code': 'GA'\n      },\n      {\n        'name': 'Hawaii',\n        'code': 'HI'\n      },\n      {\n        'name': 'Idaho',\n        'code': 'ID'\n      },\n      {\n        'name': 'Illinois',\n        'code': 'IL'\n      },\n      {\n        'name': 'Indiana',\n        'code': 'IN'\n      },\n      {\n        'name': 'Iowa',\n        'code': 'IA'\n      },\n      {\n        'name': 'Kansas',\n        'code': 'KS'\n      },\n      {\n        'name': 'Kentucky',\n        'code': 'KY'\n      },\n      {\n        'name': 'Louisiana',\n        'code': 'LA'\n      },\n      {\n        'name': 'Maine',\n        'code': 'ME'\n      },\n      {\n        'name': 'Maryland',\n        'code': 'MD'\n      },\n      {\n        'name': 'Massachusetts',\n        'code': 'MA'\n      },\n      {\n        'name': 'Michigan',\n        'code': 'MI'\n      },\n      {\n        'name': 'Minnesota',\n        'code': 'MN'\n      },\n      {\n        'name': 'Mississippi',\n        'code': 'MS'\n      },\n      {\n        'name': 'Missouri',\n        'code': 'MO'\n      },\n      {\n        'name': 'Montana',\n        'code': 'MT'\n      },\n      {\n        'name': 'Nebraska',\n        'code': 'NE'\n      },\n      {\n        'name': 'Nevada',\n        'code': 'NV'\n      },\n      {\n        'name': 'New Hampshire',\n        'code': 'NH'\n      },\n      {\n        'name': 'New Jersey',\n        'code': 'NJ'\n      },\n      {\n        'name': 'New Mexico',\n        'code': 'NM'\n      },\n      {\n        'name': 'New York',\n        'code': 'NY'\n      },\n      {\n        'name': 'North Carolina',\n        'code': 'NC'\n      },\n      {\n        'name': 'North Dakota',\n        'code': 'ND'\n      },\n      {\n        'name': 'Ohio',\n        'code': 'OH'\n      },\n      {\n        'name': 'Oklahoma',\n        'code': 'OK'\n      },\n      {\n        'name': 'Oregon',\n        'code': 'OR'\n      },\n      {\n        'name': 'Pennsylvania',\n        'code': 'PA'\n      },\n      {\n        'name': 'Rhode Island',\n        'code': 'RI'\n      },\n      {\n        'name': 'South Carolina',\n        'code': 'SC'\n      },\n      {\n        'name': 'South Dakota',\n        'code': 'SD'\n      },\n      {\n        'name': 'Tennessee',\n        'code': 'TN'\n      },\n      {\n        'name': 'Texas',\n        'code': 'TX'\n      },\n      {\n        'name': 'Utah',\n        'code': 'UT'\n      },\n      {\n        'name': 'Vermont',\n        'code': 'VT'\n      },\n      {\n        'name': 'Virginia',\n        'code': 'VA'\n      },\n      {\n        'name': 'Washington',\n        'code': 'WA'\n      },\n      {\n        'name': 'West Virginia',\n        'code': 'WV'\n      },\n      {\n        'name': 'Wisconsin',\n        'code': 'WI'\n      },\n      {\n        'name': 'Wyoming',\n        'code': 'WY'\n      }\n    ]\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.provider('avAnalyticsConfig', function(AV_ANALYTICS) {\n\n    var config = {\n      VIRTUAL_PAGE_TRACKING: true,\n      SERVICES: {\n        PIWIK: 'avPiwikAnalytics',\n        SPLUNK: 'avSplunkAnalytics'\n      },\n      EVENTS: {\n        PAGE: '$locationChangeSuccess',\n        DEFAULT: 'click'\n      },\n      PRE_FIX: /^avAnalytics(.*)$/,\n      // should ignore these since they are part of the directives API\n      IGNORE: ['avAnalyticsOn', 'avAnalyticsIf'],\n      ENV: { // not sure if this should live here\n        PROD: {\n          DOMAIN: 'apps.availity.com',\n          URL: 'https://piwik.availity.com/piwik/'\n        },\n        QA: {\n          URL: 'https://qa-piwik.availity.com/piwik/'\n        }\n      }\n    };\n\n    this.set = function(options) {\n      _.merge(config, options);\n      // TODO: remove when AV_ANALYTICS is no longer supported\n      // ensures avAnalyticsConfig and AV_ANALYTICS constant stay in sync\n      _.merge(AV_ANALYTICS, config);\n    };\n\n    this.$get = function(AV_ANALYTICS) {\n      /*\n      * TODO: remove merge when AV_ANALYTICS is no longer supported.\n      * Applies AV_ANALYTICS overrides to avAnalyticsConfig provider.\n      */\n      return angular.copy(_.merge(config, AV_ANALYTICS));\n    };\n\n    this.set(AV_ANALYTICS);\n  });\n\n  // DEPRECATED: use avAnalyticsConfig\n  availity.core.constant('AV_ANALYTICS', {});\n\n  availity.core.provider('avAnalytics', function(avAnalyticsConfigProvider) {\n\n    var avAnalyticsConfig = avAnalyticsConfigProvider.$get();\n    var plugins = [];\n    var virtualPageTracking = avAnalyticsConfig.VIRTUAL_PAGE_TRACKING;\n    var appId;\n\n    this.registerPlugins = function(_plugins) {\n\n      if(angular.isString(_plugins)) {\n        _plugins = [_plugins];\n      }\n\n      if(_.isArray(_plugins)) {\n        plugins = _plugins;\n      } else {\n        throw new Error('AvAnalytics.registerPlugins() expects a string or an array.');\n      }\n\n      return plugins;\n    };\n\n    this.setVirtualPageTracking = function(value) {\n      if(arguments.length) {\n        virtualPageTracking = !!value;\n      }\n    };\n\n    this.isVirtualPageTracking = function() {\n      return virtualPageTracking;\n    };\n\n    this.setAppID = function(id) {\n      appId = id;\n      return appId;\n    };\n\n    this.$get = function($injector, $q, $log, $rootScope, $location) {\n\n      var AvAnalytics = function() {\n\n        var self = this;\n        this.services = {};\n\n        if(!plugins || plugins.length === 0) {\n          plugins = [avAnalyticsConfig.SERVICES.PIWIK, avAnalyticsConfig.SERVICES.SPLUNK];\n        }\n\n        angular.forEach(plugins, function(plugin) {\n\n          try {\n            self.services[plugin] = $injector.get(plugin);\n          } catch(err) {\n            $log.error('Could not load `{0}` plugin', [plugin]);\n          }\n        });\n\n      };\n\n      var proto = AvAnalytics.prototype;\n\n      proto.init = function() {\n\n        var self = this;\n\n        if(this.isVirtualPageTracking()) {\n          $rootScope.$on(avAnalyticsConfig.EVENTS.PAGE, function() {\n            self.trackPageView($location.absUrl());\n          });\n        }\n\n        angular.forEach(this.services, function(handler) {\n          if(handler.isEnabled() && handler.init) {\n            handler.init();\n          }\n        });\n\n      };\n\n      proto.trackEvent = function(properties) {\n        var promises = [];\n\n        angular.forEach(this.services, function(handler) {\n          var promise = handler.trackEvent(properties);\n          promises.push(promise);\n        });\n\n        return $q.all(promises);\n      };\n\n      proto.getAppId = function() {\n        return appId;\n      };\n\n      proto.isVirtualPageTracking = function() {\n        return virtualPageTracking;\n      };\n\n      proto.trackPageView = function(url) {\n\n        var promises = [];\n\n        angular.forEach(this.services, function(handler) {\n          var promise = handler.trackPageView(url);\n          promises.push(promise);\n        });\n\n        return $q.all(promises);\n      };\n\n      return new AvAnalytics();\n    };\n\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avAnalyticsUtils', function(avAnalyticsConfig, $log) {\n\n    var AnalyticsUtils = function() {};\n\n    var proto = AnalyticsUtils.prototype;\n\n    proto.getProperties = function(attributes) {\n\n      var self = this;\n      var props = {};\n\n      _.forEach(attributes, function(value, key) {\n        if(self.isValidAttribute(key) && self.isNotIgnored(key)) {\n          var result = self.getAttribute(key, value);\n          props[result.key] = result.value;\n        }\n      });\n\n      return props;\n    };\n\n    // Function detects external links in order to allow the analytics framework to run\n    // before the browser follows a link.\n    //\n    //    - target=\"_self\" - This opens an anchor in the same frame\n    //    - target=\"_parent\" - Opens the in the next level up of a frame if they were nested to inside one another\n    //    - target=\"_top\" - Opens the link as top document in the browser window\n    //    - target=\"_blank\" - Opens link in new tab new tab\n    //\n    proto.isExternalLink = function(attrs) {\n      return attrs.href && !attrs.ngClick;\n    };\n\n    proto.isNotIgnored = function(key) {\n      var ignored = _.includes(avAnalyticsConfig.IGNORE, key);\n      return !ignored;\n    };\n\n    proto.isValidAttribute = function(key) {\n      return avAnalyticsConfig.PRE_FIX.test(key);\n    };\n\n    proto.lowercase = function(str) {\n      return str.substr(0, 1).toLowerCase() + str.substr(1);\n    };\n\n    proto.getAttribute = function(key, value) {\n      var simpleKey = key.match(avAnalyticsConfig.PRE_FIX);\n\n      if(simpleKey && simpleKey[1]) {\n        return {\n          key: this.lowercase(simpleKey[1]),\n          value: value\n        };\n      }\n    };\n\n    proto.toNum = function(value) {\n      var parsed = parseInt(value, 10);\n      value = isNaN(parsed) ? 0 : parsed;\n      return value;\n    };\n\n    proto.isValid = function(trackingValues) {\n      var valid = true;\n\n      if(trackingValues.value || trackingValues.value === 0) {\n        delete trackingValues.value;\n      }\n\n      _.forEach(trackingValues, function(key, value) {\n        if(availity.isBlank(value) || _.isUndefined(value)) {\n          $log.warn('The analytic tracking value for ' + key.toUpperCase() +' is not defined.');\n          valid = false;\n        }\n      });\n\n      return valid;\n    };\n\n    return new AnalyticsUtils();\n  });\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avSplunkAnalytics', function($log, avLogMessagesResource, $location) {\n\n    var SplunkAnalyticsService = function() {};\n\n    var proto = SplunkAnalyticsService.prototype;\n\n    proto.trackEvent = function(properties) {\n      properties.url = $location.$$absUrl || 'N/A';\n      properties.level = properties.level || 'info';\n\n      return avLogMessagesResource[properties.level](properties);\n    };\n\n    proto.trackPageView  = function(url) {\n\n      var properties = {\n        event: 'page',\n        level: 'info',\n        url: url || $location.$$absUrl()\n      };\n\n      return avLogMessagesResource[properties.level](properties);\n    };\n\n    proto.isEnabled = function() {\n      return true;\n    };\n\n    return new SplunkAnalyticsService();\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.provider('avPiwikAnalytics', function() {\n\n    var self;\n    var siteId;\n    var enabled = false;\n    var customVariables = [];\n\n    this.enabled = function(_enabled) {\n      enabled = !!_enabled;\n    };\n\n    // can not push these items to `_paq` because it is defined\n    // after page has loaded\n    this._setCustomVariable = function(index, valueName, value, scope) {\n\n      if(!index || isNaN(index)) {\n        throw new Error('index must be a number');\n      } else if(!valueName) {\n        throw new Error('valueName must be declared');\n      } else {\n        customVariables.push(['setCustomVariable', index, valueName, value, scope]);\n      }\n    };\n\n    this.setSiteID = function(_siteID) {\n      this.enabled(true);\n      siteId = _siteID;\n    };\n\n    // allow the user to pass a array of visit variables\n    this.setVisitVariables = function(items) {\n      _.forEach(items, function(item) {\n        self._setCustomVariable(item[0], item[1], item[2], 'visit');\n      });\n    };\n\n    this.setPageVariables = function(index, name, value) {\n      this._setCustomVariable(index, name, value, 'page');\n    };\n\n    this.$get = function(avAnalyticsUtils, avUsersResource, avAnalyticsConfig, $injector, $log, $q, $document, $location) {\n\n      var AvPiwikAnalytics = function() {\n        window._paq = window._paq || [];\n      };\n\n      var proto = AvPiwikAnalytics.prototype;\n\n      proto.trackEvent = function(properties) {\n\n        if(!window._paq) {\n          $log.warn('Piwik object `_paq` not found in global scope');\n          return $q.when(false);\n        }\n\n        // http://piwik.org/docs/event-tracking/\n        //\n        // PAQ requires that eventValue be an integer.\n        // Check to make sure value is a number if not convert it to 0.\n        //\n        if(properties.value) {\n          properties.value = avAnalyticsUtils.toNum(properties.event);\n        }\n\n        // check to make sure that data being sent to piwik is a string and not null, empty or undefined\n        if(!avAnalyticsUtils.isValid(properties)) {\n          $log.warn('Invalid properties being passed. Tracking info will not be sent.');\n          return $q.when(false);\n        }\n\n        return $q.when(window._paq.push(['trackEvent', properties.category, properties.action || properties.event, properties.label, properties.value]));\n      };\n\n      proto.trackPageView  = function(url) {\n\n        if(!window._paq) {\n          $log.warn('Piwik object `_paq` not found in global scope');\n          return $q.when(false);\n        }\n\n        return $q.when([\n          window._paq.push(['setCustomUrl', url]),\n          window._paq.push(['trackPageView', url])]\n        );\n\n      };\n\n      proto.init = function() {\n\n        avUsersResource.me().then(function(user) {\n          window._paq.push(['setUserId', user.id]);\n          // self.trackPageView(); //send another page track when the user data loads\n        });\n\n        if(!_.isFinite(siteId)) {\n          $log.warn('Invalid Piwik Site Id.  Piwik analytics has been disabled.');\n          return;\n        }\n\n        var url;\n\n\n        // Not sure if this is the correct way to call in avAnalyticsConfig\n        // only object in provider: var config = { DOMAIN: 'app.availity.com' }\n        // I believe I have to get the DOMAIN value, because avAnalyticsConfig should return an object.\n        if($location.$$host === avAnalyticsConfig.ENV.PROD.DOMAIN) {\n          url = avAnalyticsConfig.ENV.PROD.URL;\n        } else {\n          url = avAnalyticsConfig.ENV.QA.URL;\n        }\n\n        window._paq.push(['enableLinkTracking']);\n        window._paq.push(['setTrackerUrl', url + 'piwik.php']);\n        window._paq.push(['setSiteId', siteId]);\n\n        _.forEach(customVariables, function(variable) {\n          window._paq.push(variable);\n        });\n\n        $.getScript(url + 'piwik.js', function() {\n\n        });\n\n      };\n\n\n      proto.isEnabled = function() {\n        return enabled && siteId;\n      };\n\n      return new AvPiwikAnalytics();\n    };\n\n  });\n\n})(window);\n","/* global TraceKit */\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_EXCEPTIONS', {\n    MESSAGES: {\n      NOT_APPLICABLE: 'N/A'\n    },\n    TYPES: {\n      EXCEPTION: 'exception'\n    }\n  });\n\n  availity.core.provider('avExceptionAnalytics', function() {\n\n    var _enabled = true;\n    var appId;\n\n    this.enabled = function(enabled) {\n      _enabled = !!enabled;\n    };\n\n    this.setAppId = function(_id) {\n      appId = _id;\n    };\n\n    this.$get = function(avLogMessagesResource, $location, AV_EXCEPTIONS) {\n\n      var AvExceptionAnalytics = function() {\n\n      };\n\n      var proto = AvExceptionAnalytics.prototype;\n\n      proto.init = function() {\n\n        var self = this;\n\n        if(!_enabled) {\n          return;\n        }\n\n        TraceKit.remoteFetching = false;\n        TraceKit.surroundingLinesToCollect = 11;\n\n        // subscribe() hooks into window.error\n        TraceKit.report.subscribe(function(stacktrace) {\n          self.onError(stacktrace);\n        });\n\n      };\n\n      proto.prettyPrint = function(stacktrace) {\n\n        var message = '';\n\n        var length = stacktrace.stack.length;\n\n        for(var i = 0; i < length; i++) {\n          message += [\n            '[' + _.padLeft(i + '', 2, '0') + '] ',\n            stacktrace.stack[i].func,\n            ' ',\n            stacktrace.stack[i].url,\n            ':',\n            stacktrace.stack[i].line,\n            ':',\n            stacktrace.stack[i].column,\n            i + 1 < length ? '\\n' : ''\n          ].join('');\n\n        }\n\n        return message;\n      };\n\n      proto.onError = function(stacktrace) {\n\n        var userAgent = root.navigator && root.navigator.userAgent ? root.navigator.userAgent : AV_EXCEPTIONS.MESSAGES.NOT_APPLICABLE;\n\n        var message = {\n          errorDate: moment(new Date()).format('YYYY-MM-DDTHH:mm:ssZZ'),\n          errorName: stacktrace.name,\n          errorMessage: stacktrace.message,\n          errorStack: this.prettyPrint(stacktrace),\n          url: $location.$$absUrl,\n          appId: appId || AV_EXCEPTIONS.MESSAGES.NOT_APPLICABLE,\n          // appVersion: AV_EXCEPTIONS.MESSAGES.NOT_APPLICABLE,\n          userAgent: userAgent,\n          userLanguage: navigator.userLanguage,\n          referrer: document.referrer,\n          host: document.domain,\n          screenWidth: $(window).width(),\n          screenHeight: $(window).height(),\n          sdkVersion: availity.VERSION\n        };\n\n        return this.log(message);\n\n      };\n\n      proto.log = function(message) {\n        return avLogMessagesResource['error'](message);\n      };\n\n      proto.trackEvent = function(exception) {\n\n        if(!_enabled) {\n          return;\n        }\n\n        var stacktrace = TraceKit.computeStackTrace(exception);\n\n        return this.onError(stacktrace);\n\n      };\n\n      return new AvExceptionAnalytics();\n\n    };\n  });\n\n  availity.core.config(function($provide) {\n\n    $provide.decorator('$exceptionHandler', function($delegate, $injector) {\n      return function(exception, cause) {\n        $delegate(exception, cause);\n        var errorTacking = $injector.get('avExceptionAnalytics');\n        errorTacking.trackEvent(exception);\n      };\n    });\n\n  });\n\n  availity.core.run(function(avExceptionAnalytics) {\n    avExceptionAnalytics.init();\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity || {};\n\n  availity.analytics = angular.module('availity.config', ['ng', 'availity']);\n\n  availity.analytics.run(function(avAnalytics) {\n\n    avAnalytics.init();\n\n  });\n\n})(window);\n\n","// Issue: https://github.com/angular/angular.js/issues/11165\n// Polyfill: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\n//\n// This polyfill is needed because Angular calls toISOString()\n// when an request parameter is of type Date.  If this polyfill isn't present\n// the ajax call fails.\n//\n(function() {\n\n  'use strict';\n\n  var pad = function(number) {\n    if(number < 10) {\n      return '0' + number;\n    }\n    return number;\n  };\n\n  if(!Date.prototype.toISOString) {\n\n    Date.prototype.toISOString = function() {\n\n      return this.getUTCFullYear() +\n        '-' + pad(this.getUTCMonth() + 1) +\n        '-' + pad(this.getUTCDate()) +\n        'T' + pad(this.getUTCHours()) +\n        ':' + pad(this.getUTCMinutes()) +\n        ':' + pad(this.getUTCSeconds()) +\n        '.' + (this.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) +\n        'Z';\n    };\n  }\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_MESSAGES', {\n\n    EVENTS: {\n\n      MESSAGE: 'message', // post message window event\n      RESIZE: 'resize', // window resize event\n      UNLOAD: 'beforeunload',\n\n      AV_RESIZE: 'av:window:resize',\n      AV_RECEIVED: 'av:message:received',\n      AV_MAXIMIZE: 'nav:left:hide',  // @deprecated,\n      AV_MINIMIZE: 'nav:left:hide',  // @deprecated\n      // MAXIMIZE: 'av:window:maximize',\n      // MINIMIZE: 'av:window:minimize',\n      AV_LOGIN: 'av:login',\n      AV_LOGOUT: 'av:logout',\n      AV_SESSION_TIMEOUT: 'av:session:timeout'\n\n    },\n\n    RESIZE_DEBOUNCE: 400,\n\n    DOMAIN: /https?:\\/\\/([\\w\\d\\-]+\\.)?availity\\.(com|net)/,\n    LOCAL: /http:\\/\\/(localhost|127\\.0\\.0\\.1|0\\.0\\.0\\.0):(\\d+)/\n\n  });\n\n})(window);\n","/* global JSON:false */\n\n// https://github.com/kylewelsby/angular-post-message/blob/master/src/angular-post-message.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.provider('avMessages', function() {\n\n    var enabled = true;\n\n    this.enable = function(value) {\n\n      if(arguments.length) {\n        enabled = !!value;\n      }\n\n      return enabled;\n\n    };\n\n    this.$get = function($rootScope, $log, AV_MESSAGES) {\n\n      var AvMessages = function() {\n\n      };\n\n      var proto = AvMessages.prototype;\n\n      proto.init = function() {\n\n        var self = this;\n        var $window = $(window);\n\n        $window.on(AV_MESSAGES.EVENTS.MESSAGE, function(event) {\n          self.onMessage(event);\n        });\n\n        $window.on(AV_MESSAGES.EVENTS.RESIZE, function() {\n          self.onResize();\n        });\n\n        this.send(AV_MESSAGES.EVENTS.AV_MAXIMIZE);\n\n        $rootScope.$on('$destroy', function() {\n          self.destroy();\n        });\n\n        $window.on(AV_MESSAGES.EVENTS.UNLOAD, function() {\n          self.send(AV_MESSAGES.EVENTS.AV_MINIMIZE);\n        });\n\n      };\n\n      proto.destroy = function() {\n\n        $(window).off(AV_MESSAGES.EVENTS.MESSAGE);\n        $(window).off(AV_MESSAGES.EVENTS.RESIZE);\n        $(window).off(AV_MESSAGES.EVENTS.UNLOAD);\n\n      };\n\n      proto.onResize = function() {\n\n        var self = this;\n\n        var resize =  _.debounce(function() {\n\n          var height = $('html').height();\n          self.send({\n            event: AV_MESSAGES.EVENTS.AV_RESIZE,\n            height: height\n          });\n\n        }, AV_MESSAGES.RESIZE_DEBOUNCE);\n\n        resize();\n\n      };\n\n      proto.isDomain = function(url) {\n\n        if(AV_MESSAGES.DOMAIN.test(this.domain())) {\n          return AV_MESSAGES.DOMAIN.test(url);\n        }\n\n        return AV_MESSAGES.LOCAL.test(url);\n      };\n\n      proto.isEnabled = function() {\n        return enabled;\n      };\n\n      proto.onMessage = function(_event) {\n\n        var event = _event;\n\n        event = event.originalEvent || event;  // jQuery wraps in `originalEvent`\n\n        if(!event && !event.data) {\n          // no op\n          return;\n        }\n\n        // don't process messages emitted from same window\n        if(event.source === window) {\n          return;\n        }\n\n        if(!this.isDomain(event.origin)) {\n          $log.warn('avMessages rejected a cross domain message since it does not match an *.availity.com  or localhost');\n          return;\n        }\n\n\n        var data = event.data;\n\n        try {\n          data =  angular.fromJson(data);\n        } catch(err) {\n          $log.warn('avMessages.onMessage() failed to convert event to json payload');\n        }\n\n        if(_.isString(data)) {\n          event = data;\n          data = null;\n        }else {\n          event = data.event ? data.event : AV_MESSAGES.AV_RECEIVED;\n        }\n\n        $rootScope.$root.$broadcast(event, data);\n\n      };\n\n      proto.isIframe = function() {\n        return window.self !== window.parent;\n      };\n\n      proto.domain = function() {\n\n        var window = root;\n\n        if(window.location.origin) {\n          return window.location.origin;\n        }\n\n        if(window.location.hostname) {\n          return window.location.protocol + '//' + window.location.hostname + (window.location.port ? ':' + window.location.port : '');\n        }\n\n        return '*';\n\n      };\n\n      proto.send = function(payload) {\n\n        try {\n\n          var message  = _.isString(payload) ? payload : JSON.stringify(payload);\n          this.postMessage(message, this.domain());\n\n        } catch(err) {\n          $log.error('avMessages.send() ', err);\n        }\n      };\n\n      proto.postMessage = function(message, domain) {\n        window.parent.postMessage(message, domain);\n      };\n\n      return new AvMessages();\n\n    };\n\n  });\n\n  availity.core.run(function(avMessages) {\n\n    if(avMessages.isEnabled()) {\n      avMessages.init();\n    }\n\n  });\n\n})(window);\n\n"],"sourceRoot":"/source/"}