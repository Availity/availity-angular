{"version":3,"sources":["/source/index.js","/source/strings.js","/source/uuid.js","/source/urls.js","/source/print.js","/source/throttle.js","/source/logger.js","/source/logger-config.js","/source/polling.js","/source/api-factory.js","/source/api-users.js","/source/api-coverages.js","/source/api-configurations.js","/source/api-log-messages.js","/source/api-documents.js","/source/api-organizations.js","/source/api-codes.js","/source/api-user-permissions.js","/source/user-authorizations.js","/source/session.js","/source/idle.js","/source/idle-interceptor.js","/source/validator.js","/source/validator-utils.js","/source/validator-size.js","/source/validator-pattern.js","/source/validator-required.js","/source/validator-date-range.js","/source/validator-date-format.js","/source/globals.js","/source/analytics.js","/source/analytics-util.js","/source/analytics-splunk.js","/source/analytics-piwik.js","/source/analytics-exceptions.js","/source/date-polyfill.js","availity-angular.js"],"names":["root","availity","VERSION","MODULE","core","angular","module","originalModule","modules","name","deps","_","indexOf","Error","push","exports","window","_stringify","object","isBlank","str","test","uid","uuid","prefix","index","length","digit","charCodeAt","join","String","fromCharCode","unshift","REGEX_API_URL","getRelativeUrl","url","result","match","print","document","queryCommandSupported","execCommand","focus","constant","OPTIONS","wait","update","trailing","leading","factory","AV_THROTTLE","$timeout","fn","options","merge","THRESHOLD","isDefined","UPDATE","timer","context","this","args","arguments","apply","later","provider","_enabled","enabled","$get","$injector","AvLogger","$delegate","$log","proto","prototype","supplant","o","_supplant","a","b","r","replace","isObject","element","elemStr","isUndefined","constructor","toString","getFormattedTimestamp","date","getHours","getMinutes","getSeconds","getMilliseconds","_log","originalFn","hash","location","now","Date","message","supplantData","get","params","log","info","warn","debug","error","config","$provide","decorator","INTERVAL","MAX_ELAPSED_TIME","MAX_RETRY","DECAY","EVENTS","REGEX_URL","PollingServiceFactory","$rootScope","$q","AV_POLLING","AV_API","AvPollingService","pendingRequests","response","isAsyncResponse","onAsyncReponse","when","setDefaults","defaultOptions","pollingInterval","pollingDecay","pollingMaxInterval","pollingRetryCount","pollingStartTime","getTime","extend","responseError","reject","api","status","isFunction","headers","HEADERS","SERVER","LOCATION","deferred","defer","queueRequest","notify","promise","getUrl","self","_url","_config","method","pollingMaxRetry","_pollingDecay","cache","request","id","timeout","getPollingTimeout","retryRequest","pushRequest","popRequest","i","splice","isPollingMaxTimeout","elaspedTime","isElapsed","isMaxRetried","isPollable","_isTimeout","_isMax","cancel","increment","successCallback","resolve","errorCallback","$http","then","incrementCounter","incrementDecay","clearRequests","forEach","ID","STATUS","GLOBAL_ID","CLIENT","SESSION_ID","AUTH","OVERRIDE","CALLBACK_URL","CUSTOMER_ID","path","resourceGroup","version","level","suffix","ApiResourcesFactory","avPollingService","AvApiResource","isString","charAt","_getUrl","_getApiUrl","_createResponse","data","_request","afterCallback","success","_response","_promise","successResponse","call","errorResponse","notifyResponse","always","create","beforeCreate","afterCreate","afterGet","query","afterQuery","isNumber","beforeUpdate","afterUpdate","remove","afterRemove","UserServiceFactory","AvUsersResource","user","me","LogMessagesFactory","AvLogMessagesResource","buildRequest","entries","requestPayload","AvDocumentsResourceFactory","AvDocumentsResource","getContents","getContentsUrl","OrganizationResourceFactory","OrganizationResource","getOrganizations","organizations","AvCodesResourceFactory","AvCodesResource","getCodes","page","offset","list","q","results","codes","has","each","code","moreVal","totalCount","limit","more","AvUserPermissionsResourceFactory","AvUserPermissionsResource","sessionDate","moment","toISOString","axiUserPermissions","getPermissions","permissionIds","region","permissionId","AvUserAuthorizationsFactory","avUserPermissionsResource","AvUserAuthorizations","setRegion","setPermissionIds","isArray","isAuthorized","getPermission","permission","isAnyAuthorized","permissions","findWhere","undefined","_permissions","union","toPermissionMap","getPayers","organizationId","organization","resources","map","slice","key","toPermission","description","geographies","SESSION_TIMEOUT","NOT_AUTHORIZED","avUsersResource","AvSession","getUser","destroy","permisions","IDLE_INACTIVE","IDLE_ACTIVE","SESSION_TIMEOUT_ACTIVE","SESSION_TIMEOUT_REDIRECT","HUMAN","MACHINE","INTERVALS","PING","IDLE","SESSION","URLS","HOME","AV_IDLE","pingUrl","redirectUrl","sessionTimeout","idleTimeout","pingTimeout","enable","value","setSessionTimeout","setIdleTimeout","setPingTimeout","setPingUrl","$document","avThrottle","AvIdle","_idleTimer","_sessionTimer","_pingTimer","_keepAlive","idleActive","sessionActive","listeners","init","stop","start","listener","setRedirectUrl","$on","find","on","event","onEvent","oldUrl","newUrl","href","startIdleTimer","startSessionTimer","off","stopPing","stopSessionTimer","stopIdleTimer","isEnabled","isApiRequest","$broadcast","startPing","keepAlive","avIdle","$httpProvider","interceptors","classes","valid","invalid","dirty","pristine","touched","untouched","submitted","validators","REVALIDATE","SUBMITTED","FAILED","RESET","DEBOUNCE","DATE_FORMAT","SIMPLE","PATTERNS","ALPHA_ONLY","NUMERIC_ONLY","rules","services","addRules","_rules","addValidators","_validators","concat","avValConfig","AV_VAL","AvValidation","initValidators","addValidator","validator","validate","ruleName","ruleConfig","contraints","el","violations","_valid","rule","contraintName","validationResult","field","isValid","all","isEmpty","$","trim","avValUtils","min","max","type","toLowerCase","isNull","parseInt","REGEX","asRegExp","pattern","RegExp","values","expresion","getStartDate","setMin","add","units","getEndDate","end","setMax","set","validation","startDate","endDate","format","isBetween","isSame","REGIONS","VIRTUAL_PAGE_TRACKING","SERVICES","PIWIK","SPLUNK","PAGE","DEFAULT","PRE_FIX","IGNORE","ENV","PROD","URL","QA","AV_ANALYTICS","plugins","virtualPageTracking","appId","registerPlugins","_plugins","setVirtualPageTracking","setAppID","AvAnalytics","plugin","err","trackEvent","properties","promises","handler","getAppId","trackPageView","run","avAnalytics","$location","absUrl","AnalyticsUtils","getProperties","attributes","props","isValidAttribute","isNotIgnored","getAttribute","isExternalLink","attrs","ngClick","ignored","includes","lowercase","substr","simpleKey","toNum","parsed","isNaN","trackingValues","toUpperCase","avLogMessagesResource","SplunkAnalyticsService","$$absUrl","that","siteId","_setCustomVariable","valueName","scope","_paq","setSiteID","_siteID","setVisitVariables","items","item","setPageVariables","avAnalyticsUtils","$window","AvPiwikAnalytics","category","label","createScript","isFinite","$$host","script","createElement","target","getElementsByTagName","async","src","parentNode","insertBefore","MESSAGES","NOT_APPLICABLE","TYPES","EXCEPTION","setAppId","_id","AV_EXCEPTIONS","AvExceptionAnalytics","TraceKit","remoteFetching","surroundingLinesToCollect","report","subscribe","stacktrace","onError","prettyPrint","stack","padLeft","func","line","column","userAgent","navigator","errorDate","errorName","errorMessage","errorStack","userLanguage","referrer","host","domain","screenWidth","width","screenHeight","height","sdkVersion","exception","computeStackTrace","cause","errorTacking","avExceptionAnalytics","pad","number","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","toFixed"],"mappings":"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","file":"availity-angular.min.js","sourcesContent":["/*global module*/\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity || {};\n  availity.VERSION = 'v0.0.0';\n  availity.MODULE = 'availity';\n  availity.core = angular.module(availity.MODULE, ['ng']);\n\n  var originalModule = angular.module;\n  var modules = [];\n\n  angular.module = function(name, deps) {\n\n    if(deps && _.indexOf(modules, name) !== -1 ) {\n      throw new Error('redefining module: ' + name);\n    }\n\n    modules.push(name);\n\n    return originalModule(name, deps);\n  };\n\n  root.availity = availity;\n\n  if(typeof module !== 'undefined' && module.exports) {\n    module.exports = availity;\n  }\n\n})(window);\n\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/helper/makeString.js\n  availity._stringify = function(object) {\n    if(object === null) {\n      return '';\n    }\n    return '' + object;\n  };\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/isBlank.js\n  availity.isBlank = function(str) {\n    return (/^\\s*$/).test(availity._stringify(str));\n  };\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var uid = ['0', '0', '0'];\n\n  availity.uuid = function(prefix) {\n    var index = uid.length;\n    var digit;\n\n    while(index) {\n      index--;\n      digit = uid[index].charCodeAt(0);\n      if(digit === 57 /*'9'*/) {\n        uid[index] = 'A';\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n      if(digit === 90  /*'Z'*/) {\n        uid[index] = '0';\n      } else {\n        uid[index] = String.fromCharCode(digit + 1);\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n    }\n    uid.unshift('0');\n    return prefix ? prefix + uid.join('') : uid.join('');\n  };\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.REGEX_API_URL = /^.*?api.availity.com(.*)$/;\n\n  availity.getRelativeUrl = function(url) {\n    var result = url.match(availity.REGEX_API_URL);\n    if(result && result[1]) {\n      return '/api' + result[1];\n    }\n\n    return url;\n  };\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // https://github.com/jasonday/printThis/commit/66f9cbd0e3760767342eed4ef32cf8294417b227\n  availity.print = function() {\n\n    if(document.queryCommandSupported('print')) {\n      document.execCommand('print', false, null);\n    } else {\n      window.focus();\n      window.print();\n    }\n  };\n\n})(window);\n","// Original => https://github.com/mgcrea/angular-strap/blob/master/src/helpers/debounce.js\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_THROTTLE', {\n    OPTIONS: {\n      wait: 1000,\n      update: false,\n      trailing: true,\n      leading: false\n    }\n  });\n\n  availity.core.factory('avThrottle', function(AV_THROTTLE, $timeout) {\n\n    return function(fn, wait, options) {\n\n      options = _.merge({}, AV_THROTTLE.OPTIONS, options);\n\n      wait = wait ? wait : AV_THROTTLE.THRESHOLD;\n      var update = angular.isDefined(options.update) ? options.update : AV_THROTTLE.UPDATE;\n      var timer = null;\n\n      return function() {\n        var context = options.context || this;\n        var args = arguments;\n\n        if(!timer) {\n          if(options.leading !== false) {\n            fn.apply(context, args);\n          }\n\n          var later = function() {\n            timer = null;\n            if(options.trailing !== false) {\n              fn.apply(context, args);\n            }\n          };\n\n          timer = $timeout(later, wait, update);\n        }\n\n        return timer;\n\n      };\n    };\n  });\n\n})(window);\n","// Orginal => https://github.com/ericzon/angular-ny-logger/blob/0c594e864c93e7f33d36141200096bc6139ddde1/angular-ny-logger.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.provider('AvLogger', function() {\n\n    var _enabled = false;\n\n    this.enabled = function(enabled) {\n      _enabled = !!enabled;\n    };\n\n    this.$get = function($injector) {\n\n      var AvLogger = function(context, $delegate) {\n\n        this.context = context || '';\n        this.$log = $delegate;\n\n      };\n\n      var proto = AvLogger.prototype;\n\n      AvLogger.supplant = function(str, o) {\n\n        var _supplant = function (a, b) {\n          var r = o[b];\n          return r;\n        };\n\n        return str.replace(/\\{([^{}]*)\\}/g, _supplant);\n      };\n\n      AvLogger.isObject = function(element) {\n        var elemStr = ( !angular.isUndefined(element) && !angular.isUndefined(element.constructor) ) ? element.constructor.toString() : '';\n        return (elemStr.indexOf('Object') > -1);\n      };\n\n      AvLogger.getFormattedTimestamp = function(date) {\n\n        return AvLogger.supplant('{0}:{1}:{2}:{3}', [\n          date.getHours(),\n          date.getMinutes(),\n          date.getSeconds(),\n          date.getMilliseconds()\n        ]);\n\n      };\n\n      proto._log = function(originalFn, args) {\n\n        // Allow enabling logger through query params\n        // Ex:\n        //\n        // http://localhost:3000/ui.html#avLogger\n\n        var hash = window.location.hash;\n        hash = hash || '';\n\n        if(!_enabled && hash.indexOf('avLogger') < 0 && originalFn !== 'error') {\n          return;\n        }\n\n        var now  = AvLogger.getFormattedTimestamp(new Date());\n        var message = '';\n        var supplantData = [];\n\n        var context = this.context ? ' [' + this.context + '] ' : '';\n\n        switch(args.length) {\n          case 1:\n            // (1) If the user supplied one argument, then the argument must be\n            // the message itself and _log()\n            // will print: <timestamp> - <context>: <message>\n            supplantData = args[0];\n            message = AvLogger.supplant('{0}{1} - {2}', [now, context, args[0]]);\n            break;\n          case 3:\n            // (3) If the user supplied three arguments, then the first argument\n            // is a method name, the second is the message and the third is an\n            // object of variables to interpolate with the message. For this, _log()\n            // will print: <timestamp> - <context> - <method name>('<message>')\n            supplantData = args[2];\n            message = AvLogger.supplant(\"{0}{1} - {2}(\\'{3}\\')\", [now, context, args[0], args[1]]);\n            break;\n          case 2:\n            // (2) If the user provided two arguments, we need to find out whether\n            // they supplied a method name or an interpolation object.\n            // In order to figure that out, we’ll check the type of the last argument.\n            // If it is a string, then it has to be the message itself while the\n            // first argument is the method name. Otherwise consider the first argument\n            // as the message and the second as array of interpolation variables.\n            // The output print will be according to this check.\n            if(typeof args[1] === 'string') {\n              message = AvLogger.supplant(\"{0}{1} - {2}(\\'{3}\\')\", [now, context, args[0], args[1]]);\n            } else {\n              supplantData = args[1];\n              message = AvLogger.supplant('{0}{1} - {2}', [now, context, args[0]]);\n            }\n            break;\n        }\n\n        var $log = this.$log || $injector.get('$log');\n\n        var params = (AvLogger.isObject(supplantData)) ? [message, supplantData] : [AvLogger.supplant(message, supplantData)];\n        $log[originalFn].apply(null, params);\n\n      };\n\n      proto.log = function() {\n        this._log('log', arguments);\n      };\n\n      proto.info = function() {\n        this._log('info', arguments);\n      };\n\n      proto.warn = function() {\n        this._log('warn', arguments);\n      };\n\n      proto.debug = function() {\n        this._log('debug', arguments);\n      };\n\n      proto.error = function() {\n        this._log('error', arguments);\n      };\n\n      return AvLogger;\n\n    };\n\n  });\n\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.config(function($provide) {\n\n    $provide.decorator('$log', function($delegate, AvLogger) {\n      return new AvLogger(null, $delegate);\n    });\n\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_POLLING', {\n    INTERVAL: 1000, // delay in ms before retrying an async request\n    MAX_ELAPSED_TIME: 5000, // max time in ms before polling stops and rejects original request\n    MAX_RETRY: 30, // # of times the request will be tried\n    DECAY: 1.2, // % the polling interval decays after every retry\n    // maximum time polling is allowed before rejecting the request\n    EVENTS: {\n      MAX_RETRY: 'av:polling:max:retry'\n    },\n    REGEX_URL: /^.*?api.availity.com(.*)$/ // capture the relative url from API\n  });\n\n  var PollingServiceFactory = function($rootScope, $q, $injector, $timeout, $log, AV_POLLING, AV_API) {\n\n    var AvPollingService = function() {\n      this.pendingRequests = []; // stores all request for polling\n    };\n\n    var proto = AvPollingService.prototype;\n\n    proto.response = function(response) {\n\n      if(this.isAsyncResponse(response)) {\n        return this.onAsyncReponse(response);\n      }\n\n      return response || $q.when(response);\n    };\n\n    proto.setDefaults = function(config) {\n\n      var defaultOptions = {\n        pollingInterval: AV_POLLING.INTERVAL,\n        pollingDecay: AV_POLLING.DECAY,\n        pollingMaxInterval: AV_POLLING.MAX_ELAPSED_TIME,\n        pollingRetryCount: 0,\n        pollingStartTime: new Date().getTime()\n      };\n\n      return _.extend(defaultOptions, config);\n    };\n\n    proto.responseError = function(response) {\n      // Return the promise rejection\n      return $q.reject(response);\n    };\n\n    /**\n     * API layer return a link with a polling url for\n     * async responses.\n     *\n     * @param  {Object}  response ajax response\n     * @return {Boolean} true if response has status of 202 (accepted) and location param in header with uri+session link\n     */\n    proto.isAsyncResponse = function(response) {\n\n      return response &&\n        response.config &&\n        response.config.api &&\n        response.status &&\n        response.status === 202 &&\n        angular.isFunction(response.headers) && !availity.isBlank(response.headers(AV_API.HEADERS.SERVER.LOCATION));\n    };\n\n    proto.onAsyncReponse = function(response) {\n\n      response.config = this.setDefaults(response.config);\n\n      var deferred = $q.defer();\n\n      this.queueRequest(deferred, response);\n\n      // [rm3]: Can't call notify before you return promise object?\n      $timeout(function() {\n        // Notify deferred listeners with the original server response\n        deferred.notify(response);\n      }, 0, false);\n\n      return deferred.promise;\n    };\n\n    proto.getUrl = function(url) {\n\n      var result = url.match(AV_POLLING.REGEX_URL);\n      if(result && result[1]) {\n        return '/api' + result[1];\n      }\n\n      return url;\n    };\n\n    proto.queueRequest = function(deferred, response) {\n\n      var self = this;\n      // server replies with location header so set the url into config\n      var _url = availity.getRelativeUrl(response.headers(AV_API.HEADERS.SERVER.LOCATION));\n      var _config = response.config;\n\n\n      // headers – {Object} – Map of strings or functions which return strings representing HTTP headers\n      //  to send to the server. If the return value of a function is null, the header\n      //  will not be sent. Functions accept a config object as an argument.\n      var config = {\n        method: 'GET',\n        api: true,\n        headers: _config.headers,\n        pollingInterval: _config.pollingInterval,\n        pollingMaxRetry: _config.pollingMaxRetry,\n        pollingMaxInterval: _config.pollingMaxInterval,\n        pollingStartTime: _config.pollingStartTime,\n        _pollingDecay: _config._pollingDecay,\n        pollingRetryCount: _config.pollingRetryCount,\n        pollingDecay: _config.pollingDecay,\n        url: _url, /* set the url from the server response */\n        cache: false\n      };\n\n      var request = {\n        id: availity.uuid('request-'),\n        config: config,\n        deferred: deferred\n      };\n\n      var timeout = this.getPollingTimeout(config);\n\n      // each async request should run on its own timer\n      var timer = $timeout(function() {\n        self.retryRequest(request.id);\n      }, timeout, false);\n\n      request.timer = timer;\n\n      // add the async request to the queue\n      this.pushRequest(request);\n\n    };\n\n    proto.popRequest = function(id) {\n\n      var index = null;\n      var request = null;\n\n      for(var i = 0; i < this.pendingRequests.length; i++) {\n        if(this.pendingRequests[i].id === id) {\n          index = i;\n          break;\n        }\n      }\n\n      request = this.pendingRequests[index];\n      this.pendingRequests.splice(index, 1);\n\n      return request;\n    };\n\n    proto.pushRequest = function(request) {\n      this.pendingRequests.push(request);\n    };\n\n    proto.getPollingTimeout = function(config) {\n      return config.pollingDecay * config.pollingInterval;\n    };\n\n    proto.isPollingMaxTimeout = function(config) {\n      var now = new Date().getTime();\n      var elaspedTime = now - config.pollingStartTime;\n      var isElapsed = elaspedTime > config.pollingMaxInterval;\n      return isElapsed;\n    },\n\n      proto.isMaxRetried = function(config) {\n        return config.pollingRetryCount >= AV_POLLING.MAX_RETRY;\n      };\n\n    proto.isPollable = function(config) {\n      var _isTimeout = this.isPollingMaxTimeout(config);\n      var _isMax = this.isMaxRetried(config);\n\n      return _isTimeout || _isMax ? false : true;\n\n    };\n\n    proto.retryRequest = function(id) {\n\n      var self = this;\n      var request = this.popRequest(id);\n      $timeout.cancel(request.timer);\n\n      var config = request.config;\n\n      var deferred = request.deferred;\n\n      if(!this.isPollable(config)) {\n        $log.info('Rejecting pollable response due to timeout');\n        return deferred.reject(request);\n      }\n\n      // increment counters and polling timeouts\n      this.increment(config);\n\n      function successCallback(response) {\n        if(self.isAsyncResponse(response)) {\n          deferred.notify(response);\n          self.queueRequest(request.deferred, response);\n        } else {\n          deferred.resolve(response);\n        }\n      }\n\n      function errorCallback(response) {\n        deferred.reject(response);\n      }\n\n      // Silly circular dependency trick\n      var $http = $injector.get('$http');\n\n      $http(config).then(successCallback, errorCallback);\n\n    };\n\n    proto.increment = function(config) {\n      this.incrementCounter(config);\n      this.incrementDecay(config);\n    };\n\n    proto.incrementDecay = function(config) {\n      if(!config._pollingDecay) {\n        // store the original decay param\n        config._pollingDecay = config.pollingDecay;\n      }\n      config.pollingDecay *= config._pollingDecay;\n    };\n\n    proto.incrementCounter = function(config) {\n      config.pollingRetryCount++;\n    };\n\n    proto.clearRequests = function() {\n      angular.forEach(this.pendingRequests, function(request) {\n        $timeout.cancel(request.timer);\n      });\n      this.pendingRequests = [];\n    };\n\n    return new AvPollingService();\n\n  };\n\n  availity.core.factory('avPollingService', PollingServiceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_API', {\n    HEADERS: {\n      SERVER: {\n        ID: 'X-API-ID',\n        LOCATION: 'Location',\n        STATUS: 'X-Status-Message',\n        GLOBAL_ID: 'X-Global-Transaction-ID'\n      },\n      CLIENT: {\n        SESSION_ID: 'X-Session-ID',\n        AUTH: 'Authorization',\n        OVERRIDE: 'X-HTTP-Method-Override',\n        CALLBACK_URL: 'X-Callback-URL',\n        CUSTOMER_ID: 'X-Availity-Customer-ID'\n      }\n    }\n  });\n\n  var defaultOptions = {\n    // pre-prend the url with a value like `/public` so we can build urls like `public/api/v1/*`\n    prefix: '',\n    // default base url for endpoints\n    path: '/api',\n    // url resource group, such as `/epdm` or `/humana`, for urls like `public/api/epdm/v1/*`\n    resourceGroup: '',\n    // url to resource endpoint like `coverages` or `payers`\n    url: null,\n    // defaults to version 1\n    version: '/v1',\n    // governance level `/internal`\n    level: '',\n    // post-pend the url with `.json`, `.txt` or `.xml`\n    suffix: '',\n    // cache all request by default\n    cache: true,\n    // flag used to enable behaviors around the Availity Rest API\n    api: true,\n    // # of times the polling service has tried to get a response\n    pollingRetryCount: 0,\n    // in ms\n    pollingInterval: 1000,\n    // % the polling interval decays after every retry\n    pollingDecay: 1.2,\n    // maximum time polling is allowed before rejecting the request\n    pollingMaxInterval: 30000\n\n  };\n\n  // Factory that creates ApiResourcess\n  var ApiResourcesFactory = function($http, $q, avPollingService) {\n\n    var AvApiResource = function(options) {\n\n      if(!options) {\n        throw new Error('[options] cannot be null or undefined');\n      }\n\n      // if string the assume url is being passed in\n      if(angular.isString(options)) {\n        options = options.charAt(0) === '/' ? options : '/' + options;\n        options = angular.extend({}, {url: options});\n      }\n\n      if(!options.url) {\n        throw new Error('[url] cannot be null');\n      }\n\n      // get the default options and merge into this instance\n      this.options = angular.extend({}, defaultOptions, (options || {}));\n    };\n\n    // Alias the prototype\n    var proto = AvApiResource.prototype;\n\n    proto._config = function(config) {\n      return angular.extend({}, this.options, (config || {}));\n    },\n\n    proto._getUrl = function(id) {\n      if(this.options.api) {\n        return this._getApiUrl(id);\n      }\n\n      return this.options.url;\n    };\n\n    proto._createResponse = function(data, status, headers, config) {\n      return {\n        data: data,\n        status: status,\n        headers: headers,\n        config: config\n      };\n    };\n\n    proto._request = function(config, afterCallback) {\n\n      var self = this;\n      var defer = $q.defer();\n\n      $http(config)\n        .success(function(data, status, headers, _config) {\n\n          var _response = {\n            data: data,\n            status: status,\n            headers: headers,\n            config: _config\n          };\n\n          // handle the async response if applicable\n          var _promise = $q.when(avPollingService.response(_response));\n          // notify the promise listener of the original response\n          defer.notify(_response);\n\n          // handle the polling service promise\n          _promise.then(function(successResponse) {\n\n            // if service has a callback then call it\n            // var response = self._createResponse(data, status, headers, _config);\n            if(afterCallback) {\n              successResponse = afterCallback.call(self, successResponse);\n            }\n            defer.resolve(successResponse);\n          }, function(errorResponse) {\n            defer.reject(errorResponse);\n          }, function(notifyResponse) {\n            defer.notify(notifyResponse);\n          });\n\n        }).error(function(data, status, headers, _config) {\n          var response = self._createResponse(data, status, headers, _config);\n          defer.reject(response);\n        });\n\n      var promise = defer.promise;\n\n      // recreate the success callback ala $http\n      promise.success = function(fn) {\n        promise.then(function(response) {\n          fn(response.data, response.status, response.headers, response.config);\n        });\n        return promise;\n      };\n\n      // recreate the error callback ala $http\n      promise.error = function(fn) {\n        promise.then(null, function(response) {\n          fn(response.data, response.status, response.headers, config);\n        });\n        return promise;\n      };\n\n      promise.always = promise['finally'];\n\n      return promise;\n    };\n\n    proto._getApiUrl = function(id) {\n      id = id ? '/' + id : '';\n      return this.options.prefix + this.options.path + this.options.level + this.options.resourceGroup + this.options.version + this.options.url + id + this.options.suffix;\n    };\n\n    proto.create = function(data, config) {\n\n      if(!data) {\n        throw new Error('called method without [data]');\n      }\n\n      if(this.beforeCreate) {\n        this.beforeCreate(this, data);\n      }\n\n      config = this._config(config);\n      config.method = 'POST';\n      config.url = this._getUrl();\n      config.data = data;\n\n      return this._request(config, this.afterCreate);\n\n    };\n\n    proto.get = function(id, config) {\n\n      if(!id) {\n        throw new Error('called method without [id]');\n      }\n\n      config = this._config(config);\n      config.method = 'GET';\n      config.url = this._getUrl(id);\n\n      return this._request(config, this.afterGet);\n\n    };\n\n    proto.query = function(config) {\n\n      config = this._config(config);\n      config.method = 'GET';\n      config.url = this._getUrl();\n\n      return this._request(config, this.afterQuery);\n\n    };\n\n    proto.update = function(id, data, config) {\n\n      var url;\n\n      if(_.isString(id) || _.isNumber(id)) {\n        url = this._getUrl(id);\n      }else {\n        url = this._getUrl();\n        // At this point the function signature becomes:\n        //\n        // proto.update = function(data, config) {} a.k.a function(id, data)\n        //\n        config = data;  // config is really the 2nd param\n        data = id; // data is really the first param\n      }\n\n      if(this.beforeUpdate) {\n        data = this.beforeUpdate(data);\n      }\n\n      config = this._config(config);\n      config.method = 'PUT';\n      config.url = url;\n      config.data = data;\n\n      return this._request(config, this.afterUpdate);\n\n    };\n\n    proto.remove = function(id, config) {\n\n      var url;\n      var data;\n\n      if(_.isString(id) || _.isNumber(id)) {\n        url = this._getUrl(id);\n      }else {\n        // At this point the function signature becomes:\n        //\n        // proto.remove = function(data, config)\n        //\n        url = this._getUrl();\n        data = id;\n      }\n\n      config = this._config(config);\n      config.method = 'DELETE';\n      config.url = url;\n      config.data = data;\n\n      return this._request(config, this.afterRemove);\n    };\n\n    proto.beforeCreate = null;\n    proto.afterCreate = null;\n    proto.afterQuery = null;\n    proto.afterGet = null;\n    proto.beforeUpdate = null;\n    proto.afterUpdate = null;\n    proto.afterRemove = null;\n\n    return AvApiResource;\n\n  };\n\n  availity.core.factory('AvApiResource', ApiResourcesFactory);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  var UserServiceFactory = function(AvApiResource, $q) {\n\n    var AvUsersResource = function() {\n      this.user = null;\n      AvApiResource.call(this, 'users');\n    };\n\n    angular.extend(AvUsersResource.prototype, AvApiResource.prototype, {\n\n      afterGet: function(response) {\n        var user = response.data.user ? response.data.user : response.data;\n        this.user = user;\n        return user;\n      },\n\n      me: function() {\n\n        if(this.user) {\n          return $q.when(this.user);\n        }\n\n        return this.get('me');\n      }\n\n    });\n\n    return new AvUsersResource();\n\n  };\n\n  availity.core.factory('avUsersResource', UserServiceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avCoveragesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations', cache: false});\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avConfigurationsResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations'});\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var LogMessagesFactory = function(AvApiResource) {\n\n    var AvLogMessagesResource = function() {\n\n      AvApiResource.call(this, {\n        version: '/v1',\n        url: '/log-messages'\n      });\n    };\n\n    angular.extend(AvLogMessagesResource.prototype, AvApiResource.prototype, {\n\n      buildRequest: function(level, entries) {\n\n        var requestPayload = {};\n\n        if(entries.level) {\n          delete entries.level;\n        }\n\n        requestPayload.level = level;\n        requestPayload.entries = entries;\n\n        return requestPayload;\n      },\n\n      debug: function(entries) {\n        return this.create(this.buildRequest('debug', entries));\n      },\n\n      info: function(entries) {\n        return this.create(this.buildRequest('info', entries));\n      },\n\n      warn: function(entries) {\n        return this.create(this.buildRequest('warn', entries));\n      },\n\n      error: function(entries) {\n        return this.create(this.buildRequest('error', entries));\n      }\n\n    });\n\n    return new AvLogMessagesResource();\n\n  };\n\n  availity.core.factory('avLogMessagesResource', LogMessagesFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvDocumentsResourceFactory = function(AvApiResource) {\n\n    var AvDocumentsResource = function() {\n      AvApiResource.call(this, 'documents');\n    };\n\n    angular.extend(AvDocumentsResource.prototype, AvApiResource.prototype, {\n\n      getContents: function(id) {\n        var config = this._config();\n        config.url = this.getContentsUrl(id);\n        return this._request(config);\n      },\n\n      getContentsUrl: function(id) {\n        return this._getUrl(id) + '/contents';\n      }\n\n    });\n\n    return new AvDocumentsResource();\n\n  };\n\n  availity.core.factory('avDocumentsResource', AvDocumentsResourceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var OrganizationResourceFactory = function(AvApiResource) {\n\n    var OrganizationResource = function() {\n      AvApiResource.call(this, 'organizations');\n    };\n\n    angular.extend(OrganizationResource.prototype, AvApiResource.prototype, {\n\n      getOrganizations: function(config) {\n        return this.query(config).then(function(response) {\n          return response.data.organizations ? response.data.organizations : response.data;\n        });\n      }\n\n    });\n\n    return new OrganizationResource();\n  };\n\n  availity.core.factory('avOrganizationsResource', OrganizationResourceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n\n  var availity = root.availity;\n\n  availity.core.factory('avCodesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/codes'});\n  });\n\n  var AvCodesResourceFactory = function(AvApiResource) {\n\n    var AvCodesResource = function () {\n      AvApiResource.call(this, 'codes');\n    };\n\n    angular.extend(AvCodesResource.prototype, AvApiResource.prototype, {\n\n      getCodes: function (data) {\n\n        // config for the api resource query\n        var config = {};\n        config.params = {};\n\n        if(data.page) {\n          config.params.offset = 50 * (data.page - 1);\n        }\n        if(data.offset) {\n          config.params.offset = data.offset;\n        }\n        if(data.list) {\n          config.params.list = data.list;\n        }\n        if(data.q) {\n          config.params.q = data.q;\n        }\n\n        return this.query(config).then(function (response) {\n          // Format the response into something select2 can read\n          var results = response.data.codes;\n          if(results && !_.has(results[0], 'id')) {\n            _.each(results, function (code) {\n              code.id = code.code;\n            });\n          }\n\n          // calculate if we want to continue searching\n          var moreVal = response.data.offset < response.data.totalCount - response.data.limit;\n          return {\n            more: moreVal,\n            results: results\n          };\n\n        });\n      }\n\n    });\n\n    return new AvCodesResource();\n\n  };\n\n  availity.core.factory('avCodesResource', AvCodesResourceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvUserPermissionsResourceFactory = function(AvApiResource) {\n\n    var AvUserPermissionsResource = function() {\n      AvApiResource.call(this, {\n        level: '/internal',\n        version: '/v1',\n        url: '/axi-user-permissions'\n      });\n      this.sessionDate = moment().toISOString();\n    };\n\n    angular.extend(AvUserPermissionsResource.prototype, AvApiResource.prototype, {\n\n      afterQuery: function(response) {\n        return response.data.axiUserPermissions ? response.data.axiUserPermissions : [];\n      },\n\n      getPermissions: function(permissionIds, region) {\n        var self = this;\n        return this.query({\n          params: {\n            permissionId: permissionIds,\n            region: region,\n            sessionDate: self.sessionDate\n          }\n        });\n      }\n\n    });\n\n    return new AvUserPermissionsResource();\n\n  };\n\n  availity.core.factory('avUserPermissionsResource', AvUserPermissionsResourceFactory);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvUserAuthorizationsFactory = function($q, $log, avUserPermissionsResource) {\n\n    /**\n     *\n     * @constructor\n     */\n    var AvUserAuthorizations = function() {\n      /**\n       * Region is used to return permission/resources relative to region. If null service will\n       * return all permission relative to current.  If value 'ALL' used it will return value relative\n       * to all regions the user has access to.\n       * @type {string}\n       */\n      this.region = null;\n      /**\n       * PermissionIds contains the set of permissionIds to request from service. If user of service calls\n       * setPermissionIds() or call getPermissions() with complete set of permissionIds needed by application,\n       * then service should only make that one hit to retrieve permission information.\n       * @type {Array}\n       */\n      this.permissionIds = [];\n    };\n\n    var proto = AvUserAuthorizations.prototype;\n\n    proto.setRegion = function(region) {\n      this.region = region;\n      return this;\n    };\n\n    proto.setPermissionIds = function(permissionIds) {\n      if(!angular.isArray(permissionIds)) {\n        throw new Error('permissionsIds must be an array of string IDs for avUserAuthorizations#addPermissionIds');\n      }\n      this.permissionIds = permissionIds;\n      return this;\n    };\n\n    proto.isAuthorized = function(permissionId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        return permission.isAuthorized;\n      });\n    };\n\n    proto.isAnyAuthorized = function(permissionIds) {\n      return this.getPermissions(permissionIds).then(function(permissions) {\n        var permission = _.findWhere(permissions, {isAuthorized: true});\n        return permission !== undefined;\n      });\n    };\n\n    proto.getPermission = function(permissionId) {\n      if(!angular.isString(permissionId)) {\n        throw new Error('permissionsId must be a string ID for avUserAuthorizations#getPermission');\n      }\n\n      return this.getPermissions([permissionId])\n        .then(function(_permissions) {\n          return _permissions[permissionId];\n        });\n    };\n\n    proto.getPermissions = function(permissionIds) {\n      var self = this;\n\n      if(!angular.isArray(permissionIds)) {\n        throw new Error('permissionsIds must be an array of string IDs for avUserAuthorizations#getPermissions');\n      }\n      // merge permission ids to reduce calls to backend\n      self.permissionIds = _.union(self.permissionIds, permissionIds);\n\n      return avUserPermissionsResource\n        .getPermissions(self.permissionIds, self.region)\n        .then(function(_permissions) {\n          return self.toPermissionMap(permissionIds, _permissions);\n        });\n    };\n\n    proto.getOrganizations = function(permissionId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        return permission.organizations;\n      });\n    };\n\n    proto.getPayers = function(permissionId, organizationId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        var organization = _.findWhere(permission.organizations, {id: organizationId});\n\n        if(organization && organization.resources) {\n          return organization.resources;\n        }\n        return [];\n      });\n\n    };\n\n    /**\n     * Converts array permissions to map with value for each permissionId, creating empty permission\n     * if can't find permission in array\n     * @private\n     */\n    proto.toPermissionMap = function(permissionIds, permissions) {\n      var self = this;\n      var map = {};\n      permissions = _.slice(permissions);\n      _.forEach(permissionIds, function(permissionId) {\n        var key = {id: permissionId};\n        var permission = _.findWhere(permissions, key);\n        permission = permission ? self.toPermission(permission) : self.toPermission(key);\n        map[permission.id] = permission;\n      });\n      return map;\n    };\n\n    /**\n     * Convert a permission resource into a structure that is easier to work with.\n     * @private\n     */\n    proto.toPermission = function(permission) {\n      return {\n        id: permission.id,\n        description: permission.description ? permission.description : '',\n        geographies: permission.geographies ? permission.geographies : [],\n        organizations: permission.organizations ? permission.organizations : [],\n        isAuthorized: permission.organizations ? permission.organizations.length > 0 : false\n      };\n    };\n\n    return new AvUserAuthorizations();\n\n  };\n\n  availity.core.factory('avUserAuthorizations', AvUserAuthorizationsFactory);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_SESSION', {\n    SESSION_TIMEOUT: 'av:auth:session:timeout',\n    NOT_AUTHORIZED: 'av:auth:not:authorized'\n  });\n\n  availity.core.factory('avSession', function($q, avUsersResource) {\n\n    var AvSession = function() {\n      this.user = null;\n      this.permissions = null;\n    };\n\n    var proto = AvSession.prototype;\n\n    proto.getUser = function() {\n      var self = this;\n\n      if(this.user) {\n        return $q.when(this.user);\n      }\n\n      return avUsersResource.me().then(function(user) {\n        self.user = user;\n        return self.user;\n      });\n    };\n\n\n    proto.destroy = function() {\n      this.user = null;\n      this.permisions = null;\n    };\n\n    return new AvSession();\n  });\n\n})(window);\n","// Inspiration => https://github.com/HackedByChinese/ng-idle\n//\n// Rules:\n//\n//  * ping after 3 minutes from last human activity\n//  * reset session after api success except 401\n//  * idle show after 25 of inactivity\n//\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_IDLE', {\n    EVENTS: {\n      IDLE_INACTIVE: 'av:idle:inactive',\n      IDLE_ACTIVE: 'av:idle:active',\n      SESSION_TIMEOUT_ACTIVE: 'av:idle:session:active',\n      SESSION_TIMEOUT_REDIRECT: 'av:idle:session:redirect',\n      HUMAN: 'keydown.av.idle mousedown.av.idle keydown.av.idle',\n      MACHINE: '$locationChangeSuccess'\n    },\n    INTERVALS: {\n      PING: 3 * 60 * 1000, // 3 minutes\n      IDLE: 25 * 60 * 1000, // 25 minutes\n      SESSION: 30 * 60 * 1000 // 30 minutes\n    },\n    URLS: {\n      HOME: '/availity/web/public.elegant.login',\n      PING: '/api/v1/users/me'\n    }\n  });\n\n  availity.core.provider('avIdle', function(AV_IDLE) {\n\n    var enabled = false;\n    var pingUrl;\n    var redirectUrl;\n    var sessionTimeout;\n    var idleTimeout;\n    var pingTimeout;\n\n    this.enable = function(value) {\n      if(arguments.length) {\n        enabled = !!value;\n      }\n      return enabled;\n    };\n\n    this.setSessionTimeout = function(timeout) {\n      sessionTimeout = timeout || AV_IDLE.INTERVALS.SESSION;\n    };\n\n    this.setIdleTimeout = function(timeout) {\n      idleTimeout = timeout || AV_IDLE.INTERVALS.IDLE;\n    };\n\n    this.setPingTimeout = function(timeout) {\n      pingTimeout = timeout || AV_IDLE.INTERVALS.PING;\n    };\n\n    this.setPingUrl = function(url) {\n      pingUrl = url || AV_IDLE.URLS.PING;\n    };\n\n    this.$get = function(AV_IDLE, $log, $document, $rootScope, $timeout, avThrottle, $q, $injector) {\n\n      var AvIdle = function() {\n\n        // $timeout references\n        this._idleTimer = null;\n        this._sessionTimer = null;\n        this._pingTimer = null;\n        this._keepAlive = null;\n\n        // flag used to track if the if user is idle or session expired\n        this.idleActive = false;\n        this.sessionActive = false;\n\n        this.listeners = [];\n\n        this.init();\n\n      };\n\n      var proto = AvIdle.prototype;\n\n      proto.init = function() {\n\n        if(!enabled) {\n          this.stop();\n          return;\n        }\n\n        this.start();\n      };\n\n      proto.start = function() {\n\n        $log.info('avIdle start');\n\n        var self = this;\n        var listener;\n\n        !sessionTimeout && this.setSessionTimeout();\n        !idleTimeout && this.setIdleTimeout();\n        !pingTimeout && this.setPingTimeout();\n        !pingUrl && this.setPingUrl();\n        !redirectUrl && this.setRedirectUrl();\n\n        $rootScope.$on('$destroy', function() {\n          self.stop();\n        });\n\n        $document.find('body').on(AV_IDLE.EVENTS.HUMAN, function(event) {\n          self.onEvent(event);\n        });\n\n        listener = $rootScope.$on(AV_IDLE.EVENTS.MACHINE, function(event, oldUrl, newUrl) {\n          if(oldUrl !== newUrl) {\n            self.onEvent(event);\n          }\n        });\n        this.listeners.push(listener);\n\n        $rootScope.$on(AV_IDLE.EVENTS.SESSION_TIMEOUT_REDIRECT, function() {\n          document.location.href = redirectUrl;\n        });\n\n        this.startIdleTimer();\n        this.startSessionTimer();\n      };\n\n      proto.stop = function() {\n\n        $document.find('body').off(AV_IDLE.EVENTS.HUMAN);\n\n        // turns off Angular event listeners @see http://stackoverflow.com/a/14898795\n        _.each(this.listeners, function(listener) {\n          listener();\n        });\n\n        this.stopPing();\n        this.stopSessionTimer();\n        this.stopIdleTimer();\n      };\n\n      proto.isEnabled = function() {\n        return enabled;\n      };\n\n      proto.enable = function(value) {\n        if(arguments.length) {\n          enabled = !!value;\n        }\n\n        return this;\n      };\n\n      proto.setSessionTimeout = function(timeout) {\n        sessionTimeout = timeout || AV_IDLE.INTERVALS.SESSION;\n        return this;\n      };\n\n      proto.setIdleTimeout = function(timeout) {\n        idleTimeout = timeout || AV_IDLE.INTERVALS.IDLE;\n        return this;\n      };\n\n      proto.setPingTimeout = function(timeout) {\n        pingTimeout = timeout || AV_IDLE.INTERVALS.PING;\n        return this;\n      };\n\n      proto.setPingUrl = function(url) {\n        pingUrl = url || AV_IDLE.URLS.PING;\n        return this;\n      };\n\n      proto.setRedirectUrl = function(url) {\n        redirectUrl = url || AV_IDLE.URLS.HOME;\n        return this;\n      };\n\n      proto.response = function(response) {\n\n        if(this.isApiRequest(response)) {\n          this.startSessionTimer();\n        }\n\n        return response;\n      };\n\n      proto.isApiRequest = function(response) {\n        return response && response.config && response.config.api;\n      };\n\n      proto.responseError = function(response) {\n\n        if(this.isApiRequest(response) && response.status !== 401) {\n          this.startSessionTimer();\n        }\n\n        if(this.isApiRequest() && response.status === 401) {\n          this.stopPing();\n        }\n\n        return $q.reject(response);\n      };\n\n      proto.startSessionTimer = function() {\n\n        var self = this;\n\n        this.stopSessionTimer();\n\n        var later = function() {\n          $log.info('avIdle session has TIMED OUT');\n          self.stop();\n          $rootScope.$broadcast(AV_IDLE.EVENTS.SESSION_TIMEOUT_ACTIVE);\n        };\n\n        $log.info('avIdle session timer has STARTED');\n        this._sessionTimer = $timeout(later, sessionTimeout, false);\n\n      };\n\n      proto.stopSessionTimer = function() {\n        $log.info('avIdle session timer has STOPPED');\n        $timeout.cancel(this._sessionTimer);\n      };\n\n      proto.startIdleTimer = function() {\n\n        var self = this;\n\n        this.stopIdleTimer();\n\n        var later = function() {\n          self.stopIdleTimer();\n          $log.info('avIdle is IDLING');\n          $rootScope.$broadcast(AV_IDLE.EVENTS.IDLE_ACTIVE);\n        };\n\n        $log.info('avIdle idle timer has STARTED');\n        this._idleTimer = $timeout(later, idleTimeout, false);\n      };\n\n      proto.stopIdleTimer = function() {\n        $log.info('avIdle idle timer has STOPPED');\n        $timeout.cancel(this._idleTimer);\n      };\n\n      proto.startPing = function() {\n\n        if(!this._keepAlive) {\n          $log.info('avIdle ping timer has STARTED');\n          this._keepAlive = avThrottle(this.keepAlive, pingTimeout, {context: this});\n        }\n\n        this._pingTimer = this._keepAlive();\n      };\n\n      proto.stopPing = function() {\n        $log.info('avIdle ping timer has STOPPED');\n        if(this._pingTimer) {\n          $timeout.cancel(this._pingTimer);\n        }\n      };\n\n      proto.keepAlive = function() {\n\n        // destroy the reference to that a new throttle gets created upon\n        // next user or system event\n        this._keepAlive = null;\n        var $http = $injector.get('$http');\n\n        $http.get(pingUrl, {\n          cache: false,\n          api: true\n        }).success(function() {\n          $log.info('avIdle keep-alive SUCCESS');\n        }).error(function() {\n          $log.error('avIdle keep-alive FAILURE');\n        });\n      };\n\n      proto.onEvent = function() {\n        this.startIdleTimer();\n        this.startPing();\n      };\n\n      return new AvIdle();\n\n    };\n\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avIdleInterceptor', function(avIdle) {\n    return {\n      response: function(response) {\n        return avIdle.response(response);\n      },\n      responseError: function(response) {\n        return avIdle.responseError(response);\n      }\n    };\n\n  });\n\n  availity.core.config(function($httpProvider) {\n    $httpProvider.interceptors.push('avIdleInterceptor');\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.value('avValConfig', {\n    classes: {\n      valid: 'ng-valid',\n      invalid: 'ng-invalid',\n      dirty: 'ng-dirty',\n      pristine: 'ng-pristine',\n      touched: 'ng-touched',\n      untouched: 'ng-untouched',\n      submitted: 'ng-submitted'\n    },\n    validators: [\n      'avValPattern',\n      'avValSize',\n      'avValRequired',\n      'avValDateRange',\n      'avValDate'\n    ]\n  });\n\n  availity.core.constant('AV_VAL', {\n    EVENTS: {\n      REVALIDATE: 'av:val:revalidate',\n      SUBMITTED: 'av:val:submitted',\n      FAILED: 'av:val:failed',\n      RESET: 'av:val:reset'\n    },\n    DEBOUNCE: 800,\n    DATE_FORMAT: {\n      SIMPLE: 'MM/DD/YYYY'\n    },\n    PATTERNS: {\n      ALPHA_ONLY: /[^A-Za-z]+/g,\n      NUMERIC_ONLY: /[^0-9]+/g\n    }\n  });\n\n  availity.core.provider('avVal', function() {\n\n    var validators = [];\n    var rules = {};\n    var services = {};\n\n    this.addRules = function(_rules) {\n      rules = angular.extend({}, rules, _rules);\n      return rules;\n    };\n\n    this.addValidators = function(_validators) {\n      validators = validators.concat(_validators);\n      return validators;\n    };\n\n    this.$get = function($injector, $rootScope, $http, $log, avValConfig, AV_VAL) {\n\n      var AvValidation = function() {\n        this.initValidators();\n      };\n\n      var proto = AvValidation.prototype;\n\n      proto.initValidators = function() {\n        var self = this;\n\n        validators = avValConfig.validators.concat(validators);\n\n        angular.forEach(validators, function(name) {\n          self.addValidator(name);\n        });\n\n      };\n\n      proto.addValidator = function(name) {\n        var validator = $injector.get(name);\n        services[validator.name] = validator;\n      };\n\n      proto.addRules = function(_rules) {\n        rules = angular.extend({}, rules, _rules);\n        $rootScope.$broadcast(AV_VAL.EVENTS.REVALIDATE);\n      };\n\n      proto.validate = function(key, element, value, ruleName) {\n\n        var ruleConfig = rules[key];\n        if(!ruleConfig) {\n          $log.error('Failed to get rules key [' + key + '].  Forms must be tagged with a rules set name for validation to work.');\n          return;\n        }\n\n        var contraints = ruleConfig[ruleName];\n        if(!contraints) {\n          $log.info('Rule named [' + ruleName + '] could not be found in the current schema.');\n          contraints = [];\n        }\n\n        var el = element[0];\n        var results  = [];\n        var violations = [];\n        var _valid = true;\n\n        angular.forEach(contraints, function(rule, contraintName) {\n\n          if(!rule) {\n            // when extended rule sets, a user can pass nulls to cancel out a rule so if\n            // one doesn't exist just continue\n            return;\n          }\n\n          var validator = services[contraintName];\n\n          if(angular.isUndefined(validator)) {\n            $log.warn('No validator defined for `' + name + '`');\n            return;\n          }\n\n          var valid = validator.validate(value, rule);\n\n          var validationResult = {\n            valid: valid,\n            ruleName: ruleName,\n            contraintName: contraintName,\n            value: value,\n            message: rule.message,\n            field: el.name || el.id\n          };\n\n          var result = angular.extend({}, rule, validationResult);\n\n          results.push(result);\n          if(!valid) {\n            violations.push(validationResult);\n          }\n          _valid = _valid && valid;\n        });\n\n        return {\n          isValid: _valid,\n          all: results, // all the constraint results\n          violations: violations\n        };\n\n      };\n\n      return new AvValidation();\n\n    };\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValUtils', function() {\n\n    return {\n\n      isDefined: function(value) {\n        return angular.isDefined(value) && value !== '' && value !== null;\n      },\n\n      isEmpty: function(value) {\n        return !this.isDefined(value) || $.trim(value) === '';\n      }\n    };\n\n  });\n})(window);\n\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValSize', function(avValUtils) {\n\n    var validator =  {\n\n      name: 'size',\n\n      validate: function(value, rule) {\n\n        var min = rule.min || 0;\n        var max = rule.max;\n        var type = rule.type ? rule.type.toLowerCase() : 'text';\n\n        if(_.isNull(value) || _.isUndefined(value)) {\n          value = '';\n        }\n\n        if(type === 'text') {\n          value = value + '';\n          return  avValUtils.isEmpty(value) || value.length >= min && (max === undefined || value.length <= max);\n        }\n\n        // ... must be a Number\n        if(!_.isNumber(value) && /^\\d+$/.test(value)) {\n          value = parseInt(value, 10);\n        }\n\n        return avValUtils.isEmpty(value) || value >= min && (max === undefined || value <= max);\n\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValPattern', function(avValUtils) {\n\n    var validator =  {\n      name: 'pattern',\n      REGEX: /^\\/(.*)\\/([gim]*)$/, //regular expression to test a regular expression\n      asRegExp: function(pattern) {\n        var match;\n\n        if(pattern.test) {\n          return pattern;\n        } else {\n          match = pattern.match(validator.REGEX);\n          if(match) {\n            return new RegExp(match[1], match[2]);\n          } else {\n            throw ('Expected ' + pattern + ' to be a RegExp');\n          }\n        }\n      },\n      validate: function(value, rule) {\n        var values = _.isArray(rule.value) ? rule.value : [rule.value];\n\n        var valid = false;\n\n        _.each(values, function(expresion) {\n          var pattern = validator.asRegExp(expresion);\n          if(avValUtils.isEmpty(value) || pattern.test(value)) {\n            valid = true;\n          }\n        });\n\n        return valid;\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValRequired', function(avValUtils) {\n\n    var validator =  {\n      name: 'required',\n      validate: function(value) {\n        return !avValUtils.isEmpty(value);\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDateRange', function(AV_VAL, avValUtils) {\n\n    var validator = {\n\n      name: 'dateRange',\n\n      getStartDate: function(start) {\n        return validator.setMin(moment().add(start.value, start.units));\n      },\n\n      getEndDate: function(end) {\n        return validator.setMax(moment().add(end.value, end.units) );\n      },\n\n      setMin: function(value) {\n\n        // [fix]: if time is provided this may cause issues.\n        value.set('hours', 0);\n        value.set('minutes', 0);\n        value.set('seconds', 0);\n\n        return value;\n      },\n\n      setMax: function(value) {\n\n        // [fix]: if time is provided this may cause issues.\n        value.set('hours', 23);\n        value.set('minutes', 59);\n        value.set('seconds', 59);\n\n        return value;\n      },\n\n      validation: function(value, rules) {\n\n        var date;\n        var startDate;\n        var endDate;\n\n        date = moment(value, rules.format || AV_VAL.DATE_FORMAT.SIMPLE);\n        date.set('hours', 0);\n        date.set('minutes', 0);\n        date.set('seconds', 0);\n\n        if(!avValUtils.isEmpty(rules.start.units) && !avValUtils.isEmpty(rules.end.units)) {\n          startDate = validator.getStartDate(rules.start);\n          endDate = validator.getEndDate(rules.end);\n        } else {\n          startDate = moment(rules.start.value, rules.format);\n          endDate = validator.setMax(moment(rules.end.value, rules.format));\n        }\n        return date.isValid() && date.isBetween(startDate, endDate, 'day') || date.isSame(startDate, 'day') || date.isSame(endDate, 'day');\n      },\n\n      validate: function(value, rule) {\n        return avValUtils.isEmpty(value) || validator.validation(value, rule);\n      }\n\n    };\n\n    return validator;\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDate', function(AV_VAL, avValUtils) {\n\n    var validator = {\n      name: 'dateFormat',\n      validate: function(value, rules) {\n        var format = rules && rules.format ? rules.format : AV_VAL.DATE_FORMAT.SIMPLE;\n        return avValUtils.isEmpty(value) || moment(value, format, true).isValid();\n      }\n    };\n    return validator;\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_GLOBALS', {\n    REGIONS: [\n      {\n        'name': 'Alabama',\n        'code': 'AL'\n      },\n      {\n        'name': 'Alaska',\n        'code': 'AK'\n      },\n      {\n        'name': 'Arizona',\n        'code': 'AZ'\n      },\n      {\n        'name': 'Arkansas',\n        'code': 'AR'\n      },\n      {\n        'name': 'California',\n        'code': 'CA'\n      },\n      {\n        'name': 'Colorado',\n        'code': 'CO'\n      },\n      {\n        'name': 'Connecticut',\n        'code': 'CT'\n      },\n      {\n        'name': 'Delaware',\n        'code': 'DE'\n      },\n      {\n        'name': 'District Of Columbia',\n        'code': 'DC'\n      },\n      {\n        'name': 'Florida',\n        'code': 'FL'\n      },\n      {\n        'name': 'Georgia',\n        'code': 'GA'\n      },\n      {\n        'name': 'Hawaii',\n        'code': 'HI'\n      },\n      {\n        'name': 'Idaho',\n        'code': 'ID'\n      },\n      {\n        'name': 'Illinois',\n        'code': 'IL'\n      },\n      {\n        'name': 'Indiana',\n        'code': 'IN'\n      },\n      {\n        'name': 'Iowa',\n        'code': 'IA'\n      },\n      {\n        'name': 'Kansas',\n        'code': 'KS'\n      },\n      {\n        'name': 'Kentucky',\n        'code': 'KY'\n      },\n      {\n        'name': 'Louisiana',\n        'code': 'LA'\n      },\n      {\n        'name': 'Maine',\n        'code': 'ME'\n      },\n      {\n        'name': 'Maryland',\n        'code': 'MD'\n      },\n      {\n        'name': 'Massachusetts',\n        'code': 'MA'\n      },\n      {\n        'name': 'Michigan',\n        'code': 'MI'\n      },\n      {\n        'name': 'Minnesota',\n        'code': 'MN'\n      },\n      {\n        'name': 'Mississippi',\n        'code': 'MS'\n      },\n      {\n        'name': 'Missouri',\n        'code': 'MO'\n      },\n      {\n        'name': 'Montana',\n        'code': 'MT'\n      },\n      {\n        'name': 'Nebraska',\n        'code': 'NE'\n      },\n      {\n        'name': 'Nevada',\n        'code': 'NV'\n      },\n      {\n        'name': 'New Hampshire',\n        'code': 'NH'\n      },\n      {\n        'name': 'New Jersey',\n        'code': 'NJ'\n      },\n      {\n        'name': 'New Mexico',\n        'code': 'NM'\n      },\n      {\n        'name': 'New York',\n        'code': 'NY'\n      },\n      {\n        'name': 'North Carolina',\n        'code': 'NC'\n      },\n      {\n        'name': 'North Dakota',\n        'code': 'ND'\n      },\n      {\n        'name': 'Ohio',\n        'code': 'OH'\n      },\n      {\n        'name': 'Oklahoma',\n        'code': 'OK'\n      },\n      {\n        'name': 'Oregon',\n        'code': 'OR'\n      },\n      {\n        'name': 'Pennsylvania',\n        'code': 'PA'\n      },\n      {\n        'name': 'Rhode Island',\n        'code': 'RI'\n      },\n      {\n        'name': 'South Carolina',\n        'code': 'SC'\n      },\n      {\n        'name': 'South Dakota',\n        'code': 'SD'\n      },\n      {\n        'name': 'Tennessee',\n        'code': 'TN'\n      },\n      {\n        'name': 'Texas',\n        'code': 'TX'\n      },\n      {\n        'name': 'Utah',\n        'code': 'UT'\n      },\n      {\n        'name': 'Vermont',\n        'code': 'VT'\n      },\n      {\n        'name': 'Virginia',\n        'code': 'VA'\n      },\n      {\n        'name': 'Washington',\n        'code': 'WA'\n      },\n      {\n        'name': 'West Virginia',\n        'code': 'WV'\n      },\n      {\n        'name': 'Wisconsin',\n        'code': 'WI'\n      },\n      {\n        'name': 'Wyoming',\n        'code': 'WY'\n      }\n    ]\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_ANALYTICS', {\n    VIRTUAL_PAGE_TRACKING: true,\n    SERVICES: {\n      PIWIK: 'avPiwikAnalytics',\n      SPLUNK: 'avSplunkAnalytics'\n    },\n    EVENTS: {\n      PAGE: '$locationChangeSuccess',\n      DEFAULT: 'click'\n    },\n    PRE_FIX: /^avAnalytics(.*)$/,\n    // should ignore these since they are part of the directives API\n    IGNORE: ['avAnalyticsOn', 'avAnalyticsIf'],\n    ENV: { // not sure if this should live here\n      PROD: {\n        URL: 'https://piwik.availity.com/piwik/'\n      },\n      QA: {\n        URL: 'https://qa-piwik.availity.com/piwik/'\n      }\n    }\n  });\n\n  availity.core.provider('avAnalytics', function(AV_ANALYTICS) {\n\n    var plugins = [];\n    var virtualPageTracking = AV_ANALYTICS.VIRTUAL_PAGE_TRACKING;\n    var appId;\n\n    this.registerPlugins = function(_plugins) {\n\n      if(angular.isString(_plugins)) {\n        _plugins = [_plugins];\n      }\n\n      if(_.isArray(_plugins)) {\n        plugins = _plugins;\n      } else {\n        throw new Error('AvAnalytics.registerPlugins() expects a string or an array.');\n      }\n\n      return plugins;\n    };\n\n    this.setVirtualPageTracking = function(value) {\n      if(arguments.length) {\n        virtualPageTracking = !!value;\n      }\n      return virtualPageTracking;\n    };\n\n    this.setAppID = function(id) {\n      appId = id;\n      return appId;\n    };\n\n    this.$get = function($injector, $q, $log) {\n\n      var AvAnalytics = function() {\n\n        var self = this;\n        this.services = {};\n\n        if(!plugins || plugins.length === 0) {\n          plugins = [AV_ANALYTICS.SERVICES.SPLUNK];\n        }\n\n        angular.forEach(plugins, function(plugin) {\n\n          try {\n            self.services[plugin] = $injector.get(plugin);\n          } catch(err) {\n            $log.error('Could not load `{0}` plugin', [plugin]);\n          }\n        });\n\n      };\n\n      var proto = AvAnalytics.prototype;\n\n      proto.trackEvent = function(properties) {\n\n        var promises = [];\n\n        angular.forEach(this.services, function(handler) {\n          var promise = handler.trackEvent(properties);\n          promises.push(promise);\n        });\n\n        return $q.all(promises);\n      };\n\n      proto.getAppId = function() {\n        return appId;\n      };\n\n      proto.trackPageView = function(url) {\n\n        var promises = [];\n\n        angular.forEach(this.services, function(handler) {\n          var promise = handler.trackPageView(url);\n          promises.push(promise);\n        });\n\n        return $q.all(promises);\n      };\n\n      return new AvAnalytics();\n    };\n\n  });\n\n  availity.core.run(function($rootScope, AV_ANALYTICS, avAnalytics, $location ) {\n    if(avAnalytics.virtualPageTracking) {\n      $rootScope.$on(AV_ANALYTICS.EVENTS.PAGE, function() {\n        avAnalytics.trackPageView($location.absUrl());\n      });\n    }\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avAnalyticsUtils', function(AV_ANALYTICS, $log) {\n\n    var AnalyticsUtils = function() {};\n\n    var proto = AnalyticsUtils.prototype;\n\n    proto.getProperties = function(attributes) {\n\n      var self = this;\n      var props = {};\n\n      _.forEach(attributes, function(value, key) {\n        if(self.isValidAttribute(key) && self.isNotIgnored(key)) {\n          var result = self.getAttribute(key, value);\n          props[result.key] = result.value;\n        }\n      });\n\n      return props;\n    };\n\n    proto.isExternalLink = function(attrs) {\n      return attrs.href && !attrs.ngClick;\n    };\n\n    proto.isNotIgnored = function(key) {\n      var ignored = _.includes(AV_ANALYTICS.IGNORE, key);\n      return !ignored;\n    };\n\n    proto.isValidAttribute = function(key) {\n      return AV_ANALYTICS.PRE_FIX.test(key);\n    };\n\n    proto.lowercase = function(str) {\n      return str.substr(0, 1).toLowerCase() + str.substr(1);\n    };\n\n    proto.getAttribute = function(key, value) {\n      var simpleKey = key.match(AV_ANALYTICS.PRE_FIX);\n\n      if(simpleKey && simpleKey[1]) {\n        return {\n          key: this.lowercase(simpleKey[1]),\n          value: value\n        };\n      }\n    };\n\n    proto.toNum = function(value) {\n      var parsed = parseInt(value, 10);\n      value = isNaN(parsed) ? 0 : parsed;\n      return value;\n    };\n\n    proto.isValid = function(trackingValues) {\n      var valid = true;\n\n      if(trackingValues.value || trackingValues.value === 0) {\n        delete trackingValues.value;\n      }\n\n      _.forEach(trackingValues, function(key, value) {\n        if(availity.isBlank(value) || _.isUndefined(value)) {\n          $log.warn('The analytic tracking value for ' + key.toUpperCase() +' is not defined.');\n          valid = false;\n        }\n      });\n\n      return valid;\n    };\n\n    return new AnalyticsUtils();\n  });\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avSplunkAnalytics', function($log, avLogMessagesResource, $location) {\n\n    var SplunkAnalyticsService = function() {};\n\n    var proto = SplunkAnalyticsService.prototype;\n\n    proto.trackEvent = function(properties) {\n      properties.url = $location.$$absUrl || 'N/A';\n      properties.level = properties.level || 'info';\n\n      return avLogMessagesResource[properties.level](properties);\n    };\n\n    proto.trackPageView  = function(url) {\n\n      var properties = {\n        event: 'page',\n        level: 'info',\n        url: url || $location.$$absUrl()\n      };\n\n      return avLogMessagesResource[properties.level](properties);\n    };\n\n    return new SplunkAnalyticsService();\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.provider('avPiwikAnalytics', function() {\n\n    var that = this;\n    var siteId;\n\n    // can not push these items to `_paq` because it is defined\n    // after page has loaded\n    this._setCustomVariable = function(index, valueName, value, scope) {\n\n      root._paq = root._paq || [];\n\n      if(!index || isNaN(index)) {\n        throw new Error('index must be a number');\n      } else if(!valueName) {\n        throw new Error('valueName must be declared');\n      } else {\n        root._paq.push(['setCustomVariable', index, valueName, value, scope]);\n      }\n    };\n\n    this.setSiteID = function(_siteID) {\n      siteId = _siteID;\n    };\n\n    // allow the user to pass a array of visit variables\n    this.setVisitVariables = function(items) {\n      _.forEach(items, function(item) {\n        that._setCustomVariable(item[0], item[1], item[2], 'visit');\n      });\n    };\n\n    this.setPageVariables = function(index, name, value) {\n      this._setCustomVariable(index, name, value, 'page');\n    };\n\n    this.$get = function(avAnalyticsUtils, avUsersResource, AV_ANALYTICS, $injector, $log, $q, $document, $location, $window) {\n\n      var AvPiwikAnalytics = function() {\n        this.init();\n      };\n\n      var proto = AvPiwikAnalytics.prototype;\n\n      proto.trackEvent = function(properties) {\n\n        if(!root._paq) {\n          $log.warn('Piwik object `_paq` not found in global scope');\n          return $q.when(false);\n        }\n\n        // http://piwik.org/docs/event-tracking/\n        //\n        // PAQ requires that eventValue be an integer.\n        // Check to make sure value is a number if not convert it to 0.\n        //\n        if(properties.value) {\n          properties.value = avAnalyticsUtils.toNum(properties.event);\n        }\n\n        // check to make sure that data being sent to piwik is a string and not null, empty or undefined\n        if(!avAnalyticsUtils.isValid(properties)) {\n          $log.warn('Invalid properties being passed. Tracking info will not be sent.');\n          return $q.when(false);\n        }\n\n        return $q.when(root._paq.push(['trackEvent', properties.category, properties.event, properties.label, properties.value]));\n      };\n\n      proto.trackPageView  = function(url) {\n\n        if(!root._paq) {\n          $log.warn('Piwik object `_paq` not found in global scope');\n          return $q.when(false);\n        }\n\n        return $q.when(root._paq.push(['trackEvent', url]));\n\n      };\n\n      proto.createScript = function() {\n        if(_.isFinite(siteId)) {\n          $log.warn('Invalid Piwik Site Id.  Piwik analytics has been disabled.');\n          return;\n        }\n\n        var url;\n\n        if($location.$$host === 'apps.availity.com') {\n          url = AV_ANALYTICS.ENV.PROD.URL;\n        } else {\n          url = AV_ANALYTICS.ENV.QA.URL;\n        }\n\n        $window._paq = $window._paq || [];\n        $window._paq.push(['enableLinkTracking']);\n        $window._paq.push(['setTrackerUrl', url + 'piwik.php']);\n        $window._paq.push(['setSiteId', siteId]);\n        $window._paq.push(['trackEvent', url]); //track initial page load even if user data is not loaded yet\n\n        var script = document.createElement('script');\n        var target = document.getElementsByTagName('script')[0];\n        script.type = 'text/javascript';\n        script.defer = true;\n        script.async = true;\n        script.src = url + 'piwik.js';\n        target.parentNode.insertBefore(script, target);\n      };\n\n      proto.init = function() {\n        // this.createScript();\n        // avUsersResource.me().then(function(user) {\n        //   $window._paq.push(['setUserId', user.id]);\n        //   self.trackPageView(); //send another page track when the user data loads\n        // });\n\n      };\n\n      return new AvPiwikAnalytics();\n    };\n\n  });\n\n})(window);\n","/* global TraceKit */\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_EXCEPTIONS', {\n    MESSAGES: {\n      NOT_APPLICABLE: 'N/A'\n    },\n    TYPES: {\n      EXCEPTION: 'exception'\n    }\n  });\n\n  availity.core.provider('avExceptionAnalytics', function() {\n\n    var _enabled = true;\n    var appId;\n\n    this.enabled = function(enabled) {\n      _enabled = !!enabled;\n    };\n\n    this.setAppId = function(_id) {\n      appId = _id;\n    };\n\n    this.$get = function(avLogMessagesResource, $location, AV_EXCEPTIONS) {\n\n      var AvExceptionAnalytics = function() {\n\n      };\n\n      var proto = AvExceptionAnalytics.prototype;\n\n      proto.init = function() {\n\n        var self = this;\n\n        if(!_enabled) {\n          return;\n        }\n\n        TraceKit.remoteFetching = false;\n        TraceKit.surroundingLinesToCollect = 11;\n\n        // subscribe() hooks into window.error\n        TraceKit.report.subscribe(function(stacktrace) {\n          self.onError(stacktrace);\n        });\n\n      };\n\n      proto.prettyPrint = function(stacktrace) {\n\n        var message = '';\n\n        var length = stacktrace.stack.length;\n\n        for(var i = 0; i < length; i++) {\n          message += [\n            '[' + _.padLeft(i + '', 2, '0') + '] ',\n            stacktrace.stack[i].func,\n            ' ',\n            stacktrace.stack[i].url,\n            ':',\n            stacktrace.stack[i].line,\n            ':',\n            stacktrace.stack[i].column,\n            i + 1 < length ? '\\n' : ''\n          ].join('');\n\n        }\n\n        return message;\n      };\n\n      proto.onError = function(stacktrace) {\n\n        var userAgent = root.navigator && root.navigator.userAgent ? root.navigator.userAgent : AV_EXCEPTIONS.MESSAGES.NOT_APPLICABLE;\n\n        var message = {\n          errorDate: moment(new Date()).format('YYYY-MM-DDTHH:mm:ssZZ'),\n          errorName: stacktrace.name,\n          errorMessage: stacktrace.message,\n          errorStack: this.prettyPrint(stacktrace),\n          url: $location.$$absUrl,\n          appId: appId || AV_EXCEPTIONS.MESSAGES.NOT_APPLICABLE,\n          // appVersion: AV_EXCEPTIONS.MESSAGES.NOT_APPLICABLE,\n          userAgent: userAgent,\n          userLanguage: navigator.userLanguage,\n          referrer: document.referrer,\n          host: document.domain,\n          screenWidth: $(window).width(),\n          screenHeight: $(window).height(),\n          sdkVersion: availity.VERSION\n        };\n\n        return this.log(message);\n\n      };\n\n      proto.log = function(message) {\n        return avLogMessagesResource['error'](message);\n      };\n\n      proto.trackEvent = function(exception) {\n\n        if(!_enabled) {\n          return;\n        }\n\n        var stacktrace = TraceKit.computeStackTrace(exception);\n\n        return this.onError(stacktrace);\n\n      };\n\n      return new AvExceptionAnalytics();\n\n    };\n  });\n\n  availity.core.config(function($provide) {\n\n    $provide.decorator('$exceptionHandler', function($delegate, $injector) {\n      return function(exception, cause) {\n        $delegate(exception, cause);\n        var errorTacking = $injector.get('avExceptionAnalytics');\n        errorTacking.trackEvent(exception);\n      };\n    });\n\n  });\n\n  availity.core.run(function(avExceptionAnalytics) {\n    avExceptionAnalytics.init();\n  });\n\n})(window);\n","// Issue: https://github.com/angular/angular.js/issues/11165\n// Polyfill: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\n//\n// This polyfill is needed because Angular calls toISOString()\n// when an request parameter is of type Date.  If this polyfill isn't present\n// the ajax call fails.\n//\n(function() {\n\n  'use strict';\n\n  var pad = function(number) {\n    if(number < 10) {\n      return '0' + number;\n    }\n    return number;\n  };\n\n  if(!Date.prototype.toISOString) {\n\n    Date.prototype.toISOString = function() {\n\n      return this.getUTCFullYear() +\n        '-' + pad(this.getUTCMonth() + 1) +\n        '-' + pad(this.getUTCDate()) +\n        'T' + pad(this.getUTCHours()) +\n        ':' + pad(this.getUTCMinutes()) +\n        ':' + pad(this.getUTCSeconds()) +\n        '.' + (this.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) +\n        'Z';\n    };\n  }\n\n})(window);\n","/**\n * availity-angular v0.15.2 -- August-24\n * Copyright 2015 Availity, LLC \n */\n\n// Source: /lib/core/index.js\n\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity || {};\n  availity.VERSION = 'v0.15.2';\n  availity.MODULE = 'availity';\n  availity.core = angular.module(availity.MODULE, ['ng']);\n\n  var originalModule = angular.module;\n  var modules = [];\n\n  angular.module = function(name, deps) {\n\n    if(deps && _.indexOf(modules, name) !== -1 ) {\n      throw new Error('redefining module: ' + name);\n    }\n\n    modules.push(name);\n\n    return originalModule(name, deps);\n  };\n\n  root.availity = availity;\n\n  if(typeof module !== 'undefined' && module.exports) {\n    module.exports = availity;\n  }\n\n})(window);\n\n\n// Source: /lib/core/utils/strings.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/helper/makeString.js\n  availity._stringify = function(object) {\n    if(object === null) {\n      return '';\n    }\n    return '' + object;\n  };\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/isBlank.js\n  availity.isBlank = function(str) {\n    return (/^\\s*$/).test(availity._stringify(str));\n  };\n\n})(window);\n\n// Source: /lib/core/utils/uuid.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var uid = ['0', '0', '0'];\n\n  availity.uuid = function(prefix) {\n    var index = uid.length;\n    var digit;\n\n    while(index) {\n      index--;\n      digit = uid[index].charCodeAt(0);\n      if(digit === 57 /*'9'*/) {\n        uid[index] = 'A';\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n      if(digit === 90  /*'Z'*/) {\n        uid[index] = '0';\n      } else {\n        uid[index] = String.fromCharCode(digit + 1);\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n    }\n    uid.unshift('0');\n    return prefix ? prefix + uid.join('') : uid.join('');\n  };\n\n})(window);\n\n// Source: /lib/core/utils/urls.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.REGEX_API_URL = /^.*?api.availity.com(.*)$/;\n\n  availity.getRelativeUrl = function(url) {\n    var result = url.match(availity.REGEX_API_URL);\n    if(result && result[1]) {\n      return '/api' + result[1];\n    }\n\n    return url;\n  };\n\n})(window);\n\n// Source: /lib/core/utils/print.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // https://github.com/jasonday/printThis/commit/66f9cbd0e3760767342eed4ef32cf8294417b227\n  availity.print = function() {\n\n    if(document.queryCommandSupported('print')) {\n      document.execCommand('print', false, null);\n    } else {\n      window.focus();\n      window.print();\n    }\n  };\n\n})(window);\n\n// Source: /lib/core/utils/throttle.js\n// Original => https://github.com/mgcrea/angular-strap/blob/master/src/helpers/debounce.js\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_THROTTLE', {\n    OPTIONS: {\n      wait: 1000,\n      update: false,\n      trailing: true,\n      leading: false\n    }\n  });\n\n  availity.core.factory('avThrottle', function(AV_THROTTLE, $timeout) {\n\n    return function(fn, wait, options) {\n\n      options = _.merge({}, AV_THROTTLE.OPTIONS, options);\n\n      wait = wait ? wait : AV_THROTTLE.THRESHOLD;\n      var update = angular.isDefined(options.update) ? options.update : AV_THROTTLE.UPDATE;\n      var timer = null;\n\n      return function() {\n        var context = options.context || this;\n        var args = arguments;\n\n        if(!timer) {\n          if(options.leading !== false) {\n            fn.apply(context, args);\n          }\n\n          var later = function() {\n            timer = null;\n            if(options.trailing !== false) {\n              fn.apply(context, args);\n            }\n          };\n\n          timer = $timeout(later, wait, update);\n        }\n\n        return timer;\n\n      };\n    };\n  });\n\n})(window);\n\n// Source: /lib/core/logger/logger.js\n// Orginal => https://github.com/ericzon/angular-ny-logger/blob/0c594e864c93e7f33d36141200096bc6139ddde1/angular-ny-logger.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.provider('AvLogger', function() {\n\n    var _enabled = false;\n\n    this.enabled = function(enabled) {\n      _enabled = !!enabled;\n    };\n\n    this.$get = function($injector) {\n\n      var AvLogger = function(context, $delegate) {\n\n        this.context = context || '';\n        this.$log = $delegate;\n\n      };\n\n      var proto = AvLogger.prototype;\n\n      AvLogger.supplant = function(str, o) {\n\n        var _supplant = function (a, b) {\n          var r = o[b];\n          return r;\n        };\n\n        return str.replace(/\\{([^{}]*)\\}/g, _supplant);\n      };\n\n      AvLogger.isObject = function(element) {\n        var elemStr = ( !angular.isUndefined(element) && !angular.isUndefined(element.constructor) ) ? element.constructor.toString() : '';\n        return (elemStr.indexOf('Object') > -1);\n      };\n\n      AvLogger.getFormattedTimestamp = function(date) {\n\n        return AvLogger.supplant('{0}:{1}:{2}:{3}', [\n          date.getHours(),\n          date.getMinutes(),\n          date.getSeconds(),\n          date.getMilliseconds()\n        ]);\n\n      };\n\n      proto._log = function(originalFn, args) {\n\n        // Allow enabling logger through query params\n        // Ex:\n        //\n        // http://localhost:3000/ui.html#avLogger\n\n        var hash = window.location.hash;\n        hash = hash || '';\n\n        if(!_enabled && hash.indexOf('avLogger') < 0 && originalFn !== 'error') {\n          return;\n        }\n\n        var now  = AvLogger.getFormattedTimestamp(new Date());\n        var message = '';\n        var supplantData = [];\n\n        var context = this.context ? ' [' + this.context + '] ' : '';\n\n        switch(args.length) {\n          case 1:\n            // (1) If the user supplied one argument, then the argument must be\n            // the message itself and _log()\n            // will print: <timestamp> - <context>: <message>\n            supplantData = args[0];\n            message = AvLogger.supplant('{0}{1} - {2}', [now, context, args[0]]);\n            break;\n          case 3:\n            // (3) If the user supplied three arguments, then the first argument\n            // is a method name, the second is the message and the third is an\n            // object of variables to interpolate with the message. For this, _log()\n            // will print: <timestamp> - <context> - <method name>('<message>')\n            supplantData = args[2];\n            message = AvLogger.supplant(\"{0}{1} - {2}(\\'{3}\\')\", [now, context, args[0], args[1]]);\n            break;\n          case 2:\n            // (2) If the user provided two arguments, we need to find out whether\n            // they supplied a method name or an interpolation object.\n            // In order to figure that out, we’ll check the type of the last argument.\n            // If it is a string, then it has to be the message itself while the\n            // first argument is the method name. Otherwise consider the first argument\n            // as the message and the second as array of interpolation variables.\n            // The output print will be according to this check.\n            if(typeof args[1] === 'string') {\n              message = AvLogger.supplant(\"{0}{1} - {2}(\\'{3}\\')\", [now, context, args[0], args[1]]);\n            } else {\n              supplantData = args[1];\n              message = AvLogger.supplant('{0}{1} - {2}', [now, context, args[0]]);\n            }\n            break;\n        }\n\n        var $log = this.$log || $injector.get('$log');\n\n        var params = (AvLogger.isObject(supplantData)) ? [message, supplantData] : [AvLogger.supplant(message, supplantData)];\n        $log[originalFn].apply(null, params);\n\n      };\n\n      proto.log = function() {\n        this._log('log', arguments);\n      };\n\n      proto.info = function() {\n        this._log('info', arguments);\n      };\n\n      proto.warn = function() {\n        this._log('warn', arguments);\n      };\n\n      proto.debug = function() {\n        this._log('debug', arguments);\n      };\n\n      proto.error = function() {\n        this._log('error', arguments);\n      };\n\n      return AvLogger;\n\n    };\n\n  });\n\n\n})(window);\n\n// Source: /lib/core/logger/logger-config.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.config(function($provide) {\n\n    $provide.decorator('$log', function($delegate, AvLogger) {\n      return new AvLogger(null, $delegate);\n    });\n\n  });\n\n})(window);\n\n// Source: /lib/core/polling/polling.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_POLLING', {\n    INTERVAL: 1000, // delay in ms before retrying an async request\n    MAX_ELAPSED_TIME: 5000, // max time in ms before polling stops and rejects original request\n    MAX_RETRY: 30, // # of times the request will be tried\n    DECAY: 1.2, // % the polling interval decays after every retry\n    // maximum time polling is allowed before rejecting the request\n    EVENTS: {\n      MAX_RETRY: 'av:polling:max:retry'\n    },\n    REGEX_URL: /^.*?api.availity.com(.*)$/ // capture the relative url from API\n  });\n\n  var PollingServiceFactory = function($rootScope, $q, $injector, $timeout, $log, AV_POLLING, AV_API) {\n\n    var AvPollingService = function() {\n      this.pendingRequests = []; // stores all request for polling\n    };\n\n    var proto = AvPollingService.prototype;\n\n    proto.response = function(response) {\n\n      if(this.isAsyncResponse(response)) {\n        return this.onAsyncReponse(response);\n      }\n\n      return response || $q.when(response);\n    };\n\n    proto.setDefaults = function(config) {\n\n      var defaultOptions = {\n        pollingInterval: AV_POLLING.INTERVAL,\n        pollingDecay: AV_POLLING.DECAY,\n        pollingMaxInterval: AV_POLLING.MAX_ELAPSED_TIME,\n        pollingRetryCount: 0,\n        pollingStartTime: new Date().getTime()\n      };\n\n      return _.extend(defaultOptions, config);\n    };\n\n    proto.responseError = function(response) {\n      // Return the promise rejection\n      return $q.reject(response);\n    };\n\n    /**\n     * API layer return a link with a polling url for\n     * async responses.\n     *\n     * @param  {Object}  response ajax response\n     * @return {Boolean} true if response has status of 202 (accepted) and location param in header with uri+session link\n     */\n    proto.isAsyncResponse = function(response) {\n\n      return response &&\n        response.config &&\n        response.config.api &&\n        response.status &&\n        response.status === 202 &&\n        angular.isFunction(response.headers) && !availity.isBlank(response.headers(AV_API.HEADERS.SERVER.LOCATION));\n    };\n\n    proto.onAsyncReponse = function(response) {\n\n      response.config = this.setDefaults(response.config);\n\n      var deferred = $q.defer();\n\n      this.queueRequest(deferred, response);\n\n      // [rm3]: Can't call notify before you return promise object?\n      $timeout(function() {\n        // Notify deferred listeners with the original server response\n        deferred.notify(response);\n      }, 0, false);\n\n      return deferred.promise;\n    };\n\n    proto.getUrl = function(url) {\n\n      var result = url.match(AV_POLLING.REGEX_URL);\n      if(result && result[1]) {\n        return '/api' + result[1];\n      }\n\n      return url;\n    };\n\n    proto.queueRequest = function(deferred, response) {\n\n      var self = this;\n      // server replies with location header so set the url into config\n      var _url = availity.getRelativeUrl(response.headers(AV_API.HEADERS.SERVER.LOCATION));\n      var _config = response.config;\n\n\n      // headers – {Object} – Map of strings or functions which return strings representing HTTP headers\n      //  to send to the server. If the return value of a function is null, the header\n      //  will not be sent. Functions accept a config object as an argument.\n      var config = {\n        method: 'GET',\n        api: true,\n        headers: _config.headers,\n        pollingInterval: _config.pollingInterval,\n        pollingMaxRetry: _config.pollingMaxRetry,\n        pollingMaxInterval: _config.pollingMaxInterval,\n        pollingStartTime: _config.pollingStartTime,\n        _pollingDecay: _config._pollingDecay,\n        pollingRetryCount: _config.pollingRetryCount,\n        pollingDecay: _config.pollingDecay,\n        url: _url, /* set the url from the server response */\n        cache: false\n      };\n\n      var request = {\n        id: availity.uuid('request-'),\n        config: config,\n        deferred: deferred\n      };\n\n      var timeout = this.getPollingTimeout(config);\n\n      // each async request should run on its own timer\n      var timer = $timeout(function() {\n        self.retryRequest(request.id);\n      }, timeout, false);\n\n      request.timer = timer;\n\n      // add the async request to the queue\n      this.pushRequest(request);\n\n    };\n\n    proto.popRequest = function(id) {\n\n      var index = null;\n      var request = null;\n\n      for(var i = 0; i < this.pendingRequests.length; i++) {\n        if(this.pendingRequests[i].id === id) {\n          index = i;\n          break;\n        }\n      }\n\n      request = this.pendingRequests[index];\n      this.pendingRequests.splice(index, 1);\n\n      return request;\n    };\n\n    proto.pushRequest = function(request) {\n      this.pendingRequests.push(request);\n    };\n\n    proto.getPollingTimeout = function(config) {\n      return config.pollingDecay * config.pollingInterval;\n    };\n\n    proto.isPollingMaxTimeout = function(config) {\n      var now = new Date().getTime();\n      var elaspedTime = now - config.pollingStartTime;\n      var isElapsed = elaspedTime > config.pollingMaxInterval;\n      return isElapsed;\n    },\n\n      proto.isMaxRetried = function(config) {\n        return config.pollingRetryCount >= AV_POLLING.MAX_RETRY;\n      };\n\n    proto.isPollable = function(config) {\n      var _isTimeout = this.isPollingMaxTimeout(config);\n      var _isMax = this.isMaxRetried(config);\n\n      return _isTimeout || _isMax ? false : true;\n\n    };\n\n    proto.retryRequest = function(id) {\n\n      var self = this;\n      var request = this.popRequest(id);\n      $timeout.cancel(request.timer);\n\n      var config = request.config;\n\n      var deferred = request.deferred;\n\n      if(!this.isPollable(config)) {\n        $log.info('Rejecting pollable response due to timeout');\n        return deferred.reject(request);\n      }\n\n      // increment counters and polling timeouts\n      this.increment(config);\n\n      function successCallback(response) {\n        if(self.isAsyncResponse(response)) {\n          deferred.notify(response);\n          self.queueRequest(request.deferred, response);\n        } else {\n          deferred.resolve(response);\n        }\n      }\n\n      function errorCallback(response) {\n        deferred.reject(response);\n      }\n\n      // Silly circular dependency trick\n      var $http = $injector.get('$http');\n\n      $http(config).then(successCallback, errorCallback);\n\n    };\n\n    proto.increment = function(config) {\n      this.incrementCounter(config);\n      this.incrementDecay(config);\n    };\n\n    proto.incrementDecay = function(config) {\n      if(!config._pollingDecay) {\n        // store the original decay param\n        config._pollingDecay = config.pollingDecay;\n      }\n      config.pollingDecay *= config._pollingDecay;\n    };\n\n    proto.incrementCounter = function(config) {\n      config.pollingRetryCount++;\n    };\n\n    proto.clearRequests = function() {\n      angular.forEach(this.pendingRequests, function(request) {\n        $timeout.cancel(request.timer);\n      });\n      this.pendingRequests = [];\n    };\n\n    return new AvPollingService();\n\n  };\n\n  availity.core.factory('avPollingService', PollingServiceFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-factory.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_API', {\n    HEADERS: {\n      SERVER: {\n        ID: 'X-API-ID',\n        LOCATION: 'Location',\n        STATUS: 'X-Status-Message',\n        GLOBAL_ID: 'X-Global-Transaction-ID'\n      },\n      CLIENT: {\n        SESSION_ID: 'X-Session-ID',\n        AUTH: 'Authorization',\n        OVERRIDE: 'X-HTTP-Method-Override',\n        CALLBACK_URL: 'X-Callback-URL',\n        CUSTOMER_ID: 'X-Availity-Customer-ID'\n      }\n    }\n  });\n\n  var defaultOptions = {\n    // pre-prend the url with a value like `/public` so we can build urls like `public/api/v1/*`\n    prefix: '',\n    // default base url for endpoints\n    path: '/api',\n    // url resource group, such as `/epdm` or `/humana`, for urls like `public/api/epdm/v1/*`\n    resourceGroup: '',\n    // url to resource endpoint like `coverages` or `payers`\n    url: null,\n    // defaults to version 1\n    version: '/v1',\n    // governance level `/internal`\n    level: '',\n    // post-pend the url with `.json`, `.txt` or `.xml`\n    suffix: '',\n    // cache all request by default\n    cache: true,\n    // flag used to enable behaviors around the Availity Rest API\n    api: true,\n    // # of times the polling service has tried to get a response\n    pollingRetryCount: 0,\n    // in ms\n    pollingInterval: 1000,\n    // % the polling interval decays after every retry\n    pollingDecay: 1.2,\n    // maximum time polling is allowed before rejecting the request\n    pollingMaxInterval: 30000\n\n  };\n\n  // Factory that creates ApiResourcess\n  var ApiResourcesFactory = function($http, $q, avPollingService) {\n\n    var AvApiResource = function(options) {\n\n      if(!options) {\n        throw new Error('[options] cannot be null or undefined');\n      }\n\n      // if string the assume url is being passed in\n      if(angular.isString(options)) {\n        options = options.charAt(0) === '/' ? options : '/' + options;\n        options = angular.extend({}, {url: options});\n      }\n\n      if(!options.url) {\n        throw new Error('[url] cannot be null');\n      }\n\n      // get the default options and merge into this instance\n      this.options = angular.extend({}, defaultOptions, (options || {}));\n    };\n\n    // Alias the prototype\n    var proto = AvApiResource.prototype;\n\n    proto._config = function(config) {\n      return angular.extend({}, this.options, (config || {}));\n    },\n\n    proto._getUrl = function(id) {\n      if(this.options.api) {\n        return this._getApiUrl(id);\n      }\n\n      return this.options.url;\n    };\n\n    proto._createResponse = function(data, status, headers, config) {\n      return {\n        data: data,\n        status: status,\n        headers: headers,\n        config: config\n      };\n    };\n\n    proto._request = function(config, afterCallback) {\n\n      var self = this;\n      var defer = $q.defer();\n\n      $http(config)\n        .success(function(data, status, headers, _config) {\n\n          var _response = {\n            data: data,\n            status: status,\n            headers: headers,\n            config: _config\n          };\n\n          // handle the async response if applicable\n          var _promise = $q.when(avPollingService.response(_response));\n          // notify the promise listener of the original response\n          defer.notify(_response);\n\n          // handle the polling service promise\n          _promise.then(function(successResponse) {\n\n            // if service has a callback then call it\n            // var response = self._createResponse(data, status, headers, _config);\n            if(afterCallback) {\n              successResponse = afterCallback.call(self, successResponse);\n            }\n            defer.resolve(successResponse);\n          }, function(errorResponse) {\n            defer.reject(errorResponse);\n          }, function(notifyResponse) {\n            defer.notify(notifyResponse);\n          });\n\n        }).error(function(data, status, headers, _config) {\n          var response = self._createResponse(data, status, headers, _config);\n          defer.reject(response);\n        });\n\n      var promise = defer.promise;\n\n      // recreate the success callback ala $http\n      promise.success = function(fn) {\n        promise.then(function(response) {\n          fn(response.data, response.status, response.headers, response.config);\n        });\n        return promise;\n      };\n\n      // recreate the error callback ala $http\n      promise.error = function(fn) {\n        promise.then(null, function(response) {\n          fn(response.data, response.status, response.headers, config);\n        });\n        return promise;\n      };\n\n      promise.always = promise['finally'];\n\n      return promise;\n    };\n\n    proto._getApiUrl = function(id) {\n      id = id ? '/' + id : '';\n      return this.options.prefix + this.options.path + this.options.level + this.options.resourceGroup + this.options.version + this.options.url + id + this.options.suffix;\n    };\n\n    proto.create = function(data, config) {\n\n      if(!data) {\n        throw new Error('called method without [data]');\n      }\n\n      if(this.beforeCreate) {\n        this.beforeCreate(this, data);\n      }\n\n      config = this._config(config);\n      config.method = 'POST';\n      config.url = this._getUrl();\n      config.data = data;\n\n      return this._request(config, this.afterCreate);\n\n    };\n\n    proto.get = function(id, config) {\n\n      if(!id) {\n        throw new Error('called method without [id]');\n      }\n\n      config = this._config(config);\n      config.method = 'GET';\n      config.url = this._getUrl(id);\n\n      return this._request(config, this.afterGet);\n\n    };\n\n    proto.query = function(config) {\n\n      config = this._config(config);\n      config.method = 'GET';\n      config.url = this._getUrl();\n\n      return this._request(config, this.afterQuery);\n\n    };\n\n    proto.update = function(id, data, config) {\n\n      var url;\n\n      if(_.isString(id) || _.isNumber(id)) {\n        url = this._getUrl(id);\n      }else {\n        url = this._getUrl();\n        // At this point the function signature becomes:\n        //\n        // proto.update = function(data, config) {} a.k.a function(id, data)\n        //\n        config = data;  // config is really the 2nd param\n        data = id; // data is really the first param\n      }\n\n      if(this.beforeUpdate) {\n        data = this.beforeUpdate(data);\n      }\n\n      config = this._config(config);\n      config.method = 'PUT';\n      config.url = url;\n      config.data = data;\n\n      return this._request(config, this.afterUpdate);\n\n    };\n\n    proto.remove = function(id, config) {\n\n      var url;\n      var data;\n\n      if(_.isString(id) || _.isNumber(id)) {\n        url = this._getUrl(id);\n      }else {\n        // At this point the function signature becomes:\n        //\n        // proto.remove = function(data, config)\n        //\n        url = this._getUrl();\n        data = id;\n      }\n\n      config = this._config(config);\n      config.method = 'DELETE';\n      config.url = url;\n      config.data = data;\n\n      return this._request(config, this.afterRemove);\n    };\n\n    proto.beforeCreate = null;\n    proto.afterCreate = null;\n    proto.afterQuery = null;\n    proto.afterGet = null;\n    proto.beforeUpdate = null;\n    proto.afterUpdate = null;\n    proto.afterRemove = null;\n\n    return AvApiResource;\n\n  };\n\n  availity.core.factory('AvApiResource', ApiResourcesFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-users.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  var UserServiceFactory = function(AvApiResource, $q) {\n\n    var AvUsersResource = function() {\n      this.user = null;\n      AvApiResource.call(this, 'users');\n    };\n\n    angular.extend(AvUsersResource.prototype, AvApiResource.prototype, {\n\n      afterGet: function(response) {\n        var user = response.data.user ? response.data.user : response.data;\n        this.user = user;\n        return user;\n      },\n\n      me: function() {\n\n        if(this.user) {\n          return $q.when(this.user);\n        }\n\n        return this.get('me');\n      }\n\n    });\n\n    return new AvUsersResource();\n\n  };\n\n  availity.core.factory('avUsersResource', UserServiceFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-coverages.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avCoveragesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations', cache: false});\n  });\n\n})(window);\n\n// Source: /lib/core/api/api-configurations.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avConfigurationsResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations'});\n  });\n\n})(window);\n\n// Source: /lib/core/api/api-log-messages.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var LogMessagesFactory = function(AvApiResource) {\n\n    var AvLogMessagesResource = function() {\n\n      AvApiResource.call(this, {\n        version: '/v1',\n        url: '/log-messages'\n      });\n    };\n\n    angular.extend(AvLogMessagesResource.prototype, AvApiResource.prototype, {\n\n      buildRequest: function(level, entries) {\n\n        var requestPayload = {};\n\n        if(entries.level) {\n          delete entries.level;\n        }\n\n        requestPayload.level = level;\n        requestPayload.entries = entries;\n\n        return requestPayload;\n      },\n\n      debug: function(entries) {\n        return this.create(this.buildRequest('debug', entries));\n      },\n\n      info: function(entries) {\n        return this.create(this.buildRequest('info', entries));\n      },\n\n      warn: function(entries) {\n        return this.create(this.buildRequest('warn', entries));\n      },\n\n      error: function(entries) {\n        return this.create(this.buildRequest('error', entries));\n      }\n\n    });\n\n    return new AvLogMessagesResource();\n\n  };\n\n  availity.core.factory('avLogMessagesResource', LogMessagesFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-documents.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvDocumentsResourceFactory = function(AvApiResource) {\n\n    var AvDocumentsResource = function() {\n      AvApiResource.call(this, 'documents');\n    };\n\n    angular.extend(AvDocumentsResource.prototype, AvApiResource.prototype, {\n\n      getContents: function(id) {\n        var config = this._config();\n        config.url = this.getContentsUrl(id);\n        return this._request(config);\n      },\n\n      getContentsUrl: function(id) {\n        return this._getUrl(id) + '/contents';\n      }\n\n    });\n\n    return new AvDocumentsResource();\n\n  };\n\n  availity.core.factory('avDocumentsResource', AvDocumentsResourceFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-organizations.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var OrganizationResourceFactory = function(AvApiResource) {\n\n    var OrganizationResource = function() {\n      AvApiResource.call(this, 'organizations');\n    };\n\n    angular.extend(OrganizationResource.prototype, AvApiResource.prototype, {\n\n      getOrganizations: function(config) {\n        return this.query(config).then(function(response) {\n          return response.data.organizations ? response.data.organizations : response.data;\n        });\n      }\n\n    });\n\n    return new OrganizationResource();\n  };\n\n  availity.core.factory('avOrganizationsResource', OrganizationResourceFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-codes.js\n(function(root) {\n\n  'use strict';\n\n\n  var availity = root.availity;\n\n  availity.core.factory('avCodesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/codes'});\n  });\n\n  var AvCodesResourceFactory = function(AvApiResource) {\n\n    var AvCodesResource = function () {\n      AvApiResource.call(this, 'codes');\n    };\n\n    angular.extend(AvCodesResource.prototype, AvApiResource.prototype, {\n\n      getCodes: function (data) {\n\n        // config for the api resource query\n        var config = {};\n        config.params = {};\n\n        if(data.page) {\n          config.params.offset = 50 * (data.page - 1);\n        }\n        if(data.offset) {\n          config.params.offset = data.offset;\n        }\n        if(data.list) {\n          config.params.list = data.list;\n        }\n        if(data.q) {\n          config.params.q = data.q;\n        }\n\n        return this.query(config).then(function (response) {\n          // Format the response into something select2 can read\n          var results = response.data.codes;\n          if(results && !_.has(results[0], 'id')) {\n            _.each(results, function (code) {\n              code.id = code.code;\n            });\n          }\n\n          // calculate if we want to continue searching\n          var moreVal = response.data.offset < response.data.totalCount - response.data.limit;\n          return {\n            more: moreVal,\n            results: results\n          };\n\n        });\n      }\n\n    });\n\n    return new AvCodesResource();\n\n  };\n\n  availity.core.factory('avCodesResource', AvCodesResourceFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-user-permissions.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvUserPermissionsResourceFactory = function(AvApiResource) {\n\n    var AvUserPermissionsResource = function() {\n      AvApiResource.call(this, {\n        level: '/internal',\n        version: '/v1',\n        url: '/axi-user-permissions'\n      });\n      this.sessionDate = moment().toISOString();\n    };\n\n    angular.extend(AvUserPermissionsResource.prototype, AvApiResource.prototype, {\n\n      afterQuery: function(response) {\n        return response.data.axiUserPermissions ? response.data.axiUserPermissions : [];\n      },\n\n      getPermissions: function(permissionIds, region) {\n        var self = this;\n        return this.query({\n          params: {\n            permissionId: permissionIds,\n            region: region,\n            sessionDate: self.sessionDate\n          }\n        });\n      }\n\n    });\n\n    return new AvUserPermissionsResource();\n\n  };\n\n  availity.core.factory('avUserPermissionsResource', AvUserPermissionsResourceFactory);\n\n})(window);\n\n// Source: /lib/core/authorizations/user-authorizations.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvUserAuthorizationsFactory = function($q, $log, avUserPermissionsResource) {\n\n    /**\n     *\n     * @constructor\n     */\n    var AvUserAuthorizations = function() {\n      /**\n       * Region is used to return permission/resources relative to region. If null service will\n       * return all permission relative to current.  If value 'ALL' used it will return value relative\n       * to all regions the user has access to.\n       * @type {string}\n       */\n      this.region = null;\n      /**\n       * PermissionIds contains the set of permissionIds to request from service. If user of service calls\n       * setPermissionIds() or call getPermissions() with complete set of permissionIds needed by application,\n       * then service should only make that one hit to retrieve permission information.\n       * @type {Array}\n       */\n      this.permissionIds = [];\n    };\n\n    var proto = AvUserAuthorizations.prototype;\n\n    proto.setRegion = function(region) {\n      this.region = region;\n      return this;\n    };\n\n    proto.setPermissionIds = function(permissionIds) {\n      if(!angular.isArray(permissionIds)) {\n        throw new Error('permissionsIds must be an array of string IDs for avUserAuthorizations#addPermissionIds');\n      }\n      this.permissionIds = permissionIds;\n      return this;\n    };\n\n    proto.isAuthorized = function(permissionId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        return permission.isAuthorized;\n      });\n    };\n\n    proto.isAnyAuthorized = function(permissionIds) {\n      return this.getPermissions(permissionIds).then(function(permissions) {\n        var permission = _.findWhere(permissions, {isAuthorized: true});\n        return permission !== undefined;\n      });\n    };\n\n    proto.getPermission = function(permissionId) {\n      if(!angular.isString(permissionId)) {\n        throw new Error('permissionsId must be a string ID for avUserAuthorizations#getPermission');\n      }\n\n      return this.getPermissions([permissionId])\n        .then(function(_permissions) {\n          return _permissions[permissionId];\n        });\n    };\n\n    proto.getPermissions = function(permissionIds) {\n      var self = this;\n\n      if(!angular.isArray(permissionIds)) {\n        throw new Error('permissionsIds must be an array of string IDs for avUserAuthorizations#getPermissions');\n      }\n      // merge permission ids to reduce calls to backend\n      self.permissionIds = _.union(self.permissionIds, permissionIds);\n\n      return avUserPermissionsResource\n        .getPermissions(self.permissionIds, self.region)\n        .then(function(_permissions) {\n          return self.toPermissionMap(permissionIds, _permissions);\n        });\n    };\n\n    proto.getOrganizations = function(permissionId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        return permission.organizations;\n      });\n    };\n\n    proto.getPayers = function(permissionId, organizationId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        var organization = _.findWhere(permission.organizations, {id: organizationId});\n\n        if(organization && organization.resources) {\n          return organization.resources;\n        }\n        return [];\n      });\n\n    };\n\n    /**\n     * Converts array permissions to map with value for each permissionId, creating empty permission\n     * if can't find permission in array\n     * @private\n     */\n    proto.toPermissionMap = function(permissionIds, permissions) {\n      var self = this;\n      var map = {};\n      permissions = _.slice(permissions);\n      _.forEach(permissionIds, function(permissionId) {\n        var key = {id: permissionId};\n        var permission = _.findWhere(permissions, key);\n        permission = permission ? self.toPermission(permission) : self.toPermission(key);\n        map[permission.id] = permission;\n      });\n      return map;\n    };\n\n    /**\n     * Convert a permission resource into a structure that is easier to work with.\n     * @private\n     */\n    proto.toPermission = function(permission) {\n      return {\n        id: permission.id,\n        description: permission.description ? permission.description : '',\n        geographies: permission.geographies ? permission.geographies : [],\n        organizations: permission.organizations ? permission.organizations : [],\n        isAuthorized: permission.organizations ? permission.organizations.length > 0 : false\n      };\n    };\n\n    return new AvUserAuthorizations();\n\n  };\n\n  availity.core.factory('avUserAuthorizations', AvUserAuthorizationsFactory);\n\n})(window);\n\n// Source: /lib/core/session/session.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_SESSION', {\n    SESSION_TIMEOUT: 'av:auth:session:timeout',\n    NOT_AUTHORIZED: 'av:auth:not:authorized'\n  });\n\n  availity.core.factory('avSession', function($q, avUsersResource) {\n\n    var AvSession = function() {\n      this.user = null;\n      this.permissions = null;\n    };\n\n    var proto = AvSession.prototype;\n\n    proto.getUser = function() {\n      var self = this;\n\n      if(this.user) {\n        return $q.when(this.user);\n      }\n\n      return avUsersResource.me().then(function(user) {\n        self.user = user;\n        return self.user;\n      });\n    };\n\n\n    proto.destroy = function() {\n      this.user = null;\n      this.permisions = null;\n    };\n\n    return new AvSession();\n  });\n\n})(window);\n\n// Source: /lib/core/idle/idle.js\n// Inspiration => https://github.com/HackedByChinese/ng-idle\n//\n// Rules:\n//\n//  * ping after 3 minutes from last human activity\n//  * reset session after api success except 401\n//  * idle show after 25 of inactivity\n//\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_IDLE', {\n    EVENTS: {\n      IDLE_INACTIVE: 'av:idle:inactive',\n      IDLE_ACTIVE: 'av:idle:active',\n      SESSION_TIMEOUT_ACTIVE: 'av:idle:session:active',\n      SESSION_TIMEOUT_REDIRECT: 'av:idle:session:redirect',\n      HUMAN: 'keydown.av.idle mousedown.av.idle keydown.av.idle',\n      MACHINE: '$locationChangeSuccess'\n    },\n    INTERVALS: {\n      PING: 3 * 60 * 1000, // 3 minutes\n      IDLE: 25 * 60 * 1000, // 25 minutes\n      SESSION: 30 * 60 * 1000 // 30 minutes\n    },\n    URLS: {\n      HOME: '/availity/web/public.elegant.login',\n      PING: '/api/v1/users/me'\n    }\n  });\n\n  availity.core.provider('avIdle', function(AV_IDLE) {\n\n    var enabled = false;\n    var pingUrl;\n    var redirectUrl;\n    var sessionTimeout;\n    var idleTimeout;\n    var pingTimeout;\n\n    this.enable = function(value) {\n      if(arguments.length) {\n        enabled = !!value;\n      }\n      return enabled;\n    };\n\n    this.setSessionTimeout = function(timeout) {\n      sessionTimeout = timeout || AV_IDLE.INTERVALS.SESSION;\n    };\n\n    this.setIdleTimeout = function(timeout) {\n      idleTimeout = timeout || AV_IDLE.INTERVALS.IDLE;\n    };\n\n    this.setPingTimeout = function(timeout) {\n      pingTimeout = timeout || AV_IDLE.INTERVALS.PING;\n    };\n\n    this.setPingUrl = function(url) {\n      pingUrl = url || AV_IDLE.URLS.PING;\n    };\n\n    this.$get = function(AV_IDLE, $log, $document, $rootScope, $timeout, avThrottle, $q, $injector) {\n\n      var AvIdle = function() {\n\n        // $timeout references\n        this._idleTimer = null;\n        this._sessionTimer = null;\n        this._pingTimer = null;\n        this._keepAlive = null;\n\n        // flag used to track if the if user is idle or session expired\n        this.idleActive = false;\n        this.sessionActive = false;\n\n        this.listeners = [];\n\n        this.init();\n\n      };\n\n      var proto = AvIdle.prototype;\n\n      proto.init = function() {\n\n        if(!enabled) {\n          this.stop();\n          return;\n        }\n\n        this.start();\n      };\n\n      proto.start = function() {\n\n        $log.info('avIdle start');\n\n        var self = this;\n        var listener;\n\n        !sessionTimeout && this.setSessionTimeout();\n        !idleTimeout && this.setIdleTimeout();\n        !pingTimeout && this.setPingTimeout();\n        !pingUrl && this.setPingUrl();\n        !redirectUrl && this.setRedirectUrl();\n\n        $rootScope.$on('$destroy', function() {\n          self.stop();\n        });\n\n        $document.find('body').on(AV_IDLE.EVENTS.HUMAN, function(event) {\n          self.onEvent(event);\n        });\n\n        listener = $rootScope.$on(AV_IDLE.EVENTS.MACHINE, function(event, oldUrl, newUrl) {\n          if(oldUrl !== newUrl) {\n            self.onEvent(event);\n          }\n        });\n        this.listeners.push(listener);\n\n        $rootScope.$on(AV_IDLE.EVENTS.SESSION_TIMEOUT_REDIRECT, function() {\n          document.location.href = redirectUrl;\n        });\n\n        this.startIdleTimer();\n        this.startSessionTimer();\n      };\n\n      proto.stop = function() {\n\n        $document.find('body').off(AV_IDLE.EVENTS.HUMAN);\n\n        // turns off Angular event listeners @see http://stackoverflow.com/a/14898795\n        _.each(this.listeners, function(listener) {\n          listener();\n        });\n\n        this.stopPing();\n        this.stopSessionTimer();\n        this.stopIdleTimer();\n      };\n\n      proto.isEnabled = function() {\n        return enabled;\n      };\n\n      proto.enable = function(value) {\n        if(arguments.length) {\n          enabled = !!value;\n        }\n\n        return this;\n      };\n\n      proto.setSessionTimeout = function(timeout) {\n        sessionTimeout = timeout || AV_IDLE.INTERVALS.SESSION;\n        return this;\n      };\n\n      proto.setIdleTimeout = function(timeout) {\n        idleTimeout = timeout || AV_IDLE.INTERVALS.IDLE;\n        return this;\n      };\n\n      proto.setPingTimeout = function(timeout) {\n        pingTimeout = timeout || AV_IDLE.INTERVALS.PING;\n        return this;\n      };\n\n      proto.setPingUrl = function(url) {\n        pingUrl = url || AV_IDLE.URLS.PING;\n        return this;\n      };\n\n      proto.setRedirectUrl = function(url) {\n        redirectUrl = url || AV_IDLE.URLS.HOME;\n        return this;\n      };\n\n      proto.response = function(response) {\n\n        if(this.isApiRequest(response)) {\n          this.startSessionTimer();\n        }\n\n        return response;\n      };\n\n      proto.isApiRequest = function(response) {\n        return response && response.config && response.config.api;\n      };\n\n      proto.responseError = function(response) {\n\n        if(this.isApiRequest(response) && response.status !== 401) {\n          this.startSessionTimer();\n        }\n\n        if(this.isApiRequest() && response.status === 401) {\n          this.stopPing();\n        }\n\n        return $q.reject(response);\n      };\n\n      proto.startSessionTimer = function() {\n\n        var self = this;\n\n        this.stopSessionTimer();\n\n        var later = function() {\n          $log.info('avIdle session has TIMED OUT');\n          self.stop();\n          $rootScope.$broadcast(AV_IDLE.EVENTS.SESSION_TIMEOUT_ACTIVE);\n        };\n\n        $log.info('avIdle session timer has STARTED');\n        this._sessionTimer = $timeout(later, sessionTimeout, false);\n\n      };\n\n      proto.stopSessionTimer = function() {\n        $log.info('avIdle session timer has STOPPED');\n        $timeout.cancel(this._sessionTimer);\n      };\n\n      proto.startIdleTimer = function() {\n\n        var self = this;\n\n        this.stopIdleTimer();\n\n        var later = function() {\n          self.stopIdleTimer();\n          $log.info('avIdle is IDLING');\n          $rootScope.$broadcast(AV_IDLE.EVENTS.IDLE_ACTIVE);\n        };\n\n        $log.info('avIdle idle timer has STARTED');\n        this._idleTimer = $timeout(later, idleTimeout, false);\n      };\n\n      proto.stopIdleTimer = function() {\n        $log.info('avIdle idle timer has STOPPED');\n        $timeout.cancel(this._idleTimer);\n      };\n\n      proto.startPing = function() {\n\n        if(!this._keepAlive) {\n          $log.info('avIdle ping timer has STARTED');\n          this._keepAlive = avThrottle(this.keepAlive, pingTimeout, {context: this});\n        }\n\n        this._pingTimer = this._keepAlive();\n      };\n\n      proto.stopPing = function() {\n        $log.info('avIdle ping timer has STOPPED');\n        if(this._pingTimer) {\n          $timeout.cancel(this._pingTimer);\n        }\n      };\n\n      proto.keepAlive = function() {\n\n        // destroy the reference to that a new throttle gets created upon\n        // next user or system event\n        this._keepAlive = null;\n        var $http = $injector.get('$http');\n\n        $http.get(pingUrl, {\n          cache: false,\n          api: true\n        }).success(function() {\n          $log.info('avIdle keep-alive SUCCESS');\n        }).error(function() {\n          $log.error('avIdle keep-alive FAILURE');\n        });\n      };\n\n      proto.onEvent = function() {\n        this.startIdleTimer();\n        this.startPing();\n      };\n\n      return new AvIdle();\n\n    };\n\n  });\n\n})(window);\n\n// Source: /lib/core/idle/idle-interceptor.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avIdleInterceptor', function(avIdle) {\n    return {\n      response: function(response) {\n        return avIdle.response(response);\n      },\n      responseError: function(response) {\n        return avIdle.responseError(response);\n      }\n    };\n\n  });\n\n  availity.core.config(function($httpProvider) {\n    $httpProvider.interceptors.push('avIdleInterceptor');\n  });\n\n})(window);\n\n// Source: /lib/core/validation/validator.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.value('avValConfig', {\n    classes: {\n      valid: 'ng-valid',\n      invalid: 'ng-invalid',\n      dirty: 'ng-dirty',\n      pristine: 'ng-pristine',\n      touched: 'ng-touched',\n      untouched: 'ng-untouched',\n      submitted: 'ng-submitted'\n    },\n    validators: [\n      'avValPattern',\n      'avValSize',\n      'avValRequired',\n      'avValDateRange',\n      'avValDate'\n    ]\n  });\n\n  availity.core.constant('AV_VAL', {\n    EVENTS: {\n      REVALIDATE: 'av:val:revalidate',\n      SUBMITTED: 'av:val:submitted',\n      FAILED: 'av:val:failed',\n      RESET: 'av:val:reset'\n    },\n    DEBOUNCE: 800,\n    DATE_FORMAT: {\n      SIMPLE: 'MM/DD/YYYY'\n    },\n    PATTERNS: {\n      ALPHA_ONLY: /[^A-Za-z]+/g,\n      NUMERIC_ONLY: /[^0-9]+/g\n    }\n  });\n\n  availity.core.provider('avVal', function() {\n\n    var validators = [];\n    var rules = {};\n    var services = {};\n\n    this.addRules = function(_rules) {\n      rules = angular.extend({}, rules, _rules);\n      return rules;\n    };\n\n    this.addValidators = function(_validators) {\n      validators = validators.concat(_validators);\n      return validators;\n    };\n\n    this.$get = function($injector, $rootScope, $http, $log, avValConfig, AV_VAL) {\n\n      var AvValidation = function() {\n        this.initValidators();\n      };\n\n      var proto = AvValidation.prototype;\n\n      proto.initValidators = function() {\n        var self = this;\n\n        validators = avValConfig.validators.concat(validators);\n\n        angular.forEach(validators, function(name) {\n          self.addValidator(name);\n        });\n\n      };\n\n      proto.addValidator = function(name) {\n        var validator = $injector.get(name);\n        services[validator.name] = validator;\n      };\n\n      proto.addRules = function(_rules) {\n        rules = angular.extend({}, rules, _rules);\n        $rootScope.$broadcast(AV_VAL.EVENTS.REVALIDATE);\n      };\n\n      proto.validate = function(key, element, value, ruleName) {\n\n        var ruleConfig = rules[key];\n        if(!ruleConfig) {\n          $log.error('Failed to get rules key [' + key + '].  Forms must be tagged with a rules set name for validation to work.');\n          return;\n        }\n\n        var contraints = ruleConfig[ruleName];\n        if(!contraints) {\n          $log.info('Rule named [' + ruleName + '] could not be found in the current schema.');\n          contraints = [];\n        }\n\n        var el = element[0];\n        var results  = [];\n        var violations = [];\n        var _valid = true;\n\n        angular.forEach(contraints, function(rule, contraintName) {\n\n          if(!rule) {\n            // when extended rule sets, a user can pass nulls to cancel out a rule so if\n            // one doesn't exist just continue\n            return;\n          }\n\n          var validator = services[contraintName];\n\n          if(angular.isUndefined(validator)) {\n            $log.warn('No validator defined for `' + name + '`');\n            return;\n          }\n\n          var valid = validator.validate(value, rule);\n\n          var validationResult = {\n            valid: valid,\n            ruleName: ruleName,\n            contraintName: contraintName,\n            value: value,\n            message: rule.message,\n            field: el.name || el.id\n          };\n\n          var result = angular.extend({}, rule, validationResult);\n\n          results.push(result);\n          if(!valid) {\n            violations.push(validationResult);\n          }\n          _valid = _valid && valid;\n        });\n\n        return {\n          isValid: _valid,\n          all: results, // all the constraint results\n          violations: violations\n        };\n\n      };\n\n      return new AvValidation();\n\n    };\n\n  });\n})(window);\n\n// Source: /lib/core/validation/validators/validator-utils.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValUtils', function() {\n\n    return {\n\n      isDefined: function(value) {\n        return angular.isDefined(value) && value !== '' && value !== null;\n      },\n\n      isEmpty: function(value) {\n        return !this.isDefined(value) || $.trim(value) === '';\n      }\n    };\n\n  });\n})(window);\n\n\n// Source: /lib/core/validation/validators/validator-size.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValSize', function(avValUtils) {\n\n    var validator =  {\n\n      name: 'size',\n\n      validate: function(value, rule) {\n\n        var min = rule.min || 0;\n        var max = rule.max;\n        var type = rule.type ? rule.type.toLowerCase() : 'text';\n\n        if(_.isNull(value) || _.isUndefined(value)) {\n          value = '';\n        }\n\n        if(type === 'text') {\n          value = value + '';\n          return  avValUtils.isEmpty(value) || value.length >= min && (max === undefined || value.length <= max);\n        }\n\n        // ... must be a Number\n        if(!_.isNumber(value) && /^\\d+$/.test(value)) {\n          value = parseInt(value, 10);\n        }\n\n        return avValUtils.isEmpty(value) || value >= min && (max === undefined || value <= max);\n\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n\n// Source: /lib/core/validation/validators/validator-pattern.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValPattern', function(avValUtils) {\n\n    var validator =  {\n      name: 'pattern',\n      REGEX: /^\\/(.*)\\/([gim]*)$/, //regular expression to test a regular expression\n      asRegExp: function(pattern) {\n        var match;\n\n        if(pattern.test) {\n          return pattern;\n        } else {\n          match = pattern.match(validator.REGEX);\n          if(match) {\n            return new RegExp(match[1], match[2]);\n          } else {\n            throw ('Expected ' + pattern + ' to be a RegExp');\n          }\n        }\n      },\n      validate: function(value, rule) {\n        var values = _.isArray(rule.value) ? rule.value : [rule.value];\n\n        var valid = false;\n\n        _.each(values, function(expresion) {\n          var pattern = validator.asRegExp(expresion);\n          if(avValUtils.isEmpty(value) || pattern.test(value)) {\n            valid = true;\n          }\n        });\n\n        return valid;\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n\n// Source: /lib/core/validation/validators/validator-required.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValRequired', function(avValUtils) {\n\n    var validator =  {\n      name: 'required',\n      validate: function(value) {\n        return !avValUtils.isEmpty(value);\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n\n// Source: /lib/core/validation/validators/validator-date-range.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDateRange', function(AV_VAL, avValUtils) {\n\n    var validator = {\n\n      name: 'dateRange',\n\n      getStartDate: function(start) {\n        return validator.setMin(moment().add(start.value, start.units));\n      },\n\n      getEndDate: function(end) {\n        return validator.setMax(moment().add(end.value, end.units) );\n      },\n\n      setMin: function(value) {\n\n        // [fix]: if time is provided this may cause issues.\n        value.set('hours', 0);\n        value.set('minutes', 0);\n        value.set('seconds', 0);\n\n        return value;\n      },\n\n      setMax: function(value) {\n\n        // [fix]: if time is provided this may cause issues.\n        value.set('hours', 23);\n        value.set('minutes', 59);\n        value.set('seconds', 59);\n\n        return value;\n      },\n\n      validation: function(value, rules) {\n\n        var date;\n        var startDate;\n        var endDate;\n\n        date = moment(value, rules.format || AV_VAL.DATE_FORMAT.SIMPLE);\n        date.set('hours', 0);\n        date.set('minutes', 0);\n        date.set('seconds', 0);\n\n        if(!avValUtils.isEmpty(rules.start.units) && !avValUtils.isEmpty(rules.end.units)) {\n          startDate = validator.getStartDate(rules.start);\n          endDate = validator.getEndDate(rules.end);\n        } else {\n          startDate = moment(rules.start.value, rules.format);\n          endDate = validator.setMax(moment(rules.end.value, rules.format));\n        }\n        return date.isValid() && date.isBetween(startDate, endDate, 'day') || date.isSame(startDate, 'day') || date.isSame(endDate, 'day');\n      },\n\n      validate: function(value, rule) {\n        return avValUtils.isEmpty(value) || validator.validation(value, rule);\n      }\n\n    };\n\n    return validator;\n  });\n})(window);\n\n// Source: /lib/core/validation/validators/validator-date-format.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDate', function(AV_VAL, avValUtils) {\n\n    var validator = {\n      name: 'dateFormat',\n      validate: function(value, rules) {\n        var format = rules && rules.format ? rules.format : AV_VAL.DATE_FORMAT.SIMPLE;\n        return avValUtils.isEmpty(value) || moment(value, format, true).isValid();\n      }\n    };\n    return validator;\n  });\n})(window);\n\n// Source: /lib/core/utils/globals.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_GLOBALS', {\n    REGIONS: [\n      {\n        'name': 'Alabama',\n        'code': 'AL'\n      },\n      {\n        'name': 'Alaska',\n        'code': 'AK'\n      },\n      {\n        'name': 'Arizona',\n        'code': 'AZ'\n      },\n      {\n        'name': 'Arkansas',\n        'code': 'AR'\n      },\n      {\n        'name': 'California',\n        'code': 'CA'\n      },\n      {\n        'name': 'Colorado',\n        'code': 'CO'\n      },\n      {\n        'name': 'Connecticut',\n        'code': 'CT'\n      },\n      {\n        'name': 'Delaware',\n        'code': 'DE'\n      },\n      {\n        'name': 'District Of Columbia',\n        'code': 'DC'\n      },\n      {\n        'name': 'Florida',\n        'code': 'FL'\n      },\n      {\n        'name': 'Georgia',\n        'code': 'GA'\n      },\n      {\n        'name': 'Hawaii',\n        'code': 'HI'\n      },\n      {\n        'name': 'Idaho',\n        'code': 'ID'\n      },\n      {\n        'name': 'Illinois',\n        'code': 'IL'\n      },\n      {\n        'name': 'Indiana',\n        'code': 'IN'\n      },\n      {\n        'name': 'Iowa',\n        'code': 'IA'\n      },\n      {\n        'name': 'Kansas',\n        'code': 'KS'\n      },\n      {\n        'name': 'Kentucky',\n        'code': 'KY'\n      },\n      {\n        'name': 'Louisiana',\n        'code': 'LA'\n      },\n      {\n        'name': 'Maine',\n        'code': 'ME'\n      },\n      {\n        'name': 'Maryland',\n        'code': 'MD'\n      },\n      {\n        'name': 'Massachusetts',\n        'code': 'MA'\n      },\n      {\n        'name': 'Michigan',\n        'code': 'MI'\n      },\n      {\n        'name': 'Minnesota',\n        'code': 'MN'\n      },\n      {\n        'name': 'Mississippi',\n        'code': 'MS'\n      },\n      {\n        'name': 'Missouri',\n        'code': 'MO'\n      },\n      {\n        'name': 'Montana',\n        'code': 'MT'\n      },\n      {\n        'name': 'Nebraska',\n        'code': 'NE'\n      },\n      {\n        'name': 'Nevada',\n        'code': 'NV'\n      },\n      {\n        'name': 'New Hampshire',\n        'code': 'NH'\n      },\n      {\n        'name': 'New Jersey',\n        'code': 'NJ'\n      },\n      {\n        'name': 'New Mexico',\n        'code': 'NM'\n      },\n      {\n        'name': 'New York',\n        'code': 'NY'\n      },\n      {\n        'name': 'North Carolina',\n        'code': 'NC'\n      },\n      {\n        'name': 'North Dakota',\n        'code': 'ND'\n      },\n      {\n        'name': 'Ohio',\n        'code': 'OH'\n      },\n      {\n        'name': 'Oklahoma',\n        'code': 'OK'\n      },\n      {\n        'name': 'Oregon',\n        'code': 'OR'\n      },\n      {\n        'name': 'Pennsylvania',\n        'code': 'PA'\n      },\n      {\n        'name': 'Rhode Island',\n        'code': 'RI'\n      },\n      {\n        'name': 'South Carolina',\n        'code': 'SC'\n      },\n      {\n        'name': 'South Dakota',\n        'code': 'SD'\n      },\n      {\n        'name': 'Tennessee',\n        'code': 'TN'\n      },\n      {\n        'name': 'Texas',\n        'code': 'TX'\n      },\n      {\n        'name': 'Utah',\n        'code': 'UT'\n      },\n      {\n        'name': 'Vermont',\n        'code': 'VT'\n      },\n      {\n        'name': 'Virginia',\n        'code': 'VA'\n      },\n      {\n        'name': 'Washington',\n        'code': 'WA'\n      },\n      {\n        'name': 'West Virginia',\n        'code': 'WV'\n      },\n      {\n        'name': 'Wisconsin',\n        'code': 'WI'\n      },\n      {\n        'name': 'Wyoming',\n        'code': 'WY'\n      }\n    ]\n  });\n\n})(window);\n\n// Source: /lib/core/analytics/analytics.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_ANALYTICS', {\n    VIRTUAL_PAGE_TRACKING: true,\n    SERVICES: {\n      PIWIK: 'avPiwikAnalytics',\n      SPLUNK: 'avSplunkAnalytics'\n    },\n    EVENTS: {\n      PAGE: '$locationChangeSuccess',\n      DEFAULT: 'click'\n    },\n    PRE_FIX: /^avAnalytics(.*)$/,\n    // should ignore these since they are part of the directives API\n    IGNORE: ['avAnalyticsOn', 'avAnalyticsIf'],\n    ENV: { // not sure if this should live here\n      PROD: {\n        URL: 'https://piwik.availity.com/piwik/'\n      },\n      QA: {\n        URL: 'https://qa-piwik.availity.com/piwik/'\n      }\n    }\n  });\n\n  availity.core.provider('avAnalytics', function(AV_ANALYTICS) {\n\n    var plugins = [];\n    var virtualPageTracking = AV_ANALYTICS.VIRTUAL_PAGE_TRACKING;\n    var appId;\n\n    this.registerPlugins = function(_plugins) {\n\n      if(angular.isString(_plugins)) {\n        _plugins = [_plugins];\n      }\n\n      if(_.isArray(_plugins)) {\n        plugins = _plugins;\n      } else {\n        throw new Error('AvAnalytics.registerPlugins() expects a string or an array.');\n      }\n\n      return plugins;\n    };\n\n    this.setVirtualPageTracking = function(value) {\n      if(arguments.length) {\n        virtualPageTracking = !!value;\n      }\n      return virtualPageTracking;\n    };\n\n    this.setAppID = function(id) {\n      appId = id;\n      return appId;\n    };\n\n    this.$get = function($injector, $q, $log) {\n\n      var AvAnalytics = function() {\n\n        var self = this;\n        this.services = {};\n\n        if(!plugins || plugins.length === 0) {\n          plugins = [AV_ANALYTICS.SERVICES.SPLUNK];\n        }\n\n        angular.forEach(plugins, function(plugin) {\n\n          try {\n            self.services[plugin] = $injector.get(plugin);\n          } catch(err) {\n            $log.error('Could not load `{0}` plugin', [plugin]);\n          }\n        });\n\n      };\n\n      var proto = AvAnalytics.prototype;\n\n      proto.trackEvent = function(properties) {\n\n        var promises = [];\n\n        angular.forEach(this.services, function(handler) {\n          var promise = handler.trackEvent(properties);\n          promises.push(promise);\n        });\n\n        return $q.all(promises);\n      };\n\n      proto.getAppId = function() {\n        return appId;\n      };\n\n      proto.trackPageView = function(url) {\n\n        var promises = [];\n\n        angular.forEach(this.services, function(handler) {\n          var promise = handler.trackPageView(url);\n          promises.push(promise);\n        });\n\n        return $q.all(promises);\n      };\n\n      return new AvAnalytics();\n    };\n\n  });\n\n  availity.core.run(function($rootScope, AV_ANALYTICS, avAnalytics, $location ) {\n    if(avAnalytics.virtualPageTracking) {\n      $rootScope.$on(AV_ANALYTICS.EVENTS.PAGE, function() {\n        avAnalytics.trackPageView($location.absUrl());\n      });\n    }\n  });\n\n})(window);\n\n// Source: /lib/core/analytics/analytics-util.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avAnalyticsUtils', function(AV_ANALYTICS, $log) {\n\n    var AnalyticsUtils = function() {};\n\n    var proto = AnalyticsUtils.prototype;\n\n    proto.getProperties = function(attributes) {\n\n      var self = this;\n      var props = {};\n\n      _.forEach(attributes, function(value, key) {\n        if(self.isValidAttribute(key) && self.isNotIgnored(key)) {\n          var result = self.getAttribute(key, value);\n          props[result.key] = result.value;\n        }\n      });\n\n      return props;\n    };\n\n    proto.isExternalLink = function(attrs) {\n      return attrs.href && !attrs.ngClick;\n    };\n\n    proto.isNotIgnored = function(key) {\n      var ignored = _.includes(AV_ANALYTICS.IGNORE, key);\n      return !ignored;\n    };\n\n    proto.isValidAttribute = function(key) {\n      return AV_ANALYTICS.PRE_FIX.test(key);\n    };\n\n    proto.lowercase = function(str) {\n      return str.substr(0, 1).toLowerCase() + str.substr(1);\n    };\n\n    proto.getAttribute = function(key, value) {\n      var simpleKey = key.match(AV_ANALYTICS.PRE_FIX);\n\n      if(simpleKey && simpleKey[1]) {\n        return {\n          key: this.lowercase(simpleKey[1]),\n          value: value\n        };\n      }\n    };\n\n    proto.toNum = function(value) {\n      var parsed = parseInt(value, 10);\n      value = isNaN(parsed) ? 0 : parsed;\n      return value;\n    };\n\n    proto.isValid = function(trackingValues) {\n      var valid = true;\n\n      if(trackingValues.value || trackingValues.value === 0) {\n        delete trackingValues.value;\n      }\n\n      _.forEach(trackingValues, function(key, value) {\n        if(availity.isBlank(value) || _.isUndefined(value)) {\n          $log.warn('The analytic tracking value for ' + key.toUpperCase() +' is not defined.');\n          valid = false;\n        }\n      });\n\n      return valid;\n    };\n\n    return new AnalyticsUtils();\n  });\n})(window);\n\n// Source: /lib/core/analytics/analytics-splunk.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avSplunkAnalytics', function($log, avLogMessagesResource, $location) {\n\n    var SplunkAnalyticsService = function() {};\n\n    var proto = SplunkAnalyticsService.prototype;\n\n    proto.trackEvent = function(properties) {\n      properties.url = $location.$$absUrl || 'N/A';\n      properties.level = properties.level || 'info';\n\n      return avLogMessagesResource[properties.level](properties);\n    };\n\n    proto.trackPageView  = function(url) {\n\n      var properties = {\n        event: 'page',\n        level: 'info',\n        url: url || $location.$$absUrl()\n      };\n\n      return avLogMessagesResource[properties.level](properties);\n    };\n\n    return new SplunkAnalyticsService();\n  });\n\n})(window);\n\n// Source: /lib/core/analytics/analytics-piwik.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.provider('avPiwikAnalytics', function() {\n\n    var that = this;\n    var siteId;\n\n    // can not push these items to `_paq` because it is defined\n    // after page has loaded\n    this._setCustomVariable = function(index, valueName, value, scope) {\n\n      root._paq = root._paq || [];\n\n      if(!index || isNaN(index)) {\n        throw new Error('index must be a number');\n      } else if(!valueName) {\n        throw new Error('valueName must be declared');\n      } else {\n        root._paq.push(['setCustomVariable', index, valueName, value, scope]);\n      }\n    };\n\n    this.setSiteID = function(_siteID) {\n      siteId = _siteID;\n    };\n\n    // allow the user to pass a array of visit variables\n    this.setVisitVariables = function(items) {\n      _.forEach(items, function(item) {\n        that._setCustomVariable(item[0], item[1], item[2], 'visit');\n      });\n    };\n\n    this.setPageVariables = function(index, name, value) {\n      this._setCustomVariable(index, name, value, 'page');\n    };\n\n    this.$get = function(avAnalyticsUtils, avUsersResource, AV_ANALYTICS, $injector, $log, $q, $document, $location, $window) {\n\n      var AvPiwikAnalytics = function() {\n        this.init();\n      };\n\n      var proto = AvPiwikAnalytics.prototype;\n\n      proto.trackEvent = function(properties) {\n\n        if(!root._paq) {\n          $log.warn('Piwik object `_paq` not found in global scope');\n          return $q.when(false);\n        }\n\n        // http://piwik.org/docs/event-tracking/\n        //\n        // PAQ requires that eventValue be an integer.\n        // Check to make sure value is a number if not convert it to 0.\n        //\n        if(properties.value) {\n          properties.value = avAnalyticsUtils.toNum(properties.event);\n        }\n\n        // check to make sure that data being sent to piwik is a string and not null, empty or undefined\n        if(!avAnalyticsUtils.isValid(properties)) {\n          $log.warn('Invalid properties being passed. Tracking info will not be sent.');\n          return $q.when(false);\n        }\n\n        return $q.when(root._paq.push(['trackEvent', properties.category, properties.event, properties.label, properties.value]));\n      };\n\n      proto.trackPageView  = function(url) {\n\n        if(!root._paq) {\n          $log.warn('Piwik object `_paq` not found in global scope');\n          return $q.when(false);\n        }\n\n        return $q.when(root._paq.push(['trackEvent', url]));\n\n      };\n\n      proto.createScript = function() {\n        if(_.isFinite(siteId)) {\n          $log.warn('Invalid Piwik Site Id.  Piwik analytics has been disabled.');\n          return;\n        }\n\n        var url;\n\n        if($location.$$host === 'apps.availity.com') {\n          url = AV_ANALYTICS.ENV.PROD.URL;\n        } else {\n          url = AV_ANALYTICS.ENV.QA.URL;\n        }\n\n        $window._paq = $window._paq || [];\n        $window._paq.push(['enableLinkTracking']);\n        $window._paq.push(['setTrackerUrl', url + 'piwik.php']);\n        $window._paq.push(['setSiteId', siteId]);\n        $window._paq.push(['trackEvent', url]); //track initial page load even if user data is not loaded yet\n\n        var script = document.createElement('script');\n        var target = document.getElementsByTagName('script')[0];\n        script.type = 'text/javascript';\n        script.defer = true;\n        script.async = true;\n        script.src = url + 'piwik.js';\n        target.parentNode.insertBefore(script, target);\n      };\n\n      proto.init = function() {\n        // this.createScript();\n        // avUsersResource.me().then(function(user) {\n        //   $window._paq.push(['setUserId', user.id]);\n        //   self.trackPageView(); //send another page track when the user data loads\n        // });\n\n      };\n\n      return new AvPiwikAnalytics();\n    };\n\n  });\n\n})(window);\n\n// Source: /lib/core/analytics/analytics-exceptions.js\n\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_EXCEPTIONS', {\n    MESSAGES: {\n      NOT_APPLICABLE: 'N/A'\n    },\n    TYPES: {\n      EXCEPTION: 'exception'\n    }\n  });\n\n  availity.core.provider('avExceptionAnalytics', function() {\n\n    var _enabled = true;\n    var appId;\n\n    this.enabled = function(enabled) {\n      _enabled = !!enabled;\n    };\n\n    this.setAppId = function(_id) {\n      appId = _id;\n    };\n\n    this.$get = function(avLogMessagesResource, $location, AV_EXCEPTIONS) {\n\n      var AvExceptionAnalytics = function() {\n\n      };\n\n      var proto = AvExceptionAnalytics.prototype;\n\n      proto.init = function() {\n\n        var self = this;\n\n        if(!_enabled) {\n          return;\n        }\n\n        TraceKit.remoteFetching = false;\n        TraceKit.surroundingLinesToCollect = 11;\n\n        // subscribe() hooks into window.error\n        TraceKit.report.subscribe(function(stacktrace) {\n          self.onError(stacktrace);\n        });\n\n      };\n\n      proto.prettyPrint = function(stacktrace) {\n\n        var message = '';\n\n        var length = stacktrace.stack.length;\n\n        for(var i = 0; i < length; i++) {\n          message += [\n            '[' + _.padLeft(i + '', 2, '0') + '] ',\n            stacktrace.stack[i].func,\n            ' ',\n            stacktrace.stack[i].url,\n            ':',\n            stacktrace.stack[i].line,\n            ':',\n            stacktrace.stack[i].column,\n            i + 1 < length ? '\\n' : ''\n          ].join('');\n\n        }\n\n        return message;\n      };\n\n      proto.onError = function(stacktrace) {\n\n        var userAgent = root.navigator && root.navigator.userAgent ? root.navigator.userAgent : AV_EXCEPTIONS.MESSAGES.NOT_APPLICABLE;\n\n        var message = {\n          errorDate: moment(new Date()).format('YYYY-MM-DDTHH:mm:ssZZ'),\n          errorName: stacktrace.name,\n          errorMessage: stacktrace.message,\n          errorStack: this.prettyPrint(stacktrace),\n          url: $location.$$absUrl,\n          appId: appId || AV_EXCEPTIONS.MESSAGES.NOT_APPLICABLE,\n          // appVersion: AV_EXCEPTIONS.MESSAGES.NOT_APPLICABLE,\n          userAgent: userAgent,\n          userLanguage: navigator.userLanguage,\n          referrer: document.referrer,\n          host: document.domain,\n          screenWidth: $(window).width(),\n          screenHeight: $(window).height(),\n          sdkVersion: availity.VERSION\n        };\n\n        return this.log(message);\n\n      };\n\n      proto.log = function(message) {\n        return avLogMessagesResource['error'](message);\n      };\n\n      proto.trackEvent = function(exception) {\n\n        if(!_enabled) {\n          return;\n        }\n\n        var stacktrace = TraceKit.computeStackTrace(exception);\n\n        return this.onError(stacktrace);\n\n      };\n\n      return new AvExceptionAnalytics();\n\n    };\n  });\n\n  availity.core.config(function($provide) {\n\n    $provide.decorator('$exceptionHandler', function($delegate, $injector) {\n      return function(exception, cause) {\n        $delegate(exception, cause);\n        var errorTacking = $injector.get('avExceptionAnalytics');\n        errorTacking.trackEvent(exception);\n      };\n    });\n\n  });\n\n  availity.core.run(function(avExceptionAnalytics) {\n    avExceptionAnalytics.init();\n  });\n\n})(window);\n\n// Source: /lib/core/utils/date-polyfill.js\n// Issue: https://github.com/angular/angular.js/issues/11165\n// Polyfill: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\n//\n// This polyfill is needed because Angular calls toISOString()\n// when an request parameter is of type Date.  If this polyfill isn't present\n// the ajax call fails.\n//\n(function() {\n\n  'use strict';\n\n  var pad = function(number) {\n    if(number < 10) {\n      return '0' + number;\n    }\n    return number;\n  };\n\n  if(!Date.prototype.toISOString) {\n\n    Date.prototype.toISOString = function() {\n\n      return this.getUTCFullYear() +\n        '-' + pad(this.getUTCMonth() + 1) +\n        '-' + pad(this.getUTCDate()) +\n        'T' + pad(this.getUTCHours()) +\n        ':' + pad(this.getUTCMinutes()) +\n        ':' + pad(this.getUTCSeconds()) +\n        '.' + (this.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) +\n        'Z';\n    };\n  }\n\n})(window);\n\n//# sourceMappingURL=maps/availity-angular.js.map"],"sourceRoot":"/source/"}