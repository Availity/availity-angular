{"version":3,"sources":["/source/index.js","/source/strings.js","/source/uuid.js","/source/urls.js","/source/polling.js","/source/api-factory.js","/source/api-users.js","/source/api-permissions.js","/source/api-coverages.js","/source/api-configurations.js","/source/api-log-messages.js","/source/api-documents.js","/source/api-organizations.js","/source/api-codes.js","/source/session.js","/source/validator.js","/source/validator-utils.js","/source/validator-size.js","/source/validator-pattern.js","/source/validator-required.js","/source/validator-date-range.js","/source/validator-date-format.js","/source/globals.js","availity-angular.js"],"names":["root","availity","VERSION","MODULE","core","angular","module","originalModule","modules","name","deps","_","indexOf","Error","push","window","console","log","exports","_stringify","object","isBlank","str","uid","uuid","prefix","index","length","digit","charCodeAt","join","String","fromCharCode","unshift","REGEX_API_URL","getRelativeUrl","url","result","match","constant","INTERVAL","MAX_ELAPSED_TIME","MAX_RETRY","DECAY","EVENTS","REGEX_URL","PollingServiceFactory","$rootScope","$q","$injector","$timeout","$log","AV_POLLING","AvPollingService","this","pendingRequests","proto","prototype","response","isAsyncResponse","onAsyncReponse","when","setDefaults","config","defaultOptions","pollingInterval","pollingDecay","pollingMaxInterval","pollingRetryCount","pollingStartTime","Date","getTime","extend","responseError","reject","api","status","isFunction","headers","deferred","defer","queueRequest","notify","promise","getUrl","self","_url","_config","method","pollingMaxRetry","_pollingDecay","cache","request","id","timeout","getPollingTimeout","timer","retryRequest","pushRequest","popRequest","i","splice","isPollingMaxTimeout","now","elaspedTime","isElapsed","isMaxRetried","isPollable","_isTimeout","_isMax","cancel","info","increment","successCallback","resolve","errorCallback","$http","get","then","incrementCounter","incrementDecay","clearRequests","forEach","factory","path","version","level","suffix","ApiResourcesFactory","avPollingService","AvApiResource","options","isString","charAt","_getUrl","_getApiUrl","_createResponse","data","_request","afterCallback","success","_response","_promise","successResponse","call","errorResponse","notifyResponse","error","fn","always","all","afterAll","query","create","beforeCreate","afterCreate","afterGet","params","update","beforeUpdate","afterUpdate","updateWithoutId","remove","afterRemove","UserServiceFactory","AvUsersResource","user","me","PermissionFactory","AvPermissionsResource","permissions","getPermissions","permissionId","LogMessagesFactory","logMessagesResource","buildRequest","entries","requestPayload","debug","warn","AvDocumentsResourceFactory","AvDocumentsResource","getContents","getContentsUrl","OrganizationResourceFactory","OrganizationResource","getOrganizations","organizations","SESSION_TIMEOUT","NOT_AUTHORIZED","avUsersResource","avPermissionsResource","AvSession","getUser","hasPermission","orgId","geography","permission","find","p","undefined","contains","organizationIds","geographies","destroy","permisions","value","classes","valid","invalid","dirty","pristine","touched","untouched","submitted","validators","REVALIDATE","SUBMITTED","FAILED","RESET","DEBOUNCE","DATE_FORMAT","SIMPLE","PATTERNS","ALPHA_ONLY","NUMERIC_ONLY","provider","that","rules","addRules","$get","avValConfig","AV_VAL","AvValidation","initValidators","validator","clearAll","$broadcast","validate","key","element","ruleName","contraints","el","results","violations","_valid","rule","contraintName","isUndefined","validationResult","message","field","isValid","isDefined","isEmpty","$","trim","avValUtils","minLength","min","maxLength","max","REGEX","asRegExp","pattern","test","RegExp","values","isArray","each","expresion","getMinDate","minDate","period","replace","val","parseInt","moment","subtract","getMaxDate","maxDate","add","set","validation","format","isBefore","isAfter","STATES","code"],"mappings":"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","file":"availity-angular.min.js","sourcesContent":["/*global module*/\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity || {};\n  availity.VERSION = 'v0.0.0';\n  availity.MODULE = 'availity';\n  availity.core = angular.module(availity.MODULE, ['ng']);\n\n  var originalModule = angular.module;\n  var modules = [];\n\n  angular.module = function(name, deps) {\n\n    if(deps && _.indexOf(modules, name) !== -1 ) {\n      throw new Error('redefining module: ' + name);\n    }\n    modules.push(name);\n    if(window.console && window.console.log) {\n      window.console.log(modules);\n    }\n    return originalModule(name, deps);\n  };\n\n  root.availity = availity;\n\n  if(typeof module !== 'undefined' && module.exports) {\n    module.exports = availity;\n  }\n\n})(window);\n\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/helper/makeString.js\n  availity._stringify = function(object) {\n    if(object === null) {\n      return '';\n    }\n    return '' + object;\n  };\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/isBlank.js\n  availity.isBlank = function(str) {\n    availity._stringify(str);\n  };\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var uid = ['0', '0', '0'];\n\n  availity.uuid = function(prefix) {\n    var index = uid.length;\n    var digit;\n\n    while(index) {\n      index--;\n      digit = uid[index].charCodeAt(0);\n      if(digit === 57 /*'9'*/) {\n        uid[index] = 'A';\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n      if(digit === 90  /*'Z'*/) {\n        uid[index] = '0';\n      } else {\n        uid[index] = String.fromCharCode(digit + 1);\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n    }\n    uid.unshift('0');\n    return prefix ? prefix + uid.join('') : uid.join('');\n  };\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.REGEX_API_URL = /^.*?api.availity.com(.*)$/;\n\n  availity.getRelativeUrl = function(url) {\n    var result = url.match(availity.REGEX_API_URL);\n    if(result && result[1]) {\n      return '/api' + result[1];\n    }\n\n    return url;\n  };\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_POLLING', {\n    INTERVAL: 1000, // delay in ms before retrying an async request\n    MAX_ELAPSED_TIME: 5000, // max time in ms before polling stops and rejects original request\n    MAX_RETRY: 30, // # of times the request will be tried\n    DECAY: 1.2, // % the polling interval decays after every retry\n    // maximum time polling is allowed before rejecting the request\n    EVENTS: {\n      MAX_RETRY: 'polling:max:retry'\n    },\n    REGEX_URL: /^.*?api.availity.com(.*)$/ // capture the relative url from API\n  });\n\n  var PollingServiceFactory = function($rootScope, $q, $injector, $timeout, $log, AV_POLLING) {\n\n    var AvPollingService = function() {\n      this.pendingRequests = []; // stores all request for polling\n    };\n\n    var proto = AvPollingService.prototype;\n\n    proto.response = function(response) {\n\n      if(this.isAsyncResponse(response)) {\n        return this.onAsyncReponse(response);\n      }\n\n      return response || $q.when(response);\n    };\n\n    proto.setDefaults = function(config) {\n\n      var defaultOptions = {\n        pollingInterval: AV_POLLING.INTERVAL,\n        pollingDecay: AV_POLLING.DECAY,\n        pollingMaxInterval: AV_POLLING.MAX_ELAPSED_TIME,\n        pollingRetryCount: 0,\n        pollingStartTime: new Date().getTime()\n      };\n\n      config = _.extend(defaultOptions, config);\n    };\n\n    proto.responseError = function(response) {\n      // Return the promise rejection\n      return $q.reject(response);\n    };\n\n    /**\n     * API layer return a link with a polling url for\n     * async responses.\n     *\n     * @param  {Object}  response ajax response\n     * @return {Boolean} true if response has status of 202 (accepted) and location param in header with uri+session link\n     */\n    proto.isAsyncResponse = function(response) {\n\n      return response &&\n        response.config &&\n        response.config.api &&\n        response.status &&\n        response.status === 202 &&\n        angular.isFunction(response.headers) && !availity.isBlank(response.headers('location'));\n    };\n\n    proto.onAsyncReponse = function(response) {\n\n      this.setDefaults(response.config);\n\n      var deferred = $q.defer();\n\n      this.queueRequest(deferred, response);\n\n      // [rm3]: Can't call notify before you return promise object?\n      $timeout(function() {\n        // Notify deferred listeners with the original server response\n        deferred.notify(response);\n      });\n\n      return deferred.promise;\n    };\n\n    proto.getUrl = function(url) {\n\n      var result = url.match(AV_POLLING.REGEX_URL);\n      if(result && result[1]) {\n        return '/api' + result[1];\n      }\n\n      return url;\n    };\n\n    proto.queueRequest = function(deferred, response) {\n\n      var self = this;\n      // server replies with poll href so set the url into config\n      var _url = availity.getRelativeUrl(response.headers('location'));\n      var _config = response.config;\n\n      var config = {\n        method: 'GET',\n        api: true,\n        pollingInterval: _config.pollingInterval,\n        pollingMaxRetry: _config.pollingMaxRetry,\n        pollingMaxInterval: _config.pollingMaxInterval,\n        pollingStartTime: _config.pollingStartTime,\n        _pollingDecay: _config._pollingDecay,\n        pollingRetryCount: _config.pollingRetryCount,\n        pollingDecay: _config.pollingDecay,\n        url: _url, /* set the url from the server response */\n        cache: false\n      };\n\n      var request = {\n        id: availity.uuid('request-'),\n        config: config,\n        deferred: deferred\n      };\n\n      var timeout = this.getPollingTimeout(config);\n\n      // each async request should run on its own timer\n      var timer = $timeout(function() {\n        self.retryRequest(request.id);\n      }, timeout);\n\n      request.timer = timer;\n\n      // add the async request to the queue\n      this.pushRequest(request);\n\n    };\n\n    proto.popRequest = function(id) {\n\n      var index = null;\n      var request = null;\n\n      for(var i = 0; i < this.pendingRequests.length; i++) {\n        if(this.pendingRequests[i].id === id) {\n          index = i;\n          break;\n        }\n      }\n\n      request = this.pendingRequests[index];\n      this.pendingRequests.splice(index, 1);\n\n      return request;\n    };\n\n    proto.pushRequest = function(request) {\n      this.pendingRequests.push(request);\n    };\n\n    proto.getPollingTimeout = function(config) {\n      return config.pollingDecay * config.pollingMaxInterval;\n    };\n\n    proto.isPollingMaxTimeout = function(config) {\n      var now = new Date().getTime();\n      var elaspedTime = now - config.pollingStartTime;\n      var isElapsed = elaspedTime > config.pollingMaxInterval;\n      return isElapsed;\n    },\n\n      proto.isMaxRetried = function(config) {\n        return config.pollingRetryCount >= AV_POLLING.MAX_RETRY;\n      };\n\n    proto.isPollable = function(config) {\n      var _isTimeout = this.isPollingMaxTimeout(config);\n      var _isMax = this.isMaxRetried(config);\n\n      return _isTimeout || _isMax ? false : true;\n\n    };\n\n    proto.retryRequest = function(id) {\n\n      var self = this;\n      var request = this.popRequest(id);\n      $timeout.cancel(request.timer);\n\n      var config = request.config;\n\n      var deferred = request.deferred;\n\n      if(!this.isPollable(config)) {\n        $log.info('Rejecting pollable response due to timeout constraint');\n        return deferred.reject(request);\n      }\n\n      // increment counters and polling timeouts\n      this.increment(config);\n\n      function successCallback(response) {\n        if(self.isAsyncResponse(response)) {\n          deferred.notify(response);\n          self.queueRequest(request.deferred, response);\n        } else {\n          deferred.resolve(response);\n        }\n      }\n\n      function errorCallback(response) {\n        deferred.reject(response);\n      }\n\n      // Silly circular dependency trick\n      var $http = $injector.get('$http');\n\n      $http(config).then(successCallback, errorCallback);\n\n    };\n\n    proto.increment = function(config) {\n      this.incrementCounter(config);\n      this.incrementDecay(config);\n    };\n\n    proto.incrementDecay = function(config) {\n      if(!config._pollingDecay) {\n        // store the original decay param\n        config._pollingDecay = config.pollingDecay;\n      }\n      config.pollingDecay *= config._pollingDecay;\n    };\n\n    proto.incrementCounter = function(config) {\n      config.pollingRetryCount++;\n    };\n\n    proto.clearRequests = function() {\n      angular.forEach(this.pendingRequests, function(request) {\n        $timeout.cancel(request.timer);\n      });\n      this.pendingRequests = [];\n    };\n\n    return new AvPollingService();\n\n  };\n\n  availity.core.factory('avPollingService', PollingServiceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var defaultOptions = {\n    // pre-prend the url with a value like `/public` so we can build urls like `public/api/v1/*`\n    prefix: '',\n    // default base url for endpoints\n    path: '/api',\n    // url to resource endpoint like `coverages` or `payers`\n    url: null,\n    // defaults to version 1\n    version: '/v1',\n    // governance level `/internal`\n    level: '',\n    // post-pend the url with `.json`, `.txt` or `.xml`\n    suffix: '',\n    // cache all request by default\n    cache: true,\n    // flag used to enable behaviors around the Availity Rest API\n    api: true,\n    // # of times the polling service has tried to get a response\n    pollingRetryCount: 0,\n    // in ms\n    pollingInterval: 1000,\n    // % the polling interval decays after every retry\n    pollingDecay: 1.2,\n    // maximum time polling is allowed before rejecting the request\n    pollingMaxInterval: 30000\n\n  };\n\n  // Factory that creates ApiResourcess\n  var ApiResourcesFactory = function($http, $q, avPollingService) {\n\n    var AvApiResource = function(options) {\n\n      if(!options) {\n        throw new Error('[options] cannot be null or undefined');\n      }\n\n      // if string the assume url is being passed in\n      if(angular.isString(options)) {\n        options = options.charAt(0) === '/' ? options : '/' + options;\n        options = angular.extend({}, {url: options});\n      }\n\n      if(!options.url) {\n        throw new Error('[url] cannot be null');\n      }\n\n      // get the default options and merge into this instance\n      this.options = angular.extend({}, defaultOptions, (options || {}));\n    };\n\n    // Alias the prototype\n    var proto = AvApiResource.prototype;\n\n    proto._config = function(config) {\n      return angular.extend({}, this.options, (config || {}));\n    },\n\n      proto._getUrl = function(id) {\n        if(this.options.api) {\n          return this._getApiUrl(id);\n        }\n\n        return this.options.url;\n      };\n\n    proto._createResponse = function(data, status, headers, config) {\n      return {\n        data: data,\n        status: status,\n        headers: headers,\n        config: config\n      };\n    };\n\n    proto._request = function(config, afterCallback) {\n\n      var self = this;\n      var defer = $q.defer();\n\n      $http(config)\n        .success(function(data, status, headers, _config) {\n\n          var _response = {\n            data: data,\n            status: status,\n            headers: headers,\n            config: _config\n          };\n\n          // handle the async response if applicable\n          var _promise = $q.when(avPollingService.response(_response));\n          // notify the promise listener of the original response\n          defer.notify(_response);\n\n          // handle the polling service promise\n          _promise.then(\n            function(successResponse) {\n\n              // if service has a callback then call it\n              // var response = self._createResponse(data, status, headers, _config);\n              if(afterCallback) {\n                successResponse = afterCallback.call(self, successResponse);\n              }\n              defer.resolve(successResponse);\n            }, function(errorResponse) {\n              defer.reject(errorResponse);\n            }, function(notifyResponse) {\n              defer.notify(notifyResponse);\n            });\n\n        })\n        .error(function(data, status, headers, _config) {\n          var response = self._createResponse(data, status, headers, _config);\n          defer.reject(response);\n        });\n\n      var promise = defer.promise;\n\n      // recreate the success callback ala $http\n      promise.success = function(fn) {\n        promise.then(function(response) {\n          fn(response.data, response.status, response.headers, response.config);\n        });\n        return promise;\n      };\n\n      // recreate the error callback ala $http\n      promise.error = function(fn) {\n        promise.then(null, function(response) {\n          fn(response.data, response.status, response.headers, config);\n        });\n        return promise;\n      };\n\n      promise.always = promise['finally'];\n\n      return promise;\n    };\n\n    proto._getApiUrl = function(id) {\n      id = id ? '/' + id : '';\n      return this.options.prefix + this.options.path + this.options.level + this.options.version + this.options.url + id + this.options.suffix;\n    };\n\n    proto.all = function(config) {\n\n      config = this._config(config);\n      config.method = 'GET';\n      config.url = this._getUrl();\n\n      return this._request(config, this.afterAll);\n\n    };\n\n    // alias `all` since it was a bad name to being with\n    proto.query = proto.all;\n\n    proto.create = function(data, config) {\n\n      if(!data) {\n        throw new Error('called method without [data]');\n      }\n\n      if(this.beforeCreate) {\n        this.beforeCreate(this, data);\n      }\n\n      config = this._config(config);\n      config.method = 'POST';\n      config.url = this._getUrl();\n      config.data = data;\n\n      return this._request(config, this.afterCreate);\n\n    },\n\n\n      proto.get = function(id, config) {\n\n        if(!id) {\n          throw new Error('called method without [id]');\n        }\n\n        config = this._config(config);\n        config.method = 'GET';\n        config.url = this._getUrl(id);\n\n        return this._request(config, this.afterGet);\n\n      };\n\n    proto.query = function(params) {\n\n      if(!params) {\n        throw new Error('called query without parameters');\n      }\n\n      var config = this._config(config);\n      config.params = params;\n      config.method = 'GET';\n      config.url = this._getUrl();\n\n      return this._request(config, this.afterGet);\n\n    };\n\n    proto.update = function(id, data, config) {\n      if(!id || !data) {\n        throw new Error('called method without [id] or [data]');\n      }\n\n      config = this._config(config);\n      config.method = 'PUT';\n      config.url = this._getUrl(id);\n      config.data = data;\n\n      if(this.beforeUpdate) {\n        data = this.beforeUpdate(data);\n      }\n\n      return this._request(config, this.beforeUpdate, this.afterUpdate);\n\n\n    };\n\n    proto.updateWithoutId = function(data, config) {\n      if(!data) {\n        throw new Error('called method without [data]');\n      }\n\n      config = this._config(config);\n      config.method = 'PUT';\n      config.url = this._getUrl();\n      config.data = data;\n\n      if(this.beforeUpdate) {\n        data = this.beforeUpdate(data);\n      }\n\n      return this._request(config, this.beforeUpdate, this.afterUpdate);\n    };\n\n    proto.remove = function(id, config) {\n      if(!id) {\n        throw new Error('called method without [id]');\n      }\n\n      config = this._config(config);\n      config.method = 'DELETE';\n      config.url = this._getUrl(id);\n\n      return this._request(config, this.afterRemove);\n    };\n\n    proto.beforeCreate = null;\n    proto.afterCreate = null;\n    proto.afterAll = null;\n    proto.afterGet = null;\n    proto.beforeUpdate = null;\n    proto.afterUpdate = null;\n    proto.afterRemove = null;\n\n    return AvApiResource;\n\n  };\n\n  availity.core.factory('AvApiResource', ApiResourcesFactory);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  var UserServiceFactory = function(AvApiResource, $q) {\n\n    var AvUsersResource = function() {\n      this.user = null;\n      AvApiResource.call(this, 'users');\n    };\n\n    angular.extend(AvUsersResource.prototype, AvApiResource.prototype, {\n\n      afterGet: function(response) {\n        var user = response.data.user ? response.data.user : response.data;\n        this.user = user;\n        return user;\n      },\n\n      me: function() {\n\n        if(this.user) {\n          return $q.when(this.user);\n        }\n\n        return this.get('me');\n      }\n\n    });\n\n    return new AvUsersResource();\n\n  };\n\n  availity.core.factory('avUsersResource', UserServiceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var PermissionFactory = function(AvApiResource) {\n\n    var AvPermissionsResource = function() {\n      AvApiResource.call(this, {version: '/v1', url: '/permissions'});\n    };\n\n    angular.extend(AvPermissionsResource.prototype, AvApiResource.prototype, {\n\n      afterAll: function(response) {\n        return response.data.permissions ? response.data.permissions : response.data;\n      },\n\n      getPermissions: function(permissionId) {\n        return this.all({params: {permissionId: permissionId}}).then(function(response) {\n          var result = response.data.permissions ? response.data.permissions : [];\n          return result;\n        });\n      }\n\n    });\n    return new AvPermissionsResource();\n  };\n\n\n  root.availity.core.factory('avPermissionsResource', PermissionFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avCoveragesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations', cache: false});\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avConfigurationsResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations'});\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var LogMessagesFactory = function(AvApiResource) {\n\n    var logMessagesResource = new AvApiResource({\n      version: '/v1',\n      url: '/log-messages'\n    });\n\n    var buildRequest = function(level, entries) {\n\n      var requestPayload = {};\n\n      if(entries.level) {\n        delete entries.level;\n      }\n\n      requestPayload.level = level;\n      requestPayload.entries = entries;\n\n      return requestPayload;\n    };\n\n    return {\n\n      debug: function(entries) {\n        return logMessagesResource.create(buildRequest('debug', entries));\n      },\n\n      info: function(entries) {\n        return logMessagesResource.create(buildRequest('info', entries));\n      },\n\n      warn: function(entries) {\n        return logMessagesResource.create(buildRequest('warn', entries));\n      },\n\n      error: function(entries) {\n        return logMessagesResource.create(buildRequest('error', entries));\n      }\n\n    };\n  };\n\n  availity.core.factory('avLogMessagesResource', LogMessagesFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvDocumentsResourceFactory = function(AvApiResource) {\n\n    var AvDocumentsResource = function() {\n      AvApiResource.call(this, 'documents');\n    };\n\n    angular.extend(AvDocumentsResource.prototype, AvApiResource.prototype, {\n\n      getContents: function(id) {\n        var config = this._config();\n        config.url = this.getContentsUrl(id);\n        return this._request(config);\n      },\n\n      getContentsUrl: function(id) {\n        return this._getUrl(id) + '/contents';\n      }\n\n    });\n\n    return new AvDocumentsResource();\n\n  };\n\n  availity.core.factory('avDocumentsResource', AvDocumentsResourceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var OrganizationResourceFactory = function(AvApiResource) {\n\n    var OrganizationResource = function() {\n      AvApiResource.call(this, 'organizations');\n    };\n\n    angular.extend(OrganizationResource.prototype, AvApiResource.prototype, {\n\n      getOrganizations: function() {\n        return this.all().then(function(response) {\n          return response.data.organizations ? response.data.organizations : response.data;\n        });\n      }\n\n    });\n\n    return new OrganizationResource();\n  };\n\n  availity.core.factory('avOrganizationsResource', OrganizationResourceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avCodesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/codes'});\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_SESSION', {\n    SESSION_TIMEOUT: 'auth:session:timeout',\n    NOT_AUTHORIZED: 'auth:not:authorized'\n  });\n\n  availity.core.factory('avSession', function($q, avUsersResource, avPermissionsResource) {\n\n    var AvSession = function() {\n      this.user = null;\n      this.permissions = null;\n    };\n\n    var proto = AvSession.prototype;\n\n    proto.getUser = function() {\n      var self = this;\n\n      if(this.user) {\n        return $q.when(this.user);\n      }\n\n      return avUsersResource.me().then(function(user) {\n        self.user = user;\n        return self.user;\n      });\n    };\n\n    proto.getPermissions = function() {\n      var self = this;\n\n      if(this.permissions) {\n        return $q.when(this.permissions);\n      }\n\n      return avPermissionsResource.all().then(function(permissions) {\n        self.permissions = permissions;\n        return self.permissions;\n      });\n    };\n\n    proto.hasPermission = function(permissionId, orgId, geography) {\n      return this.getPermissions().then(function(permissions) {\n        var permission = _.find(permissions, function(p) {\n          return p.id === permissionId;\n        });\n        if(permission === undefined) {\n          return false;\n        }\n\n        if(orgId !== undefined && orgId !== null && !_.contains(permission.organizationIds, orgId)) {\n          return false;\n        }\n\n        if(geography !== undefined && geography !== null && !_.contains(permission.geographies, geography)) {\n          return false;\n        }\n\n        return true;\n      });\n    };\n\n    proto.destroy = function() {\n      this.user = null;\n      this.permisions = null;\n    };\n\n    return new AvSession();\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.value('avValConfig', {\n    classes: {\n      valid: 'ng-valid',\n      invalid: 'ng-invalid',\n      dirty: 'ng-dirty',\n      pristine: 'ng-pristine',\n      touched: 'ng-touched',\n      untouched: 'ng-untouched',\n      submitted: 'ng-submitted'\n    },\n    validators: [\n      'avValPattern',\n      'avValSize',\n      'avValRequired',\n      'avValDateRange',\n      'avValDate'\n    ]\n  });\n\n  availity.core.constant('AV_VAL', {\n    EVENTS: {\n      REVALIDATE: 'av:val:revalidate',\n      SUBMITTED: 'av:val:submitted',\n      FAILED: 'av:val:failed',\n      RESET: 'av:val:reset'\n    },\n    DEBOUNCE: 500,\n    DATE_FORMAT: {\n      SIMPLE: 'MM/DD/YYYY'\n    },\n    PATTERNS: {\n      ALPHA_ONLY: /[^A-Za-z]+/g,\n      NUMERIC_ONLY: /[^0-9]+/g\n    }\n  });\n\n  availity.core.provider('avVal', function() {\n\n    var that = this;\n\n    this.rules = {};\n\n    this.addRules = function(rules) {\n      this.rules = angular.extend(this.rules, rules);\n    };\n\n    this.$get = function($injector, $rootScope, $http, $log, avValConfig, AV_VAL) {\n\n      var AvValidation = function() {\n        this.rules = that.rules;\n        this.validators = [];\n        this.initValidators();\n      };\n\n      var proto = AvValidation.prototype;\n\n      proto.initValidators = function() {\n        var self = this;\n\n        angular.forEach(avValConfig.validators, function(name) {\n          var validator = $injector.get(name);\n          self.validators[validator.name] = validator;\n        });\n      };\n\n      proto.clearAll = function() {\n        // this.validators.splice(0, this.validators.length);\n        // this.rules = {};\n      };\n\n      proto.addRules = function(rules) {\n        this.rules = angular.extend(this.rules, rules);\n        $rootScope.$broadcast(AV_VAL.EVENTS.REVALIDATE);\n      };\n\n      proto.validate = function(key, element, value, ruleName) {\n\n        var self = this;\n\n        var rules = this.rules[key];\n        if(!rules) {\n          $log.error('Failed to get rules key [' + key + '].  Forms must be tagged with a rules set name for validation to work.');\n          return;\n        }\n        var contraints = rules[ruleName];\n        if(!contraints) {\n          $log.info('Failed to retrieve constraints for rule named [' + ruleName + '].  This is fine during instances where rule constraints change dynamically.');\n          contraints = [];\n        }\n\n        var el = element[0];\n        var results  = [];\n        var violations = [];\n        var _valid = true;\n\n        angular.forEach(contraints, function(rule, contraintName) {\n\n          if(!rule) {\n            // when extended rule sets, a user can pass nulls to cancel out a rule so if\n            // one doesn't exist just continue\n            return;\n          }\n\n          var validator = self.validators[contraintName];\n\n          if(angular.isUndefined(validator)) {\n            $log.warn('No validator defined for `' + name + '`');\n            return;\n          }\n\n          var valid = validator.validate(value, rule);\n\n          var validationResult = {\n            valid: valid,\n            ruleName: ruleName,\n            contraintName: contraintName,\n            value: value,\n            message: rule.message,\n            field: el.name || el.id\n          };\n\n          $log.info(validationResult);\n\n          var result = angular.extend({}, rule, validationResult);\n\n          results.push(result);\n          if(!valid) {\n            violations.push(validationResult);\n          }\n          _valid = _valid && valid;\n        });\n\n        return {\n          isValid: _valid,\n          all: results, // all the constraint results\n          violations: violations\n        };\n\n      };\n\n      return new AvValidation();\n    };\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValUtils', function() {\n\n    return {\n\n      isDefined: function(value) {\n        return angular.isDefined(value) && value !== '' && value !== null;\n      },\n\n      isEmpty: function(value) {\n        return !this.isDefined(value) || $.trim(value) === '';\n      }\n    };\n\n  });\n})(window);\n\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValSize', function(avValUtils) {\n\n    var validator =  {\n      name: 'size',\n      validate: function(value, rule) {\n        var minLength = rule.min || 0;\n        var maxLength = rule.max;\n\n        value = value || '';\n        return avValUtils.isEmpty(value) || value.length >= minLength && (maxLength === undefined || value.length <= maxLength);\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValPattern', function(avValUtils) {\n\n    var validator =  {\n      name: 'pattern',\n      REGEX: /^\\/(.*)\\/([gim]*)$/, //regular expression to test a regular expression\n      asRegExp: function(pattern) {\n        var match;\n\n        if(pattern.test) {\n          return pattern;\n        } else {\n          match = pattern.match(validator.REGEX);\n          if(match) {\n            return new RegExp(match[1], match[2]);\n          } else {\n            throw ('Expected ' + pattern + ' to be a RegExp');\n          }\n        }\n      },\n      validate: function(value, rule) {\n        var values = _.isArray(rule.value) ? rule.value : [rule.value];\n\n        var valid = false;\n\n        _.each(values, function(expresion) {\n          var pattern = validator.asRegExp(expresion);\n          if(avValUtils.isEmpty(value) || pattern.test(value)) {\n            valid = true;\n          }\n        });\n\n        return valid;\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValRequired', function(avValUtils) {\n\n    var validator =  {\n      name: 'required',\n      validate: function(value) {\n        return !avValUtils.isEmpty(value);\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDateRange', function(AV_VAL, avValUtils) {\n\n    var validator = {\n      name: 'dateRange',\n      getMinDate: function(minDate) {\n        var period = minDate.replace(AV_VAL.PATTERNS.ALPHA_ONLY, '');\n        var val = parseInt( minDate.replace(AV_VAL.PATTERNS.NUMERIC_ONLY, ''), 10);\n        var min = moment().subtract(val, period);\n        return min;\n      },\n      getMaxDate: function(maxDate) {\n        var max = moment();\n        var period = maxDate.replace(AV_VAL.PATTERNS.ALPHA_ONLY, '');\n        var val = parseInt( maxDate.replace(AV_VAL.PATTERNS.NUMERIC_ONLY, ''), 10);\n\n        if(maxDate !== 'today') {\n          max = moment().add(val, period);\n        } else {\n          max.set('hours', 23);\n          max.set('minutes', 59);\n          max.set('seconds', 59);\n        }\n        return max;\n      },\n      validation: function(value, rules) {\n        var minDate = validator.getMinDate(rules.min);\n        var maxDate = validator.getMaxDate(rules.max);\n        value = moment(value, rules.format);\n        return !value.isBefore(minDate) && !value.isAfter(maxDate);\n      },\n      validate: function(value, rule) {\n        return avValUtils.isEmpty(value) || validator.validation(value, rule);\n      }\n    };\n\n    return validator;\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDate', function(AV_VAL, avValUtils) {\n\n    var validator = {\n      name: 'dateFormat',\n      validate: function(value, rules) {\n\n        var format = rules && rules.format ? rules.format : AV_VAL.DATE_FORMAT.SIMPLE;\n\n        return avValUtils.isEmpty(value) || moment(value, format, true).isValid();\n      }\n    };\n    return validator;\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_GLOBALS', function() {\n\n    return {\n\n      STATES: [\n        {\n          'name': 'Alabama',\n          'code': 'AL'\n        },\n        {\n          'name': 'Alaska',\n          'code': 'AK'\n        },\n        {\n          'name': 'Arizona',\n          'code': 'AZ'\n        },\n        {\n          'name': 'Arkansas',\n          'code': 'AR'\n        },\n        {\n          'name': 'California',\n          'code': 'CA'\n        },\n        {\n          'name': 'Colorado',\n          'code': 'CO'\n        },\n        {\n          'name': 'Connecticut',\n          'code': 'CT'\n        },\n        {\n          'name': 'Delaware',\n          'code': 'DE'\n        },\n        {\n          'name': 'District Of Columbia',\n          'code': 'DC'\n        },\n        {\n          'name': 'Florida',\n          'code': 'FL'\n        },\n        {\n          'name': 'Georgia',\n          'code': 'GA'\n        },\n        {\n          'name': 'Hawaii',\n          'code': 'HI'\n        },\n        {\n          'name': 'Idaho',\n          'code': 'ID'\n        },\n        {\n          'name': 'Illinois',\n          'code': 'IL'\n        },\n        {\n          'name': 'Indiana',\n          'code': 'IN'\n        },\n        {\n          'name': 'Iowa',\n          'code': 'IA'\n        },\n        {\n          'name': 'Kansas',\n          'code': 'KS'\n        },\n        {\n          'name': 'Kentucky',\n          'code': 'KY'\n        },\n        {\n          'name': 'Louisiana',\n          'code': 'LA'\n        },\n        {\n          'name': 'Maine',\n          'code': 'ME'\n        },\n        {\n          'name': 'Maryland',\n          'code': 'MD'\n        },\n        {\n          'name': 'Massachusetts',\n          'code': 'MA'\n        },\n        {\n          'name': 'Michigan',\n          'code': 'MI'\n        },\n        {\n          'name': 'Minnesota',\n          'code': 'MN'\n        },\n        {\n          'name': 'Mississippi',\n          'code': 'MS'\n        },\n        {\n          'name': 'Missouri',\n          'code': 'MO'\n        },\n        {\n          'name': 'Montana',\n          'code': 'MT'\n        },\n        {\n          'name': 'Nebraska',\n          'code': 'NE'\n        },\n        {\n          'name': 'Nevada',\n          'code': 'NV'\n        },\n        {\n          'name': 'New Hampshire',\n          'code': 'NH'\n        },\n        {\n          'name': 'New Jersey',\n          'code': 'NJ'\n        },\n        {\n          'name': 'New Mexico',\n          'code': 'NM'\n        },\n        {\n          'name': 'New York',\n          'code': 'NY'\n        },\n        {\n          'name': 'North Carolina',\n          'code': 'NC'\n        },\n        {\n          'name': 'North Dakota',\n          'code': 'ND'\n        },\n        {\n          'name': 'Ohio',\n          'code': 'OH'\n        },\n        {\n          'name': 'Oklahoma',\n          'code': 'OK'\n        },\n        {\n          'name': 'Oregon',\n          'code': 'OR'\n        },\n        {\n          'name': 'Pennsylvania',\n          'code': 'PA'\n        },\n        {\n          'name': 'Rhode Island',\n          'code': 'RI'\n        },\n        {\n          'name': 'South Carolina',\n          'code': 'SC'\n        },\n        {\n          'name': 'South Dakota',\n          'code': 'SD'\n        },\n        {\n          'name': 'Tennessee',\n          'code': 'TN'\n        },\n        {\n          'name': 'Texas',\n          'code': 'TX'\n        },\n        {\n          'name': 'Utah',\n          'code': 'UT'\n        },\n        {\n          'name': 'Vermont',\n          'code': 'VT'\n        },\n        {\n          'name': 'Virginia',\n          'code': 'VA'\n        },\n        {\n          'name': 'Washington',\n          'code': 'WA'\n        },\n        {\n          'name': 'West Virginia',\n          'code': 'WV'\n        },\n        {\n          'name': 'Wisconsin',\n          'code': 'WI'\n        },\n        {\n          'name': 'Wyoming',\n          'code': 'WY'\n        }\n      ]\n    };\n\n  });\n\n})(window);\n","/**\n * availity-angular v0.5.3 -- March-24\n * Copyright 2015 Availity, LLC \n */\n\n// Source: /lib/core/index.js\n\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity || {};\n  availity.VERSION = 'v0.5.3';\n  availity.MODULE = 'availity';\n  availity.core = angular.module(availity.MODULE, ['ng']);\n\n  var originalModule = angular.module;\n  var modules = [];\n\n  angular.module = function(name, deps) {\n\n    if(deps && _.indexOf(modules, name) !== -1 ) {\n      throw new Error('redefining module: ' + name);\n    }\n    modules.push(name);\n    if(window.console && window.console.log) {\n      window.console.log(modules);\n    }\n    return originalModule(name, deps);\n  };\n\n  root.availity = availity;\n\n  if(typeof module !== 'undefined' && module.exports) {\n    module.exports = availity;\n  }\n\n})(window);\n\n\n// Source: /lib/core/utils/strings.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/helper/makeString.js\n  availity._stringify = function(object) {\n    if(object === null) {\n      return '';\n    }\n    return '' + object;\n  };\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/isBlank.js\n  availity.isBlank = function(str) {\n    availity._stringify(str);\n  };\n\n})(window);\n\n// Source: /lib/core/utils/uuid.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var uid = ['0', '0', '0'];\n\n  availity.uuid = function(prefix) {\n    var index = uid.length;\n    var digit;\n\n    while(index) {\n      index--;\n      digit = uid[index].charCodeAt(0);\n      if(digit === 57 /*'9'*/) {\n        uid[index] = 'A';\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n      if(digit === 90  /*'Z'*/) {\n        uid[index] = '0';\n      } else {\n        uid[index] = String.fromCharCode(digit + 1);\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n    }\n    uid.unshift('0');\n    return prefix ? prefix + uid.join('') : uid.join('');\n  };\n\n})(window);\n\n// Source: /lib/core/utils/urls.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.REGEX_API_URL = /^.*?api.availity.com(.*)$/;\n\n  availity.getRelativeUrl = function(url) {\n    var result = url.match(availity.REGEX_API_URL);\n    if(result && result[1]) {\n      return '/api' + result[1];\n    }\n\n    return url;\n  };\n\n})(window);\n\n// Source: /lib/core/polling/polling.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_POLLING', {\n    INTERVAL: 1000, // delay in ms before retrying an async request\n    MAX_ELAPSED_TIME: 5000, // max time in ms before polling stops and rejects original request\n    MAX_RETRY: 30, // # of times the request will be tried\n    DECAY: 1.2, // % the polling interval decays after every retry\n    // maximum time polling is allowed before rejecting the request\n    EVENTS: {\n      MAX_RETRY: 'polling:max:retry'\n    },\n    REGEX_URL: /^.*?api.availity.com(.*)$/ // capture the relative url from API\n  });\n\n  var PollingServiceFactory = function($rootScope, $q, $injector, $timeout, $log, AV_POLLING) {\n\n    var AvPollingService = function() {\n      this.pendingRequests = []; // stores all request for polling\n    };\n\n    var proto = AvPollingService.prototype;\n\n    proto.response = function(response) {\n\n      if(this.isAsyncResponse(response)) {\n        return this.onAsyncReponse(response);\n      }\n\n      return response || $q.when(response);\n    };\n\n    proto.setDefaults = function(config) {\n\n      var defaultOptions = {\n        pollingInterval: AV_POLLING.INTERVAL,\n        pollingDecay: AV_POLLING.DECAY,\n        pollingMaxInterval: AV_POLLING.MAX_ELAPSED_TIME,\n        pollingRetryCount: 0,\n        pollingStartTime: new Date().getTime()\n      };\n\n      config = _.extend(defaultOptions, config);\n    };\n\n    proto.responseError = function(response) {\n      // Return the promise rejection\n      return $q.reject(response);\n    };\n\n    /**\n     * API layer return a link with a polling url for\n     * async responses.\n     *\n     * @param  {Object}  response ajax response\n     * @return {Boolean} true if response has status of 202 (accepted) and location param in header with uri+session link\n     */\n    proto.isAsyncResponse = function(response) {\n\n      return response &&\n        response.config &&\n        response.config.api &&\n        response.status &&\n        response.status === 202 &&\n        angular.isFunction(response.headers) && !availity.isBlank(response.headers('location'));\n    };\n\n    proto.onAsyncReponse = function(response) {\n\n      this.setDefaults(response.config);\n\n      var deferred = $q.defer();\n\n      this.queueRequest(deferred, response);\n\n      // [rm3]: Can't call notify before you return promise object?\n      $timeout(function() {\n        // Notify deferred listeners with the original server response\n        deferred.notify(response);\n      });\n\n      return deferred.promise;\n    };\n\n    proto.getUrl = function(url) {\n\n      var result = url.match(AV_POLLING.REGEX_URL);\n      if(result && result[1]) {\n        return '/api' + result[1];\n      }\n\n      return url;\n    };\n\n    proto.queueRequest = function(deferred, response) {\n\n      var self = this;\n      // server replies with poll href so set the url into config\n      var _url = availity.getRelativeUrl(response.headers('location'));\n      var _config = response.config;\n\n      var config = {\n        method: 'GET',\n        api: true,\n        pollingInterval: _config.pollingInterval,\n        pollingMaxRetry: _config.pollingMaxRetry,\n        pollingMaxInterval: _config.pollingMaxInterval,\n        pollingStartTime: _config.pollingStartTime,\n        _pollingDecay: _config._pollingDecay,\n        pollingRetryCount: _config.pollingRetryCount,\n        pollingDecay: _config.pollingDecay,\n        url: _url, /* set the url from the server response */\n        cache: false\n      };\n\n      var request = {\n        id: availity.uuid('request-'),\n        config: config,\n        deferred: deferred\n      };\n\n      var timeout = this.getPollingTimeout(config);\n\n      // each async request should run on its own timer\n      var timer = $timeout(function() {\n        self.retryRequest(request.id);\n      }, timeout);\n\n      request.timer = timer;\n\n      // add the async request to the queue\n      this.pushRequest(request);\n\n    };\n\n    proto.popRequest = function(id) {\n\n      var index = null;\n      var request = null;\n\n      for(var i = 0; i < this.pendingRequests.length; i++) {\n        if(this.pendingRequests[i].id === id) {\n          index = i;\n          break;\n        }\n      }\n\n      request = this.pendingRequests[index];\n      this.pendingRequests.splice(index, 1);\n\n      return request;\n    };\n\n    proto.pushRequest = function(request) {\n      this.pendingRequests.push(request);\n    };\n\n    proto.getPollingTimeout = function(config) {\n      return config.pollingDecay * config.pollingMaxInterval;\n    };\n\n    proto.isPollingMaxTimeout = function(config) {\n      var now = new Date().getTime();\n      var elaspedTime = now - config.pollingStartTime;\n      var isElapsed = elaspedTime > config.pollingMaxInterval;\n      return isElapsed;\n    },\n\n      proto.isMaxRetried = function(config) {\n        return config.pollingRetryCount >= AV_POLLING.MAX_RETRY;\n      };\n\n    proto.isPollable = function(config) {\n      var _isTimeout = this.isPollingMaxTimeout(config);\n      var _isMax = this.isMaxRetried(config);\n\n      return _isTimeout || _isMax ? false : true;\n\n    };\n\n    proto.retryRequest = function(id) {\n\n      var self = this;\n      var request = this.popRequest(id);\n      $timeout.cancel(request.timer);\n\n      var config = request.config;\n\n      var deferred = request.deferred;\n\n      if(!this.isPollable(config)) {\n        $log.info('Rejecting pollable response due to timeout constraint');\n        return deferred.reject(request);\n      }\n\n      // increment counters and polling timeouts\n      this.increment(config);\n\n      function successCallback(response) {\n        if(self.isAsyncResponse(response)) {\n          deferred.notify(response);\n          self.queueRequest(request.deferred, response);\n        } else {\n          deferred.resolve(response);\n        }\n      }\n\n      function errorCallback(response) {\n        deferred.reject(response);\n      }\n\n      // Silly circular dependency trick\n      var $http = $injector.get('$http');\n\n      $http(config).then(successCallback, errorCallback);\n\n    };\n\n    proto.increment = function(config) {\n      this.incrementCounter(config);\n      this.incrementDecay(config);\n    };\n\n    proto.incrementDecay = function(config) {\n      if(!config._pollingDecay) {\n        // store the original decay param\n        config._pollingDecay = config.pollingDecay;\n      }\n      config.pollingDecay *= config._pollingDecay;\n    };\n\n    proto.incrementCounter = function(config) {\n      config.pollingRetryCount++;\n    };\n\n    proto.clearRequests = function() {\n      angular.forEach(this.pendingRequests, function(request) {\n        $timeout.cancel(request.timer);\n      });\n      this.pendingRequests = [];\n    };\n\n    return new AvPollingService();\n\n  };\n\n  availity.core.factory('avPollingService', PollingServiceFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-factory.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var defaultOptions = {\n    // pre-prend the url with a value like `/public` so we can build urls like `public/api/v1/*`\n    prefix: '',\n    // default base url for endpoints\n    path: '/api',\n    // url to resource endpoint like `coverages` or `payers`\n    url: null,\n    // defaults to version 1\n    version: '/v1',\n    // governance level `/internal`\n    level: '',\n    // post-pend the url with `.json`, `.txt` or `.xml`\n    suffix: '',\n    // cache all request by default\n    cache: true,\n    // flag used to enable behaviors around the Availity Rest API\n    api: true,\n    // # of times the polling service has tried to get a response\n    pollingRetryCount: 0,\n    // in ms\n    pollingInterval: 1000,\n    // % the polling interval decays after every retry\n    pollingDecay: 1.2,\n    // maximum time polling is allowed before rejecting the request\n    pollingMaxInterval: 30000\n\n  };\n\n  // Factory that creates ApiResourcess\n  var ApiResourcesFactory = function($http, $q, avPollingService) {\n\n    var AvApiResource = function(options) {\n\n      if(!options) {\n        throw new Error('[options] cannot be null or undefined');\n      }\n\n      // if string the assume url is being passed in\n      if(angular.isString(options)) {\n        options = options.charAt(0) === '/' ? options : '/' + options;\n        options = angular.extend({}, {url: options});\n      }\n\n      if(!options.url) {\n        throw new Error('[url] cannot be null');\n      }\n\n      // get the default options and merge into this instance\n      this.options = angular.extend({}, defaultOptions, (options || {}));\n    };\n\n    // Alias the prototype\n    var proto = AvApiResource.prototype;\n\n    proto._config = function(config) {\n      return angular.extend({}, this.options, (config || {}));\n    },\n\n      proto._getUrl = function(id) {\n        if(this.options.api) {\n          return this._getApiUrl(id);\n        }\n\n        return this.options.url;\n      };\n\n    proto._createResponse = function(data, status, headers, config) {\n      return {\n        data: data,\n        status: status,\n        headers: headers,\n        config: config\n      };\n    };\n\n    proto._request = function(config, afterCallback) {\n\n      var self = this;\n      var defer = $q.defer();\n\n      $http(config)\n        .success(function(data, status, headers, _config) {\n\n          var _response = {\n            data: data,\n            status: status,\n            headers: headers,\n            config: _config\n          };\n\n          // handle the async response if applicable\n          var _promise = $q.when(avPollingService.response(_response));\n          // notify the promise listener of the original response\n          defer.notify(_response);\n\n          // handle the polling service promise\n          _promise.then(\n            function(successResponse) {\n\n              // if service has a callback then call it\n              // var response = self._createResponse(data, status, headers, _config);\n              if(afterCallback) {\n                successResponse = afterCallback.call(self, successResponse);\n              }\n              defer.resolve(successResponse);\n            }, function(errorResponse) {\n              defer.reject(errorResponse);\n            }, function(notifyResponse) {\n              defer.notify(notifyResponse);\n            });\n\n        })\n        .error(function(data, status, headers, _config) {\n          var response = self._createResponse(data, status, headers, _config);\n          defer.reject(response);\n        });\n\n      var promise = defer.promise;\n\n      // recreate the success callback ala $http\n      promise.success = function(fn) {\n        promise.then(function(response) {\n          fn(response.data, response.status, response.headers, response.config);\n        });\n        return promise;\n      };\n\n      // recreate the error callback ala $http\n      promise.error = function(fn) {\n        promise.then(null, function(response) {\n          fn(response.data, response.status, response.headers, config);\n        });\n        return promise;\n      };\n\n      promise.always = promise['finally'];\n\n      return promise;\n    };\n\n    proto._getApiUrl = function(id) {\n      id = id ? '/' + id : '';\n      return this.options.prefix + this.options.path + this.options.level + this.options.version + this.options.url + id + this.options.suffix;\n    };\n\n    proto.all = function(config) {\n\n      config = this._config(config);\n      config.method = 'GET';\n      config.url = this._getUrl();\n\n      return this._request(config, this.afterAll);\n\n    };\n\n    // alias `all` since it was a bad name to being with\n    proto.query = proto.all;\n\n    proto.create = function(data, config) {\n\n      if(!data) {\n        throw new Error('called method without [data]');\n      }\n\n      if(this.beforeCreate) {\n        this.beforeCreate(this, data);\n      }\n\n      config = this._config(config);\n      config.method = 'POST';\n      config.url = this._getUrl();\n      config.data = data;\n\n      return this._request(config, this.afterCreate);\n\n    },\n\n\n      proto.get = function(id, config) {\n\n        if(!id) {\n          throw new Error('called method without [id]');\n        }\n\n        config = this._config(config);\n        config.method = 'GET';\n        config.url = this._getUrl(id);\n\n        return this._request(config, this.afterGet);\n\n      };\n\n    proto.query = function(params) {\n\n      if(!params) {\n        throw new Error('called query without parameters');\n      }\n\n      var config = this._config(config);\n      config.params = params;\n      config.method = 'GET';\n      config.url = this._getUrl();\n\n      return this._request(config, this.afterGet);\n\n    };\n\n    proto.update = function(id, data, config) {\n      if(!id || !data) {\n        throw new Error('called method without [id] or [data]');\n      }\n\n      config = this._config(config);\n      config.method = 'PUT';\n      config.url = this._getUrl(id);\n      config.data = data;\n\n      if(this.beforeUpdate) {\n        data = this.beforeUpdate(data);\n      }\n\n      return this._request(config, this.beforeUpdate, this.afterUpdate);\n\n\n    };\n\n    proto.updateWithoutId = function(data, config) {\n      if(!data) {\n        throw new Error('called method without [data]');\n      }\n\n      config = this._config(config);\n      config.method = 'PUT';\n      config.url = this._getUrl();\n      config.data = data;\n\n      if(this.beforeUpdate) {\n        data = this.beforeUpdate(data);\n      }\n\n      return this._request(config, this.beforeUpdate, this.afterUpdate);\n    };\n\n    proto.remove = function(id, config) {\n      if(!id) {\n        throw new Error('called method without [id]');\n      }\n\n      config = this._config(config);\n      config.method = 'DELETE';\n      config.url = this._getUrl(id);\n\n      return this._request(config, this.afterRemove);\n    };\n\n    proto.beforeCreate = null;\n    proto.afterCreate = null;\n    proto.afterAll = null;\n    proto.afterGet = null;\n    proto.beforeUpdate = null;\n    proto.afterUpdate = null;\n    proto.afterRemove = null;\n\n    return AvApiResource;\n\n  };\n\n  availity.core.factory('AvApiResource', ApiResourcesFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-users.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  var UserServiceFactory = function(AvApiResource, $q) {\n\n    var AvUsersResource = function() {\n      this.user = null;\n      AvApiResource.call(this, 'users');\n    };\n\n    angular.extend(AvUsersResource.prototype, AvApiResource.prototype, {\n\n      afterGet: function(response) {\n        var user = response.data.user ? response.data.user : response.data;\n        this.user = user;\n        return user;\n      },\n\n      me: function() {\n\n        if(this.user) {\n          return $q.when(this.user);\n        }\n\n        return this.get('me');\n      }\n\n    });\n\n    return new AvUsersResource();\n\n  };\n\n  availity.core.factory('avUsersResource', UserServiceFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-permissions.js\n(function(root) {\n\n  'use strict';\n\n  var PermissionFactory = function(AvApiResource) {\n\n    var AvPermissionsResource = function() {\n      AvApiResource.call(this, {version: '/v1', url: '/permissions'});\n    };\n\n    angular.extend(AvPermissionsResource.prototype, AvApiResource.prototype, {\n\n      afterAll: function(response) {\n        return response.data.permissions ? response.data.permissions : response.data;\n      },\n\n      getPermissions: function(permissionId) {\n        return this.all({params: {permissionId: permissionId}}).then(function(response) {\n          var result = response.data.permissions ? response.data.permissions : [];\n          return result;\n        });\n      }\n\n    });\n    return new AvPermissionsResource();\n  };\n\n\n  root.availity.core.factory('avPermissionsResource', PermissionFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-coverages.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avCoveragesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations', cache: false});\n  });\n\n})(window);\n\n// Source: /lib/core/api/api-configurations.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avConfigurationsResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations'});\n  });\n\n})(window);\n\n// Source: /lib/core/api/api-log-messages.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var LogMessagesFactory = function(AvApiResource) {\n\n    var logMessagesResource = new AvApiResource({\n      version: '/v1',\n      url: '/log-messages'\n    });\n\n    var buildRequest = function(level, entries) {\n\n      var requestPayload = {};\n\n      if(entries.level) {\n        delete entries.level;\n      }\n\n      requestPayload.level = level;\n      requestPayload.entries = entries;\n\n      return requestPayload;\n    };\n\n    return {\n\n      debug: function(entries) {\n        return logMessagesResource.create(buildRequest('debug', entries));\n      },\n\n      info: function(entries) {\n        return logMessagesResource.create(buildRequest('info', entries));\n      },\n\n      warn: function(entries) {\n        return logMessagesResource.create(buildRequest('warn', entries));\n      },\n\n      error: function(entries) {\n        return logMessagesResource.create(buildRequest('error', entries));\n      }\n\n    };\n  };\n\n  availity.core.factory('avLogMessagesResource', LogMessagesFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-documents.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvDocumentsResourceFactory = function(AvApiResource) {\n\n    var AvDocumentsResource = function() {\n      AvApiResource.call(this, 'documents');\n    };\n\n    angular.extend(AvDocumentsResource.prototype, AvApiResource.prototype, {\n\n      getContents: function(id) {\n        var config = this._config();\n        config.url = this.getContentsUrl(id);\n        return this._request(config);\n      },\n\n      getContentsUrl: function(id) {\n        return this._getUrl(id) + '/contents';\n      }\n\n    });\n\n    return new AvDocumentsResource();\n\n  };\n\n  availity.core.factory('avDocumentsResource', AvDocumentsResourceFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-organizations.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var OrganizationResourceFactory = function(AvApiResource) {\n\n    var OrganizationResource = function() {\n      AvApiResource.call(this, 'organizations');\n    };\n\n    angular.extend(OrganizationResource.prototype, AvApiResource.prototype, {\n\n      getOrganizations: function() {\n        return this.all().then(function(response) {\n          return response.data.organizations ? response.data.organizations : response.data;\n        });\n      }\n\n    });\n\n    return new OrganizationResource();\n  };\n\n  availity.core.factory('avOrganizationsResource', OrganizationResourceFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-codes.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avCodesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/codes'});\n  });\n\n})(window);\n\n// Source: /lib/core/session/session.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_SESSION', {\n    SESSION_TIMEOUT: 'auth:session:timeout',\n    NOT_AUTHORIZED: 'auth:not:authorized'\n  });\n\n  availity.core.factory('avSession', function($q, avUsersResource, avPermissionsResource) {\n\n    var AvSession = function() {\n      this.user = null;\n      this.permissions = null;\n    };\n\n    var proto = AvSession.prototype;\n\n    proto.getUser = function() {\n      var self = this;\n\n      if(this.user) {\n        return $q.when(this.user);\n      }\n\n      return avUsersResource.me().then(function(user) {\n        self.user = user;\n        return self.user;\n      });\n    };\n\n    proto.getPermissions = function() {\n      var self = this;\n\n      if(this.permissions) {\n        return $q.when(this.permissions);\n      }\n\n      return avPermissionsResource.all().then(function(permissions) {\n        self.permissions = permissions;\n        return self.permissions;\n      });\n    };\n\n    proto.hasPermission = function(permissionId, orgId, geography) {\n      return this.getPermissions().then(function(permissions) {\n        var permission = _.find(permissions, function(p) {\n          return p.id === permissionId;\n        });\n        if(permission === undefined) {\n          return false;\n        }\n\n        if(orgId !== undefined && orgId !== null && !_.contains(permission.organizationIds, orgId)) {\n          return false;\n        }\n\n        if(geography !== undefined && geography !== null && !_.contains(permission.geographies, geography)) {\n          return false;\n        }\n\n        return true;\n      });\n    };\n\n    proto.destroy = function() {\n      this.user = null;\n      this.permisions = null;\n    };\n\n    return new AvSession();\n  });\n\n})(window);\n\n// Source: /lib/core/validation/validator.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.value('avValConfig', {\n    classes: {\n      valid: 'ng-valid',\n      invalid: 'ng-invalid',\n      dirty: 'ng-dirty',\n      pristine: 'ng-pristine',\n      touched: 'ng-touched',\n      untouched: 'ng-untouched',\n      submitted: 'ng-submitted'\n    },\n    validators: [\n      'avValPattern',\n      'avValSize',\n      'avValRequired',\n      'avValDateRange',\n      'avValDate'\n    ]\n  });\n\n  availity.core.constant('AV_VAL', {\n    EVENTS: {\n      REVALIDATE: 'av:val:revalidate',\n      SUBMITTED: 'av:val:submitted',\n      FAILED: 'av:val:failed',\n      RESET: 'av:val:reset'\n    },\n    DEBOUNCE: 500,\n    DATE_FORMAT: {\n      SIMPLE: 'MM/DD/YYYY'\n    },\n    PATTERNS: {\n      ALPHA_ONLY: /[^A-Za-z]+/g,\n      NUMERIC_ONLY: /[^0-9]+/g\n    }\n  });\n\n  availity.core.provider('avVal', function() {\n\n    var that = this;\n\n    this.rules = {};\n\n    this.addRules = function(rules) {\n      this.rules = angular.extend(this.rules, rules);\n    };\n\n    this.$get = function($injector, $rootScope, $http, $log, avValConfig, AV_VAL) {\n\n      var AvValidation = function() {\n        this.rules = that.rules;\n        this.validators = [];\n        this.initValidators();\n      };\n\n      var proto = AvValidation.prototype;\n\n      proto.initValidators = function() {\n        var self = this;\n\n        angular.forEach(avValConfig.validators, function(name) {\n          var validator = $injector.get(name);\n          self.validators[validator.name] = validator;\n        });\n      };\n\n      proto.clearAll = function() {\n        // this.validators.splice(0, this.validators.length);\n        // this.rules = {};\n      };\n\n      proto.addRules = function(rules) {\n        this.rules = angular.extend(this.rules, rules);\n        $rootScope.$broadcast(AV_VAL.EVENTS.REVALIDATE);\n      };\n\n      proto.validate = function(key, element, value, ruleName) {\n\n        var self = this;\n\n        var rules = this.rules[key];\n        if(!rules) {\n          $log.error('Failed to get rules key [' + key + '].  Forms must be tagged with a rules set name for validation to work.');\n          return;\n        }\n        var contraints = rules[ruleName];\n        if(!contraints) {\n          $log.info('Failed to retrieve constraints for rule named [' + ruleName + '].  This is fine during instances where rule constraints change dynamically.');\n          contraints = [];\n        }\n\n        var el = element[0];\n        var results  = [];\n        var violations = [];\n        var _valid = true;\n\n        angular.forEach(contraints, function(rule, contraintName) {\n\n          if(!rule) {\n            // when extended rule sets, a user can pass nulls to cancel out a rule so if\n            // one doesn't exist just continue\n            return;\n          }\n\n          var validator = self.validators[contraintName];\n\n          if(angular.isUndefined(validator)) {\n            $log.warn('No validator defined for `' + name + '`');\n            return;\n          }\n\n          var valid = validator.validate(value, rule);\n\n          var validationResult = {\n            valid: valid,\n            ruleName: ruleName,\n            contraintName: contraintName,\n            value: value,\n            message: rule.message,\n            field: el.name || el.id\n          };\n\n          $log.info(validationResult);\n\n          var result = angular.extend({}, rule, validationResult);\n\n          results.push(result);\n          if(!valid) {\n            violations.push(validationResult);\n          }\n          _valid = _valid && valid;\n        });\n\n        return {\n          isValid: _valid,\n          all: results, // all the constraint results\n          violations: violations\n        };\n\n      };\n\n      return new AvValidation();\n    };\n\n  });\n})(window);\n\n// Source: /lib/core/validation/validators/validator-utils.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValUtils', function() {\n\n    return {\n\n      isDefined: function(value) {\n        return angular.isDefined(value) && value !== '' && value !== null;\n      },\n\n      isEmpty: function(value) {\n        return !this.isDefined(value) || $.trim(value) === '';\n      }\n    };\n\n  });\n})(window);\n\n\n// Source: /lib/core/validation/validators/validator-size.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValSize', function(avValUtils) {\n\n    var validator =  {\n      name: 'size',\n      validate: function(value, rule) {\n        var minLength = rule.min || 0;\n        var maxLength = rule.max;\n\n        value = value || '';\n        return avValUtils.isEmpty(value) || value.length >= minLength && (maxLength === undefined || value.length <= maxLength);\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n\n// Source: /lib/core/validation/validators/validator-pattern.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValPattern', function(avValUtils) {\n\n    var validator =  {\n      name: 'pattern',\n      REGEX: /^\\/(.*)\\/([gim]*)$/, //regular expression to test a regular expression\n      asRegExp: function(pattern) {\n        var match;\n\n        if(pattern.test) {\n          return pattern;\n        } else {\n          match = pattern.match(validator.REGEX);\n          if(match) {\n            return new RegExp(match[1], match[2]);\n          } else {\n            throw ('Expected ' + pattern + ' to be a RegExp');\n          }\n        }\n      },\n      validate: function(value, rule) {\n        var values = _.isArray(rule.value) ? rule.value : [rule.value];\n\n        var valid = false;\n\n        _.each(values, function(expresion) {\n          var pattern = validator.asRegExp(expresion);\n          if(avValUtils.isEmpty(value) || pattern.test(value)) {\n            valid = true;\n          }\n        });\n\n        return valid;\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n\n// Source: /lib/core/validation/validators/validator-required.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValRequired', function(avValUtils) {\n\n    var validator =  {\n      name: 'required',\n      validate: function(value) {\n        return !avValUtils.isEmpty(value);\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n\n// Source: /lib/core/validation/validators/validator-date-range.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDateRange', function(AV_VAL, avValUtils) {\n\n    var validator = {\n      name: 'dateRange',\n      getMinDate: function(minDate) {\n        var period = minDate.replace(AV_VAL.PATTERNS.ALPHA_ONLY, '');\n        var val = parseInt( minDate.replace(AV_VAL.PATTERNS.NUMERIC_ONLY, ''), 10);\n        var min = moment().subtract(val, period);\n        return min;\n      },\n      getMaxDate: function(maxDate) {\n        var max = moment();\n        var period = maxDate.replace(AV_VAL.PATTERNS.ALPHA_ONLY, '');\n        var val = parseInt( maxDate.replace(AV_VAL.PATTERNS.NUMERIC_ONLY, ''), 10);\n\n        if(maxDate !== 'today') {\n          max = moment().add(val, period);\n        } else {\n          max.set('hours', 23);\n          max.set('minutes', 59);\n          max.set('seconds', 59);\n        }\n        return max;\n      },\n      validation: function(value, rules) {\n        var minDate = validator.getMinDate(rules.min);\n        var maxDate = validator.getMaxDate(rules.max);\n        value = moment(value, rules.format);\n        return !value.isBefore(minDate) && !value.isAfter(maxDate);\n      },\n      validate: function(value, rule) {\n        return avValUtils.isEmpty(value) || validator.validation(value, rule);\n      }\n    };\n\n    return validator;\n  });\n})(window);\n\n// Source: /lib/core/validation/validators/validator-date-format.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDate', function(AV_VAL, avValUtils) {\n\n    var validator = {\n      name: 'dateFormat',\n      validate: function(value, rules) {\n\n        var format = rules && rules.format ? rules.format : AV_VAL.DATE_FORMAT.SIMPLE;\n\n        return avValUtils.isEmpty(value) || moment(value, format, true).isValid();\n      }\n    };\n    return validator;\n  });\n})(window);\n\n// Source: /lib/core/utils/globals.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_GLOBALS', function() {\n\n    return {\n\n      STATES: [\n        {\n          'name': 'Alabama',\n          'code': 'AL'\n        },\n        {\n          'name': 'Alaska',\n          'code': 'AK'\n        },\n        {\n          'name': 'Arizona',\n          'code': 'AZ'\n        },\n        {\n          'name': 'Arkansas',\n          'code': 'AR'\n        },\n        {\n          'name': 'California',\n          'code': 'CA'\n        },\n        {\n          'name': 'Colorado',\n          'code': 'CO'\n        },\n        {\n          'name': 'Connecticut',\n          'code': 'CT'\n        },\n        {\n          'name': 'Delaware',\n          'code': 'DE'\n        },\n        {\n          'name': 'District Of Columbia',\n          'code': 'DC'\n        },\n        {\n          'name': 'Florida',\n          'code': 'FL'\n        },\n        {\n          'name': 'Georgia',\n          'code': 'GA'\n        },\n        {\n          'name': 'Hawaii',\n          'code': 'HI'\n        },\n        {\n          'name': 'Idaho',\n          'code': 'ID'\n        },\n        {\n          'name': 'Illinois',\n          'code': 'IL'\n        },\n        {\n          'name': 'Indiana',\n          'code': 'IN'\n        },\n        {\n          'name': 'Iowa',\n          'code': 'IA'\n        },\n        {\n          'name': 'Kansas',\n          'code': 'KS'\n        },\n        {\n          'name': 'Kentucky',\n          'code': 'KY'\n        },\n        {\n          'name': 'Louisiana',\n          'code': 'LA'\n        },\n        {\n          'name': 'Maine',\n          'code': 'ME'\n        },\n        {\n          'name': 'Maryland',\n          'code': 'MD'\n        },\n        {\n          'name': 'Massachusetts',\n          'code': 'MA'\n        },\n        {\n          'name': 'Michigan',\n          'code': 'MI'\n        },\n        {\n          'name': 'Minnesota',\n          'code': 'MN'\n        },\n        {\n          'name': 'Mississippi',\n          'code': 'MS'\n        },\n        {\n          'name': 'Missouri',\n          'code': 'MO'\n        },\n        {\n          'name': 'Montana',\n          'code': 'MT'\n        },\n        {\n          'name': 'Nebraska',\n          'code': 'NE'\n        },\n        {\n          'name': 'Nevada',\n          'code': 'NV'\n        },\n        {\n          'name': 'New Hampshire',\n          'code': 'NH'\n        },\n        {\n          'name': 'New Jersey',\n          'code': 'NJ'\n        },\n        {\n          'name': 'New Mexico',\n          'code': 'NM'\n        },\n        {\n          'name': 'New York',\n          'code': 'NY'\n        },\n        {\n          'name': 'North Carolina',\n          'code': 'NC'\n        },\n        {\n          'name': 'North Dakota',\n          'code': 'ND'\n        },\n        {\n          'name': 'Ohio',\n          'code': 'OH'\n        },\n        {\n          'name': 'Oklahoma',\n          'code': 'OK'\n        },\n        {\n          'name': 'Oregon',\n          'code': 'OR'\n        },\n        {\n          'name': 'Pennsylvania',\n          'code': 'PA'\n        },\n        {\n          'name': 'Rhode Island',\n          'code': 'RI'\n        },\n        {\n          'name': 'South Carolina',\n          'code': 'SC'\n        },\n        {\n          'name': 'South Dakota',\n          'code': 'SD'\n        },\n        {\n          'name': 'Tennessee',\n          'code': 'TN'\n        },\n        {\n          'name': 'Texas',\n          'code': 'TX'\n        },\n        {\n          'name': 'Utah',\n          'code': 'UT'\n        },\n        {\n          'name': 'Vermont',\n          'code': 'VT'\n        },\n        {\n          'name': 'Virginia',\n          'code': 'VA'\n        },\n        {\n          'name': 'Washington',\n          'code': 'WA'\n        },\n        {\n          'name': 'West Virginia',\n          'code': 'WV'\n        },\n        {\n          'name': 'Wisconsin',\n          'code': 'WI'\n        },\n        {\n          'name': 'Wyoming',\n          'code': 'WY'\n        }\n      ]\n    };\n\n  });\n\n})(window);\n\n//# sourceMappingURL=maps/availity-angular.js.map"],"sourceRoot":"/source/"}