{"version":3,"sources":["/source/index.js","/source/strings.js","/source/uuid.js","/source/urls.js","/source/polling.js","/source/api-factory.js","/source/api-users.js","/source/api-permissions.js","/source/api-coverages.js","/source/api-configurations.js","/source/api-log-messages.js","/source/api-documents.js","/source/api-organizations.js","/source/session.js","/source/validator.js","/source/validator-utils.js","/source/validator-size.js","/source/validator-pattern.js","/source/validator-required.js","/source/validator-date-range.js","/source/validator-date-format.js"],"names":[],"mappings":"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","file":"availity-angular.min.js","sourcesContent":["/*global module*/\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity || {};\n  availity.VERSION = 'v0.0.1';\n  availity.MODULE = 'availity';\n  availity.core = angular.module(availity.MODULE, ['ng']);\n\n  var originalModule = angular.module;\n  var modules = [];\n\n  angular.module = function(name, deps) {\n\n    if(deps && _.indexOf(modules, name) !== -1 ) {\n      throw new Error('redefining module: ' + name);\n    }\n    modules.push(name);\n    if(window.console && window.console.log) {\n      window.console.log(modules);\n    }\n    return originalModule(name, deps);\n  };\n\n  root.availity = availity;\n\n  if(typeof module !== 'undefined' && module.exports) {\n    module.exports = availity;\n  }\n\n})(window);\n\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/helper/makeString.js\n  availity._stringify = function(object) {\n    if(object === null) {\n      return '';\n    }\n    return '' + object;\n  };\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/isBlank.js\n  availity.isBlank = function(str) {\n    availity._stringify(str);\n  };\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var uid = ['0', '0', '0'];\n\n  availity.uuid = function(prefix) {\n    var index = uid.length;\n    var digit;\n\n    while(index) {\n      index--;\n      digit = uid[index].charCodeAt(0);\n      if(digit === 57 /*'9'*/) {\n        uid[index] = 'A';\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n      if(digit === 90  /*'Z'*/) {\n        uid[index] = '0';\n      } else {\n        uid[index] = String.fromCharCode(digit + 1);\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n    }\n    uid.unshift('0');\n    return prefix ? prefix + uid.join('') : uid.join('');\n  };\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.REGEX_API_URL = /^.*?api.availity.com(.*)$/;\n\n  availity.getRelativeUrl = function(url) {\n    var result = url.match(availity.REGEX_API_URL);\n    if(result && result[1]) {\n      return '/api' + result[1];\n    }\n\n    return url;\n  };\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_POLLING', {\n    INTERVAL: 1000, // delay in ms before retrying an async request\n    MAX_ELAPSED_TIME: 5000, // max time in ms before polling stops and rejects original request\n    MAX_RETRY: 30, // # of times the request will be tried\n    DECAY: 1.2, // % the polling interval decays after every retry\n    // maximum time polling is allowed before rejecting the request\n    EVENTS: {\n      MAX_RETRY: 'polling:max:retry'\n    },\n    REGEX_URL: /^.*?api.availity.com(.*)$/ // capture the relative url from API\n  });\n\n  var PollingServiceFactory = function($rootScope, $q, $injector, $timeout, $log, AV_POLLING) {\n\n    var AvPollingService = function() {\n      this.pendingRequests = []; // stores all request for polling\n    };\n\n    var proto = AvPollingService.prototype;\n\n    proto.response = function(response) {\n\n      if(this.isAsyncResponse(response)) {\n        return this.onAsyncReponse(response);\n      }\n\n      return response || $q.when(response);\n    };\n\n    proto.setDefaults = function(config) {\n\n      var defaultOptions = {\n        pollingInterval: AV_POLLING.INTERVAL,\n        pollingDecay: AV_POLLING.DECAY,\n        pollingMaxInterval: AV_POLLING.MAX_ELAPSED_TIME,\n        pollingRetryCount: 0,\n        pollingStartTime: new Date().getTime()\n      };\n\n      config = _.extend(defaultOptions, config);\n    };\n\n    proto.responseError = function(response) {\n      // Return the promise rejection\n      return $q.reject(response);\n    };\n\n    /**\n     * API layer return a link with a polling url for\n     * async responses.\n     *\n     * @param  {Object}  response ajax response\n     * @return {Boolean} true if response has status of 202 (accepted) and location param in header with uri+session link\n     */\n    proto.isAsyncResponse = function(response) {\n\n      return response &&\n        response.config &&\n        response.config.api &&\n        response.status &&\n        response.status === 202 &&\n        angular.isFunction(response.headers) && !availity.isBlank(response.headers('location'));\n    };\n\n    proto.onAsyncReponse = function(response) {\n\n      this.setDefaults(response.config);\n\n      var deferred = $q.defer();\n\n      this.queueRequest(deferred, response);\n\n      // [rm3]: Can't call notify before you return promise object?\n      $timeout(function() {\n        // Notify deferred listeners with the original server response\n        deferred.notify(response);\n      });\n\n      return deferred.promise;\n    };\n\n    proto.getUrl = function(url) {\n\n      var result = url.match(AV_POLLING.REGEX_URL);\n      if(result && result[1]) {\n        return '/api' + result[1];\n      }\n\n      return url;\n    };\n\n    proto.queueRequest = function(deferred, response) {\n\n      var self = this;\n      // server replies with poll href so set the url into config\n      var _url = availity.getRelativeUrl(response.headers('location'));\n      var _config = response.config;\n\n      var config = {\n        method: 'GET',\n        api: true,\n        pollingInterval: _config.pollingInterval,\n        pollingMaxRetry: _config.pollingMaxRetry,\n        pollingMaxInterval: _config.pollingMaxInterval,\n        pollingStartTime: _config.pollingStartTime,\n        _pollingDecay: _config._pollingDecay,\n        pollingRetryCount: _config.pollingRetryCount,\n        pollingDecay: _config.pollingDecay,\n        url: _url, /* set the url from the server response */\n        cache: false\n      };\n\n      var request = {\n        id: availity.uuid('request-'),\n        config: config,\n        deferred: deferred\n      };\n\n      var timeout = this.getPollingTimeout(config);\n\n      // each async request should run on its own timer\n      var timer = $timeout(function() {\n        self.retryRequest(request.id);\n      }, timeout);\n\n      request.timer = timer;\n\n      // add the async request to the queue\n      this.pushRequest(request);\n\n    };\n\n    proto.popRequest = function(id) {\n\n      var index = null;\n      var request = null;\n\n      for(var i = 0; i < this.pendingRequests.length; i++) {\n        if(this.pendingRequests[i].id === id) {\n          index = i;\n          break;\n        }\n      }\n\n      request = this.pendingRequests[index];\n      this.pendingRequests.splice(index, 1);\n\n      return request;\n    };\n\n    proto.pushRequest = function(request) {\n      this.pendingRequests.push(request);\n    };\n\n    proto.getPollingTimeout = function(config) {\n      return config.pollingDecay * config.pollingMaxInterval;\n    };\n\n    proto.isPollingMaxTimeout = function(config) {\n      var now = new Date().getTime();\n      var elaspedTime = now - config.pollingStartTime;\n      var isElapsed = elaspedTime > config.pollingMaxInterval;\n      return isElapsed;\n    },\n\n      proto.isMaxRetried = function(config) {\n        return config.pollingRetryCount >= AV_POLLING.MAX_RETRY;\n      };\n\n    proto.isPollable = function(config) {\n      var _isTimeout = this.isPollingMaxTimeout(config);\n      var _isMax = this.isMaxRetried(config);\n\n      return _isTimeout || _isMax ? false : true;\n\n    };\n\n    proto.retryRequest = function(id) {\n\n      var self = this;\n      var request = this.popRequest(id);\n      $timeout.cancel(request.timer);\n\n      var config = request.config;\n\n      var deferred = request.deferred;\n\n      if(!this.isPollable(config)) {\n        $log.info('Rejecting pollable response due to timeout constraint');\n        return deferred.reject(request);\n      }\n\n      // increment counters and polling timeouts\n      this.increment(config);\n\n      function successCallback(response) {\n        if(self.isAsyncResponse(response)) {\n          deferred.notify(response);\n          self.queueRequest(request.deferred, response);\n        } else {\n          deferred.resolve(response);\n        }\n      }\n\n      function errorCallback(response) {\n        deferred.reject(response);\n      }\n\n      // Silly circular dependency trick\n      var $http = $injector.get('$http');\n\n      $http(config).then(successCallback, errorCallback);\n\n    };\n\n    proto.increment = function(config) {\n      this.incrementCounter(config);\n      this.incrementDecay(config);\n    };\n\n    proto.incrementDecay = function(config) {\n      if(!config._pollingDecay) {\n        // store the original decay param\n        config._pollingDecay = config.pollingDecay;\n      }\n      config.pollingDecay *= config._pollingDecay;\n    };\n\n    proto.incrementCounter = function(config) {\n      config.pollingRetryCount++;\n    };\n\n    proto.clearRequests = function() {\n      angular.forEach(this.pendingRequests, function(request) {\n        $timeout.cancel(request.timer);\n      });\n      this.pendingRequests = [];\n    };\n\n    return new AvPollingService();\n\n  };\n\n  availity.core.factory('avPollingService', PollingServiceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var defaultOptions = {\n    // pre-prend the url with a value like `/public` so we can build urls like `public/api/v1/*`\n    prefix: '',\n    // default base url for endpoints\n    path: '/api',\n    // url to resource endpoint like `coverages` or `payers`\n    url: null,\n    // defaults to version 1\n    version: '/v1',\n    // governance level `/internal`\n    level: '',\n    // post-pend the url with `.json`, `.txt` or `.xml`\n    suffix: '',\n    // cache all request by default\n    cache: true,\n    // flag used to enable behaviors around the Availity Rest API\n    api: true,\n    // # of times the polling service has tried to get a response\n    pollingRetryCount: 0,\n    // in ms\n    pollingInterval: 1000,\n    // % the polling interval decays after every retry\n    pollingDecay: 1.2,\n    // maximum time polling is allowed before rejecting the request\n    pollingMaxInterval: 30000\n\n  };\n\n  // Factory that creates ApiResourcess\n  var ApiResourcesFactory = function($http, $q, avPollingService) {\n\n    var AvApiResource = function(options) {\n\n      if(!options) {\n        throw new Error('[options] cannot be null or undefined');\n      }\n\n      // if string the assume url is being passed in\n      if(angular.isString(options)) {\n        options = options.charAt(0) === '/' ? options : '/' + options;\n        options = angular.extend({}, {url: options});\n      }\n\n      if(!options.url) {\n        throw new Error('[url] cannot be null');\n      }\n\n      // get the default options and merge into this instance\n      this.options = angular.extend({}, defaultOptions, (options || {}));\n    };\n\n    // Alias the prototype\n    var proto = AvApiResource.prototype;\n\n    proto._config = function(config) {\n      return angular.extend({}, this.options, (config || {}));\n    },\n\n      proto._getUrl = function(id) {\n        if(this.options.api) {\n          return this._getApiUrl(id);\n        }\n\n        return this.options.url;\n      };\n\n    proto._createResponse = function(data, status, headers, config) {\n      return {\n        data: data,\n        status: status,\n        headers: headers,\n        config: config\n      };\n    };\n\n    proto._request = function(config, afterCallback) {\n\n      var self = this;\n      var defer = $q.defer();\n\n      $http(config)\n        .success(function(data, status, headers, _config) {\n\n          var _response = {\n            data: data,\n            status: status,\n            headers: headers,\n            config: _config\n          };\n\n          // handle the async response if applicable\n          var _promise = $q.when(avPollingService.response(_response));\n          // notify the promise listener of the original response\n          defer.notify(_response);\n\n          // handle the polling service promise\n          _promise.then(\n            function(successResponse) {\n\n              // if service has a callback then call it\n              // var response = self._createResponse(data, status, headers, _config);\n              if(afterCallback) {\n                successResponse = afterCallback.call(self, successResponse);\n              }\n              defer.resolve(successResponse);\n            }, function(errorResponse) {\n              defer.reject(errorResponse);\n            }, function(notifyResponse) {\n              defer.notify(notifyResponse);\n            });\n\n        })\n        .error(function(data, status, headers, _config) {\n          var response = self._createResponse(data, status, headers, _config);\n          defer.reject(response);\n        });\n\n      var promise = defer.promise;\n\n      // recreate the success callback ala $http\n      promise.success = function(fn) {\n        promise.then(function(response) {\n          fn(response.data, response.status, response.headers, response.config);\n        });\n        return promise;\n      };\n\n      // recreate the error callback ala $http\n      promise.error = function(fn) {\n        promise.then(null, function(response) {\n          fn(response.data, response.status, response.headers, config);\n        });\n        return promise;\n      };\n\n      promise.always = promise['finally'];\n\n      return promise;\n    };\n\n    proto._getApiUrl = function(id) {\n      id = id ? '/' + id : '';\n      return this.options.prefix + this.options.path + this.options.level + this.options.version + this.options.url + id + this.options.suffix;\n    };\n\n    proto.all = function(config) {\n\n      config = this._config(config);\n      config.method = 'GET';\n      config.url = this._getUrl();\n\n      return this._request(config, this.afterAll);\n\n    };\n\n    // alias `all` since it was a bad name to being with\n    proto.query = proto.all;\n\n    proto.create = function(data, config) {\n\n      if(!data) {\n        throw new Error('called method without [data]');\n      }\n\n      if(this.beforeCreate) {\n        this.beforeCreate(this, data);\n      }\n\n      config = this._config(config);\n      config.method = 'POST';\n      config.url = this._getUrl();\n      config.data = data;\n\n      return this._request(config, this.afterCreate);\n\n    },\n\n\n      proto.get = function(id, config) {\n\n        if(!id) {\n          throw new Error('called method without [id]');\n        }\n\n        config = this._config(config);\n        config.method = 'GET';\n        config.url = this._getUrl(id);\n\n        return this._request(config, this.afterGet);\n\n      };\n\n    proto.query = function(params) {\n\n      if(!params) {\n        throw new Error('called query without parameters');\n      }\n\n      var config = this._config(config);\n      config.params = params;\n      config.method = 'GET';\n      config.url = this._getUrl();\n\n      return this._request(config, this.afterGet);\n\n    };\n\n    proto.update = function(id, data, config) {\n      if(!id || !data) {\n        throw new Error('called method without [id] or [data]');\n      }\n\n      config = this._config(config);\n      config.method = 'PUT';\n      config.url = this._getUrl(id);\n      config.data = data;\n\n      if(this.beforeUpdate) {\n        data = this.beforeUpdate(data);\n      }\n\n      return this._request(config, this.beforeUpdate, this.afterUpdate);\n\n\n    };\n\n    proto.updateWithoutId = function(data, config) {\n      if(!data) {\n        throw new Error('called method without [data]');\n      }\n\n      config = this._config(config);\n      config.method = 'PUT';\n      config.url = this._getUrl();\n      config.data = data;\n\n      if(this.beforeUpdate) {\n        data = this.beforeUpdate(data);\n      }\n\n      return this._request(config, this.beforeUpdate, this.afterUpdate);\n    };\n\n    proto.remove = function(id, config) {\n      if(!id) {\n        throw new Error('called method without [id]');\n      }\n\n      config = this._config(config);\n      config.method = 'DELETE';\n      config.url = this._getUrl(id);\n\n      return this._request(config, this.afterRemove);\n    };\n\n    proto.beforeCreate = null;\n    proto.afterCreate = null;\n    proto.afterAll = null;\n    proto.afterGet = null;\n    proto.beforeUpdate = null;\n    proto.afterUpdate = null;\n    proto.afterRemove = null;\n\n    return AvApiResource;\n\n  };\n\n  availity.core.factory('AvApiResource', ApiResourcesFactory);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  var UserServiceFactory = function(AvApiResource, $q) {\n\n    var AvUsersResource = function() {\n      this.user = null;\n      AvApiResource.call(this, 'users');\n    };\n\n    angular.extend(AvUsersResource.prototype, AvApiResource.prototype, {\n\n      afterGet: function(response) {\n        var user = response.data.user ? response.data.user : response.data;\n        this.user = user;\n        return user;\n      },\n\n      me: function() {\n\n        if(this.user) {\n          return $q.when(this.user);\n        }\n\n        return this.get('me');\n      }\n\n    });\n\n    return new AvUsersResource();\n\n  };\n\n  availity.core.factory('avUsersResource', UserServiceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var PermissionFactory = function(AvApiResource) {\n\n    var AvPermissionsResource = function() {\n      AvApiResource.call(this, {version: '/v1', url: '/permissions'});\n    };\n\n    angular.extend(AvPermissionsResource.prototype, AvApiResource.prototype, {\n\n      afterAll: function(response) {\n        return response.data.permissions ? response.data.permissions : response.data;\n      },\n\n      getPermissions: function(permissionId) {\n        return this.all({params: {permissionId: permissionId}}).then(function(response) {\n          var result = response.data.permissions ? response.data.permissions : [];\n          return result;\n        });\n      }\n\n    });\n    return new AvPermissionsResource();\n  };\n\n\n  root.availity.core.factory('avPermissionsResource', PermissionFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avCoveragesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations', cache: false});\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avConfigurationsResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations'});\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var LogMessagesFactory = function(AvApiResource) {\n\n    var logMessagesResource = new AvApiResource({\n      version: '/v1',\n      url: '/log-messages'\n    });\n\n    var buildRequest = function(level, entries) {\n\n      var requestPayload = {};\n\n      if(entries.level) {\n        delete entries.level;\n      }\n\n      requestPayload.level = level;\n      requestPayload.entries = entries;\n\n      return requestPayload;\n    };\n\n    return {\n\n      debug: function(entries) {\n        return logMessagesResource.create(buildRequest('debug', entries));\n      },\n\n      info: function(entries) {\n        return logMessagesResource.create(buildRequest('info', entries));\n      },\n\n      warn: function(entries) {\n        return logMessagesResource.create(buildRequest('warn', entries));\n      },\n\n      error: function(entries) {\n        return logMessagesResource.create(buildRequest('error', entries));\n      }\n\n    };\n  };\n\n  availity.core.factory('avLogMessagesResource', LogMessagesFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvDocumentsResourceFactory = function(AvApiResource) {\n\n    var AvDocumentsResource = function() {\n      AvApiResource.call(this, 'documents');\n    };\n\n    angular.extend(AvDocumentsResource.prototype, AvApiResource.prototype, {\n\n      getContents: function(id) {\n        var config = this._config();\n        config.url = this.getContentsUrl(id);\n        return this._request(config);\n      },\n\n      getContentsUrl: function(id) {\n        return this._getUrl(id) + '/contents';\n      }\n\n    });\n\n    return new AvDocumentsResource();\n\n  };\n\n  availity.core.factory('avDocumentsResource', AvDocumentsResourceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var OrganizationResourceFactory = function(AvApiResource) {\n\n    var OrganizationResource = function() {\n      AvApiResource.call(this, 'organizations');\n    };\n\n    angular.extend(OrganizationResource.prototype, AvApiResource.prototype, {\n\n      getOrganizations: function() {\n        return this.all().then(function(response) {\n          return response.data.organizations ? response.data.organizations : response.data;\n        });\n      }\n\n    });\n\n    return new OrganizationResource();\n  };\n\n  availity.core.factory('avOrganizationsResource', OrganizationResourceFactory);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_SESSION', {\n    SESSION_TIMEOUT: 'auth:session:timeout',\n    NOT_AUTHORIZED: 'auth:not:authorized'\n  });\n\n  availity.core.factory('avSession', function($q, avUsersResource, avPermissionsResource) {\n\n    var AvSession = function() {\n      this.user = null;\n      this.permissions = null;\n    };\n\n    var proto = AvSession.prototype;\n\n    proto.getUser = function() {\n      var self = this;\n\n      if(this.user) {\n        return $q.when(this.user);\n      }\n\n      return avUsersResource.me().then(function(user) {\n        self.user = user;\n        return self.user;\n      });\n\n    };\n\n    proto.getPermissions = function() {\n      var self = this;\n\n      if(this.permissions) {\n        return $q.when(this.permissions);\n      }\n\n      return avPermissionsResource.all().then(function(permissions) {\n        self.permissions = permissions;\n        return self.permissions;\n      });\n\n    };\n\n    proto.destroy = function() {\n      this.user = null;\n      this.permisions = null;\n    };\n\n    return new AvSession();\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.value('avValConfig', {\n    classes: {\n      valid: 'ng-valid',\n      invalid: 'ng-invalid',\n      dirty: 'ng-dirty',\n      pristine: 'ng-pristine',\n      touched: 'ng-touched',\n      untouched: 'ng-untouched',\n      submitted: 'ng-submitted'\n    },\n    validators: [\n      'avValPattern',\n      'avValSize',\n      'avValRequired',\n      'avValDateRange',\n      'avValDate'\n    ]\n  });\n\n  availity.core.constant('AV_VAL', {\n    EVENTS: {\n      REVALIDATE: 'av:val:revalidate',\n      SUBMITTED: 'av:val:submitted'\n    },\n    DEBOUNCE: 500,\n    DATE_FORMAT: {\n      SIMPLE: 'MM/DD/YYYY'\n    },\n    PATTERNS: {\n      ALPHA_ONLY: /[^A-Za-z]+/g,\n      NUMERIC_ONLY: /[^0-9]+/g\n    }\n  });\n\n  availity.core.provider('avVal', function() {\n\n    var that = this;\n\n    this.rules = {};\n\n    this.addRules = function(rules) {\n      this.rules = angular.extend(this.rules, rules);\n    };\n\n    this.$get = function($injector, $rootScope, $http, $log, avValConfig, AV_VAL) {\n\n      var AvValidation = function() {\n        this.rules = that.rules;\n        this.validators = [];\n        this.initValidators();\n      };\n\n      var proto = AvValidation.prototype;\n\n      proto.initValidators = function() {\n        var self = this;\n\n        angular.forEach(avValConfig.validators, function(name) {\n          var validator = $injector.get(name);\n          self.validators[validator.name] = validator;\n        });\n      };\n\n      proto.clearAll = function() {\n        // this.validators.splice(0, this.validators.length);\n        // this.rules = {};\n      };\n\n      proto.addRules = function(rules) {\n        this.rules = angular.extend(this.rules, rules);\n        $rootScope.$broadcast(AV_VAL.EVENTS.REVALIDATE);\n      };\n\n      proto.validate = function(element, value, ruleName) {\n\n        var self = this;\n        var rules = this.rules[ruleName];\n\n        var el = element[0];\n        var results  = [];\n        var violations = [];\n        var _valid = true;\n\n        angular.forEach(rules, function(rule, contraintName) {\n\n          var validator = self.validators[contraintName];\n\n          if(angular.isUndefined(validator)) {\n            $log.warn('No validator defined for `' + name + '`');\n            return;\n          }\n\n          var valid = validator.validate(value, rule);\n\n          var validationResult = {\n            valid: valid,\n            ruleName: ruleName,\n            contraintName: contraintName,\n            value: value,\n            message: rule.message,\n            field: el.name || el.id\n          };\n\n          $log.info(validationResult);\n\n          var result = angular.extend({}, rule, validationResult);\n\n          results.push(result);\n          if(!valid) {\n            violations.push(validationResult);\n          }\n          _valid = _valid && valid;\n        });\n\n        return {\n          isValid: _valid,\n          all: results, // all the constraint results\n          violations: violations\n        };\n\n      };\n\n      return new AvValidation();\n    };\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValUtils', function() {\n\n    return {\n\n      isDefined: function(value) {\n        return angular.isDefined(value) && value !== '' && value !== null;\n      },\n\n      isEmpty: function(value) {\n        return !this.isDefined(value) || $.trim(value) === '';\n      }\n    };\n\n  });\n})(window);\n\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValSize', function() {\n\n    var validator =  {\n      name: 'size',\n      validate: function(value, rule) {\n        var minLength = rule.min || 0;\n        var maxLength = rule.max;\n\n        value = value || '';\n        return value.length >= minLength && (maxLength === undefined || value.length <= maxLength);\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValPattern', function() {\n\n    var validator =  {\n      name: 'pattern',\n      REGEX: /^\\/(.*)\\/([gim]*)$/, //regular expression to test a regular expression\n      asRegExp: function(pattern) {\n        var match;\n\n        if(pattern.test) {\n          return pattern;\n        } else {\n          match = pattern.match(validator.REGEX);\n          if(match) {\n            return new RegExp(match[1], match[2]);\n          } else {\n            throw ('Expected ' + pattern + ' to be a RegExp');\n          }\n        }\n      },\n      validate: function(value, rule) {\n        var pattern = validator.asRegExp(rule.value);\n        return pattern.test(value);\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValRequired', function(avValUtils) {\n\n    var validator =  {\n      name: 'required',\n      validate: function(value) {\n        return !avValUtils.isEmpty(value);\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDateRange', function(AV_VAL) {\n\n    var validator = {\n      name: 'dateRange',\n      getMinDate: function(minDate) {\n        var period = minDate.replace(AV_VAL.PATTERNS.ALPHA_ONLY, '');\n        var val = parseInt( minDate.replace(AV_VAL.PATTERNS.NUMERIC_ONLY, ''), 10);\n        var min = moment().subtract(val, period);\n        return min;\n      },\n      getMaxDate: function(maxDate) {\n        var max = moment();\n        var period = maxDate.replace(AV_VAL.PATTERNS.ALPHA_ONLY, '');\n        var val = parseInt( maxDate.replace(AV_VAL.PATTERNS.NUMERIC_ONLY, ''), 10);\n\n        if(maxDate !== 'today') {\n          max = moment().add(val, period);\n        } else {\n          max.set('hours', 23);\n          max.set('minutes', 59);\n          max.set('seconds', 59);\n        }\n        return max;\n      },\n      validation: function(value, rules) {\n        var minDate = validator.getMinDate(rules.min);\n        var maxDate = validator.getMaxDate(rules.max);\n        value = moment(value, rules.format);\n        return !value.isBefore(minDate) && !value.isAfter(maxDate);\n      },\n      validate: function(value, rule) {\n        return validator.validation(value, rule);\n      }\n    };\n\n    return validator;\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDate', function(AV_VAL) {\n\n    var validator = {\n      name: 'dateFormat',\n      validate: function(value, rules) {\n\n        var format = rules && rules.format ? rules.format : AV_VAL.DATE_FORMAT.SIMPLE;\n\n        return moment(value, format, true).isValid();\n      }\n    };\n    return validator;\n  });\n})(window);\n"],"sourceRoot":"/source/"}