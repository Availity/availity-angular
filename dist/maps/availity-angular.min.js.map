{"version":3,"sources":["/source/index.js","/source/strings.js","/source/uuid.js","/source/urls.js","/source/print.js","/source/throttle.js","/source/logger.js","/source/logger-config.js","/source/polling.js","/source/api-factory.js","/source/api-users.js","/source/api-coverages.js","/source/api-configurations.js","/source/api-log-messages.js","/source/api-documents.js","/source/api-organizations.js","/source/api-codes.js","/source/api-user-permissions.js","/source/user-authorizations.js","/source/session.js","/source/idle.js","/source/idle-interceptor.js","/source/validator.js","/source/validator-utils.js","/source/validator-size.js","/source/validator-pattern.js","/source/validator-required.js","/source/validator-date-range.js","/source/validator-date-format.js","/source/globals.js","/source/analytics.js","/source/analytics-util.js","/source/analytics-splunk.js","/source/analytics-piwik.js","/source/analytics-exceptions.js","/source/date-polyfill.js","availity-angular.js"],"names":["root","availity","VERSION","MODULE","core","angular","module","originalModule","modules","name","deps","_","indexOf","Error","push","exports","window","_stringify","object","isBlank","str","test","uid","uuid","prefix","index","length","digit","charCodeAt","join","String","fromCharCode","unshift","REGEX_API_URL","getRelativeUrl","url","result","match","print","document","queryCommandSupported","execCommand","focus","constant","OPTIONS","wait","update","trailing","leading","factory","AV_THROTTLE","$timeout","fn","options","merge","THRESHOLD","isDefined","UPDATE","timer","context","this","args","arguments","apply","later","provider","_enabled","enabled","$get","$injector","AvLogger","$delegate","$log","proto","prototype","supplant","o","_supplant","a","b","r","replace","isObject","element","elemStr","isUndefined","constructor","toString","getFormattedTimestamp","date","getHours","getMinutes","getSeconds","getMilliseconds","_log","originalFn","hash","location","now","Date","message","supplantData","get","params","log","info","warn","debug","error","config","$provide","decorator","INTERVAL","MAX_ELAPSED_TIME","MAX_RETRY","DECAY","EVENTS","REGEX_URL","PollingServiceFactory","$rootScope","$q","AV_POLLING","AV_API","AvPollingService","pendingRequests","response","isAsyncResponse","onAsyncReponse","when","setDefaults","defaultOptions","pollingInterval","pollingDecay","pollingMaxInterval","pollingRetryCount","pollingStartTime","getTime","extend","responseError","reject","api","status","isFunction","headers","HEADERS","SERVER","LOCATION","deferred","defer","queueRequest","notify","promise","getUrl","self","_url","_config","method","pollingMaxRetry","_pollingDecay","cache","request","id","timeout","getPollingTimeout","retryRequest","pushRequest","popRequest","i","splice","isPollingMaxTimeout","elaspedTime","isElapsed","isMaxRetried","isPollable","_isTimeout","_isMax","cancel","increment","successCallback","resolve","errorCallback","$http","then","incrementCounter","incrementDecay","clearRequests","forEach","ID","STATUS","GLOBAL_ID","CLIENT","SESSION_ID","AUTH","OVERRIDE","CALLBACK_URL","CUSTOMER_ID","path","version","level","suffix","ApiResourcesFactory","avPollingService","AvApiResource","isString","charAt","_getUrl","_getApiUrl","_createResponse","data","_request","afterCallback","success","_response","_promise","successResponse","call","errorResponse","notifyResponse","always","create","beforeCreate","afterCreate","afterGet","query","afterQuery","isNumber","beforeUpdate","afterUpdate","remove","afterRemove","UserServiceFactory","AvUsersResource","user","me","LogMessagesFactory","AvLogMessagesResource","buildRequest","entries","requestPayload","AvDocumentsResourceFactory","AvDocumentsResource","getContents","getContentsUrl","OrganizationResourceFactory","OrganizationResource","getOrganizations","organizations","AvCodesResourceFactory","AvCodesResource","getCodes","page","offset","list","q","results","codes","has","each","code","moreVal","totalCount","limit","more","AvUserPermissionsResourceFactory","AvUserPermissionsResource","sessionDate","moment","toISOString","axiUserPermissions","getPermissions","permissionIds","region","permissionId","AvUserAuthorizationsFactory","avUserPermissionsResource","AvUserAuthorizations","setRegion","setPermissionIds","isArray","isAuthorized","getPermission","permission","isAnyAuthorized","permissions","findWhere","undefined","_permissions","union","toPermissionMap","getPayers","organizationId","organization","resources","map","slice","key","toPermission","description","geographies","SESSION_TIMEOUT","NOT_AUTHORIZED","avUsersResource","AvSession","getUser","destroy","permisions","IDLE_INACTIVE","IDLE_ACTIVE","SESSION_TIMEOUT_ACTIVE","SESSION_TIMEOUT_REDIRECT","HUMAN","MACHINE","INTERVALS","PING","IDLE","SESSION","URLS","HOME","AV_IDLE","pingUrl","redirectUrl","sessionTimeout","idleTimeout","pingTimeout","enable","value","setSessionTimeout","setIdleTimeout","setPingTimeout","setPingUrl","$document","avThrottle","AvIdle","_idleTimer","_sessionTimer","_pingTimer","_keepAlive","idleActive","sessionActive","listeners","init","stop","start","listener","setRedirectUrl","$on","find","on","event","onEvent","oldUrl","newUrl","href","startIdleTimer","startSessionTimer","off","stopPing","stopSessionTimer","stopIdleTimer","isEnabled","isApiRequest","$broadcast","startPing","keepAlive","avIdle","$httpProvider","interceptors","classes","valid","invalid","dirty","pristine","touched","untouched","submitted","validators","REVALIDATE","SUBMITTED","FAILED","RESET","DEBOUNCE","DATE_FORMAT","SIMPLE","PATTERNS","ALPHA_ONLY","NUMERIC_ONLY","rules","services","addRules","_rules","addValidators","_validators","concat","avValConfig","AV_VAL","AvValidation","initValidators","addValidator","validator","validate","ruleName","ruleConfig","contraints","el","violations","_valid","rule","contraintName","validationResult","field","isValid","all","isEmpty","$","trim","avValUtils","min","max","isNull","REGEX","asRegExp","pattern","RegExp","values","expresion","getStartDate","setMin","add","units","getEndDate","end","setMax","set","validation","startDate","endDate","format","isBetween","isSame","REGIONS","VIRTUAL_PAGE_TRACKING","SERVICES","PIWIK","SPLUNK","PAGE","DEFAULT","PRE_FIX","IGNORE","ENV","PROD","URL","QA","AV_ANALYTICS","plugins","virtualPageTracking","appId","registerPlugins","_plugins","setVirtualPageTracking","setAppID","AvAnalytics","plugin","err","trackEvent","properties","promises","handler","getAppId","trackPageView","run","avAnalytics","$location","absUrl","AnalyticsUtils","getProperties","attributes","props","isValidAttribute","isNotIgnored","getAttribute","isExternalLink","attrs","ngClick","ignored","includes","lowercase","substr","toLowerCase","simpleKey","toNum","parsed","parseInt","isNaN","trackingValues","toUpperCase","avLogMessagesResource","SplunkAnalyticsService","$$absUrl","that","siteId","_setCustomVariable","valueName","scope","_paq","setSiteID","_siteID","setVisitVariables","items","item","setPageVariables","avAnalyticsUtils","$window","AvPiwikAnalytics","category","label","createScript","isFinite","$$host","script","createElement","target","getElementsByTagName","type","async","src","parentNode","insertBefore","MESSAGES","NOT_APPLICABLE","TYPES","EXCEPTION","setAppId","_id","AV_EXCEPTIONS","AvExceptionAnalytics","TraceKit","remoteFetching","surroundingLinesToCollect","report","subscribe","stacktrace","onError","prettyPrint","stack","padLeft","func","line","column","userAgent","navigator","errorDate","errorName","errorMessage","errorStack","userLanguage","referrer","host","domain","screenWidth","width","screenHeight","height","sdkVersion","exception","computeStackTrace","cause","errorTacking","avExceptionAnalytics","pad","number","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","toFixed"],"mappings":"CAQA,SAAAA,MAEA,YAEA,IAAAC,UAAAD,KAAAC,YACAA,UAAAC,QAAA,SACAD,UAAAE,OAAA,UACAF,UAAAG,KAAAC,QAAAC,OAAAL,SAAAE,QAAA,MAEA,IAAAI,gBAAAF,QAAAC,MACA,IAAAE,WAEAH,SAAAC,OAAA,SAAAG,KAAAC,MAEA,GAAAA,MAAAC,EAAAC,QAAAJ,QAAAC,SAAA,EAAA,CACA,KAAA,IAAAI,OAAA,sBAAAJ,MAGAD,QAAAM,KAAAL,KAEA,OAAAF,gBAAAE,KAAAC,MAGAV,MAAAC,SAAAA,QAEA,UAAAK,UAAA,aAAAA,OAAAS,QAAA,CACAT,OAAAS,QAAAd,YChCAe,SAIA,SAAAhB,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAGAA,UAAAgB,WAAA,SAAAC,QACA,GAAAA,SAAA,KAAA,CACA,MAAA,GAEA,MAAA,GAAAA,OAIAjB,UAAAkB,QAAA,SAAAC,KCrBA,MAAA,QAAAC,KAAApB,SAAAgB,WAAAG,SAGAJ,SAGA,SAAAhB,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEA,IAAAqB,MAAA,IAAA,IAAA,IAEArB,UAAAsB,KAAA,SAAAC,QACA,GAAAC,OAAAH,IAAAI,MACA,IAAAC,MAEA,OAAAF,MAAA,CACAA,OACAE,OAAAL,IAAAG,OAAAG,WAAA,EACA,IAAAD,QAAA,GAAA,CACAL,IAAAG,OAAA,GACA,OAAAD,QAAAA,OAAAF,IAAAO,KAAA,IAAAP,IAAAO,KAAA,IAEA,GAAAF,QAAA,GAAA,CACAL,IAAAG,OAAA,QACA,CACAH,IAAAG,OAAAK,OAAAC,aAAAJ,MAAA,EACA,OAAAH,QAAAA,OAAAF,IAAAO,KAAA,IAAAP,IAAAO,KAAA,KAGAP,IAAAU,QAAA,IChCA,OAAAR,QAAAA,OAAAF,IAAAO,KAAA,IAAAP,IAAAO,KAAA,OAGAb,SAGA,SAAAhB,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAgC,cAAA,2BAEAhC,UAAAiC,eAAA,SAAAC,KACA,GAAAC,QAAAD,IAAAE,MAAApC,SAAAgC,cACA,IAAAG,QAAAA,OAAA,GAAA,CACA,MAAA,OAAAA,OAAA,GCjBA,MAAAD,QAGAnB,SAGA,SAAAhB,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAGAA,UAAAqC,MAAA,WAEA,GAAAC,SAAAC,sBAAA,SAAA,CACAD,SAAAE,YAAA,QAAA,MAAA,UACA,CACAzB,OAAA0B,OACA1B,QAAAsB,YChBAtB,SAKA,SAAAhB,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAG,KAAAuC,SAAA,eACAC,SACAC,KAAA,IACAC,OAAA,MACAC,SAAA,KACAC,QAAA,QAIA/C,UAAAG,KAAA6C,QAAA,aAAA,SAAAC,YAAAC,UAEA,MAAA,UAAAC,GAAAP,KAAAQ,SAEAA,QAAA1C,EAAA2C,SAAAJ,YAAAN,QAAAS,QAEAR,MAAAA,KAAAA,KAAAK,YAAAK,SACA,IAAAT,QAAAzC,QAAAmD,UAAAH,QAAAP,QAAAO,QAAAP,OAAAI,YAAAO,MACA,IAAAC,OAAA,IAEA,OAAA,YACA,GAAAC,SAAAN,QAAAM,SAAAC,IACA,IAAAC,MAAAC,SAEA,KAAAJ,MAAA,CACA,GAAAL,QAAAL,UAAA,MAAA,CACAI,GAAAW,MAAAJ,QAAAE,MAGA,GAAAG,OAAA,WACAN,MAAA,IACA,IAAAL,QAAAN,WAAA,MAAA,CACAK,GAAAW,MAAAJ,QAAAE,OAIAH,OAAAP,SAAAa,MAAAnB,KAAAC,QAGA,MAAAY,aCjDA1C,SAIA,SAAAhB,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAG,KAAA6D,SAAA,WAAA,WAEA,GAAAC,UAAA,KAEAN,MAAAO,QAAA,SAAAA,SACAD,WAAAC,QAGAP,MAAAQ,KAAA,SAAAC,WAEA,GAAAC,UAAA,SAAAX,QAAAY,WAEAX,KAAAD,QAAAA,SAAA,EACAC,MAAAY,KAAAD,UAIA,IAAAE,OAAAH,SAAAI,SAEAJ,UAAAK,SAAA,SAAAvD,IAAAwD,GAEA,GAAAC,WAAA,SAAAC,EAAAC,GACA,GAAAC,GAAAJ,EAAAG,EACA,OAAAC,GAGA,OAAA5D,KAAA6D,QAAA,gBAAAJ,WAGAP,UAAAY,SAAA,SAAAC,SACA,GAAAC,UAAA/E,QAAAgF,YAAAF,WAAA9E,QAAAgF,YAAAF,QAAAG,aAAAH,QAAAG,YAAAC,WAAA,EACA,OAAAH,SAAAxE,QAAA,WAAA,EAGA0D,UAAAkB,sBAAA,SAAAC,MAEA,MAAAnB,UAAAK,SAAA,mBACAc,KAAAC,WACAD,KAAAE,aACAF,KAAAG,aACAH,KAAAI,oBAKApB,OAAAqB,KAAA,SAAAC,WAAAlC,MAOA,GAAAmC,MAAAhF,OAAAiF,SAAAD,IACAA,MAAAA,MAAA,EAEA,KAAA9B,UAAA8B,KAAApF,QAAA,YAAA,GAAAmF,aAAA,QAAA,CACA,OAGA,GAAAG,KAAA5B,SAAAkB,sBAAA,GAAAW,MACA,IAAAC,SAAA,EACA,IAAAC,gBAEA,IAAA1C,SAAAC,KAAAD,QAAA,KAAAC,KAAAD,QAAA,KAAA,EAEA,QAAAE,KAAAnC,QACA,IAAA,GAIA2E,aAAAxC,KAAA,EACAuC,SAAA9B,SAAAK,SAAA,gBAAAuB,IAAAvC,QAAAE,KAAA,IACA,MACA,KAAA,GAKAwC,aAAAxC,KAAA,EACAuC,SAAA9B,SAAAK,SAAA,uBAAAuB,IAAAvC,QAAAE,KAAA,GAAAA,KAAA,IACA,MACA,KAAA,GAQA,SAAAA,MAAA,KAAA,SAAA,CACAuC,QAAA9B,SAAAK,SAAA,uBAAAuB,IAAAvC,QAAAE,KAAA,GAAAA,KAAA,SACA,CACAwC,aAAAxC,KAAA,EACAuC,SAAA9B,SAAAK,SAAA,gBAAAuB,IAAAvC,QAAAE,KAAA,KAEA,MAGA,GAAAW,MAAAZ,KAAAY,MAAAH,UAAAiC,IAAA,OAEA,IAAAC,QAAAjC,SAAAY,SAAAmB,eAAAD,QAAAC,eAAA/B,SAAAK,SAAAyB,QAAAC,cACA7B,MAAAuB,YAAAhC,MAAA,KAAAwC,QAIA9B,OAAA+B,IAAA,WACA5C,KAAAkC,KAAA,MAAAhC,WAGAW,OAAAgC,KAAA,WACA7C,KAAAkC,KAAA,OAAAhC,WAGAW,OAAAiC,KAAA,WACA9C,KAAAkC,KAAA,OAAAhC,WAGAW,OAAAkC,MAAA,WACA/C,KAAAkC,KAAA,QAAAhC,WAGAW,OAAAmC,MAAA,WACAhD,KAAAkC,KAAA,QAAAhC,WAGA,OAAAQ,eCvIAtD,SAGA,SAAAhB,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAG,KAAAyG,OAAA,SAAAC,UAEAA,SAAAC,UAAA,OAAA,SAAAxC,UAAAD,UACA,MAAA,IAAAA,UAAA,KAAAC,iBCZAvD,SAGA,SAAAhB,MACA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAG,KAAAuC,SAAA,cACAqE,SAAA,IACAC,iBAAA,IACAC,UAAA,GACAC,MAAA,IAEAC,QACAF,UAAA,wBAEAG,UAAA,6BAGA,IAAAC,uBAAA,SAAAC,WAAAC,GAAAnD,UAAAlB,SAAAqB,KAAAiD,WAAAC,QAEA,GAAAC,kBAAA,WACA/D,KAAAgE,mBAGA,IAAAnD,OAAAkD,iBAAAjD,SAEAD,OAAAoD,SAAA,SAAAA,UAEA,GAAAjE,KAAAkE,gBAAAD,UAAA,CACA,MAAAjE,MAAAmE,eAAAF,UAGA,MAAAA,WAAAL,GAAAQ,KAAAH,UAGApD,OAAAwD,YAAA,SAAApB,QAEA,GAAAqB,iBACAC,gBAAAV,WAAAT,SACAoB,aAAAX,WAAAN,MACAkB,mBAAAZ,WAAAR,iBACAqB,kBAAA,EACAC,kBAAA,GAAApC,OAAAqC,UAGA,OAAA7H,GAAA8H,OAAAP,eAAArB,QAGApC,OAAAiE,cAAA,SAAAb,UAEA,MAAAL,IAAAmB,OAAAd,UAUApD,OAAAqD,gBAAA,SAAAD,UAEA,MAAAA,WACAA,SAAAhB,QACAgB,SAAAhB,OAAA+B,KACAf,SAAAgB,QACAhB,SAAAgB,SAAA,KACAxI,QAAAyI,WAAAjB,SAAAkB,WAAA9I,SAAAkB,QAAA0G,SAAAkB,QAAArB,OAAAsB,QAAAC,OAAAC,WAGAzE,OAAAsD,eAAA,SAAAF,UAEAA,SAAAhB,OAAAjD,KAAAqE,YAAAJ,SAAAhB,OAEA,IAAAsC,UAAA3B,GAAA4B,OAEAxF,MAAAyF,aAAAF,SAAAtB,SAGA1E,UAAA,WAEAgG,SAAAG,OAAAzB,WACA,EAAA,MAEA,OAAAsB,UAAAI,QAGA9E,OAAA+E,OAAA,SAAArH,KAEA,GAAAC,QAAAD,IAAAE,MAAAoF,WAAAJ,UACA,IAAAjF,QAAAA,OAAA,GAAA,CACA,MAAA,OAAAA,OAAA,GAGA,MAAAD,KAGAsC,OAAA4E,aAAA,SAAAF,SAAAtB,UAEA,GAAA4B,MAAA7F,IAEA,IAAA8F,MAAAzJ,SAAAiC,eAAA2F,SAAAkB,QAAArB,OAAAsB,QAAAC,OAAAC,UACA,IAAAS,SAAA9B,SAAAhB,MAMA,IAAAA,SACA+C,OAAA,MACAhB,IAAA,KACAG,QAAAY,QAAAZ,QACAZ,gBAAAwB,QAAAxB,gBACA0B,gBAAAF,QAAAE,gBACAxB,mBAAAsB,QAAAtB,mBACAE,iBAAAoB,QAAApB,iBACAuB,cAAAH,QAAAG,cACAxB,kBAAAqB,QAAArB,kBACAF,aAAAuB,QAAAvB,aACAjG,IAAAuH,KACAK,MAAA,MAGA,IAAAC,UACAC,GAAAhK,SAAAsB,KAAA,YACAsF,OAAAA,OACAsC,SAAAA,SAGA,IAAAe,SAAAtG,KAAAuG,kBAAAtD,OAGA,IAAAnD,OAAAP,SAAA,WACAsG,KAAAW,aAAAJ,QAAAC,KACAC,QAAA,MAEAF,SAAAtG,MAAAA,KAGAE,MAAAyG,YAAAL,SAIAvF,OAAA6F,WAAA,SAAAL,IAEA,GAAAxI,OAAA,IACA,IAAAuI,SAAA,IAEA,KAAA,GAAAO,GAAA,EAAAA,EAAA3G,KAAAgE,gBAAAlG,OAAA6I,IAAA,CACA,GAAA3G,KAAAgE,gBAAA2C,GAAAN,KAAAA,GAAA,CACAxI,MAAA8I,CACA,QAIAP,QAAApG,KAAAgE,gBAAAnG,MACAmC,MAAAgE,gBAAA4C,OAAA/I,MAAA,EAEA,OAAAuI,SAGAvF,OAAA4F,YAAA,SAAAL,SACApG,KAAAgE,gBAAA9G,KAAAkJ,SAGAvF,OAAA0F,kBAAA,SAAAtD,QACA,MAAAA,QAAAuB,aAAAvB,OAAAsB,gBAGA1D,OAAAgG,oBAAA,SAAA5D,QACA,GAAAX,MAAA,GAAAC,OAAAqC,SACA,IAAAkC,aAAAxE,IAAAW,OAAA0B,gBACA,IAAAoC,WAAAD,YAAA7D,OAAAwB,kBACA,OAAAsC,YAGAlG,MAAAmG,aAAA,SAAA/D,QACA,MAAAA,QAAAyB,mBAAAb,WAAAP,UAGAzC,OAAAoG,WAAA,SAAAhE,QACA,GAAAiE,YAAAlH,KAAA6G,oBAAA5D,OACA,IAAAkE,QAAAnH,KAAAgH,aAAA/D,OAEA,OAAAiE,aAAAC,OAAA,MAAA,KAIAtG,OAAA2F,aAAA,SAAAH,IAEA,GAAAR,MAAA7F,IACA,IAAAoG,SAAApG,KAAA0G,WAAAL,GACA9G,UAAA6H,OAAAhB,QAAAtG,MAEA,IAAAmD,QAAAmD,QAAAnD,MAEA,IAAAsC,UAAAa,QAAAb,QAEA,KAAAvF,KAAAiH,WAAAhE,QAAA,CACArC,KAAAiC,KAAA,6CACA,OAAA0C,UAAAR,OAAAqB,SAIApG,KAAAqH,UAAApE,OAEA,SAAAqE,iBAAArD,UACA,GAAA4B,KAAA3B,gBAAAD,UAAA,CACAsB,SAAAG,OAAAzB,SACA4B,MAAAJ,aAAAW,QAAAb,SAAAtB,cACA,CACAsB,SAAAgC,QAAAtD,WAIA,QAAAuD,eAAAvD,UACAsB,SAAAR,OAAAd,UAIA,GAAAwD,OAAAhH,UAAAiC,IAAA,QAEA+E,OAAAxE,QAAAyE,KAAAJ,gBAAAE,eAIA3G,OAAAwG,UAAA,SAAApE,QACAjD,KAAA2H,iBAAA1E,OACAjD,MAAA4H,eAAA3E,QAGApC,OAAA+G,eAAA,SAAA3E,QACA,IAAAA,OAAAiD,cAAA,CAEAjD,OAAAiD,cAAAjD,OAAAuB,aAEAvB,OAAAuB,cAAAvB,OAAAiD,cAGArF,OAAA8G,iBAAA,SAAA1E,QACAA,OAAAyB,oBAGA7D,OAAAgH,cAAA,WACApL,QAAAqL,QAAA9H,KAAAgE,gBAAA,SAAAoC,SACA7G,SAAA6H,OAAAhB,QAAAtG,QAEAE,MAAAgE,mBAGA,OAAA,IAAAD,kBC9PA1H,UAAAG,KAAA6C,QAAA,mBAAAqE,yBAEAtG,SAGA,SAAAhB,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAG,KAAAuC,SAAA,UACAqG,SACAC,QACA0C,GAAA,WACAzC,SAAA,WACA0C,OAAA,mBACAC,UAAA,2BAEAC,QACAC,WAAA,eACAC,KAAA,gBACAC,SAAA,yBACAC,aAAA,iBACAC,YAAA,4BAKA,IAAAjE,iBAEA1G,OAAA,GAEA4K,KAAA,OAEAjK,IAAA,KAEAkK,QAAA,MAEAC,MAAA,GAEAC,OAAA,GAEAxC,MAAA,KAEAnB,IAAA,KAEAN,kBAAA,EAEAH,gBAAA,IAEAC,aAAA,IAEAC,mBAAA,IAKA,IAAAmE,qBAAA,SAAAnB,MAAA7D,GAAAiF,kBAEA,GAAAC,eAAA,SAAArJ,SAEA,IAAAA,QAAA,CACA,KAAA,IAAAxC,OAAA,yCAIA,GAAAR,QAAAsM,SAAAtJ,SAAA,CACAA,QAAAA,QAAAuJ,OAAA,KAAA,IAAAvJ,QAAA,IAAAA,OACAA,SAAAhD,QAAAoI,WAAAtG,IAAAkB,UAGA,IAAAA,QAAAlB,IAAA,CACA,KAAA,IAAAtB,OAAA,wBAIA+C,KAAAP,QAAAhD,QAAAoI,UAAAP,eAAA7E,aAIA,IAAAoB,OAAAiI,cAAAhI,SAEAD,OAAAkF,QAAA,SAAA9C,QACA,MAAAxG,SAAAoI,UAAA7E,KAAAP,QAAAwD,aAGApC,MAAAoI,QAAA,SAAA5C,IACA,GAAArG,KAAAP,QAAAuF,IAAA,CACA,MAAAhF,MAAAkJ,WAAA7C,IAGA,MAAArG,MAAAP,QAAAlB,IAGAsC,OAAAsI,gBAAA,SAAAC,KAAAnE,OAAAE,QAAAlC,QACA,OACAmG,KAAAA,KACAnE,OAAAA,OACAE,QAAAA,QACAlC,OAAAA,QAIApC,OAAAwI,SAAA,SAAApG,OAAAqG,eAEA,GAAAzD,MAAA7F,IACA,IAAAwF,OAAA5B,GAAA4B,OAEAiC,OAAAxE,QACAsG,QAAA,SAAAH,KAAAnE,OAAAE,QAAAY,SAEA,GAAAyD,YACAJ,KAAAA,KACAnE,OAAAA,OACAE,QAAAA,QACAlC,OAAA8C,QAIA,IAAA0D,UAAA7F,GAAAQ,KAAAyE,iBAAA5E,SAAAuF,WAEAhE,OAAAE,OAAA8D,UAGAC,UAAA/B,KAAA,SAAAgC,iBAIA,GAAAJ,cAAA,CACAI,gBAAAJ,cAAAK,KAAA9D,KAAA6D,iBAEAlE,MAAA+B,QAAAmC,kBACA,SAAAE,eACApE,MAAAT,OAAA6E,gBACA,SAAAC,gBACArE,MAAAE,OAAAmE,oBAGA7G,MAAA,SAAAoG,KAAAnE,OAAAE,QAAAY,SACA,GAAA9B,UAAA4B,KAAAsD,gBAAAC,KAAAnE,OAAAE,QAAAY,QACAP,OAAAT,OAAAd,WAGA,IAAA0B,SAAAH,MAAAG,OAGAA,SAAA4D,QAAA,SAAA/J,IACAmG,QAAA+B,KAAA,SAAAzD,UACAzE,GAAAyE,SAAAmF,KAAAnF,SAAAgB,OAAAhB,SAAAkB,QAAAlB,SAAAhB,SAEA,OAAA0C,SAIAA,SAAA3C,MAAA,SAAAxD,IACAmG,QAAA+B,KAAA,KAAA,SAAAzD,UACAzE,GAAAyE,SAAAmF,KAAAnF,SAAAgB,OAAAhB,SAAAkB,QAAAlC,SAEA,OAAA0C,SAGAA,SAAAmE,OAAAnE,QAAA,UAEA,OAAAA,SAGA9E,OAAAqI,WAAA,SAAA7C,IACAA,GAAAA,GAAA,IAAAA,GAAA,EACA,OAAArG,MAAAP,QAAA7B,OAAAoC,KAAAP,QAAA+I,KAAAxI,KAAAP,QAAAiJ,MAAA1I,KAAAP,QAAAgJ,QAAAzI,KAAAP,QAAAlB,IAAA8H,GAAArG,KAAAP,QAAAkJ,OAGA9H,OAAAkJ,OAAA,SAAAX,KAAAnG,QAEA,IAAAmG,KAAA,CACA,KAAA,IAAAnM,OAAA,gCAGA,GAAA+C,KAAAgK,aAAA,CACAhK,KAAAgK,aAAAhK,KAAAoJ,MAGAnG,OAAAjD,KAAA+F,QAAA9C,OACAA,QAAA+C,OAAA,MACA/C,QAAA1E,IAAAyB,KAAAiJ,SACAhG,QAAAmG,KAAAA,IAEA,OAAApJ,MAAAqJ,SAAApG,OAAAjD,KAAAiK,aAIApJ,OAAA6B,IAAA,SAAA2D,GAAApD,QAEA,IAAAoD,GAAA,CACA,KAAA,IAAApJ,OAAA,8BAGAgG,OAAAjD,KAAA+F,QAAA9C,OACAA,QAAA+C,OAAA,KACA/C,QAAA1E,IAAAyB,KAAAiJ,QAAA5C,GAEA,OAAArG,MAAAqJ,SAAApG,OAAAjD,KAAAkK,UAIArJ,OAAAsJ,MAAA,SAAAlH,QAEAA,OAAAjD,KAAA+F,QAAA9C,OACAA,QAAA+C,OAAA,KACA/C,QAAA1E,IAAAyB,KAAAiJ,SAEA,OAAAjJ,MAAAqJ,SAAApG,OAAAjD,KAAAoK,YAIAvJ,OAAA3B,OAAA,SAAAmH,GAAA+C,KAAAnG,QAEA,GAAA1E,IAEA,IAAAxB,EAAAgM,SAAA1C,KAAAtJ,EAAAsN,SAAAhE,IAAA,CACA9H,IAAAyB,KAAAiJ,QAAA5C,QACA,CACA9H,IAAAyB,KAAAiJ,SAKAhG,QAAAmG,IACAA,MAAA/C,GAGA,GAAArG,KAAAsK,aAAA,CACAlB,KAAApJ,KAAAsK,aAAAlB,MAGAnG,OAAAjD,KAAA+F,QAAA9C,OACAA,QAAA+C,OAAA,KACA/C,QAAA1E,IAAAA,GACA0E,QAAAmG,KAAAA,IAEA,OAAApJ,MAAAqJ,SAAApG,OAAAjD,KAAAuK,aAIA1J,OAAA2J,OAAA,SAAAnE,GAAApD,QACA,IAAAoD,GAAA,CACA,KAAA,IAAApJ,OAAA,8BAGAgG,OAAAjD,KAAA+F,QAAA9C,OACAA,QAAA+C,OAAA,QACA/C,QAAA1E,IAAAyB,KAAAiJ,QAAA5C,GAEA,OAAArG,MAAAqJ,SAAApG,OAAAjD,KAAAyK,aAGA5J,OAAAmJ,aAAA,IACAnJ,OAAAoJ,YAAA,IACApJ,OAAAuJ,WAAA,IACAvJ,OAAAqJ,SAAA,IACArJ,OAAAyJ,aAAA,IACAzJ,OAAA0J,YAAA,IACA1J,OAAA4J,YAAA,IAEA,OAAA3B,eCxQAzM,UAAAG,KAAA6C,QAAA,gBAAAuJ,uBAEAxL,SAGA,SAAAhB,MACA,YAEA,IAAAC,UAAAD,KAAAC,QAEA,IAAAqO,oBAAA,SAAA5B,cAAAlF,IAEA,GAAA+G,iBAAA,WACA3K,KAAA4K,KAAA,IACA9B,eAAAa,KAAA3J,KAAA,SAGAvD,SAAAoI,OAAA8F,gBAAA7J,UAAAgI,cAAAhI,WAEAoJ,SAAA,SAAAjG,UACA,GAAA2G,MAAA3G,SAAAmF,KAAAwB,KAAA3G,SAAAmF,KAAAwB,KAAA3G,SAAAmF,IACApJ,MAAA4K,KAAAA,IACA,OAAAA,OAGAC,GAAA,WAEA,GAAA7K,KAAA4K,KAAA,CACA,MAAAhH,IAAAQ,KAAApE,KAAA4K,MAGA,MAAA5K,MAAA0C,IAAA,QAKA,OAAA,IAAAiI,iBCpCAtO,UAAAG,KAAA6C,QAAA,kBAAAqL,sBAEAtN,SAGA,SAAAhB,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAG,KAAA6C,QAAA,sBAAA,SAAAyJ,eCZA,MAAA,IAAAA,gBAAAL,QAAA,MAAAlK,IAAA,kBAAA4H,MAAA,YAGA/I,SAGA,SAAAhB,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAG,KAAA6C,QAAA,2BAAA,SAAAyJ,eCZA,MAAA,IAAAA,gBAAAL,QAAA,MAAAlK,IAAA,wBAGAnB,SAGA,SAAAhB,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEA,IAAAyO,oBAAA,SAAAhC,eAEA,GAAAiC,uBAAA,WAEAjC,cAAAa,KAAA3J,MACAyI,QAAA,MACAlK,IAAA,kBAIA9B,SAAAoI,OAAAkG,sBAAAjK,UAAAgI,cAAAhI,WAEAkK,aAAA,SAAAtC,MAAAuC,SAEA,GAAAC,kBAEA,IAAAD,QAAAvC,MAAA,OACAuC,SAAAvC,MAGAwC,eAAAxC,MAAAA,KACAwC,gBAAAD,QAAAA,OAEA,OAAAC,iBAGAnI,MAAA,SAAAkI,SACA,MAAAjL,MAAA+J,OAAA/J,KAAAgL,aAAA,QAAAC,WAGApI,KAAA,SAAAoI,SACA,MAAAjL,MAAA+J,OAAA/J,KAAAgL,aAAA,OAAAC,WAGAnI,KAAA,SAAAmI,SACA,MAAAjL,MAAA+J,OAAA/J,KAAAgL,aAAA,OAAAC,WAGAjI,MAAA,SAAAiI,SACA,MAAAjL,MAAA+J,OAAA/J,KAAAgL,aAAA,QAAAC,YAKA,OAAA,IAAAF,uBCvDA1O,UAAAG,KAAA6C,QAAA,wBAAAyL,sBAEA1N,SAGA,SAAAhB,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEA,IAAA8O,4BAAA,SAAArC,eAEA,GAAAsC,qBAAA,WACAtC,cAAAa,KAAA3J,KAAA,aAGAvD,SAAAoI,OAAAuG,oBAAAtK,UAAAgI,cAAAhI,WAEAuK,YAAA,SAAAhF,IACA,GAAApD,QAAAjD,KAAA+F,SACA9C,QAAA1E,IAAAyB,KAAAsL,eAAAjF,GACA,OAAArG,MAAAqJ,SAAApG,SAGAqI,eAAA,SAAAjF,IACA,MAAArG,MAAAiJ,QAAA5C,IAAA,cAKA,OAAA,IAAA+E,qBC/BA/O,UAAAG,KAAA6C,QAAA,sBAAA8L,8BAEA/N,SAGA,SAAAhB,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEA,IAAAkP,6BAAA,SAAAzC,eAEA,GAAA0C,sBAAA,WACA1C,cAAAa,KAAA3J,KAAA,iBAGAvD,SAAAoI,OAAA2G,qBAAA1K,UAAAgI,cAAAhI,WAEA2K,iBAAA,SAAAxI,QACA,MAAAjD,MAAAmK,MAAAlH,QAAAyE,KAAA,SAAAzD,UACA,MAAAA,UAAAmF,KAAAsC,cAAAzH,SAAAmF,KAAAsC,cAAAzH,SAAAmF,SAMA,OAAA,IAAAoC,sBC3BAnP,UAAAG,KAAA6C,QAAA,0BAAAkM,+BAEAnO,SAGA,SAAAhB,MAEA,YAGA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAG,KAAA6C,QAAA,kBAAA,SAAAyJ,eACA,MAAA,IAAAA,gBAAAL,QAAA,MAAAlK,IAAA,YAGA,IAAAoN,wBAAA,SAAA7C,eAEA,GAAA8C,iBAAA,WACA9C,cAAAa,KAAA3J,KAAA,SAGAvD,SAAAoI,OAAA+G,gBAAA9K,UAAAgI,cAAAhI,WAEA+K,SAAA,SAAAzC,MAGA,GAAAnG,UACAA,QAAAN,SAEA,IAAAyG,KAAA0C,KAAA,CACA7I,OAAAN,OAAAoJ,OAAA,IAAA3C,KAAA0C,KAAA,GAEA,GAAA1C,KAAA2C,OAAA,CACA9I,OAAAN,OAAAoJ,OAAA3C,KAAA2C,OAEA,GAAA3C,KAAA4C,KAAA,CACA/I,OAAAN,OAAAqJ,KAAA5C,KAAA4C,KAEA,GAAA5C,KAAA6C,EAAA,CACAhJ,OAAAN,OAAAsJ,EAAA7C,KAAA6C,EAGA,MAAAjM,MAAAmK,MAAAlH,QAAAyE,KAAA,SAAAzD,UAEA,GAAAiI,SAAAjI,SAAAmF,KAAA+C,KACA,IAAAD,UAAAnP,EAAAqP,IAAAF,QAAA,GAAA,MAAA,CACAnP,EAAAsP,KAAAH,QAAA,SAAAI,MACAA,KAAAjG,GAAAiG,KAAAA,OAKA,GAAAC,SAAAtI,SAAAmF,KAAA2C,OAAA9H,SAAAmF,KAAAoD,WAAAvI,SAAAmF,KAAAqD,KACA,QACAC,KAAAH,QACAL,QAAAA,aAQA,OAAA,IAAAN,iBChEAvP,UAAAG,KAAA6C,QAAA,kBAAAsM,0BAEAvO,SAGA,SAAAhB,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEA,IAAAsQ,kCAAA,SAAA7D,eAEA,GAAA8D,2BAAA,WACA9D,cAAAa,KAAA3J,MACA0I,MAAA,YACAD,QAAA,MACAlK,IAAA,yBAEAyB,MAAA6M,YAAAC,SAAAC,cAGAtQ,SAAAoI,OAAA+H,0BAAA9L,UAAAgI,cAAAhI,WAEAsJ,WAAA,SAAAnG,UACA,MAAAA,UAAAmF,KAAA4D,mBAAA/I,SAAAmF,KAAA4D,uBAGAC,eAAA,SAAAC,cAAAC,QACA,GAAAtH,MAAA7F,IACA,OAAAA,MAAAmK,OACAxH,QACAyK,aAAAF,cACAC,OAAAA,OACAN,YAAAhH,KAAAgH,iBAOA,OAAA,IAAAD,2BCzCAvQ,UAAAG,KAAA6C,QAAA,4BAAAsN,oCAEAvP,SAGA,SAAAhB,MACA,YAEA,IAAAC,UAAAD,KAAAC,QAEA,IAAAgR,6BAAA,SAAAzJ,GAAAhD,KAAA0M,2BAMA,GAAAC,sBAAA,WAOAvN,KAAAmN,OAAA,IAOAnN,MAAAkN,iBAGA,IAAArM,OAAA0M,qBAAAzM,SAEAD,OAAA2M,UAAA,SAAAL,QACAnN,KAAAmN,OAAAA,MACA,OAAAnN,MAGAa,OAAA4M,iBAAA,SAAAP,eACA,IAAAzQ,QAAAiR,QAAAR,eAAA,CACA,KAAA,IAAAjQ,OAAA,2FAEA+C,KAAAkN,cAAAA,aACA,OAAAlN,MAGAa,OAAA8M,aAAA,SAAAP,cACA,MAAApN,MAAA4N,cAAAR,cAAA1F,KAAA,SAAAmG,YACA,MAAAA,YAAAF,eAIA9M,OAAAiN,gBAAA,SAAAZ,eACA,MAAAlN,MAAAiN,eAAAC,eAAAxF,KAAA,SAAAqG,aACA,GAAAF,YAAA9Q,EAAAiR,UAAAD,aAAAJ,aAAA,MACA,OAAAE,cAAAI,YAIApN,OAAA+M,cAAA,SAAAR,cACA,IAAA3Q,QAAAsM,SAAAqE,cAAA,CACA,KAAA,IAAAnQ,OAAA,4EAGA,MAAA+C,MAAAiN,gBAAAG,eACA1F,KAAA,SAAAwG,cACA,MAAAA,cAAAd,gBAIAvM,OAAAoM,eAAA,SAAAC,eACA,GAAArH,MAAA7F,IAEA,KAAAvD,QAAAiR,QAAAR,eAAA,CACA,KAAA,IAAAjQ,OAAA,yFAGA4I,KAAAqH,cAAAnQ,EAAAoR,MAAAtI,KAAAqH,cAAAA,cAEA,OAAAI,2BACAL,eAAApH,KAAAqH,cAAArH,KAAAsH,QACAzF,KAAA,SAAAwG,cACA,MAAArI,MAAAuI,gBAAAlB,cAAAgB,gBAIArN,OAAA4K,iBAAA,SAAA2B,cACA,MAAApN,MAAA4N,cAAAR,cAAA1F,KAAA,SAAAmG,YACA,MAAAA,YAAAnC,gBAIA7K,OAAAwN,UAAA,SAAAjB,aAAAkB,gBACA,MAAAtO,MAAA4N,cAAAR,cAAA1F,KAAA,SAAAmG,YACA,GAAAU,cAAAxR,EAAAiR,UAAAH,WAAAnC,eAAArF,GAAAiI,gBAEA,IAAAC,cAAAA,aAAAC,UAAA,CACA,MAAAD,cAAAC,UAEA,WAUA3N,OAAAuN,gBAAA,SAAAlB,cAAAa,aACA,GAAAlI,MAAA7F,IACA,IAAAyO,OACAV,aAAAhR,EAAA2R,MAAAX,YACAhR,GAAA+K,QAAAoF,cAAA,SAAAE,cACA,GAAAuB,MAAAtI,GAAA+G,aACA,IAAAS,YAAA9Q,EAAAiR,UAAAD,YAAAY,IACAd,YAAAA,WAAAhI,KAAA+I,aAAAf,YAAAhI,KAAA+I,aAAAD,IACAF,KAAAZ,WAAAxH,IAAAwH,YAEA,OAAAY,KAOA5N,OAAA+N,aAAA,SAAAf,YACA,OACAxH,GAAAwH,WAAAxH,GACAwI,YAAAhB,WAAAgB,YAAAhB,WAAAgB,YAAA,GACAC,YAAAjB,WAAAiB,YAAAjB,WAAAiB,eACApD,cAAAmC,WAAAnC,cAAAmC,WAAAnC,iBACAiC,aAAAE,WAAAnC,cAAAmC,WAAAnC,cAAA5N,OAAA,EAAA,OAIA,OAAA,IAAAyP,sBC1IAlR,UAAAG,KAAA6C,QAAA,uBAAAgO,+BAEAjQ,SAGA,SAAAhB,MACA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAG,KAAAuC,SAAA,cACAgQ,gBAAA,0BACAC,eAAA,0BAGA3S,UAAAG,KAAA6C,QAAA,YAAA,SAAAuE,GAAAqL,iBAEA,GAAAC,WAAA,WACAlP,KAAA4K,KAAA,IACA5K,MAAA+N,YAAA,KAGA,IAAAlN,OAAAqO,UAAApO,SAEAD,OAAAsO,QAAA,WACA,GAAAtJ,MAAA7F,IAEA,IAAAA,KAAA4K,KAAA,CACA,MAAAhH,IAAAQ,KAAApE,KAAA4K,MAGA,MAAAqE,iBAAApE,KAAAnD,KAAA,SAAAkD,MACA/E,KAAA+E,KAAAA,IACA,OAAA/E,MAAA+E,OAKA/J,OAAAuO,QAAA,WACApP,KAAA4K,KAAA,IACA5K,MAAAqP,WAAA,KCzCA,OAAA,IAAAH,eAGA9R,SAWA,SAAAhB,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAG,KAAAuC,SAAA,WACAyE,QACA8L,cAAA,mBACAC,YAAA,iBACAC,uBAAA,yBACAC,yBAAA,2BACAC,MAAA,oDACAC,QAAA,0BAEAC,WACAC,KAAA,EAAA,GAAA,IACAC,KAAA,GAAA,GAAA,IACAC,QAAA,GAAA,GAAA,KAEAC,MACAC,KAAA,qCACAJ,KAAA,qBAIAxT,UAAAG,KAAA6D,SAAA,SAAA,SAAA6P,SAEA,GAAA3P,SAAA,KACA,IAAA4P,QACA,IAAAC,YACA,IAAAC,eACA,IAAAC,YACA,IAAAC,YAEAvQ,MAAAwQ,OAAA,SAAAC,OACA,GAAAvQ,UAAApC,OAAA,CACAyC,UAAAkQ,MAEA,MAAAlQ,SAGAP,MAAA0Q,kBAAA,SAAApK,SACA+J,eAAA/J,SAAA4J,QAAAN,UAAAG,QAGA/P,MAAA2Q,eAAA,SAAArK,SACAgK,YAAAhK,SAAA4J,QAAAN,UAAAE,KAGA9P,MAAA4Q,eAAA,SAAAtK,SACAiK,YAAAjK,SAAA4J,QAAAN,UAAAC,KAGA7P,MAAA6Q,WAAA,SAAAtS,KACA4R,QAAA5R,KAAA2R,QAAAF,KAAAH,KAGA7P,MAAAQ,KAAA,SAAA0P,QAAAtP,KAAAkQ,UAAAnN,WAAApE,SAAAwR,WAAAnN,GAAAnD,WAEA,GAAAuQ,QAAA,WAGAhR,KAAAiR,WAAA,IACAjR,MAAAkR,cAAA,IACAlR,MAAAmR,WAAA,IACAnR,MAAAoR,WAAA,IAGApR,MAAAqR,WAAA,KACArR,MAAAsR,cAAA,KAEAtR,MAAAuR,YAEAvR,MAAAwR,OAIA,IAAA3Q,OAAAmQ,OAAAlQ,SAEAD,OAAA2Q,KAAA,WAEA,IAAAjR,QAAA,CACAP,KAAAyR,MACA,QAGAzR,KAAA0R,QAGA7Q,OAAA6Q,MAAA,WAEA9Q,KAAAiC,KAAA,eAEA,IAAAgD,MAAA7F,IACA,IAAA2R,WAEAtB,gBAAArQ,KAAA0Q,qBACAJ,aAAAtQ,KAAA2Q,kBACAJ,aAAAvQ,KAAA4Q,kBACAT,SAAAnQ,KAAA6Q,cACAT,aAAApQ,KAAA4R,gBAEAjO,YAAAkO,IAAA,WAAA,WACAhM,KAAA4L,QAGAX,WAAAgB,KAAA,QAAAC,GAAA7B,QAAA1M,OAAAkM,MAAA,SAAAsC,OACAnM,KAAAoM,QAAAD,QAGAL,UAAAhO,WAAAkO,IAAA3B,QAAA1M,OAAAmM,QAAA,SAAAqC,MAAAE,OAAAC,QACA,GAAAD,SAAAC,OAAA,CACAtM,KAAAoM,QAAAD,SAGAhS,MAAAuR,UAAArU,KAAAyU,SAEAhO,YAAAkO,IAAA3B,QAAA1M,OAAAiM,yBAAA,WACA9Q,SAAA0D,SAAA+P,KAAAhC,aAGApQ,MAAAqS,gBACArS,MAAAsS,oBAGAzR,OAAA4Q,KAAA,WAEAX,UAAAgB,KAAA,QAAAS,IAAArC,QAAA1M,OAAAkM,MAGA3S,GAAAsP,KAAArM,KAAAuR,UAAA,SAAAI,UACAA,YAGA3R,MAAAwS,UACAxS,MAAAyS,kBACAzS,MAAA0S,gBAGA7R,OAAA8R,UAAA,WACA,MAAApS,SAGAM,OAAA2P,OAAA,SAAAC,OACA,GAAAvQ,UAAApC,OAAA,CACAyC,UAAAkQ,MAGA,MAAAzQ,MAGAa,OAAA6P,kBAAA,SAAApK,SACA+J,eAAA/J,SAAA4J,QAAAN,UAAAG,OACA,OAAA/P,MAGAa,OAAA8P,eAAA,SAAArK,SACAgK,YAAAhK,SAAA4J,QAAAN,UAAAE,IACA,OAAA9P,MAGAa,OAAA+P,eAAA,SAAAtK,SACAiK,YAAAjK,SAAA4J,QAAAN,UAAAC,IACA,OAAA7P,MAGAa,OAAAgQ,WAAA,SAAAtS,KACA4R,QAAA5R,KAAA2R,QAAAF,KAAAH,IACA,OAAA7P,MAGAa,OAAA+Q,eAAA,SAAArT,KACA6R,YAAA7R,KAAA2R,QAAAF,KAAAC,IACA,OAAAjQ,MAGAa,OAAAoD,SAAA,SAAAA,UAEA,GAAAjE,KAAA4S,aAAA3O,UAAA,CACAjE,KAAAsS,oBAGA,MAAArO,UAGApD,OAAA+R,aAAA,SAAA3O,UACA,MAAAA,WAAAA,SAAAhB,QAAAgB,SAAAhB,OAAA+B,IAGAnE,OAAAiE,cAAA,SAAAb,UAEA,GAAAjE,KAAA4S,aAAA3O,WAAAA,SAAAgB,SAAA,IAAA,CACAjF,KAAAsS,oBAGA,GAAAtS,KAAA4S,gBAAA3O,SAAAgB,SAAA,IAAA,CACAjF,KAAAwS,WAGA,MAAA5O,IAAAmB,OAAAd,UAGApD,OAAAyR,kBAAA,WAEA,GAAAzM,MAAA7F,IAEAA,MAAAyS,kBAEA,IAAArS,OAAA,WACAQ,KAAAiC,KAAA,+BACAgD,MAAA4L,MACA9N,YAAAkP,WAAA3C,QAAA1M,OAAAgM,wBAGA5O,MAAAiC,KAAA,mCACA7C,MAAAkR,cAAA3R,SAAAa,MAAAiQ,eAAA,OAIAxP,OAAA4R,iBAAA,WACA7R,KAAAiC,KAAA,mCACAtD,UAAA6H,OAAApH,KAAAkR,eAGArQ,OAAAwR,eAAA,WAEA,GAAAxM,MAAA7F,IAEAA,MAAA0S,eAEA,IAAAtS,OAAA,WACAyF,KAAA6M,eACA9R,MAAAiC,KAAA,mBACAc,YAAAkP,WAAA3C,QAAA1M,OAAA+L,aAGA3O,MAAAiC,KAAA,gCACA7C,MAAAiR,WAAA1R,SAAAa,MAAAkQ,YAAA,OAGAzP,OAAA6R,cAAA,WACA9R,KAAAiC,KAAA,gCACAtD,UAAA6H,OAAApH,KAAAiR,YAGApQ,OAAAiS,UAAA,WAEA,IAAA9S,KAAAoR,WAAA,CACAxQ,KAAAiC,KAAA,gCACA7C,MAAAoR,WAAAL,WAAA/Q,KAAA+S,UAAAxC,aAAAxQ,QAAAC,OAGAA,KAAAmR,WAAAnR,KAAAoR,aAGAvQ,OAAA2R,SAAA,WACA5R,KAAAiC,KAAA,gCACA,IAAA7C,KAAAmR,WAAA,CACA5R,SAAA6H,OAAApH,KAAAmR,aAIAtQ,OAAAkS,UAAA,WAIA/S,KAAAoR,WAAA,IACA,IAAA3J,OAAAhH,UAAAiC,IAAA,QAEA+E,OAAA/E,IAAAyN,SACAhK,MAAA,MACAnB,IAAA,OACAuE,QAAA,WACA3I,KAAAiC,KAAA,+BACAG,MAAA,WACApC,KAAAoC,MAAA,+BAIAnC,OAAAoR,QAAA,WACAjS,KAAAqS,gBACArS,MAAA8S,YAGA,OAAA,IAAA9B,aCxSA5T,SAGA,SAAAhB,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAG,KAAA6C,QAAA,oBAAA,SAAA2T,QACA,OACA/O,SAAA,SAAAA,UACA,MAAA+O,QAAA/O,SAAAA,WAEAa,cAAA,SAAAb,UACA,MAAA+O,QAAAlO,cAAAb,aAMA5H,UAAAG,KAAAyG,OAAA,SAAAgQ,eCxBAA,cAAAC,aAAAhW,KAAA,yBAGAE,SAGA,SAAAhB,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAG,KAAAiU,MAAA,eACA0C,SACAC,MAAA,WACAC,QAAA,aACAC,MAAA,WACAC,SAAA,cACAC,QAAA,aACAC,UAAA,eACAC,UAAA,gBAEAC,YACA,eACA,YACA,gBACA,iBACA,cAIAtX,UAAAG,KAAAuC,SAAA,UACAyE,QACAoQ,WAAA,oBACAC,UAAA,mBACAC,OAAA,gBACAC,MAAA,gBAEAC,SAAA,IACAC,aACAC,OAAA,cAEAC,UACAC,WAAA,cACAC,aAAA,aAIAhY,UAAAG,KAAA6D,SAAA,QAAA,WAEA,GAAAsT,cACA,IAAAW,SACA,IAAAC,YAEAvU,MAAAwU,SAAA,SAAAC,QACAH,MAAA7X,QAAAoI,UAAAyP,MAAAG,OACA,OAAAH,OAGAtU,MAAA0U,cAAA,SAAAC,aACAhB,WAAAA,WAAAiB,OAAAD,YACA,OAAAhB,YAGA3T,MAAAQ,KAAA,SAAAC,UAAAkD,WAAA8D,MAAA7G,KAAAiU,YAAAC,QAEA,GAAAC,cAAA,WACA/U,KAAAgV,iBAGA,IAAAnU,OAAAkU,aAAAjU,SAEAD,OAAAmU,eAAA,WACA,GAAAnP,MAAA7F,IAEA2T,YAAAkB,YAAAlB,WAAAiB,OAAAjB,WAEAlX,SAAAqL,QAAA6L,WAAA,SAAA9W,MACAgJ,KAAAoP,aAAApY,QAIAgE,OAAAoU,aAAA,SAAApY,MACA,GAAAqY,WAAAzU,UAAAiC,IAAA7F,KACA0X,UAAAW,UAAArY,MAAAqY,UAGArU,OAAA2T,SAAA,SAAAC,QACAH,MAAA7X,QAAAoI,UAAAyP,MAAAG,OACA9Q,YAAAkP,WAAAiC,OAAAtR,OAAAoQ,YAGA/S,OAAAsU,SAAA,SAAAxG,IAAApN,QAAAkP,MAAA2E,UAEA,GAAAC,YAAAf,MAAA3F,IACA,KAAA0G,WAAA,CACAzU,KAAAoC,MAAA,4BAAA2L,IAAA,yEACA,QAGA,GAAA2G,YAAAD,WAAAD,SACA,KAAAE,WAAA,CACA1U,KAAAiC,KAAA,eAAAuS,SAAA,8CACAE,eAGA,GAAAC,IAAAhU,QAAA,EACA,IAAA2K,WACA,IAAAsJ,cACA,IAAAC,QAAA,IAEAhZ,SAAAqL,QAAAwN,WAAA,SAAAI,KAAAC,eAEA,IAAAD,KAAA,CAGA,OAGA,GAAAR,WAAAX,SAAAoB,cAEA,IAAAlZ,QAAAgF,YAAAyT,WAAA,CACAtU,KAAAkC,KAAA,6BAAAjG,KAAA,IACA,QAGA,GAAAuW,OAAA8B,UAAAC,SAAA1E,MAAAiF,KAEA,IAAAE,mBACAxC,MAAAA,MACAgC,SAAAA,SACAO,cAAAA,cACAlF,MAAAA,MACAjO,QAAAkT,KAAAlT,QACAqT,MAAAN,GAAA1Y,MAAA0Y,GAAAlP,GAGA,IAAA7H,QAAA/B,QAAAoI,UAAA6Q,KAAAE,iBAEA1J,SAAAhP,KAAAsB,OACA,KAAA4U,MAAA,CACAoC,WAAAtY,KAAA0Y,kBAEAH,OAAAA,QAAArC,OAGA,QACA0C,QAAAL,OACAM,IAAA7J,QACAsJ,WAAAA,YAKA,OAAA,IAAAT,mBCvJA3X,SAGA,SAAAhB,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAG,KAAA6C,QAAA,aAAA,WAEA,OAEAO,UAAA,SAAA6Q,OACA,MAAAhU,SAAAmD,UAAA6Q,QAAAA,QAAA,IAAAA,QAAA,MAGAuF,QAAA,SAAAvF,OACA,OAAAzQ,KAAAJ,UAAA6Q,QAAAwF,EAAAC,KAAAzF,SAAA,SCnBArT,SAIA,SAAAhB,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAG,KAAA6C,QAAA,YAAA,SAAA8W,YAEA,GAAAjB,YACArY,KAAA,OACAsY,SAAA,SAAA1E,MAAAiF,MACA,GAAAlX,QAAA,KACA,IAAA4X,KAAAV,KAAAU,KAAA,CACA,IAAAC,KAAAX,KAAAW,GAEA,IAAAtZ,EAAAuZ,OAAA7F,QAAA1T,EAAA0E,YAAAgP,OAAA,CACAA,MAAA,GAGA,GAAA1T,EAAAgM,SAAA0H,OAAA,CACAjS,OAAA2X,WAAAH,QAAAvF,QAAAA,MAAA3S,QAAAsY,MAAAC,MAAApI,WAAAwC,MAAA3S,QAAAuY,SACA,IAAAtZ,EAAAsN,SAAAoG,OAAA,CACAjS,OAAA2X,WAAAH,QAAAvF,QAAAA,OAAA2F,MAAAC,MAAApI,WAAAwC,OAAA4F,KAGA,MAAA7X,SC/BA,OAAA0W,eAGA9X,SAGA,SAAAhB,MACA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAG,KAAA6C,QAAA,eAAA,SAAA8W,YAEA,GAAAjB,YACArY,KAAA,UACA0Z,MAAA,qBACAC,SAAA,SAAAC,SACA,GAAAhY,MAEA,IAAAgY,QAAAhZ,KAAA,CACA,MAAAgZ,aACA,CACAhY,MAAAgY,QAAAhY,MAAAyW,UAAAqB,MACA,IAAA9X,MAAA,CACA,MAAA,IAAAiY,QAAAjY,MAAA,GAAAA,MAAA,QACA,CACA,KAAA,YAAAgY,QAAA,qBAIAtB,SAAA,SAAA1E,MAAAiF,MACA,GAAAiB,QAAA5Z,EAAA2Q,QAAAgI,KAAAjF,OAAAiF,KAAAjF,OAAAiF,KAAAjF,MAEA,IAAA2C,OAAA,KAEArW,GAAAsP,KAAAsK,OAAA,SAAAC,WACA,GAAAH,SAAAvB,UAAAsB,SAAAI,UACA,IAAAT,WAAAH,QAAAvF,QAAAgG,QAAAhZ,KAAAgT,OAAA,CACA2C,MAAA,OAIA,OAAAA,QC1CA,OAAA8B,eAGA9X,SAGA,SAAAhB,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAG,KAAA6C,QAAA,gBAAA,SAAA8W,YAEA,GAAAjB,YACArY,KAAA,WACAsY,SAAA,SAAA1E,OACA,OAAA0F,WAAAH,QAAAvF,QCjBA,OAAAyE,eAGA9X,SAGA,SAAAhB,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAG,KAAA6C,QAAA,iBAAA,SAAAyV,OAAAqB,YAEA,GAAAjB,YAEArY,KAAA,YAEAga,aAAA,SAAAnF,OACA,MAAAwD,WAAA4B,OAAAhK,SAAAiK,IAAArF,MAAAjB,MAAAiB,MAAAsF,SAGAC,WAAA,SAAAC,KACA,MAAAhC,WAAAiC,OAAArK,SAAAiK,IAAAG,IAAAzG,MAAAyG,IAAAF,SAGAF,OAAA,SAAArG,OAGAA,MAAA2G,IAAA,QAAA,EACA3G,OAAA2G,IAAA,UAAA,EACA3G,OAAA2G,IAAA,UAAA,EAEA,OAAA3G,QAGA0G,OAAA,SAAA1G,OAGAA,MAAA2G,IAAA,QAAA,GACA3G,OAAA2G,IAAA,UAAA,GACA3G,OAAA2G,IAAA,UAAA,GAEA,OAAA3G,QAGA4G,WAAA,SAAA5G,MAAA6D,OAEA,GAAAzS,KACA,IAAAyV,UACA,IAAAC,QAEA1V,MAAAiL,OAAA2D,MAAA6D,MAAAkD,QAAA1C,OAAAb,YAAAC,OACArS,MAAAuV,IAAA,QAAA,EACAvV,MAAAuV,IAAA,UAAA,EACAvV,MAAAuV,IAAA,UAAA,EAEA,KAAAjB,WAAAH,QAAA1B,MAAA5C,MAAAsF,SAAAb,WAAAH,QAAA1B,MAAA4C,IAAAF,OAAA,CACAM,UAAApC,UAAA2B,aAAAvC,MAAA5C,MACA6F,SAAArC,UAAA+B,WAAA3C,MAAA4C,SACA,CACAI,UAAAxK,OAAAwH,MAAA5C,MAAAjB,MAAA6D,MAAAkD,OACAD,SAAArC,UAAAiC,OAAArK,OAAAwH,MAAA4C,IAAAzG,MAAA6D,MAAAkD,SAEA,MAAA3V,MAAAiU,WAAAjU,KAAA4V,UAAAH,UAAAC,QAAA,QAAA1V,KAAA6V,OAAAJ,UAAA,QAAAzV,KAAA6V,OAAAH,QAAA,QAGApC,SAAA,SAAA1E,MAAAiF,MACA,MAAAS,YAAAH,QAAAvF,QAAAyE,UAAAmC,WAAA5G,MAAAiF,OCnEA,OAAAR,eAEA9X,SAGA,SAAAhB,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAG,KAAA6C,QAAA,YAAA,SAAAyV,OAAAqB,YAEA,GAAAjB,YACArY,KAAA,aACAsY,SAAA,SAAA1E,MAAA6D,OACA,GAAAkD,QAAAlD,OAAAA,MAAAkD,OAAAlD,MAAAkD,OAAA1C,OAAAb,YAAAC,MACA,OAAAiC,YAAAH,QAAAvF,QAAA3D,OAAA2D,MAAA+G,OAAA,MAAA1B,WCjBA,OAAAZ,eAEA9X,SAGA,SAAAhB,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAG,KAAAuC,SAAA,cACA4Y,UAEA9a,KAAA,UACAyP,KAAA,OAGAzP,KAAA,SACAyP,KAAA,OAGAzP,KAAA;AACAyP,KAAA,OAGAzP,KAAA,WACAyP,KAAA,OAGAzP,KAAA,aACAyP,KAAA,OAGAzP,KAAA,WACAyP,KAAA,OAGAzP,KAAA,cACAyP,KAAA,OAGAzP,KAAA,WACAyP,KAAA,OAGAzP,KAAA,uBACAyP,KAAA,OAGAzP,KAAA,UACAyP,KAAA,OAGAzP,KAAA,UACAyP,KAAA,OAGAzP,KAAA,SACAyP,KAAA,OAGAzP,KAAA,QACAyP,KAAA,OAGAzP,KAAA,WACAyP,KAAA,OAGAzP,KAAA,UACAyP,KAAA,OAGAzP,KAAA,OACAyP,KAAA,OAGAzP,KAAA,SACAyP,KAAA,OAGAzP,KAAA,WACAyP,KAAA,OAGAzP,KAAA,YACAyP,KAAA,OAGAzP,KAAA,QACAyP,KAAA,OAGAzP,KAAA,WACAyP,KAAA,OAGAzP,KAAA,gBACAyP,KAAA,OAGAzP,KAAA,WACAyP,KAAA,OAGAzP,KAAA,YACAyP,KAAA,OAGAzP,KAAA,cACAyP,KAAA,OAGAzP,KAAA,WACAyP,KAAA,OAGAzP,KAAA,UACAyP,KAAA,OAGAzP,KAAA,WACAyP,KAAA,OAGAzP,KAAA,SACAyP,KAAA,OAGAzP,KAAA,gBACAyP,KAAA,OAGAzP,KAAA,aACAyP,KAAA,OAGAzP,KAAA,aACAyP,KAAA,OAGAzP,KAAA,WACAyP,KAAA,OAGAzP,KAAA,iBACAyP,KAAA,OAGAzP,KAAA,eACAyP,KAAA,OAGAzP,KAAA,OACAyP,KAAA,OAGAzP,KAAA,WACAyP,KAAA,OAGAzP,KAAA,SACAyP,KAAA,OAGAzP,KAAA,eACAyP,KAAA,OAGAzP,KAAA,eACAyP,KAAA,OAGAzP,KAAA,iBACAyP,KAAA,OAGAzP,KAAA,eACAyP,KAAA,OAGAzP,KAAA,YACAyP,KAAA,OAGAzP,KAAA,QACAyP,KAAA,OAGAzP,KAAA,OACAyP,KAAA,OAGAzP,KAAA,UACAyP,KAAA,OAGAzP,KAAA,WACAyP,KAAA,OAGAzP,KAAA,aACAyP,KAAA,OAGAzP,KAAA,gBACAyP,KAAA,OAGAzP,KAAA,YACAyP,KAAA,OAGAzP,KAAA,UACAyP,KAAA,WCrNAlP,SAGA,SAAAhB,MACA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAG,KAAAuC,SAAA,gBACA6Y,sBAAA,KACAC,UACAC,MAAA,mBACAC,OAAA,qBAEAvU,QACAwU,KAAA,yBACAC,QAAA,SAEAC,QAAA,oBAEAC,QAAA,gBAAA,iBACAC,KACAC,MACAC,IAAA,qCAEAC,IACAD,IAAA,0CAKAjc,UAAAG,KAAA6D,SAAA,cAAA,SAAAmY,cAEA,GAAAC,WACA,IAAAC,qBAAAF,aAAAZ,qBACA,IAAAe,MAEA3Y,MAAA4Y,gBAAA,SAAAC,UAEA,GAAApc,QAAAsM,SAAA8P,UAAA,CACAA,UAAAA,UAGA,GAAA9b,EAAA2Q,QAAAmL,UAAA,CACAJ,QAAAI,aACA,CACA,KAAA,IAAA5b,OAAA,+DAGA,MAAAwb,SAGAzY,MAAA8Y,uBAAA,SAAArI,OACA,GAAAvQ,UAAApC,OAAA,CACA4a,sBAAAjI,MAEA,MAAAiI,qBAGA1Y,MAAA+Y,SAAA,SAAA1S,IACAsS,MAAAtS,EACA,OAAAsS,OAGA3Y,MAAAQ,KAAA,SAAAC,UAAAmD,GAAAhD,MAEA,GAAAoY,aAAA,WAEA,GAAAnT,MAAA7F,IACAA,MAAAuU,WAEA,KAAAkE,SAAAA,QAAA3a,SAAA,EAAA,CACA2a,SAAAD,aAAAX,SAAAE,QAGAtb,QAAAqL,QAAA2Q,QAAA,SAAAQ,QAEA,IACApT,KAAA0O,SAAA0E,QAAAxY,UAAAiC,IAAAuW,QACA,MAAAC,KACAtY,KAAAoC,MAAA,+BAAAiW,YAMA,IAAApY,OAAAmY,YAAAlY,SAEAD,OAAAsY,WAAA,SAAAC,YAEA,GAAAC,YAEA5c,SAAAqL,QAAA9H,KAAAuU,SAAA,SAAA+E,SACA,GAAA3T,SAAA2T,QAAAH,WAAAC,WACAC,UAAAnc,KAAAyI,UAGA,OAAA/B,IAAAmS,IAAAsD,UAGAxY,OAAA0Y,SAAA,WACA,MAAAZ,OAGA9X,OAAA2Y,cAAA,SAAAjb,KAEA,GAAA8a,YAEA5c,SAAAqL,QAAA9H,KAAAuU,SAAA,SAAA+E,SACA,GAAA3T,SAAA2T,QAAAE,cAAAjb,IACA8a,UAAAnc,KAAAyI,UAGA,OAAA/B,IAAAmS,IAAAsD,UAGA,OAAA,IAAAL,eAKA3c,UAAAG,KAAAid,IAAA,SAAA9V,WAAA6U,aAAAkB,YAAAC,WACA,GAAAD,YAAAhB,oBAAA,CACA/U,WAAAkO,IAAA2G,aAAAhV,OAAAwU,KAAA,WACA0B,YAAAF,cAAAG,UAAAC,iBC5HAxc,SAGA,SAAAhB,MACA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAG,KAAA6C,QAAA,mBAAA,SAAAmZ,aAAA5X,MAEA,GAAAiZ,gBAAA,YAEA,IAAAhZ,OAAAgZ,eAAA/Y,SAEAD,OAAAiZ,cAAA,SAAAC,YAEA,GAAAlU,MAAA7F,IACA,IAAAga,SAEAjd,GAAA+K,QAAAiS,WAAA,SAAAtJ,MAAA9B,KACA,GAAA9I,KAAAoU,iBAAAtL,MAAA9I,KAAAqU,aAAAvL,KAAA,CACA,GAAAnQ,QAAAqH,KAAAsU,aAAAxL,IAAA8B,MACAuJ,OAAAxb,OAAAmQ,KAAAnQ,OAAAiS,QAIA,OAAAuJ,OAGAnZ,OAAAuZ,eAAA,SAAAC,OACA,MAAAA,OAAAjI,OAAAiI,MAAAC,QAGAzZ,OAAAqZ,aAAA,SAAAvL,KACA,GAAA4L,SAAAxd,EAAAyd,SAAAhC,aAAAL,OAAAxJ,IACA,QAAA4L,QAGA1Z,OAAAoZ,iBAAA,SAAAtL,KACA,MAAA6J,cAAAN,QAAAza,KAAAkR,KAGA9N,OAAA4Z,UAAA,SAAAjd,KACA,MAAAA,KAAAkd,OAAA,EAAA,GAAAC,cAAAnd,IAAAkd,OAAA,GAGA7Z,OAAAsZ,aAAA,SAAAxL,IAAA8B,OACA,GAAAmK,WAAAjM,IAAAlQ,MAAA+Z,aAAAN,QAEA,IAAA0C,WAAAA,UAAA,GAAA,CACA,OACAjM,IAAA3O,KAAAya,UAAAG,UAAA,IACAnK,MAAAA,QAKA5P,OAAAga,MAAA,SAAApK,OACA,GAAAqK,QAAAC,SAAAtK,MAAA,GACAA,OAAAuK,MAAAF,QAAA,EAAAA,MACA,OAAArK,OAGA5P,OAAAiV,QAAA,SAAAmF,gBACA,GAAA7H,OAAA,IAEA,IAAA6H,eAAAxK,OAAAwK,eAAAxK,QAAA,EAAA,OACAwK,gBAAAxK,MAGA1T,EAAA+K,QAAAmT,eAAA,SAAAtM,IAAA8B,OACA,GAAApU,SAAAkB,QAAAkT,QAAA1T,EAAA0E,YAAAgP,OAAA,CACA7P,KAAAkC,KAAA,mCAAA6L,IAAAuM,cAAA,mBACA9H,OAAA,QAIA,OAAAA,OC/EA,OAAA,IAAAyG,oBAEAzc,SAGA,SAAAhB,MACA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAG,KAAA6C,QAAA,oBAAA,SAAAuB,KAAAua,sBAAAxB,WAEA,GAAAyB,wBAAA,YAEA,IAAAva,OAAAua,uBAAAta,SAEAD,OAAAsY,WAAA,SAAAC,YACAA,WAAA7a,IAAAob,UAAA0B,UAAA,KACAjC,YAAA1Q,MAAA0Q,WAAA1Q,OAAA,MAEA,OAAAyS,uBAAA/B,WAAA1Q,OAAA0Q,YAGAvY,OAAA2Y,cAAA,SAAAjb,KAEA,GAAA6a,aACApH,MAAA,OACAtJ,MAAA,OACAnK,IAAAA,KAAAob,UAAA0B,WAGA,OAAAF,uBAAA/B,WAAA1Q,OAAA0Q,YChCA,OAAA,IAAAgC,4BAGAhe,SAGA,SAAAhB,MACA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAG,KAAA6D,SAAA,mBAAA,WAEA,GAAAib,MAAAtb,IACA,IAAAub,OAIAvb,MAAAwb,mBAAA,SAAA3d,MAAA4d,UAAAhL,MAAAiL,OAEAtf,KAAAuf,KAAAvf,KAAAuf,QAEA,KAAA9d,OAAAmd,MAAAnd,OAAA,CACA,KAAA,IAAAZ,OAAA,8BACA,KAAAwe,UAAA,CACA,KAAA,IAAAxe,OAAA,kCACA,CACAb,KAAAuf,KAAAze,MAAA,oBAAAW,MAAA4d,UAAAhL,MAAAiL,SAIA1b,MAAA4b,UAAA,SAAAC,SACAN,OAAAM,QAIA7b,MAAA8b,kBAAA,SAAAC,OACAhf,EAAA+K,QAAAiU,MAAA,SAAAC,MACAV,KAAAE,mBAAAQ,KAAA,GAAAA,KAAA,GAAAA,KAAA,GAAA,WAIAhc,MAAAic,iBAAA,SAAApe,MAAAhB,KAAA4T,OACAzQ,KAAAwb,mBAAA3d,MAAAhB,KAAA4T,MAAA,QAGAzQ,MAAAQ,KAAA,SAAA0b,iBAAAjN,gBAAAuJ,aAAA/X,UAAAG,KAAAgD,GAAAkN,UAAA6I,UAAAwC,SAEA,GAAAC,kBAAA,WACApc,KAAAwR,OAGA,IAAA3Q,OAAAub,iBAAAtb,SAEAD,OAAAsY,WAAA,SAAAC,YAEA,IAAAhd,KAAAuf,KAAA,CACA/a,KAAAkC,KAAA,gDACA,OAAAc,IAAAQ,KAAA,OAQA,GAAAgV,WAAA3I,MAAA,CACA2I,WAAA3I,MAAAyL,iBAAArB,MAAAzB,WAAApH,OAIA,IAAAkK,iBAAApG,QAAAsD,YAAA,CACAxY,KAAAkC,KAAA,mEACA,OAAAc,IAAAQ,KAAA,OAGA,MAAAR,IAAAQ,KAAAhI,KAAAuf,KAAAze,MAAA,aAAAkc,WAAAiD,SAAAjD,WAAApH,MAAAoH,WAAAkD,MAAAlD,WAAA3I,SAGA5P,OAAA2Y,cAAA,SAAAjb,KAEA,IAAAnC,KAAAuf,KAAA,CACA/a,KAAAkC,KAAA,gDACA,OAAAc,IAAAQ,KAAA,OAGA,MAAAR,IAAAQ,KAAAhI,KAAAuf,KAAAze,MAAA,aAAAqB,OAIAsC,OAAA0b,aAAA,WACA,GAAAxf,EAAAyf,SAAAjB,QAAA,CACA3a,KAAAkC,KAAA,6DACA,QAGA,GAAAvE,IAEA,IAAAob,UAAA8C,SAAA,oBAAA,CACAle,IAAAia,aAAAJ,IAAAC,KAAAC,QACA,CACA/Z,IAAAia,aAAAJ,IAAAG,GAAAD,IAGA6D,QAAAR,KAAAQ,QAAAR,QACAQ,SAAAR,KAAAze,MAAA,sBACAif,SAAAR,KAAAze,MAAA,gBAAAqB,IAAA,aACA4d,SAAAR,KAAAze,MAAA,YAAAqe,QACAY,SAAAR,KAAAze,MAAA,aAAAqB,KAEA,IAAAme,QAAA/d,SAAAge,cAAA,SACA,IAAAC,QAAAje,SAAAke,qBAAA,UAAA,EACAH,QAAAI,KAAA,iBACAJ,QAAAlX,MAAA,IACAkX,QAAAK,MAAA,IACAL,QAAAM,IAAAze,IAAA,UACAqe,QAAAK,WAAAC,aAAAR,OAAAE,QAGA/b,OAAA2Q,KAAA,YASA,OAAA,IAAA4K,uBC7HAhf,SAKA,SAAAhB,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAG,KAAAuC,SAAA,iBACAoe,UACAC,eAAA,OAEAC,OACAC,UAAA,cAIAjhB,UAAAG,KAAA6D,SAAA,uBAAA,WAEA,GAAAC,UAAA,IACA,IAAAqY,MAEA3Y,MAAAO,QAAA,SAAAA,SACAD,WAAAC,QAGAP,MAAAud,SAAA,SAAAC,KACA7E,MAAA6E,IAGAxd,MAAAQ,KAAA,SAAA2a,sBAAAxB,UAAA8D,eAEA,GAAAC,sBAAA,YAIA,IAAA7c,OAAA6c,qBAAA5c,SAEAD,OAAA2Q,KAAA,WAEA,GAAA3L,MAAA7F,IAEA,KAAAM,SAAA,CACA,OAGAqd,SAAAC,eAAA,KACAD,UAAAE,0BAAA,EAGAF,UAAAG,OAAAC,UAAA,SAAAC,YACAnY,KAAAoY,QAAAD,cAKAnd,OAAAqd,YAAA,SAAAF,YAEA,GAAAxb,SAAA,EAEA,IAAA1E,QAAAkgB,WAAAG,MAAArgB,MAEA,KAAA,GAAA6I,GAAA,EAAAA,EAAA7I,OAAA6I,IAAA,CACAnE,UACA,IAAAzF,EAAAqhB,QAAAzX,EAAA,GAAA,EAAA,KAAA,KACAqX,WAAAG,MAAAxX,GAAA0X,KACA,IACAL,WAAAG,MAAAxX,GAAApI,IACA,IACAyf,WAAAG,MAAAxX,GAAA2X,KACA,IACAN,WAAAG,MAAAxX,GAAA4X,OACA5X,EAAA,EAAA7I,OAAA,KAAA,IACAG,KAAA,IAIA,MAAAuE,SAGA3B,OAAAod,QAAA,SAAAD,YAEA,GAAAQ,WAAApiB,KAAAqiB,WAAAriB,KAAAqiB,UAAAD,UAAApiB,KAAAqiB,UAAAD,UAAAf,cAAAN,SAAAC,cAEA,IAAA5a,UACAkc,UAAA5R,OAAA,GAAAvK,OAAAiV,OAAA,yBACAmH,UAAAX,WAAAnhB,KACA+hB,aAAAZ,WAAAxb,QACAqc,WAAA7e,KAAAke,YAAAF,YACAzf,IAAAob,UAAA0B,SACA1C,MAAAA,OAAA8E,cAAAN,SAAAC,eAEAoB,UAAAA,UACAM,aAAAL,UAAAK,aACAC,SAAApgB,SAAAogB,SACAC,KAAArgB,SAAAsgB,OACAC,YAAAjJ,EAAA7Y,QAAA+hB,QACAC,aAAAnJ,EAAA7Y,QAAAiiB,SACAC,WAAAjjB,SAAAC,QAGA,OAAA0D,MAAA4C,IAAAJ,SAIA3B,OAAA+B,IAAA,SAAAJ,SACA,MAAA2Y,uBAAA,SAAA3Y,SAGA3B,OAAAsY,WAAA,SAAAoG,WAEA,IAAAjf,SAAA,CACA,OAGA,GAAA0d,YAAAL,SAAA6B,kBAAAD,UAEA,OAAAvf,MAAAie,QAAAD,YAIA,OAAA,IAAAN,wBAKArhB,UAAAG,KAAAyG,OAAA,SAAAC,UAEAA,SAAAC,UAAA,oBAAA,SAAAxC,UAAAF,WACA,MAAA,UAAA8e,UAAAE,OACA9e,UAAA4e,UAAAE,MACA,IAAAC,cAAAjf,UAAAiC,IAAA,uBACAgd,cAAAvG,WAAAoG,eAMAljB,UAAAG,KAAAid,IAAA,SAAAkG,sBChJAA,qBAAAnO,WAGApU,SAUA,WAEA,YAEA,IAAAwiB,KAAA,SAAAC,QACA,GAAAA,OAAA,GAAA,CACA,MAAA,IAAAA,OAEA,MAAAA,QAGA,KAAAtd,KAAAzB,UAAAiM,YAAA,CAEAxK,KAAAzB,UAAAiM,YAAA,WAEA,MAAA/M,MAAA8f,iBACA,IAAAF,IAAA5f,KAAA+f,cAAA,GACA,IAAAH,IAAA5f,KAAAggB,cACA,IAAAJ,IAAA5f,KAAAigB,eACA,IAAAL,IAAA5f,KAAAkgB,iBACA,IAAAN,IAAA5f,KAAAmgB,iBACA,KAAAngB,KAAAogB,qBAAA,KAAAC,QAAA,GAAA3R,MAAA,EAAA,GACA,QCmvFGtR","file":"availity-angular.min.js","sourcesContent":["/*global module*/\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity || {};\n  availity.VERSION = 'v0.0.0';\n  availity.MODULE = 'availity';\n  availity.core = angular.module(availity.MODULE, ['ng']);\n\n  var originalModule = angular.module;\n  var modules = [];\n\n  angular.module = function(name, deps) {\n\n    if(deps && _.indexOf(modules, name) !== -1 ) {\n      throw new Error('redefining module: ' + name);\n    }\n\n    modules.push(name);\n\n    return originalModule(name, deps);\n  };\n\n  root.availity = availity;\n\n  if(typeof module !== 'undefined' && module.exports) {\n    module.exports = availity;\n  }\n\n})(window);\n\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/helper/makeString.js\n  availity._stringify = function(object) {\n    if(object === null) {\n      return '';\n    }\n    return '' + object;\n  };\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/isBlank.js\n  availity.isBlank = function(str) {\n    return (/^\\s*$/).test(availity._stringify(str));\n  };\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var uid = ['0', '0', '0'];\n\n  availity.uuid = function(prefix) {\n    var index = uid.length;\n    var digit;\n\n    while(index) {\n      index--;\n      digit = uid[index].charCodeAt(0);\n      if(digit === 57 /*'9'*/) {\n        uid[index] = 'A';\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n      if(digit === 90  /*'Z'*/) {\n        uid[index] = '0';\n      } else {\n        uid[index] = String.fromCharCode(digit + 1);\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n    }\n    uid.unshift('0');\n    return prefix ? prefix + uid.join('') : uid.join('');\n  };\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.REGEX_API_URL = /^.*?api.availity.com(.*)$/;\n\n  availity.getRelativeUrl = function(url) {\n    var result = url.match(availity.REGEX_API_URL);\n    if(result && result[1]) {\n      return '/api' + result[1];\n    }\n\n    return url;\n  };\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // https://github.com/jasonday/printThis/commit/66f9cbd0e3760767342eed4ef32cf8294417b227\n  availity.print = function() {\n\n    if(document.queryCommandSupported('print')) {\n      document.execCommand('print', false, null);\n    } else {\n      window.focus();\n      window.print();\n    }\n  };\n\n})(window);\n","// Original => https://github.com/mgcrea/angular-strap/blob/master/src/helpers/debounce.js\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_THROTTLE', {\n    OPTIONS: {\n      wait: 1000,\n      update: false,\n      trailing: true,\n      leading: false\n    }\n  });\n\n  availity.core.factory('avThrottle', function(AV_THROTTLE, $timeout) {\n\n    return function(fn, wait, options) {\n\n      options = _.merge({}, AV_THROTTLE.OPTIONS, options);\n\n      wait = wait ? wait : AV_THROTTLE.THRESHOLD;\n      var update = angular.isDefined(options.update) ? options.update : AV_THROTTLE.UPDATE;\n      var timer = null;\n\n      return function() {\n        var context = options.context || this;\n        var args = arguments;\n\n        if(!timer) {\n          if(options.leading !== false) {\n            fn.apply(context, args);\n          }\n\n          var later = function() {\n            timer = null;\n            if(options.trailing !== false) {\n              fn.apply(context, args);\n            }\n          };\n\n          timer = $timeout(later, wait, update);\n        }\n\n        return timer;\n\n      };\n    };\n  });\n\n})(window);\n","// Orginal => https://github.com/ericzon/angular-ny-logger/blob/0c594e864c93e7f33d36141200096bc6139ddde1/angular-ny-logger.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.provider('AvLogger', function() {\n\n    var _enabled = false;\n\n    this.enabled = function(enabled) {\n      _enabled = !!enabled;\n    };\n\n    this.$get = function($injector) {\n\n      var AvLogger = function(context, $delegate) {\n\n        this.context = context || '';\n        this.$log = $delegate;\n\n      };\n\n      var proto = AvLogger.prototype;\n\n      AvLogger.supplant = function(str, o) {\n\n        var _supplant = function (a, b) {\n          var r = o[b];\n          return r;\n        };\n\n        return str.replace(/\\{([^{}]*)\\}/g, _supplant);\n      };\n\n      AvLogger.isObject = function(element) {\n        var elemStr = ( !angular.isUndefined(element) && !angular.isUndefined(element.constructor) ) ? element.constructor.toString() : '';\n        return (elemStr.indexOf('Object') > -1);\n      };\n\n      AvLogger.getFormattedTimestamp = function(date) {\n\n        return AvLogger.supplant('{0}:{1}:{2}:{3}', [\n          date.getHours(),\n          date.getMinutes(),\n          date.getSeconds(),\n          date.getMilliseconds()\n        ]);\n\n      };\n\n      proto._log = function(originalFn, args) {\n\n        // Allow enabling logger through query params\n        // Ex:\n        //\n        // http://localhost:3000/ui.html#avLogger\n\n        var hash = window.location.hash;\n        hash = hash || '';\n\n        if(!_enabled && hash.indexOf('avLogger') < 0 && originalFn !== 'error') {\n          return;\n        }\n\n        var now  = AvLogger.getFormattedTimestamp(new Date());\n        var message = '';\n        var supplantData = [];\n\n        var context = this.context ? ' [' + this.context + '] ' : '';\n\n        switch(args.length) {\n          case 1:\n            // (1) If the user supplied one argument, then the argument must be\n            // the message itself and _log()\n            // will print: <timestamp> - <context>: <message>\n            supplantData = args[0];\n            message = AvLogger.supplant('{0}{1} - {2}', [now, context, args[0]]);\n            break;\n          case 3:\n            // (3) If the user supplied three arguments, then the first argument\n            // is a method name, the second is the message and the third is an\n            // object of variables to interpolate with the message. For this, _log()\n            // will print: <timestamp> - <context> - <method name>('<message>')\n            supplantData = args[2];\n            message = AvLogger.supplant(\"{0}{1} - {2}(\\'{3}\\')\", [now, context, args[0], args[1]]);\n            break;\n          case 2:\n            // (2) If the user provided two arguments, we need to find out whether\n            // they supplied a method name or an interpolation object.\n            // In order to figure that out, we’ll check the type of the last argument.\n            // If it is a string, then it has to be the message itself while the\n            // first argument is the method name. Otherwise consider the first argument\n            // as the message and the second as array of interpolation variables.\n            // The output print will be according to this check.\n            if(typeof args[1] === 'string') {\n              message = AvLogger.supplant(\"{0}{1} - {2}(\\'{3}\\')\", [now, context, args[0], args[1]]);\n            } else {\n              supplantData = args[1];\n              message = AvLogger.supplant('{0}{1} - {2}', [now, context, args[0]]);\n            }\n            break;\n        }\n\n        var $log = this.$log || $injector.get('$log');\n\n        var params = (AvLogger.isObject(supplantData)) ? [message, supplantData] : [AvLogger.supplant(message, supplantData)];\n        $log[originalFn].apply(null, params);\n\n      };\n\n      proto.log = function() {\n        this._log('log', arguments);\n      };\n\n      proto.info = function() {\n        this._log('info', arguments);\n      };\n\n      proto.warn = function() {\n        this._log('warn', arguments);\n      };\n\n      proto.debug = function() {\n        this._log('debug', arguments);\n      };\n\n      proto.error = function() {\n        this._log('error', arguments);\n      };\n\n      return AvLogger;\n\n    };\n\n  });\n\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.config(function($provide) {\n\n    $provide.decorator('$log', function($delegate, AvLogger) {\n      return new AvLogger(null, $delegate);\n    });\n\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_POLLING', {\n    INTERVAL: 1000, // delay in ms before retrying an async request\n    MAX_ELAPSED_TIME: 5000, // max time in ms before polling stops and rejects original request\n    MAX_RETRY: 30, // # of times the request will be tried\n    DECAY: 1.2, // % the polling interval decays after every retry\n    // maximum time polling is allowed before rejecting the request\n    EVENTS: {\n      MAX_RETRY: 'av:polling:max:retry'\n    },\n    REGEX_URL: /^.*?api.availity.com(.*)$/ // capture the relative url from API\n  });\n\n  var PollingServiceFactory = function($rootScope, $q, $injector, $timeout, $log, AV_POLLING, AV_API) {\n\n    var AvPollingService = function() {\n      this.pendingRequests = []; // stores all request for polling\n    };\n\n    var proto = AvPollingService.prototype;\n\n    proto.response = function(response) {\n\n      if(this.isAsyncResponse(response)) {\n        return this.onAsyncReponse(response);\n      }\n\n      return response || $q.when(response);\n    };\n\n    proto.setDefaults = function(config) {\n\n      var defaultOptions = {\n        pollingInterval: AV_POLLING.INTERVAL,\n        pollingDecay: AV_POLLING.DECAY,\n        pollingMaxInterval: AV_POLLING.MAX_ELAPSED_TIME,\n        pollingRetryCount: 0,\n        pollingStartTime: new Date().getTime()\n      };\n\n      return _.extend(defaultOptions, config);\n    };\n\n    proto.responseError = function(response) {\n      // Return the promise rejection\n      return $q.reject(response);\n    };\n\n    /**\n     * API layer return a link with a polling url for\n     * async responses.\n     *\n     * @param  {Object}  response ajax response\n     * @return {Boolean} true if response has status of 202 (accepted) and location param in header with uri+session link\n     */\n    proto.isAsyncResponse = function(response) {\n\n      return response &&\n        response.config &&\n        response.config.api &&\n        response.status &&\n        response.status === 202 &&\n        angular.isFunction(response.headers) && !availity.isBlank(response.headers(AV_API.HEADERS.SERVER.LOCATION));\n    };\n\n    proto.onAsyncReponse = function(response) {\n\n      response.config = this.setDefaults(response.config);\n\n      var deferred = $q.defer();\n\n      this.queueRequest(deferred, response);\n\n      // [rm3]: Can't call notify before you return promise object?\n      $timeout(function() {\n        // Notify deferred listeners with the original server response\n        deferred.notify(response);\n      }, 0, false);\n\n      return deferred.promise;\n    };\n\n    proto.getUrl = function(url) {\n\n      var result = url.match(AV_POLLING.REGEX_URL);\n      if(result && result[1]) {\n        return '/api' + result[1];\n      }\n\n      return url;\n    };\n\n    proto.queueRequest = function(deferred, response) {\n\n      var self = this;\n      // server replies with location header so set the url into config\n      var _url = availity.getRelativeUrl(response.headers(AV_API.HEADERS.SERVER.LOCATION));\n      var _config = response.config;\n\n\n      // headers – {Object} – Map of strings or functions which return strings representing HTTP headers\n      //  to send to the server. If the return value of a function is null, the header\n      //  will not be sent. Functions accept a config object as an argument.\n      var config = {\n        method: 'GET',\n        api: true,\n        headers: _config.headers,\n        pollingInterval: _config.pollingInterval,\n        pollingMaxRetry: _config.pollingMaxRetry,\n        pollingMaxInterval: _config.pollingMaxInterval,\n        pollingStartTime: _config.pollingStartTime,\n        _pollingDecay: _config._pollingDecay,\n        pollingRetryCount: _config.pollingRetryCount,\n        pollingDecay: _config.pollingDecay,\n        url: _url, /* set the url from the server response */\n        cache: false\n      };\n\n      var request = {\n        id: availity.uuid('request-'),\n        config: config,\n        deferred: deferred\n      };\n\n      var timeout = this.getPollingTimeout(config);\n\n      // each async request should run on its own timer\n      var timer = $timeout(function() {\n        self.retryRequest(request.id);\n      }, timeout, false);\n\n      request.timer = timer;\n\n      // add the async request to the queue\n      this.pushRequest(request);\n\n    };\n\n    proto.popRequest = function(id) {\n\n      var index = null;\n      var request = null;\n\n      for(var i = 0; i < this.pendingRequests.length; i++) {\n        if(this.pendingRequests[i].id === id) {\n          index = i;\n          break;\n        }\n      }\n\n      request = this.pendingRequests[index];\n      this.pendingRequests.splice(index, 1);\n\n      return request;\n    };\n\n    proto.pushRequest = function(request) {\n      this.pendingRequests.push(request);\n    };\n\n    proto.getPollingTimeout = function(config) {\n      return config.pollingDecay * config.pollingInterval;\n    };\n\n    proto.isPollingMaxTimeout = function(config) {\n      var now = new Date().getTime();\n      var elaspedTime = now - config.pollingStartTime;\n      var isElapsed = elaspedTime > config.pollingMaxInterval;\n      return isElapsed;\n    },\n\n      proto.isMaxRetried = function(config) {\n        return config.pollingRetryCount >= AV_POLLING.MAX_RETRY;\n      };\n\n    proto.isPollable = function(config) {\n      var _isTimeout = this.isPollingMaxTimeout(config);\n      var _isMax = this.isMaxRetried(config);\n\n      return _isTimeout || _isMax ? false : true;\n\n    };\n\n    proto.retryRequest = function(id) {\n\n      var self = this;\n      var request = this.popRequest(id);\n      $timeout.cancel(request.timer);\n\n      var config = request.config;\n\n      var deferred = request.deferred;\n\n      if(!this.isPollable(config)) {\n        $log.info('Rejecting pollable response due to timeout');\n        return deferred.reject(request);\n      }\n\n      // increment counters and polling timeouts\n      this.increment(config);\n\n      function successCallback(response) {\n        if(self.isAsyncResponse(response)) {\n          deferred.notify(response);\n          self.queueRequest(request.deferred, response);\n        } else {\n          deferred.resolve(response);\n        }\n      }\n\n      function errorCallback(response) {\n        deferred.reject(response);\n      }\n\n      // Silly circular dependency trick\n      var $http = $injector.get('$http');\n\n      $http(config).then(successCallback, errorCallback);\n\n    };\n\n    proto.increment = function(config) {\n      this.incrementCounter(config);\n      this.incrementDecay(config);\n    };\n\n    proto.incrementDecay = function(config) {\n      if(!config._pollingDecay) {\n        // store the original decay param\n        config._pollingDecay = config.pollingDecay;\n      }\n      config.pollingDecay *= config._pollingDecay;\n    };\n\n    proto.incrementCounter = function(config) {\n      config.pollingRetryCount++;\n    };\n\n    proto.clearRequests = function() {\n      angular.forEach(this.pendingRequests, function(request) {\n        $timeout.cancel(request.timer);\n      });\n      this.pendingRequests = [];\n    };\n\n    return new AvPollingService();\n\n  };\n\n  availity.core.factory('avPollingService', PollingServiceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_API', {\n    HEADERS: {\n      SERVER: {\n        ID: 'X-API-ID',\n        LOCATION: 'Location',\n        STATUS: 'X-Status-Message',\n        GLOBAL_ID: 'X-Global-Transaction-ID'\n      },\n      CLIENT: {\n        SESSION_ID: 'X-Session-ID',\n        AUTH: 'Authorization',\n        OVERRIDE: 'X-HTTP-Method-Override',\n        CALLBACK_URL: 'X-Callback-URL',\n        CUSTOMER_ID: 'X-Availity-Customer-ID'\n      }\n    }\n  });\n\n  var defaultOptions = {\n    // pre-prend the url with a value like `/public` so we can build urls like `public/api/v1/*`\n    prefix: '',\n    // default base url for endpoints\n    path: '/api',\n    // url to resource endpoint like `coverages` or `payers`\n    url: null,\n    // defaults to version 1\n    version: '/v1',\n    // governance level `/internal`\n    level: '',\n    // post-pend the url with `.json`, `.txt` or `.xml`\n    suffix: '',\n    // cache all request by default\n    cache: true,\n    // flag used to enable behaviors around the Availity Rest API\n    api: true,\n    // # of times the polling service has tried to get a response\n    pollingRetryCount: 0,\n    // in ms\n    pollingInterval: 1000,\n    // % the polling interval decays after every retry\n    pollingDecay: 1.2,\n    // maximum time polling is allowed before rejecting the request\n    pollingMaxInterval: 30000\n\n  };\n\n  // Factory that creates ApiResourcess\n  var ApiResourcesFactory = function($http, $q, avPollingService) {\n\n    var AvApiResource = function(options) {\n\n      if(!options) {\n        throw new Error('[options] cannot be null or undefined');\n      }\n\n      // if string the assume url is being passed in\n      if(angular.isString(options)) {\n        options = options.charAt(0) === '/' ? options : '/' + options;\n        options = angular.extend({}, {url: options});\n      }\n\n      if(!options.url) {\n        throw new Error('[url] cannot be null');\n      }\n\n      // get the default options and merge into this instance\n      this.options = angular.extend({}, defaultOptions, (options || {}));\n    };\n\n    // Alias the prototype\n    var proto = AvApiResource.prototype;\n\n    proto._config = function(config) {\n      return angular.extend({}, this.options, (config || {}));\n    },\n\n    proto._getUrl = function(id) {\n      if(this.options.api) {\n        return this._getApiUrl(id);\n      }\n\n      return this.options.url;\n    };\n\n    proto._createResponse = function(data, status, headers, config) {\n      return {\n        data: data,\n        status: status,\n        headers: headers,\n        config: config\n      };\n    };\n\n    proto._request = function(config, afterCallback) {\n\n      var self = this;\n      var defer = $q.defer();\n\n      $http(config)\n        .success(function(data, status, headers, _config) {\n\n          var _response = {\n            data: data,\n            status: status,\n            headers: headers,\n            config: _config\n          };\n\n          // handle the async response if applicable\n          var _promise = $q.when(avPollingService.response(_response));\n          // notify the promise listener of the original response\n          defer.notify(_response);\n\n          // handle the polling service promise\n          _promise.then(function(successResponse) {\n\n            // if service has a callback then call it\n            // var response = self._createResponse(data, status, headers, _config);\n            if(afterCallback) {\n              successResponse = afterCallback.call(self, successResponse);\n            }\n            defer.resolve(successResponse);\n          }, function(errorResponse) {\n            defer.reject(errorResponse);\n          }, function(notifyResponse) {\n            defer.notify(notifyResponse);\n          });\n\n        }).error(function(data, status, headers, _config) {\n          var response = self._createResponse(data, status, headers, _config);\n          defer.reject(response);\n        });\n\n      var promise = defer.promise;\n\n      // recreate the success callback ala $http\n      promise.success = function(fn) {\n        promise.then(function(response) {\n          fn(response.data, response.status, response.headers, response.config);\n        });\n        return promise;\n      };\n\n      // recreate the error callback ala $http\n      promise.error = function(fn) {\n        promise.then(null, function(response) {\n          fn(response.data, response.status, response.headers, config);\n        });\n        return promise;\n      };\n\n      promise.always = promise['finally'];\n\n      return promise;\n    };\n\n    proto._getApiUrl = function(id) {\n      id = id ? '/' + id : '';\n      return this.options.prefix + this.options.path + this.options.level + this.options.version + this.options.url + id + this.options.suffix;\n    };\n\n    proto.create = function(data, config) {\n\n      if(!data) {\n        throw new Error('called method without [data]');\n      }\n\n      if(this.beforeCreate) {\n        this.beforeCreate(this, data);\n      }\n\n      config = this._config(config);\n      config.method = 'POST';\n      config.url = this._getUrl();\n      config.data = data;\n\n      return this._request(config, this.afterCreate);\n\n    };\n\n    proto.get = function(id, config) {\n\n      if(!id) {\n        throw new Error('called method without [id]');\n      }\n\n      config = this._config(config);\n      config.method = 'GET';\n      config.url = this._getUrl(id);\n\n      return this._request(config, this.afterGet);\n\n    };\n\n    proto.query = function(config) {\n\n      config = this._config(config);\n      config.method = 'GET';\n      config.url = this._getUrl();\n\n      return this._request(config, this.afterQuery);\n\n    };\n\n    proto.update = function(id, data, config) {\n\n      var url;\n\n      if(_.isString(id) || _.isNumber(id)) {\n        url = this._getUrl(id);\n      }else {\n        url = this._getUrl();\n        // At this point the function signature becomes:\n        //\n        // proto.update = function(data, config) {} a.k.a function(id, data)\n        //\n        config = data;  // config is really the 2nd param\n        data = id; // data is really the first param\n      }\n\n      if(this.beforeUpdate) {\n        data = this.beforeUpdate(data);\n      }\n\n      config = this._config(config);\n      config.method = 'PUT';\n      config.url = url;\n      config.data = data;\n\n      return this._request(config, this.afterUpdate);\n\n    };\n\n    proto.remove = function(id, config) {\n      if(!id) {\n        throw new Error('called method without [id]');\n      }\n\n      config = this._config(config);\n      config.method = 'DELETE';\n      config.url = this._getUrl(id);\n\n      return this._request(config, this.afterRemove);\n    };\n\n    proto.beforeCreate = null;\n    proto.afterCreate = null;\n    proto.afterQuery = null;\n    proto.afterGet = null;\n    proto.beforeUpdate = null;\n    proto.afterUpdate = null;\n    proto.afterRemove = null;\n\n    return AvApiResource;\n\n  };\n\n  availity.core.factory('AvApiResource', ApiResourcesFactory);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  var UserServiceFactory = function(AvApiResource, $q) {\n\n    var AvUsersResource = function() {\n      this.user = null;\n      AvApiResource.call(this, 'users');\n    };\n\n    angular.extend(AvUsersResource.prototype, AvApiResource.prototype, {\n\n      afterGet: function(response) {\n        var user = response.data.user ? response.data.user : response.data;\n        this.user = user;\n        return user;\n      },\n\n      me: function() {\n\n        if(this.user) {\n          return $q.when(this.user);\n        }\n\n        return this.get('me');\n      }\n\n    });\n\n    return new AvUsersResource();\n\n  };\n\n  availity.core.factory('avUsersResource', UserServiceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avCoveragesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations', cache: false});\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avConfigurationsResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations'});\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var LogMessagesFactory = function(AvApiResource) {\n\n    var AvLogMessagesResource = function() {\n\n      AvApiResource.call(this, {\n        version: '/v1',\n        url: '/log-messages'\n      });\n    };\n\n    angular.extend(AvLogMessagesResource.prototype, AvApiResource.prototype, {\n\n      buildRequest: function(level, entries) {\n\n        var requestPayload = {};\n\n        if(entries.level) {\n          delete entries.level;\n        }\n\n        requestPayload.level = level;\n        requestPayload.entries = entries;\n\n        return requestPayload;\n      },\n\n      debug: function(entries) {\n        return this.create(this.buildRequest('debug', entries));\n      },\n\n      info: function(entries) {\n        return this.create(this.buildRequest('info', entries));\n      },\n\n      warn: function(entries) {\n        return this.create(this.buildRequest('warn', entries));\n      },\n\n      error: function(entries) {\n        return this.create(this.buildRequest('error', entries));\n      }\n\n    });\n\n    return new AvLogMessagesResource();\n\n  };\n\n  availity.core.factory('avLogMessagesResource', LogMessagesFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvDocumentsResourceFactory = function(AvApiResource) {\n\n    var AvDocumentsResource = function() {\n      AvApiResource.call(this, 'documents');\n    };\n\n    angular.extend(AvDocumentsResource.prototype, AvApiResource.prototype, {\n\n      getContents: function(id) {\n        var config = this._config();\n        config.url = this.getContentsUrl(id);\n        return this._request(config);\n      },\n\n      getContentsUrl: function(id) {\n        return this._getUrl(id) + '/contents';\n      }\n\n    });\n\n    return new AvDocumentsResource();\n\n  };\n\n  availity.core.factory('avDocumentsResource', AvDocumentsResourceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var OrganizationResourceFactory = function(AvApiResource) {\n\n    var OrganizationResource = function() {\n      AvApiResource.call(this, 'organizations');\n    };\n\n    angular.extend(OrganizationResource.prototype, AvApiResource.prototype, {\n\n      getOrganizations: function(config) {\n        return this.query(config).then(function(response) {\n          return response.data.organizations ? response.data.organizations : response.data;\n        });\n      }\n\n    });\n\n    return new OrganizationResource();\n  };\n\n  availity.core.factory('avOrganizationsResource', OrganizationResourceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n\n  var availity = root.availity;\n\n  availity.core.factory('avCodesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/codes'});\n  });\n\n  var AvCodesResourceFactory = function(AvApiResource) {\n\n    var AvCodesResource = function () {\n      AvApiResource.call(this, 'codes');\n    };\n\n    angular.extend(AvCodesResource.prototype, AvApiResource.prototype, {\n\n      getCodes: function (data) {\n\n        // config for the api resource query\n        var config = {};\n        config.params = {};\n\n        if(data.page) {\n          config.params.offset = 50 * (data.page - 1);\n        }\n        if(data.offset) {\n          config.params.offset = data.offset;\n        }\n        if(data.list) {\n          config.params.list = data.list;\n        }\n        if(data.q) {\n          config.params.q = data.q;\n        }\n\n        return this.query(config).then(function (response) {\n          // Format the response into something select2 can read\n          var results = response.data.codes;\n          if(results && !_.has(results[0], 'id')) {\n            _.each(results, function (code) {\n              code.id = code.code;\n            });\n          }\n\n          // calculate if we want to continue searching\n          var moreVal = response.data.offset < response.data.totalCount - response.data.limit;\n          return {\n            more: moreVal,\n            results: results\n          };\n\n        });\n      }\n\n    });\n\n    return new AvCodesResource();\n\n  };\n\n  availity.core.factory('avCodesResource', AvCodesResourceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvUserPermissionsResourceFactory = function(AvApiResource) {\n\n    var AvUserPermissionsResource = function() {\n      AvApiResource.call(this, {\n        level: '/internal',\n        version: '/v1',\n        url: '/axi-user-permissions'\n      });\n      this.sessionDate = moment().toISOString();\n    };\n\n    angular.extend(AvUserPermissionsResource.prototype, AvApiResource.prototype, {\n\n      afterQuery: function(response) {\n        return response.data.axiUserPermissions ? response.data.axiUserPermissions : [];\n      },\n\n      getPermissions: function(permissionIds, region) {\n        var self = this;\n        return this.query({\n          params: {\n            permissionId: permissionIds,\n            region: region,\n            sessionDate: self.sessionDate\n          }\n        });\n      }\n\n    });\n\n    return new AvUserPermissionsResource();\n\n  };\n\n  availity.core.factory('avUserPermissionsResource', AvUserPermissionsResourceFactory);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvUserAuthorizationsFactory = function($q, $log, avUserPermissionsResource) {\n\n    /**\n     *\n     * @constructor\n     */\n    var AvUserAuthorizations = function() {\n      /**\n       * Region is used to return permission/resources relative to region. If null service will\n       * return all permission relative to current.  If value 'ALL' used it will return value relative\n       * to all regions the user has access to.\n       * @type {string}\n       */\n      this.region = null;\n      /**\n       * PermissionIds contains the set of permissionIds to request from service. If user of service calls\n       * setPermissionIds() or call getPermissions() with complete set of permissionIds needed by application,\n       * then service should only make that one hit to retrieve permission information.\n       * @type {Array}\n       */\n      this.permissionIds = [];\n    };\n\n    var proto = AvUserAuthorizations.prototype;\n\n    proto.setRegion = function(region) {\n      this.region = region;\n      return this;\n    };\n\n    proto.setPermissionIds = function(permissionIds) {\n      if(!angular.isArray(permissionIds)) {\n        throw new Error('permissionsIds must be an array of string IDs for avUserAuthorizations#addPermissionIds');\n      }\n      this.permissionIds = permissionIds;\n      return this;\n    };\n\n    proto.isAuthorized = function(permissionId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        return permission.isAuthorized;\n      });\n    };\n\n    proto.isAnyAuthorized = function(permissionIds) {\n      return this.getPermissions(permissionIds).then(function(permissions) {\n        var permission = _.findWhere(permissions, {isAuthorized: true});\n        return permission !== undefined;\n      });\n    };\n\n    proto.getPermission = function(permissionId) {\n      if(!angular.isString(permissionId)) {\n        throw new Error('permissionsId must be a string ID for avUserAuthorizations#getPermission');\n      }\n\n      return this.getPermissions([permissionId])\n        .then(function(_permissions) {\n          return _permissions[permissionId];\n        });\n    };\n\n    proto.getPermissions = function(permissionIds) {\n      var self = this;\n\n      if(!angular.isArray(permissionIds)) {\n        throw new Error('permissionsIds must be an array of string IDs for avUserAuthorizations#getPermissions');\n      }\n      // merge permission ids to reduce calls to backend\n      self.permissionIds = _.union(self.permissionIds, permissionIds);\n\n      return avUserPermissionsResource\n        .getPermissions(self.permissionIds, self.region)\n        .then(function(_permissions) {\n          return self.toPermissionMap(permissionIds, _permissions);\n        });\n    };\n\n    proto.getOrganizations = function(permissionId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        return permission.organizations;\n      });\n    };\n\n    proto.getPayers = function(permissionId, organizationId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        var organization = _.findWhere(permission.organizations, {id: organizationId});\n\n        if(organization && organization.resources) {\n          return organization.resources;\n        }\n        return [];\n      });\n\n    };\n\n    /**\n     * Converts array permissions to map with value for each permissionId, creating empty permission\n     * if can't find permission in array\n     * @private\n     */\n    proto.toPermissionMap = function(permissionIds, permissions) {\n      var self = this;\n      var map = {};\n      permissions = _.slice(permissions);\n      _.forEach(permissionIds, function(permissionId) {\n        var key = {id: permissionId};\n        var permission = _.findWhere(permissions, key);\n        permission = permission ? self.toPermission(permission) : self.toPermission(key);\n        map[permission.id] = permission;\n      });\n      return map;\n    };\n\n    /**\n     * Convert a permission resource into a structure that is easier to work with.\n     * @private\n     */\n    proto.toPermission = function(permission) {\n      return {\n        id: permission.id,\n        description: permission.description ? permission.description : '',\n        geographies: permission.geographies ? permission.geographies : [],\n        organizations: permission.organizations ? permission.organizations : [],\n        isAuthorized: permission.organizations ? permission.organizations.length > 0 : false\n      };\n    };\n\n    return new AvUserAuthorizations();\n\n  };\n\n  availity.core.factory('avUserAuthorizations', AvUserAuthorizationsFactory);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_SESSION', {\n    SESSION_TIMEOUT: 'av:auth:session:timeout',\n    NOT_AUTHORIZED: 'av:auth:not:authorized'\n  });\n\n  availity.core.factory('avSession', function($q, avUsersResource) {\n\n    var AvSession = function() {\n      this.user = null;\n      this.permissions = null;\n    };\n\n    var proto = AvSession.prototype;\n\n    proto.getUser = function() {\n      var self = this;\n\n      if(this.user) {\n        return $q.when(this.user);\n      }\n\n      return avUsersResource.me().then(function(user) {\n        self.user = user;\n        return self.user;\n      });\n    };\n\n\n    proto.destroy = function() {\n      this.user = null;\n      this.permisions = null;\n    };\n\n    return new AvSession();\n  });\n\n})(window);\n","// Inspiration => https://github.com/HackedByChinese/ng-idle\n//\n// Rules:\n//\n//  * ping after 3 minutes from last human activity\n//  * reset session after api success except 401\n//  * idle show after 25 of inactivity\n//\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_IDLE', {\n    EVENTS: {\n      IDLE_INACTIVE: 'av:idle:inactive',\n      IDLE_ACTIVE: 'av:idle:active',\n      SESSION_TIMEOUT_ACTIVE: 'av:idle:session:active',\n      SESSION_TIMEOUT_REDIRECT: 'av:idle:session:redirect',\n      HUMAN: 'keydown.av.idle mousedown.av.idle keydown.av.idle',\n      MACHINE: '$locationChangeSuccess'\n    },\n    INTERVALS: {\n      PING: 3 * 60 * 1000, // 3 minutes\n      IDLE: 25 * 60 * 1000, // 25 minutes\n      SESSION: 30 * 60 * 1000 // 30 minutes\n    },\n    URLS: {\n      HOME: '/availity/web/public.elegant.login',\n      PING: '/api/v1/users/me'\n    }\n  });\n\n  availity.core.provider('avIdle', function(AV_IDLE) {\n\n    var enabled = false;\n    var pingUrl;\n    var redirectUrl;\n    var sessionTimeout;\n    var idleTimeout;\n    var pingTimeout;\n\n    this.enable = function(value) {\n      if(arguments.length) {\n        enabled = !!value;\n      }\n      return enabled;\n    };\n\n    this.setSessionTimeout = function(timeout) {\n      sessionTimeout = timeout || AV_IDLE.INTERVALS.SESSION;\n    };\n\n    this.setIdleTimeout = function(timeout) {\n      idleTimeout = timeout || AV_IDLE.INTERVALS.IDLE;\n    };\n\n    this.setPingTimeout = function(timeout) {\n      pingTimeout = timeout || AV_IDLE.INTERVALS.PING;\n    };\n\n    this.setPingUrl = function(url) {\n      pingUrl = url || AV_IDLE.URLS.PING;\n    };\n\n    this.$get = function(AV_IDLE, $log, $document, $rootScope, $timeout, avThrottle, $q, $injector) {\n\n      var AvIdle = function() {\n\n        // $timeout references\n        this._idleTimer = null;\n        this._sessionTimer = null;\n        this._pingTimer = null;\n        this._keepAlive = null;\n\n        // flag used to track if the if user is idle or session expired\n        this.idleActive = false;\n        this.sessionActive = false;\n\n        this.listeners = [];\n\n        this.init();\n\n      };\n\n      var proto = AvIdle.prototype;\n\n      proto.init = function() {\n\n        if(!enabled) {\n          this.stop();\n          return;\n        }\n\n        this.start();\n      };\n\n      proto.start = function() {\n\n        $log.info('avIdle start');\n\n        var self = this;\n        var listener;\n\n        !sessionTimeout && this.setSessionTimeout();\n        !idleTimeout && this.setIdleTimeout();\n        !pingTimeout && this.setPingTimeout();\n        !pingUrl && this.setPingUrl();\n        !redirectUrl && this.setRedirectUrl();\n\n        $rootScope.$on('$destroy', function() {\n          self.stop();\n        });\n\n        $document.find('body').on(AV_IDLE.EVENTS.HUMAN, function(event) {\n          self.onEvent(event);\n        });\n\n        listener = $rootScope.$on(AV_IDLE.EVENTS.MACHINE, function(event, oldUrl, newUrl) {\n          if(oldUrl !== newUrl) {\n            self.onEvent(event);\n          }\n        });\n        this.listeners.push(listener);\n\n        $rootScope.$on(AV_IDLE.EVENTS.SESSION_TIMEOUT_REDIRECT, function() {\n          document.location.href = redirectUrl;\n        });\n\n        this.startIdleTimer();\n        this.startSessionTimer();\n      };\n\n      proto.stop = function() {\n\n        $document.find('body').off(AV_IDLE.EVENTS.HUMAN);\n\n        // turns off Angular event listeners @see http://stackoverflow.com/a/14898795\n        _.each(this.listeners, function(listener) {\n          listener();\n        });\n\n        this.stopPing();\n        this.stopSessionTimer();\n        this.stopIdleTimer();\n      };\n\n      proto.isEnabled = function() {\n        return enabled;\n      };\n\n      proto.enable = function(value) {\n        if(arguments.length) {\n          enabled = !!value;\n        }\n\n        return this;\n      };\n\n      proto.setSessionTimeout = function(timeout) {\n        sessionTimeout = timeout || AV_IDLE.INTERVALS.SESSION;\n        return this;\n      };\n\n      proto.setIdleTimeout = function(timeout) {\n        idleTimeout = timeout || AV_IDLE.INTERVALS.IDLE;\n        return this;\n      };\n\n      proto.setPingTimeout = function(timeout) {\n        pingTimeout = timeout || AV_IDLE.INTERVALS.PING;\n        return this;\n      };\n\n      proto.setPingUrl = function(url) {\n        pingUrl = url || AV_IDLE.URLS.PING;\n        return this;\n      };\n\n      proto.setRedirectUrl = function(url) {\n        redirectUrl = url || AV_IDLE.URLS.HOME;\n        return this;\n      };\n\n      proto.response = function(response) {\n\n        if(this.isApiRequest(response)) {\n          this.startSessionTimer();\n        }\n\n        return response;\n      };\n\n      proto.isApiRequest = function(response) {\n        return response && response.config && response.config.api;\n      };\n\n      proto.responseError = function(response) {\n\n        if(this.isApiRequest(response) && response.status !== 401) {\n          this.startSessionTimer();\n        }\n\n        if(this.isApiRequest() && response.status === 401) {\n          this.stopPing();\n        }\n\n        return $q.reject(response);\n      };\n\n      proto.startSessionTimer = function() {\n\n        var self = this;\n\n        this.stopSessionTimer();\n\n        var later = function() {\n          $log.info('avIdle session has TIMED OUT');\n          self.stop();\n          $rootScope.$broadcast(AV_IDLE.EVENTS.SESSION_TIMEOUT_ACTIVE);\n        };\n\n        $log.info('avIdle session timer has STARTED');\n        this._sessionTimer = $timeout(later, sessionTimeout, false);\n\n      };\n\n      proto.stopSessionTimer = function() {\n        $log.info('avIdle session timer has STOPPED');\n        $timeout.cancel(this._sessionTimer);\n      };\n\n      proto.startIdleTimer = function() {\n\n        var self = this;\n\n        this.stopIdleTimer();\n\n        var later = function() {\n          self.stopIdleTimer();\n          $log.info('avIdle is IDLING');\n          $rootScope.$broadcast(AV_IDLE.EVENTS.IDLE_ACTIVE);\n        };\n\n        $log.info('avIdle idle timer has STARTED');\n        this._idleTimer = $timeout(later, idleTimeout, false);\n      };\n\n      proto.stopIdleTimer = function() {\n        $log.info('avIdle idle timer has STOPPED');\n        $timeout.cancel(this._idleTimer);\n      };\n\n      proto.startPing = function() {\n\n        if(!this._keepAlive) {\n          $log.info('avIdle ping timer has STARTED');\n          this._keepAlive = avThrottle(this.keepAlive, pingTimeout, {context: this});\n        }\n\n        this._pingTimer = this._keepAlive();\n      };\n\n      proto.stopPing = function() {\n        $log.info('avIdle ping timer has STOPPED');\n        if(this._pingTimer) {\n          $timeout.cancel(this._pingTimer);\n        }\n      };\n\n      proto.keepAlive = function() {\n\n        // destroy the reference to that a new throttle gets created upon\n        // next user or system event\n        this._keepAlive = null;\n        var $http = $injector.get('$http');\n\n        $http.get(pingUrl, {\n          cache: false,\n          api: true\n        }).success(function() {\n          $log.info('avIdle keep-alive SUCCESS');\n        }).error(function() {\n          $log.error('avIdle keep-alive FAILURE');\n        });\n      };\n\n      proto.onEvent = function() {\n        this.startIdleTimer();\n        this.startPing();\n      };\n\n      return new AvIdle();\n\n    };\n\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avIdleInterceptor', function(avIdle) {\n    return {\n      response: function(response) {\n        return avIdle.response(response);\n      },\n      responseError: function(response) {\n        return avIdle.responseError(response);\n      }\n    };\n\n  });\n\n  availity.core.config(function($httpProvider) {\n    $httpProvider.interceptors.push('avIdleInterceptor');\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.value('avValConfig', {\n    classes: {\n      valid: 'ng-valid',\n      invalid: 'ng-invalid',\n      dirty: 'ng-dirty',\n      pristine: 'ng-pristine',\n      touched: 'ng-touched',\n      untouched: 'ng-untouched',\n      submitted: 'ng-submitted'\n    },\n    validators: [\n      'avValPattern',\n      'avValSize',\n      'avValRequired',\n      'avValDateRange',\n      'avValDate'\n    ]\n  });\n\n  availity.core.constant('AV_VAL', {\n    EVENTS: {\n      REVALIDATE: 'av:val:revalidate',\n      SUBMITTED: 'av:val:submitted',\n      FAILED: 'av:val:failed',\n      RESET: 'av:val:reset'\n    },\n    DEBOUNCE: 800,\n    DATE_FORMAT: {\n      SIMPLE: 'MM/DD/YYYY'\n    },\n    PATTERNS: {\n      ALPHA_ONLY: /[^A-Za-z]+/g,\n      NUMERIC_ONLY: /[^0-9]+/g\n    }\n  });\n\n  availity.core.provider('avVal', function() {\n\n    var validators = [];\n    var rules = {};\n    var services = {};\n\n    this.addRules = function(_rules) {\n      rules = angular.extend({}, rules, _rules);\n      return rules;\n    };\n\n    this.addValidators = function(_validators) {\n      validators = validators.concat(_validators);\n      return validators;\n    };\n\n    this.$get = function($injector, $rootScope, $http, $log, avValConfig, AV_VAL) {\n\n      var AvValidation = function() {\n        this.initValidators();\n      };\n\n      var proto = AvValidation.prototype;\n\n      proto.initValidators = function() {\n        var self = this;\n\n        validators = avValConfig.validators.concat(validators);\n\n        angular.forEach(validators, function(name) {\n          self.addValidator(name);\n        });\n      };\n\n      proto.addValidator = function(name) {\n        var validator = $injector.get(name);\n        services[validator.name] = validator;\n      };\n\n      proto.addRules = function(_rules) {\n        rules = angular.extend({}, rules, _rules);\n        $rootScope.$broadcast(AV_VAL.EVENTS.REVALIDATE);\n      };\n\n      proto.validate = function(key, element, value, ruleName) {\n\n        var ruleConfig = rules[key];\n        if(!ruleConfig) {\n          $log.error('Failed to get rules key [' + key + '].  Forms must be tagged with a rules set name for validation to work.');\n          return;\n        }\n\n        var contraints = ruleConfig[ruleName];\n        if(!contraints) {\n          $log.info('Rule named [' + ruleName + '] could not be found in the current schema.');\n          contraints = [];\n        }\n\n        var el = element[0];\n        var results  = [];\n        var violations = [];\n        var _valid = true;\n\n        angular.forEach(contraints, function(rule, contraintName) {\n\n          if(!rule) {\n            // when extended rule sets, a user can pass nulls to cancel out a rule so if\n            // one doesn't exist just continue\n            return;\n          }\n\n          var validator = services[contraintName];\n\n          if(angular.isUndefined(validator)) {\n            $log.warn('No validator defined for `' + name + '`');\n            return;\n          }\n\n          var valid = validator.validate(value, rule);\n\n          var validationResult = {\n            valid: valid,\n            ruleName: ruleName,\n            contraintName: contraintName,\n            value: value,\n            message: rule.message,\n            field: el.name || el.id\n          };\n\n          var result = angular.extend({}, rule, validationResult);\n\n          results.push(result);\n          if(!valid) {\n            violations.push(validationResult);\n          }\n          _valid = _valid && valid;\n        });\n\n        return {\n          isValid: _valid,\n          all: results, // all the constraint results\n          violations: violations\n        };\n\n      };\n\n      return new AvValidation();\n\n    };\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValUtils', function() {\n\n    return {\n\n      isDefined: function(value) {\n        return angular.isDefined(value) && value !== '' && value !== null;\n      },\n\n      isEmpty: function(value) {\n        return !this.isDefined(value) || $.trim(value) === '';\n      }\n    };\n\n  });\n})(window);\n\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValSize', function(avValUtils) {\n\n    var validator =  {\n      name: 'size',\n      validate: function(value, rule) {\n        var result = false;\n        var min = rule.min || 0;\n        var max = rule.max;\n\n        if(_.isNull(value) || _.isUndefined(value)) {\n          value = '';\n        }\n\n        if(_.isString(value)) {\n          result = avValUtils.isEmpty(value) || value.length >= min && (max === undefined || value.length <= max);\n        } else if(_.isNumber(value)) {\n          result = avValUtils.isEmpty(value) || value >= min && (max === undefined || value <= max);\n        }\n\n        return result;\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValPattern', function(avValUtils) {\n\n    var validator =  {\n      name: 'pattern',\n      REGEX: /^\\/(.*)\\/([gim]*)$/, //regular expression to test a regular expression\n      asRegExp: function(pattern) {\n        var match;\n\n        if(pattern.test) {\n          return pattern;\n        } else {\n          match = pattern.match(validator.REGEX);\n          if(match) {\n            return new RegExp(match[1], match[2]);\n          } else {\n            throw ('Expected ' + pattern + ' to be a RegExp');\n          }\n        }\n      },\n      validate: function(value, rule) {\n        var values = _.isArray(rule.value) ? rule.value : [rule.value];\n\n        var valid = false;\n\n        _.each(values, function(expresion) {\n          var pattern = validator.asRegExp(expresion);\n          if(avValUtils.isEmpty(value) || pattern.test(value)) {\n            valid = true;\n          }\n        });\n\n        return valid;\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValRequired', function(avValUtils) {\n\n    var validator =  {\n      name: 'required',\n      validate: function(value) {\n        return !avValUtils.isEmpty(value);\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDateRange', function(AV_VAL, avValUtils) {\n\n    var validator = {\n\n      name: 'dateRange',\n\n      getStartDate: function(start) {\n        return validator.setMin(moment().add(start.value, start.units));\n      },\n\n      getEndDate: function(end) {\n        return validator.setMax(moment().add(end.value, end.units) );\n      },\n\n      setMin: function(value) {\n\n        // [fix]: if time is provided this may cause issues.\n        value.set('hours', 0);\n        value.set('minutes', 0);\n        value.set('seconds', 0);\n\n        return value;\n      },\n\n      setMax: function(value) {\n\n        // [fix]: if time is provided this may cause issues.\n        value.set('hours', 23);\n        value.set('minutes', 59);\n        value.set('seconds', 59);\n\n        return value;\n      },\n\n      validation: function(value, rules) {\n\n        var date;\n        var startDate;\n        var endDate;\n\n        date = moment(value, rules.format || AV_VAL.DATE_FORMAT.SIMPLE);\n        date.set('hours', 0);\n        date.set('minutes', 0);\n        date.set('seconds', 0);\n\n        if(!avValUtils.isEmpty(rules.start.units) && !avValUtils.isEmpty(rules.end.units)) {\n          startDate = validator.getStartDate(rules.start);\n          endDate = validator.getEndDate(rules.end);\n        } else {\n          startDate = moment(rules.start.value, rules.format);\n          endDate = validator.setMax(moment(rules.end.value, rules.format));\n        }\n        return date.isValid() && date.isBetween(startDate, endDate, 'day') || date.isSame(startDate, 'day') || date.isSame(endDate, 'day');\n      },\n\n      validate: function(value, rule) {\n        return avValUtils.isEmpty(value) || validator.validation(value, rule);\n      }\n\n    };\n\n    return validator;\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDate', function(AV_VAL, avValUtils) {\n\n    var validator = {\n      name: 'dateFormat',\n      validate: function(value, rules) {\n        var format = rules && rules.format ? rules.format : AV_VAL.DATE_FORMAT.SIMPLE;\n        return avValUtils.isEmpty(value) || moment(value, format, true).isValid();\n      }\n    };\n    return validator;\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_GLOBALS', {\n    REGIONS: [\n      {\n        'name': 'Alabama',\n        'code': 'AL'\n      },\n      {\n        'name': 'Alaska',\n        'code': 'AK'\n      },\n      {\n        'name': 'Arizona',\n        'code': 'AZ'\n      },\n      {\n        'name': 'Arkansas',\n        'code': 'AR'\n      },\n      {\n        'name': 'California',\n        'code': 'CA'\n      },\n      {\n        'name': 'Colorado',\n        'code': 'CO'\n      },\n      {\n        'name': 'Connecticut',\n        'code': 'CT'\n      },\n      {\n        'name': 'Delaware',\n        'code': 'DE'\n      },\n      {\n        'name': 'District Of Columbia',\n        'code': 'DC'\n      },\n      {\n        'name': 'Florida',\n        'code': 'FL'\n      },\n      {\n        'name': 'Georgia',\n        'code': 'GA'\n      },\n      {\n        'name': 'Hawaii',\n        'code': 'HI'\n      },\n      {\n        'name': 'Idaho',\n        'code': 'ID'\n      },\n      {\n        'name': 'Illinois',\n        'code': 'IL'\n      },\n      {\n        'name': 'Indiana',\n        'code': 'IN'\n      },\n      {\n        'name': 'Iowa',\n        'code': 'IA'\n      },\n      {\n        'name': 'Kansas',\n        'code': 'KS'\n      },\n      {\n        'name': 'Kentucky',\n        'code': 'KY'\n      },\n      {\n        'name': 'Louisiana',\n        'code': 'LA'\n      },\n      {\n        'name': 'Maine',\n        'code': 'ME'\n      },\n      {\n        'name': 'Maryland',\n        'code': 'MD'\n      },\n      {\n        'name': 'Massachusetts',\n        'code': 'MA'\n      },\n      {\n        'name': 'Michigan',\n        'code': 'MI'\n      },\n      {\n        'name': 'Minnesota',\n        'code': 'MN'\n      },\n      {\n        'name': 'Mississippi',\n        'code': 'MS'\n      },\n      {\n        'name': 'Missouri',\n        'code': 'MO'\n      },\n      {\n        'name': 'Montana',\n        'code': 'MT'\n      },\n      {\n        'name': 'Nebraska',\n        'code': 'NE'\n      },\n      {\n        'name': 'Nevada',\n        'code': 'NV'\n      },\n      {\n        'name': 'New Hampshire',\n        'code': 'NH'\n      },\n      {\n        'name': 'New Jersey',\n        'code': 'NJ'\n      },\n      {\n        'name': 'New Mexico',\n        'code': 'NM'\n      },\n      {\n        'name': 'New York',\n        'code': 'NY'\n      },\n      {\n        'name': 'North Carolina',\n        'code': 'NC'\n      },\n      {\n        'name': 'North Dakota',\n        'code': 'ND'\n      },\n      {\n        'name': 'Ohio',\n        'code': 'OH'\n      },\n      {\n        'name': 'Oklahoma',\n        'code': 'OK'\n      },\n      {\n        'name': 'Oregon',\n        'code': 'OR'\n      },\n      {\n        'name': 'Pennsylvania',\n        'code': 'PA'\n      },\n      {\n        'name': 'Rhode Island',\n        'code': 'RI'\n      },\n      {\n        'name': 'South Carolina',\n        'code': 'SC'\n      },\n      {\n        'name': 'South Dakota',\n        'code': 'SD'\n      },\n      {\n        'name': 'Tennessee',\n        'code': 'TN'\n      },\n      {\n        'name': 'Texas',\n        'code': 'TX'\n      },\n      {\n        'name': 'Utah',\n        'code': 'UT'\n      },\n      {\n        'name': 'Vermont',\n        'code': 'VT'\n      },\n      {\n        'name': 'Virginia',\n        'code': 'VA'\n      },\n      {\n        'name': 'Washington',\n        'code': 'WA'\n      },\n      {\n        'name': 'West Virginia',\n        'code': 'WV'\n      },\n      {\n        'name': 'Wisconsin',\n        'code': 'WI'\n      },\n      {\n        'name': 'Wyoming',\n        'code': 'WY'\n      }\n    ]\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_ANALYTICS', {\n    VIRTUAL_PAGE_TRACKING: true,\n    SERVICES: {\n      PIWIK: 'avPiwikAnalytics',\n      SPLUNK: 'avSplunkAnalytics'\n    },\n    EVENTS: {\n      PAGE: '$locationChangeSuccess',\n      DEFAULT: 'click'\n    },\n    PRE_FIX: /^avAnalytics(.*)$/,\n    // should ignore these since they are part of the directives API\n    IGNORE: ['avAnalyticsOn', 'avAnalyticsIf'],\n    ENV: { // not sure if this should live here\n      PROD: {\n        URL: 'https://piwik.availity.com/piwik/'\n      },\n      QA: {\n        URL: 'https://qa-piwik.availity.com/piwik/'\n      }\n    }\n  });\n\n  availity.core.provider('avAnalytics', function(AV_ANALYTICS) {\n\n    var plugins = [];\n    var virtualPageTracking = AV_ANALYTICS.VIRTUAL_PAGE_TRACKING;\n    var appId;\n\n    this.registerPlugins = function(_plugins) {\n\n      if(angular.isString(_plugins)) {\n        _plugins = [_plugins];\n      }\n\n      if(_.isArray(_plugins)) {\n        plugins = _plugins;\n      } else {\n        throw new Error('AvAnalytics.registerPlugins() expects a string or an array.');\n      }\n\n      return plugins;\n    };\n\n    this.setVirtualPageTracking = function(value) {\n      if(arguments.length) {\n        virtualPageTracking = !!value;\n      }\n      return virtualPageTracking;\n    };\n\n    this.setAppID = function(id) {\n      appId = id;\n      return appId;\n    };\n\n    this.$get = function($injector, $q, $log) {\n\n      var AvAnalytics = function() {\n\n        var self = this;\n        this.services = {};\n\n        if(!plugins || plugins.length === 0) {\n          plugins = [AV_ANALYTICS.SERVICES.SPLUNK];\n        }\n\n        angular.forEach(plugins, function(plugin) {\n\n          try {\n            self.services[plugin] = $injector.get(plugin);\n          } catch(err) {\n            $log.error('Could not load `{0}` plugin', [plugin]);\n          }\n        });\n\n      };\n\n      var proto = AvAnalytics.prototype;\n\n      proto.trackEvent = function(properties) {\n\n        var promises = [];\n\n        angular.forEach(this.services, function(handler) {\n          var promise = handler.trackEvent(properties);\n          promises.push(promise);\n        });\n\n        return $q.all(promises);\n      };\n\n      proto.getAppId = function() {\n        return appId;\n      };\n\n      proto.trackPageView = function(url) {\n\n        var promises = [];\n\n        angular.forEach(this.services, function(handler) {\n          var promise = handler.trackPageView(url);\n          promises.push(promise);\n        });\n\n        return $q.all(promises);\n      };\n\n      return new AvAnalytics();\n    };\n\n  });\n\n  availity.core.run(function($rootScope, AV_ANALYTICS, avAnalytics, $location ) {\n    if(avAnalytics.virtualPageTracking) {\n      $rootScope.$on(AV_ANALYTICS.EVENTS.PAGE, function() {\n        avAnalytics.trackPageView($location.absUrl());\n      });\n    }\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avAnalyticsUtils', function(AV_ANALYTICS, $log) {\n\n    var AnalyticsUtils = function() {};\n\n    var proto = AnalyticsUtils.prototype;\n\n    proto.getProperties = function(attributes) {\n\n      var self = this;\n      var props = {};\n\n      _.forEach(attributes, function(value, key) {\n        if(self.isValidAttribute(key) && self.isNotIgnored(key)) {\n          var result = self.getAttribute(key, value);\n          props[result.key] = result.value;\n        }\n      });\n\n      return props;\n    };\n\n    proto.isExternalLink = function(attrs) {\n      return attrs.href && !attrs.ngClick;\n    };\n\n    proto.isNotIgnored = function(key) {\n      var ignored = _.includes(AV_ANALYTICS.IGNORE, key);\n      return !ignored;\n    };\n\n    proto.isValidAttribute = function(key) {\n      return AV_ANALYTICS.PRE_FIX.test(key);\n    };\n\n    proto.lowercase = function(str) {\n      return str.substr(0, 1).toLowerCase() + str.substr(1);\n    };\n\n    proto.getAttribute = function(key, value) {\n      var simpleKey = key.match(AV_ANALYTICS.PRE_FIX);\n\n      if(simpleKey && simpleKey[1]) {\n        return {\n          key: this.lowercase(simpleKey[1]),\n          value: value\n        };\n      }\n    };\n\n    proto.toNum = function(value) {\n      var parsed = parseInt(value, 10);\n      value = isNaN(parsed) ? 0 : parsed;\n      return value;\n    };\n\n    proto.isValid = function(trackingValues) {\n      var valid = true;\n\n      if(trackingValues.value || trackingValues.value === 0) {\n        delete trackingValues.value;\n      }\n\n      _.forEach(trackingValues, function(key, value) {\n        if(availity.isBlank(value) || _.isUndefined(value)) {\n          $log.warn('The analytic tracking value for ' + key.toUpperCase() +' is not defined.');\n          valid = false;\n        }\n      });\n\n      return valid;\n    };\n\n    return new AnalyticsUtils();\n  });\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avSplunkAnalytics', function($log, avLogMessagesResource, $location) {\n\n    var SplunkAnalyticsService = function() {};\n\n    var proto = SplunkAnalyticsService.prototype;\n\n    proto.trackEvent = function(properties) {\n      properties.url = $location.$$absUrl || 'N/A';\n      properties.level = properties.level || 'info';\n\n      return avLogMessagesResource[properties.level](properties);\n    };\n\n    proto.trackPageView  = function(url) {\n\n      var properties = {\n        event: 'page',\n        level: 'info',\n        url: url || $location.$$absUrl()\n      };\n\n      return avLogMessagesResource[properties.level](properties);\n    };\n\n    return new SplunkAnalyticsService();\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.provider('avPiwikAnalytics', function() {\n\n    var that = this;\n    var siteId;\n\n    // can not push these items to `_paq` because it is defined\n    // after page has loaded\n    this._setCustomVariable = function(index, valueName, value, scope) {\n\n      root._paq = root._paq || [];\n\n      if(!index || isNaN(index)) {\n        throw new Error('index must be a number');\n      } else if(!valueName) {\n        throw new Error('valueName must be declared');\n      } else {\n        root._paq.push(['setCustomVariable', index, valueName, value, scope]);\n      }\n    };\n\n    this.setSiteID = function(_siteID) {\n      siteId = _siteID;\n    };\n\n    // allow the user to pass a array of visit variables\n    this.setVisitVariables = function(items) {\n      _.forEach(items, function(item) {\n        that._setCustomVariable(item[0], item[1], item[2], 'visit');\n      });\n    };\n\n    this.setPageVariables = function(index, name, value) {\n      this._setCustomVariable(index, name, value, 'page');\n    };\n\n    this.$get = function(avAnalyticsUtils, avUsersResource, AV_ANALYTICS, $injector, $log, $q, $document, $location, $window) {\n\n      var AvPiwikAnalytics = function() {\n        this.init();\n      };\n\n      var proto = AvPiwikAnalytics.prototype;\n\n      proto.trackEvent = function(properties) {\n\n        if(!root._paq) {\n          $log.warn('Piwik object `_paq` not found in global scope');\n          return $q.when(false);\n        }\n\n        // http://piwik.org/docs/event-tracking/\n        //\n        // PAQ requires that eventValue be an integer.\n        // Check to make sure value is a number if not convert it to 0.\n        //\n        if(properties.value) {\n          properties.value = avAnalyticsUtils.toNum(properties.event);\n        }\n\n        // check to make sure that data being sent to piwik is a string and not null, empty or undefined\n        if(!avAnalyticsUtils.isValid(properties)) {\n          $log.warn('Invalid properties being passed. Tracking info will not be sent.');\n          return $q.when(false);\n        }\n\n        return $q.when(root._paq.push(['trackEvent', properties.category, properties.event, properties.label, properties.value]));\n      };\n\n      proto.trackPageView  = function(url) {\n\n        if(!root._paq) {\n          $log.warn('Piwik object `_paq` not found in global scope');\n          return $q.when(false);\n        }\n\n        return $q.when(root._paq.push(['trackEvent', url]));\n\n      };\n\n      proto.createScript = function() {\n        if(_.isFinite(siteId)) {\n          $log.warn('Invalid Piwik Site Id.  Piwik analytics has been disabled.');\n          return;\n        }\n\n        var url;\n\n        if($location.$$host === 'apps.availity.com') {\n          url = AV_ANALYTICS.ENV.PROD.URL;\n        } else {\n          url = AV_ANALYTICS.ENV.QA.URL;\n        }\n\n        $window._paq = $window._paq || [];\n        $window._paq.push(['enableLinkTracking']);\n        $window._paq.push(['setTrackerUrl', url + 'piwik.php']);\n        $window._paq.push(['setSiteId', siteId]);\n        $window._paq.push(['trackEvent', url]); //track initial page load even if user data is not loaded yet\n\n        var script = document.createElement('script');\n        var target = document.getElementsByTagName('script')[0];\n        script.type = 'text/javascript';\n        script.defer = true;\n        script.async = true;\n        script.src = url + 'piwik.js';\n        target.parentNode.insertBefore(script, target);\n      };\n\n      proto.init = function() {\n        // this.createScript();\n        // avUsersResource.me().then(function(user) {\n        //   $window._paq.push(['setUserId', user.id]);\n        //   self.trackPageView(); //send another page track when the user data loads\n        // });\n\n      };\n\n      return new AvPiwikAnalytics();\n    };\n\n  });\n\n})(window);\n","/* global TraceKit */\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_EXCEPTIONS', {\n    MESSAGES: {\n      NOT_APPLICABLE: 'N/A'\n    },\n    TYPES: {\n      EXCEPTION: 'exception'\n    }\n  });\n\n  availity.core.provider('avExceptionAnalytics', function() {\n\n    var _enabled = true;\n    var appId;\n\n    this.enabled = function(enabled) {\n      _enabled = !!enabled;\n    };\n\n    this.setAppId = function(_id) {\n      appId = _id;\n    };\n\n    this.$get = function(avLogMessagesResource, $location, AV_EXCEPTIONS) {\n\n      var AvExceptionAnalytics = function() {\n\n      };\n\n      var proto = AvExceptionAnalytics.prototype;\n\n      proto.init = function() {\n\n        var self = this;\n\n        if(!_enabled) {\n          return;\n        }\n\n        TraceKit.remoteFetching = false;\n        TraceKit.surroundingLinesToCollect = 11;\n\n        // subscribe() hooks into window.error\n        TraceKit.report.subscribe(function(stacktrace) {\n          self.onError(stacktrace);\n        });\n\n      };\n\n      proto.prettyPrint = function(stacktrace) {\n\n        var message = '';\n\n        var length = stacktrace.stack.length;\n\n        for(var i = 0; i < length; i++) {\n          message += [\n            '[' + _.padLeft(i + '', 2, '0') + '] ',\n            stacktrace.stack[i].func,\n            ' ',\n            stacktrace.stack[i].url,\n            ':',\n            stacktrace.stack[i].line,\n            ':',\n            stacktrace.stack[i].column,\n            i + 1 < length ? '\\n' : ''\n          ].join('');\n\n        }\n\n        return message;\n      };\n\n      proto.onError = function(stacktrace) {\n\n        var userAgent = root.navigator && root.navigator.userAgent ? root.navigator.userAgent : AV_EXCEPTIONS.MESSAGES.NOT_APPLICABLE;\n\n        var message = {\n          errorDate: moment(new Date()).format('YYYY-MM-DDTHH:mm:ssZZ'),\n          errorName: stacktrace.name,\n          errorMessage: stacktrace.message,\n          errorStack: this.prettyPrint(stacktrace),\n          url: $location.$$absUrl,\n          appId: appId || AV_EXCEPTIONS.MESSAGES.NOT_APPLICABLE,\n          // appVersion: AV_EXCEPTIONS.MESSAGES.NOT_APPLICABLE,\n          userAgent: userAgent,\n          userLanguage: navigator.userLanguage,\n          referrer: document.referrer,\n          host: document.domain,\n          screenWidth: $(window).width(),\n          screenHeight: $(window).height(),\n          sdkVersion: availity.VERSION\n        };\n\n        return this.log(message);\n\n      };\n\n      proto.log = function(message) {\n        return avLogMessagesResource['error'](message);\n      };\n\n      proto.trackEvent = function(exception) {\n\n        if(!_enabled) {\n          return;\n        }\n\n        var stacktrace = TraceKit.computeStackTrace(exception);\n\n        return this.onError(stacktrace);\n\n      };\n\n      return new AvExceptionAnalytics();\n\n    };\n  });\n\n  availity.core.config(function($provide) {\n\n    $provide.decorator('$exceptionHandler', function($delegate, $injector) {\n      return function(exception, cause) {\n        $delegate(exception, cause);\n        var errorTacking = $injector.get('avExceptionAnalytics');\n        errorTacking.trackEvent(exception);\n      };\n    });\n\n  });\n\n  availity.core.run(function(avExceptionAnalytics) {\n    avExceptionAnalytics.init();\n  });\n\n})(window);\n","// Issue: https://github.com/angular/angular.js/issues/11165\n// Polyfill: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\n//\n// This polyfill is needed because Angular calls toISOString()\n// when an request parameter is of type Date.  If this polyfill isn't present\n// the ajax call fails.\n//\n(function() {\n\n  'use strict';\n\n  var pad = function(number) {\n    if(number < 10) {\n      return '0' + number;\n    }\n    return number;\n  };\n\n  if(!Date.prototype.toISOString) {\n\n    Date.prototype.toISOString = function() {\n\n      return this.getUTCFullYear() +\n        '-' + pad(this.getUTCMonth() + 1) +\n        '-' + pad(this.getUTCDate()) +\n        'T' + pad(this.getUTCHours()) +\n        ':' + pad(this.getUTCMinutes()) +\n        ':' + pad(this.getUTCSeconds()) +\n        '.' + (this.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) +\n        'Z';\n    };\n  }\n\n})(window);\n","/**\n * availity-angular v0.14.1 -- July-30\n * Copyright 2015 Availity, LLC \n */\n\n// Source: /lib/core/index.js\n\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity || {};\n  availity.VERSION = 'v0.14.1';\n  availity.MODULE = 'availity';\n  availity.core = angular.module(availity.MODULE, ['ng']);\n\n  var originalModule = angular.module;\n  var modules = [];\n\n  angular.module = function(name, deps) {\n\n    if(deps && _.indexOf(modules, name) !== -1 ) {\n      throw new Error('redefining module: ' + name);\n    }\n\n    modules.push(name);\n\n    return originalModule(name, deps);\n  };\n\n  root.availity = availity;\n\n  if(typeof module !== 'undefined' && module.exports) {\n    module.exports = availity;\n  }\n\n})(window);\n\n\n// Source: /lib/core/utils/strings.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/helper/makeString.js\n  availity._stringify = function(object) {\n    if(object === null) {\n      return '';\n    }\n    return '' + object;\n  };\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/isBlank.js\n  availity.isBlank = function(str) {\n    return (/^\\s*$/).test(availity._stringify(str));\n  };\n\n})(window);\n\n// Source: /lib/core/utils/uuid.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var uid = ['0', '0', '0'];\n\n  availity.uuid = function(prefix) {\n    var index = uid.length;\n    var digit;\n\n    while(index) {\n      index--;\n      digit = uid[index].charCodeAt(0);\n      if(digit === 57 /*'9'*/) {\n        uid[index] = 'A';\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n      if(digit === 90  /*'Z'*/) {\n        uid[index] = '0';\n      } else {\n        uid[index] = String.fromCharCode(digit + 1);\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n    }\n    uid.unshift('0');\n    return prefix ? prefix + uid.join('') : uid.join('');\n  };\n\n})(window);\n\n// Source: /lib/core/utils/urls.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.REGEX_API_URL = /^.*?api.availity.com(.*)$/;\n\n  availity.getRelativeUrl = function(url) {\n    var result = url.match(availity.REGEX_API_URL);\n    if(result && result[1]) {\n      return '/api' + result[1];\n    }\n\n    return url;\n  };\n\n})(window);\n\n// Source: /lib/core/utils/print.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // https://github.com/jasonday/printThis/commit/66f9cbd0e3760767342eed4ef32cf8294417b227\n  availity.print = function() {\n\n    if(document.queryCommandSupported('print')) {\n      document.execCommand('print', false, null);\n    } else {\n      window.focus();\n      window.print();\n    }\n  };\n\n})(window);\n\n// Source: /lib/core/utils/throttle.js\n// Original => https://github.com/mgcrea/angular-strap/blob/master/src/helpers/debounce.js\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_THROTTLE', {\n    OPTIONS: {\n      wait: 1000,\n      update: false,\n      trailing: true,\n      leading: false\n    }\n  });\n\n  availity.core.factory('avThrottle', function(AV_THROTTLE, $timeout) {\n\n    return function(fn, wait, options) {\n\n      options = _.merge({}, AV_THROTTLE.OPTIONS, options);\n\n      wait = wait ? wait : AV_THROTTLE.THRESHOLD;\n      var update = angular.isDefined(options.update) ? options.update : AV_THROTTLE.UPDATE;\n      var timer = null;\n\n      return function() {\n        var context = options.context || this;\n        var args = arguments;\n\n        if(!timer) {\n          if(options.leading !== false) {\n            fn.apply(context, args);\n          }\n\n          var later = function() {\n            timer = null;\n            if(options.trailing !== false) {\n              fn.apply(context, args);\n            }\n          };\n\n          timer = $timeout(later, wait, update);\n        }\n\n        return timer;\n\n      };\n    };\n  });\n\n})(window);\n\n// Source: /lib/core/logger/logger.js\n// Orginal => https://github.com/ericzon/angular-ny-logger/blob/0c594e864c93e7f33d36141200096bc6139ddde1/angular-ny-logger.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.provider('AvLogger', function() {\n\n    var _enabled = false;\n\n    this.enabled = function(enabled) {\n      _enabled = !!enabled;\n    };\n\n    this.$get = function($injector) {\n\n      var AvLogger = function(context, $delegate) {\n\n        this.context = context || '';\n        this.$log = $delegate;\n\n      };\n\n      var proto = AvLogger.prototype;\n\n      AvLogger.supplant = function(str, o) {\n\n        var _supplant = function (a, b) {\n          var r = o[b];\n          return r;\n        };\n\n        return str.replace(/\\{([^{}]*)\\}/g, _supplant);\n      };\n\n      AvLogger.isObject = function(element) {\n        var elemStr = ( !angular.isUndefined(element) && !angular.isUndefined(element.constructor) ) ? element.constructor.toString() : '';\n        return (elemStr.indexOf('Object') > -1);\n      };\n\n      AvLogger.getFormattedTimestamp = function(date) {\n\n        return AvLogger.supplant('{0}:{1}:{2}:{3}', [\n          date.getHours(),\n          date.getMinutes(),\n          date.getSeconds(),\n          date.getMilliseconds()\n        ]);\n\n      };\n\n      proto._log = function(originalFn, args) {\n\n        // Allow enabling logger through query params\n        // Ex:\n        //\n        // http://localhost:3000/ui.html#avLogger\n\n        var hash = window.location.hash;\n        hash = hash || '';\n\n        if(!_enabled && hash.indexOf('avLogger') < 0 && originalFn !== 'error') {\n          return;\n        }\n\n        var now  = AvLogger.getFormattedTimestamp(new Date());\n        var message = '';\n        var supplantData = [];\n\n        var context = this.context ? ' [' + this.context + '] ' : '';\n\n        switch(args.length) {\n          case 1:\n            // (1) If the user supplied one argument, then the argument must be\n            // the message itself and _log()\n            // will print: <timestamp> - <context>: <message>\n            supplantData = args[0];\n            message = AvLogger.supplant('{0}{1} - {2}', [now, context, args[0]]);\n            break;\n          case 3:\n            // (3) If the user supplied three arguments, then the first argument\n            // is a method name, the second is the message and the third is an\n            // object of variables to interpolate with the message. For this, _log()\n            // will print: <timestamp> - <context> - <method name>('<message>')\n            supplantData = args[2];\n            message = AvLogger.supplant(\"{0}{1} - {2}(\\'{3}\\')\", [now, context, args[0], args[1]]);\n            break;\n          case 2:\n            // (2) If the user provided two arguments, we need to find out whether\n            // they supplied a method name or an interpolation object.\n            // In order to figure that out, we’ll check the type of the last argument.\n            // If it is a string, then it has to be the message itself while the\n            // first argument is the method name. Otherwise consider the first argument\n            // as the message and the second as array of interpolation variables.\n            // The output print will be according to this check.\n            if(typeof args[1] === 'string') {\n              message = AvLogger.supplant(\"{0}{1} - {2}(\\'{3}\\')\", [now, context, args[0], args[1]]);\n            } else {\n              supplantData = args[1];\n              message = AvLogger.supplant('{0}{1} - {2}', [now, context, args[0]]);\n            }\n            break;\n        }\n\n        var $log = this.$log || $injector.get('$log');\n\n        var params = (AvLogger.isObject(supplantData)) ? [message, supplantData] : [AvLogger.supplant(message, supplantData)];\n        $log[originalFn].apply(null, params);\n\n      };\n\n      proto.log = function() {\n        this._log('log', arguments);\n      };\n\n      proto.info = function() {\n        this._log('info', arguments);\n      };\n\n      proto.warn = function() {\n        this._log('warn', arguments);\n      };\n\n      proto.debug = function() {\n        this._log('debug', arguments);\n      };\n\n      proto.error = function() {\n        this._log('error', arguments);\n      };\n\n      return AvLogger;\n\n    };\n\n  });\n\n\n})(window);\n\n// Source: /lib/core/logger/logger-config.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.config(function($provide) {\n\n    $provide.decorator('$log', function($delegate, AvLogger) {\n      return new AvLogger(null, $delegate);\n    });\n\n  });\n\n})(window);\n\n// Source: /lib/core/polling/polling.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_POLLING', {\n    INTERVAL: 1000, // delay in ms before retrying an async request\n    MAX_ELAPSED_TIME: 5000, // max time in ms before polling stops and rejects original request\n    MAX_RETRY: 30, // # of times the request will be tried\n    DECAY: 1.2, // % the polling interval decays after every retry\n    // maximum time polling is allowed before rejecting the request\n    EVENTS: {\n      MAX_RETRY: 'av:polling:max:retry'\n    },\n    REGEX_URL: /^.*?api.availity.com(.*)$/ // capture the relative url from API\n  });\n\n  var PollingServiceFactory = function($rootScope, $q, $injector, $timeout, $log, AV_POLLING, AV_API) {\n\n    var AvPollingService = function() {\n      this.pendingRequests = []; // stores all request for polling\n    };\n\n    var proto = AvPollingService.prototype;\n\n    proto.response = function(response) {\n\n      if(this.isAsyncResponse(response)) {\n        return this.onAsyncReponse(response);\n      }\n\n      return response || $q.when(response);\n    };\n\n    proto.setDefaults = function(config) {\n\n      var defaultOptions = {\n        pollingInterval: AV_POLLING.INTERVAL,\n        pollingDecay: AV_POLLING.DECAY,\n        pollingMaxInterval: AV_POLLING.MAX_ELAPSED_TIME,\n        pollingRetryCount: 0,\n        pollingStartTime: new Date().getTime()\n      };\n\n      return _.extend(defaultOptions, config);\n    };\n\n    proto.responseError = function(response) {\n      // Return the promise rejection\n      return $q.reject(response);\n    };\n\n    /**\n     * API layer return a link with a polling url for\n     * async responses.\n     *\n     * @param  {Object}  response ajax response\n     * @return {Boolean} true if response has status of 202 (accepted) and location param in header with uri+session link\n     */\n    proto.isAsyncResponse = function(response) {\n\n      return response &&\n        response.config &&\n        response.config.api &&\n        response.status &&\n        response.status === 202 &&\n        angular.isFunction(response.headers) && !availity.isBlank(response.headers(AV_API.HEADERS.SERVER.LOCATION));\n    };\n\n    proto.onAsyncReponse = function(response) {\n\n      response.config = this.setDefaults(response.config);\n\n      var deferred = $q.defer();\n\n      this.queueRequest(deferred, response);\n\n      // [rm3]: Can't call notify before you return promise object?\n      $timeout(function() {\n        // Notify deferred listeners with the original server response\n        deferred.notify(response);\n      }, 0, false);\n\n      return deferred.promise;\n    };\n\n    proto.getUrl = function(url) {\n\n      var result = url.match(AV_POLLING.REGEX_URL);\n      if(result && result[1]) {\n        return '/api' + result[1];\n      }\n\n      return url;\n    };\n\n    proto.queueRequest = function(deferred, response) {\n\n      var self = this;\n      // server replies with location header so set the url into config\n      var _url = availity.getRelativeUrl(response.headers(AV_API.HEADERS.SERVER.LOCATION));\n      var _config = response.config;\n\n\n      // headers – {Object} – Map of strings or functions which return strings representing HTTP headers\n      //  to send to the server. If the return value of a function is null, the header\n      //  will not be sent. Functions accept a config object as an argument.\n      var config = {\n        method: 'GET',\n        api: true,\n        headers: _config.headers,\n        pollingInterval: _config.pollingInterval,\n        pollingMaxRetry: _config.pollingMaxRetry,\n        pollingMaxInterval: _config.pollingMaxInterval,\n        pollingStartTime: _config.pollingStartTime,\n        _pollingDecay: _config._pollingDecay,\n        pollingRetryCount: _config.pollingRetryCount,\n        pollingDecay: _config.pollingDecay,\n        url: _url, /* set the url from the server response */\n        cache: false\n      };\n\n      var request = {\n        id: availity.uuid('request-'),\n        config: config,\n        deferred: deferred\n      };\n\n      var timeout = this.getPollingTimeout(config);\n\n      // each async request should run on its own timer\n      var timer = $timeout(function() {\n        self.retryRequest(request.id);\n      }, timeout, false);\n\n      request.timer = timer;\n\n      // add the async request to the queue\n      this.pushRequest(request);\n\n    };\n\n    proto.popRequest = function(id) {\n\n      var index = null;\n      var request = null;\n\n      for(var i = 0; i < this.pendingRequests.length; i++) {\n        if(this.pendingRequests[i].id === id) {\n          index = i;\n          break;\n        }\n      }\n\n      request = this.pendingRequests[index];\n      this.pendingRequests.splice(index, 1);\n\n      return request;\n    };\n\n    proto.pushRequest = function(request) {\n      this.pendingRequests.push(request);\n    };\n\n    proto.getPollingTimeout = function(config) {\n      return config.pollingDecay * config.pollingInterval;\n    };\n\n    proto.isPollingMaxTimeout = function(config) {\n      var now = new Date().getTime();\n      var elaspedTime = now - config.pollingStartTime;\n      var isElapsed = elaspedTime > config.pollingMaxInterval;\n      return isElapsed;\n    },\n\n      proto.isMaxRetried = function(config) {\n        return config.pollingRetryCount >= AV_POLLING.MAX_RETRY;\n      };\n\n    proto.isPollable = function(config) {\n      var _isTimeout = this.isPollingMaxTimeout(config);\n      var _isMax = this.isMaxRetried(config);\n\n      return _isTimeout || _isMax ? false : true;\n\n    };\n\n    proto.retryRequest = function(id) {\n\n      var self = this;\n      var request = this.popRequest(id);\n      $timeout.cancel(request.timer);\n\n      var config = request.config;\n\n      var deferred = request.deferred;\n\n      if(!this.isPollable(config)) {\n        $log.info('Rejecting pollable response due to timeout');\n        return deferred.reject(request);\n      }\n\n      // increment counters and polling timeouts\n      this.increment(config);\n\n      function successCallback(response) {\n        if(self.isAsyncResponse(response)) {\n          deferred.notify(response);\n          self.queueRequest(request.deferred, response);\n        } else {\n          deferred.resolve(response);\n        }\n      }\n\n      function errorCallback(response) {\n        deferred.reject(response);\n      }\n\n      // Silly circular dependency trick\n      var $http = $injector.get('$http');\n\n      $http(config).then(successCallback, errorCallback);\n\n    };\n\n    proto.increment = function(config) {\n      this.incrementCounter(config);\n      this.incrementDecay(config);\n    };\n\n    proto.incrementDecay = function(config) {\n      if(!config._pollingDecay) {\n        // store the original decay param\n        config._pollingDecay = config.pollingDecay;\n      }\n      config.pollingDecay *= config._pollingDecay;\n    };\n\n    proto.incrementCounter = function(config) {\n      config.pollingRetryCount++;\n    };\n\n    proto.clearRequests = function() {\n      angular.forEach(this.pendingRequests, function(request) {\n        $timeout.cancel(request.timer);\n      });\n      this.pendingRequests = [];\n    };\n\n    return new AvPollingService();\n\n  };\n\n  availity.core.factory('avPollingService', PollingServiceFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-factory.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_API', {\n    HEADERS: {\n      SERVER: {\n        ID: 'X-API-ID',\n        LOCATION: 'Location',\n        STATUS: 'X-Status-Message',\n        GLOBAL_ID: 'X-Global-Transaction-ID'\n      },\n      CLIENT: {\n        SESSION_ID: 'X-Session-ID',\n        AUTH: 'Authorization',\n        OVERRIDE: 'X-HTTP-Method-Override',\n        CALLBACK_URL: 'X-Callback-URL',\n        CUSTOMER_ID: 'X-Availity-Customer-ID'\n      }\n    }\n  });\n\n  var defaultOptions = {\n    // pre-prend the url with a value like `/public` so we can build urls like `public/api/v1/*`\n    prefix: '',\n    // default base url for endpoints\n    path: '/api',\n    // url to resource endpoint like `coverages` or `payers`\n    url: null,\n    // defaults to version 1\n    version: '/v1',\n    // governance level `/internal`\n    level: '',\n    // post-pend the url with `.json`, `.txt` or `.xml`\n    suffix: '',\n    // cache all request by default\n    cache: true,\n    // flag used to enable behaviors around the Availity Rest API\n    api: true,\n    // # of times the polling service has tried to get a response\n    pollingRetryCount: 0,\n    // in ms\n    pollingInterval: 1000,\n    // % the polling interval decays after every retry\n    pollingDecay: 1.2,\n    // maximum time polling is allowed before rejecting the request\n    pollingMaxInterval: 30000\n\n  };\n\n  // Factory that creates ApiResourcess\n  var ApiResourcesFactory = function($http, $q, avPollingService) {\n\n    var AvApiResource = function(options) {\n\n      if(!options) {\n        throw new Error('[options] cannot be null or undefined');\n      }\n\n      // if string the assume url is being passed in\n      if(angular.isString(options)) {\n        options = options.charAt(0) === '/' ? options : '/' + options;\n        options = angular.extend({}, {url: options});\n      }\n\n      if(!options.url) {\n        throw new Error('[url] cannot be null');\n      }\n\n      // get the default options and merge into this instance\n      this.options = angular.extend({}, defaultOptions, (options || {}));\n    };\n\n    // Alias the prototype\n    var proto = AvApiResource.prototype;\n\n    proto._config = function(config) {\n      return angular.extend({}, this.options, (config || {}));\n    },\n\n    proto._getUrl = function(id) {\n      if(this.options.api) {\n        return this._getApiUrl(id);\n      }\n\n      return this.options.url;\n    };\n\n    proto._createResponse = function(data, status, headers, config) {\n      return {\n        data: data,\n        status: status,\n        headers: headers,\n        config: config\n      };\n    };\n\n    proto._request = function(config, afterCallback) {\n\n      var self = this;\n      var defer = $q.defer();\n\n      $http(config)\n        .success(function(data, status, headers, _config) {\n\n          var _response = {\n            data: data,\n            status: status,\n            headers: headers,\n            config: _config\n          };\n\n          // handle the async response if applicable\n          var _promise = $q.when(avPollingService.response(_response));\n          // notify the promise listener of the original response\n          defer.notify(_response);\n\n          // handle the polling service promise\n          _promise.then(function(successResponse) {\n\n            // if service has a callback then call it\n            // var response = self._createResponse(data, status, headers, _config);\n            if(afterCallback) {\n              successResponse = afterCallback.call(self, successResponse);\n            }\n            defer.resolve(successResponse);\n          }, function(errorResponse) {\n            defer.reject(errorResponse);\n          }, function(notifyResponse) {\n            defer.notify(notifyResponse);\n          });\n\n        }).error(function(data, status, headers, _config) {\n          var response = self._createResponse(data, status, headers, _config);\n          defer.reject(response);\n        });\n\n      var promise = defer.promise;\n\n      // recreate the success callback ala $http\n      promise.success = function(fn) {\n        promise.then(function(response) {\n          fn(response.data, response.status, response.headers, response.config);\n        });\n        return promise;\n      };\n\n      // recreate the error callback ala $http\n      promise.error = function(fn) {\n        promise.then(null, function(response) {\n          fn(response.data, response.status, response.headers, config);\n        });\n        return promise;\n      };\n\n      promise.always = promise['finally'];\n\n      return promise;\n    };\n\n    proto._getApiUrl = function(id) {\n      id = id ? '/' + id : '';\n      return this.options.prefix + this.options.path + this.options.level + this.options.version + this.options.url + id + this.options.suffix;\n    };\n\n    proto.create = function(data, config) {\n\n      if(!data) {\n        throw new Error('called method without [data]');\n      }\n\n      if(this.beforeCreate) {\n        this.beforeCreate(this, data);\n      }\n\n      config = this._config(config);\n      config.method = 'POST';\n      config.url = this._getUrl();\n      config.data = data;\n\n      return this._request(config, this.afterCreate);\n\n    };\n\n    proto.get = function(id, config) {\n\n      if(!id) {\n        throw new Error('called method without [id]');\n      }\n\n      config = this._config(config);\n      config.method = 'GET';\n      config.url = this._getUrl(id);\n\n      return this._request(config, this.afterGet);\n\n    };\n\n    proto.query = function(config) {\n\n      config = this._config(config);\n      config.method = 'GET';\n      config.url = this._getUrl();\n\n      return this._request(config, this.afterQuery);\n\n    };\n\n    proto.update = function(id, data, config) {\n\n      var url;\n\n      if(_.isString(id) || _.isNumber(id)) {\n        url = this._getUrl(id);\n      }else {\n        url = this._getUrl();\n        // At this point the function signature becomes:\n        //\n        // proto.update = function(data, config) {} a.k.a function(id, data)\n        //\n        config = data;  // config is really the 2nd param\n        data = id; // data is really the first param\n      }\n\n      if(this.beforeUpdate) {\n        data = this.beforeUpdate(data);\n      }\n\n      config = this._config(config);\n      config.method = 'PUT';\n      config.url = url;\n      config.data = data;\n\n      return this._request(config, this.afterUpdate);\n\n    };\n\n    proto.remove = function(id, config) {\n      if(!id) {\n        throw new Error('called method without [id]');\n      }\n\n      config = this._config(config);\n      config.method = 'DELETE';\n      config.url = this._getUrl(id);\n\n      return this._request(config, this.afterRemove);\n    };\n\n    proto.beforeCreate = null;\n    proto.afterCreate = null;\n    proto.afterQuery = null;\n    proto.afterGet = null;\n    proto.beforeUpdate = null;\n    proto.afterUpdate = null;\n    proto.afterRemove = null;\n\n    return AvApiResource;\n\n  };\n\n  availity.core.factory('AvApiResource', ApiResourcesFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-users.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  var UserServiceFactory = function(AvApiResource, $q) {\n\n    var AvUsersResource = function() {\n      this.user = null;\n      AvApiResource.call(this, 'users');\n    };\n\n    angular.extend(AvUsersResource.prototype, AvApiResource.prototype, {\n\n      afterGet: function(response) {\n        var user = response.data.user ? response.data.user : response.data;\n        this.user = user;\n        return user;\n      },\n\n      me: function() {\n\n        if(this.user) {\n          return $q.when(this.user);\n        }\n\n        return this.get('me');\n      }\n\n    });\n\n    return new AvUsersResource();\n\n  };\n\n  availity.core.factory('avUsersResource', UserServiceFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-coverages.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avCoveragesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations', cache: false});\n  });\n\n})(window);\n\n// Source: /lib/core/api/api-configurations.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avConfigurationsResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations'});\n  });\n\n})(window);\n\n// Source: /lib/core/api/api-log-messages.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var LogMessagesFactory = function(AvApiResource) {\n\n    var AvLogMessagesResource = function() {\n\n      AvApiResource.call(this, {\n        version: '/v1',\n        url: '/log-messages'\n      });\n    };\n\n    angular.extend(AvLogMessagesResource.prototype, AvApiResource.prototype, {\n\n      buildRequest: function(level, entries) {\n\n        var requestPayload = {};\n\n        if(entries.level) {\n          delete entries.level;\n        }\n\n        requestPayload.level = level;\n        requestPayload.entries = entries;\n\n        return requestPayload;\n      },\n\n      debug: function(entries) {\n        return this.create(this.buildRequest('debug', entries));\n      },\n\n      info: function(entries) {\n        return this.create(this.buildRequest('info', entries));\n      },\n\n      warn: function(entries) {\n        return this.create(this.buildRequest('warn', entries));\n      },\n\n      error: function(entries) {\n        return this.create(this.buildRequest('error', entries));\n      }\n\n    });\n\n    return new AvLogMessagesResource();\n\n  };\n\n  availity.core.factory('avLogMessagesResource', LogMessagesFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-documents.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvDocumentsResourceFactory = function(AvApiResource) {\n\n    var AvDocumentsResource = function() {\n      AvApiResource.call(this, 'documents');\n    };\n\n    angular.extend(AvDocumentsResource.prototype, AvApiResource.prototype, {\n\n      getContents: function(id) {\n        var config = this._config();\n        config.url = this.getContentsUrl(id);\n        return this._request(config);\n      },\n\n      getContentsUrl: function(id) {\n        return this._getUrl(id) + '/contents';\n      }\n\n    });\n\n    return new AvDocumentsResource();\n\n  };\n\n  availity.core.factory('avDocumentsResource', AvDocumentsResourceFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-organizations.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var OrganizationResourceFactory = function(AvApiResource) {\n\n    var OrganizationResource = function() {\n      AvApiResource.call(this, 'organizations');\n    };\n\n    angular.extend(OrganizationResource.prototype, AvApiResource.prototype, {\n\n      getOrganizations: function(config) {\n        return this.query(config).then(function(response) {\n          return response.data.organizations ? response.data.organizations : response.data;\n        });\n      }\n\n    });\n\n    return new OrganizationResource();\n  };\n\n  availity.core.factory('avOrganizationsResource', OrganizationResourceFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-codes.js\n(function(root) {\n\n  'use strict';\n\n\n  var availity = root.availity;\n\n  availity.core.factory('avCodesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/codes'});\n  });\n\n  var AvCodesResourceFactory = function(AvApiResource) {\n\n    var AvCodesResource = function () {\n      AvApiResource.call(this, 'codes');\n    };\n\n    angular.extend(AvCodesResource.prototype, AvApiResource.prototype, {\n\n      getCodes: function (data) {\n\n        // config for the api resource query\n        var config = {};\n        config.params = {};\n\n        if(data.page) {\n          config.params.offset = 50 * (data.page - 1);\n        }\n        if(data.offset) {\n          config.params.offset = data.offset;\n        }\n        if(data.list) {\n          config.params.list = data.list;\n        }\n        if(data.q) {\n          config.params.q = data.q;\n        }\n\n        return this.query(config).then(function (response) {\n          // Format the response into something select2 can read\n          var results = response.data.codes;\n          if(results && !_.has(results[0], 'id')) {\n            _.each(results, function (code) {\n              code.id = code.code;\n            });\n          }\n\n          // calculate if we want to continue searching\n          var moreVal = response.data.offset < response.data.totalCount - response.data.limit;\n          return {\n            more: moreVal,\n            results: results\n          };\n\n        });\n      }\n\n    });\n\n    return new AvCodesResource();\n\n  };\n\n  availity.core.factory('avCodesResource', AvCodesResourceFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-user-permissions.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvUserPermissionsResourceFactory = function(AvApiResource) {\n\n    var AvUserPermissionsResource = function() {\n      AvApiResource.call(this, {\n        level: '/internal',\n        version: '/v1',\n        url: '/axi-user-permissions'\n      });\n      this.sessionDate = moment().toISOString();\n    };\n\n    angular.extend(AvUserPermissionsResource.prototype, AvApiResource.prototype, {\n\n      afterQuery: function(response) {\n        return response.data.axiUserPermissions ? response.data.axiUserPermissions : [];\n      },\n\n      getPermissions: function(permissionIds, region) {\n        var self = this;\n        return this.query({\n          params: {\n            permissionId: permissionIds,\n            region: region,\n            sessionDate: self.sessionDate\n          }\n        });\n      }\n\n    });\n\n    return new AvUserPermissionsResource();\n\n  };\n\n  availity.core.factory('avUserPermissionsResource', AvUserPermissionsResourceFactory);\n\n})(window);\n\n// Source: /lib/core/authorizations/user-authorizations.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvUserAuthorizationsFactory = function($q, $log, avUserPermissionsResource) {\n\n    /**\n     *\n     * @constructor\n     */\n    var AvUserAuthorizations = function() {\n      /**\n       * Region is used to return permission/resources relative to region. If null service will\n       * return all permission relative to current.  If value 'ALL' used it will return value relative\n       * to all regions the user has access to.\n       * @type {string}\n       */\n      this.region = null;\n      /**\n       * PermissionIds contains the set of permissionIds to request from service. If user of service calls\n       * setPermissionIds() or call getPermissions() with complete set of permissionIds needed by application,\n       * then service should only make that one hit to retrieve permission information.\n       * @type {Array}\n       */\n      this.permissionIds = [];\n    };\n\n    var proto = AvUserAuthorizations.prototype;\n\n    proto.setRegion = function(region) {\n      this.region = region;\n      return this;\n    };\n\n    proto.setPermissionIds = function(permissionIds) {\n      if(!angular.isArray(permissionIds)) {\n        throw new Error('permissionsIds must be an array of string IDs for avUserAuthorizations#addPermissionIds');\n      }\n      this.permissionIds = permissionIds;\n      return this;\n    };\n\n    proto.isAuthorized = function(permissionId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        return permission.isAuthorized;\n      });\n    };\n\n    proto.isAnyAuthorized = function(permissionIds) {\n      return this.getPermissions(permissionIds).then(function(permissions) {\n        var permission = _.findWhere(permissions, {isAuthorized: true});\n        return permission !== undefined;\n      });\n    };\n\n    proto.getPermission = function(permissionId) {\n      if(!angular.isString(permissionId)) {\n        throw new Error('permissionsId must be a string ID for avUserAuthorizations#getPermission');\n      }\n\n      return this.getPermissions([permissionId])\n        .then(function(_permissions) {\n          return _permissions[permissionId];\n        });\n    };\n\n    proto.getPermissions = function(permissionIds) {\n      var self = this;\n\n      if(!angular.isArray(permissionIds)) {\n        throw new Error('permissionsIds must be an array of string IDs for avUserAuthorizations#getPermissions');\n      }\n      // merge permission ids to reduce calls to backend\n      self.permissionIds = _.union(self.permissionIds, permissionIds);\n\n      return avUserPermissionsResource\n        .getPermissions(self.permissionIds, self.region)\n        .then(function(_permissions) {\n          return self.toPermissionMap(permissionIds, _permissions);\n        });\n    };\n\n    proto.getOrganizations = function(permissionId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        return permission.organizations;\n      });\n    };\n\n    proto.getPayers = function(permissionId, organizationId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        var organization = _.findWhere(permission.organizations, {id: organizationId});\n\n        if(organization && organization.resources) {\n          return organization.resources;\n        }\n        return [];\n      });\n\n    };\n\n    /**\n     * Converts array permissions to map with value for each permissionId, creating empty permission\n     * if can't find permission in array\n     * @private\n     */\n    proto.toPermissionMap = function(permissionIds, permissions) {\n      var self = this;\n      var map = {};\n      permissions = _.slice(permissions);\n      _.forEach(permissionIds, function(permissionId) {\n        var key = {id: permissionId};\n        var permission = _.findWhere(permissions, key);\n        permission = permission ? self.toPermission(permission) : self.toPermission(key);\n        map[permission.id] = permission;\n      });\n      return map;\n    };\n\n    /**\n     * Convert a permission resource into a structure that is easier to work with.\n     * @private\n     */\n    proto.toPermission = function(permission) {\n      return {\n        id: permission.id,\n        description: permission.description ? permission.description : '',\n        geographies: permission.geographies ? permission.geographies : [],\n        organizations: permission.organizations ? permission.organizations : [],\n        isAuthorized: permission.organizations ? permission.organizations.length > 0 : false\n      };\n    };\n\n    return new AvUserAuthorizations();\n\n  };\n\n  availity.core.factory('avUserAuthorizations', AvUserAuthorizationsFactory);\n\n})(window);\n\n// Source: /lib/core/session/session.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_SESSION', {\n    SESSION_TIMEOUT: 'av:auth:session:timeout',\n    NOT_AUTHORIZED: 'av:auth:not:authorized'\n  });\n\n  availity.core.factory('avSession', function($q, avUsersResource) {\n\n    var AvSession = function() {\n      this.user = null;\n      this.permissions = null;\n    };\n\n    var proto = AvSession.prototype;\n\n    proto.getUser = function() {\n      var self = this;\n\n      if(this.user) {\n        return $q.when(this.user);\n      }\n\n      return avUsersResource.me().then(function(user) {\n        self.user = user;\n        return self.user;\n      });\n    };\n\n\n    proto.destroy = function() {\n      this.user = null;\n      this.permisions = null;\n    };\n\n    return new AvSession();\n  });\n\n})(window);\n\n// Source: /lib/core/idle/idle.js\n// Inspiration => https://github.com/HackedByChinese/ng-idle\n//\n// Rules:\n//\n//  * ping after 3 minutes from last human activity\n//  * reset session after api success except 401\n//  * idle show after 25 of inactivity\n//\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_IDLE', {\n    EVENTS: {\n      IDLE_INACTIVE: 'av:idle:inactive',\n      IDLE_ACTIVE: 'av:idle:active',\n      SESSION_TIMEOUT_ACTIVE: 'av:idle:session:active',\n      SESSION_TIMEOUT_REDIRECT: 'av:idle:session:redirect',\n      HUMAN: 'keydown.av.idle mousedown.av.idle keydown.av.idle',\n      MACHINE: '$locationChangeSuccess'\n    },\n    INTERVALS: {\n      PING: 3 * 60 * 1000, // 3 minutes\n      IDLE: 25 * 60 * 1000, // 25 minutes\n      SESSION: 30 * 60 * 1000 // 30 minutes\n    },\n    URLS: {\n      HOME: '/availity/web/public.elegant.login',\n      PING: '/api/v1/users/me'\n    }\n  });\n\n  availity.core.provider('avIdle', function(AV_IDLE) {\n\n    var enabled = false;\n    var pingUrl;\n    var redirectUrl;\n    var sessionTimeout;\n    var idleTimeout;\n    var pingTimeout;\n\n    this.enable = function(value) {\n      if(arguments.length) {\n        enabled = !!value;\n      }\n      return enabled;\n    };\n\n    this.setSessionTimeout = function(timeout) {\n      sessionTimeout = timeout || AV_IDLE.INTERVALS.SESSION;\n    };\n\n    this.setIdleTimeout = function(timeout) {\n      idleTimeout = timeout || AV_IDLE.INTERVALS.IDLE;\n    };\n\n    this.setPingTimeout = function(timeout) {\n      pingTimeout = timeout || AV_IDLE.INTERVALS.PING;\n    };\n\n    this.setPingUrl = function(url) {\n      pingUrl = url || AV_IDLE.URLS.PING;\n    };\n\n    this.$get = function(AV_IDLE, $log, $document, $rootScope, $timeout, avThrottle, $q, $injector) {\n\n      var AvIdle = function() {\n\n        // $timeout references\n        this._idleTimer = null;\n        this._sessionTimer = null;\n        this._pingTimer = null;\n        this._keepAlive = null;\n\n        // flag used to track if the if user is idle or session expired\n        this.idleActive = false;\n        this.sessionActive = false;\n\n        this.listeners = [];\n\n        this.init();\n\n      };\n\n      var proto = AvIdle.prototype;\n\n      proto.init = function() {\n\n        if(!enabled) {\n          this.stop();\n          return;\n        }\n\n        this.start();\n      };\n\n      proto.start = function() {\n\n        $log.info('avIdle start');\n\n        var self = this;\n        var listener;\n\n        !sessionTimeout && this.setSessionTimeout();\n        !idleTimeout && this.setIdleTimeout();\n        !pingTimeout && this.setPingTimeout();\n        !pingUrl && this.setPingUrl();\n        !redirectUrl && this.setRedirectUrl();\n\n        $rootScope.$on('$destroy', function() {\n          self.stop();\n        });\n\n        $document.find('body').on(AV_IDLE.EVENTS.HUMAN, function(event) {\n          self.onEvent(event);\n        });\n\n        listener = $rootScope.$on(AV_IDLE.EVENTS.MACHINE, function(event, oldUrl, newUrl) {\n          if(oldUrl !== newUrl) {\n            self.onEvent(event);\n          }\n        });\n        this.listeners.push(listener);\n\n        $rootScope.$on(AV_IDLE.EVENTS.SESSION_TIMEOUT_REDIRECT, function() {\n          document.location.href = redirectUrl;\n        });\n\n        this.startIdleTimer();\n        this.startSessionTimer();\n      };\n\n      proto.stop = function() {\n\n        $document.find('body').off(AV_IDLE.EVENTS.HUMAN);\n\n        // turns off Angular event listeners @see http://stackoverflow.com/a/14898795\n        _.each(this.listeners, function(listener) {\n          listener();\n        });\n\n        this.stopPing();\n        this.stopSessionTimer();\n        this.stopIdleTimer();\n      };\n\n      proto.isEnabled = function() {\n        return enabled;\n      };\n\n      proto.enable = function(value) {\n        if(arguments.length) {\n          enabled = !!value;\n        }\n\n        return this;\n      };\n\n      proto.setSessionTimeout = function(timeout) {\n        sessionTimeout = timeout || AV_IDLE.INTERVALS.SESSION;\n        return this;\n      };\n\n      proto.setIdleTimeout = function(timeout) {\n        idleTimeout = timeout || AV_IDLE.INTERVALS.IDLE;\n        return this;\n      };\n\n      proto.setPingTimeout = function(timeout) {\n        pingTimeout = timeout || AV_IDLE.INTERVALS.PING;\n        return this;\n      };\n\n      proto.setPingUrl = function(url) {\n        pingUrl = url || AV_IDLE.URLS.PING;\n        return this;\n      };\n\n      proto.setRedirectUrl = function(url) {\n        redirectUrl = url || AV_IDLE.URLS.HOME;\n        return this;\n      };\n\n      proto.response = function(response) {\n\n        if(this.isApiRequest(response)) {\n          this.startSessionTimer();\n        }\n\n        return response;\n      };\n\n      proto.isApiRequest = function(response) {\n        return response && response.config && response.config.api;\n      };\n\n      proto.responseError = function(response) {\n\n        if(this.isApiRequest(response) && response.status !== 401) {\n          this.startSessionTimer();\n        }\n\n        if(this.isApiRequest() && response.status === 401) {\n          this.stopPing();\n        }\n\n        return $q.reject(response);\n      };\n\n      proto.startSessionTimer = function() {\n\n        var self = this;\n\n        this.stopSessionTimer();\n\n        var later = function() {\n          $log.info('avIdle session has TIMED OUT');\n          self.stop();\n          $rootScope.$broadcast(AV_IDLE.EVENTS.SESSION_TIMEOUT_ACTIVE);\n        };\n\n        $log.info('avIdle session timer has STARTED');\n        this._sessionTimer = $timeout(later, sessionTimeout, false);\n\n      };\n\n      proto.stopSessionTimer = function() {\n        $log.info('avIdle session timer has STOPPED');\n        $timeout.cancel(this._sessionTimer);\n      };\n\n      proto.startIdleTimer = function() {\n\n        var self = this;\n\n        this.stopIdleTimer();\n\n        var later = function() {\n          self.stopIdleTimer();\n          $log.info('avIdle is IDLING');\n          $rootScope.$broadcast(AV_IDLE.EVENTS.IDLE_ACTIVE);\n        };\n\n        $log.info('avIdle idle timer has STARTED');\n        this._idleTimer = $timeout(later, idleTimeout, false);\n      };\n\n      proto.stopIdleTimer = function() {\n        $log.info('avIdle idle timer has STOPPED');\n        $timeout.cancel(this._idleTimer);\n      };\n\n      proto.startPing = function() {\n\n        if(!this._keepAlive) {\n          $log.info('avIdle ping timer has STARTED');\n          this._keepAlive = avThrottle(this.keepAlive, pingTimeout, {context: this});\n        }\n\n        this._pingTimer = this._keepAlive();\n      };\n\n      proto.stopPing = function() {\n        $log.info('avIdle ping timer has STOPPED');\n        if(this._pingTimer) {\n          $timeout.cancel(this._pingTimer);\n        }\n      };\n\n      proto.keepAlive = function() {\n\n        // destroy the reference to that a new throttle gets created upon\n        // next user or system event\n        this._keepAlive = null;\n        var $http = $injector.get('$http');\n\n        $http.get(pingUrl, {\n          cache: false,\n          api: true\n        }).success(function() {\n          $log.info('avIdle keep-alive SUCCESS');\n        }).error(function() {\n          $log.error('avIdle keep-alive FAILURE');\n        });\n      };\n\n      proto.onEvent = function() {\n        this.startIdleTimer();\n        this.startPing();\n      };\n\n      return new AvIdle();\n\n    };\n\n  });\n\n})(window);\n\n// Source: /lib/core/idle/idle-interceptor.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avIdleInterceptor', function(avIdle) {\n    return {\n      response: function(response) {\n        return avIdle.response(response);\n      },\n      responseError: function(response) {\n        return avIdle.responseError(response);\n      }\n    };\n\n  });\n\n  availity.core.config(function($httpProvider) {\n    $httpProvider.interceptors.push('avIdleInterceptor');\n  });\n\n})(window);\n\n// Source: /lib/core/validation/validator.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.value('avValConfig', {\n    classes: {\n      valid: 'ng-valid',\n      invalid: 'ng-invalid',\n      dirty: 'ng-dirty',\n      pristine: 'ng-pristine',\n      touched: 'ng-touched',\n      untouched: 'ng-untouched',\n      submitted: 'ng-submitted'\n    },\n    validators: [\n      'avValPattern',\n      'avValSize',\n      'avValRequired',\n      'avValDateRange',\n      'avValDate'\n    ]\n  });\n\n  availity.core.constant('AV_VAL', {\n    EVENTS: {\n      REVALIDATE: 'av:val:revalidate',\n      SUBMITTED: 'av:val:submitted',\n      FAILED: 'av:val:failed',\n      RESET: 'av:val:reset'\n    },\n    DEBOUNCE: 800,\n    DATE_FORMAT: {\n      SIMPLE: 'MM/DD/YYYY'\n    },\n    PATTERNS: {\n      ALPHA_ONLY: /[^A-Za-z]+/g,\n      NUMERIC_ONLY: /[^0-9]+/g\n    }\n  });\n\n  availity.core.provider('avVal', function() {\n\n    var validators = [];\n    var rules = {};\n    var services = {};\n\n    this.addRules = function(_rules) {\n      rules = angular.extend({}, rules, _rules);\n      return rules;\n    };\n\n    this.addValidators = function(_validators) {\n      validators = validators.concat(_validators);\n      return validators;\n    };\n\n    this.$get = function($injector, $rootScope, $http, $log, avValConfig, AV_VAL) {\n\n      var AvValidation = function() {\n        this.initValidators();\n      };\n\n      var proto = AvValidation.prototype;\n\n      proto.initValidators = function() {\n        var self = this;\n\n        validators = avValConfig.validators.concat(validators);\n\n        angular.forEach(validators, function(name) {\n          self.addValidator(name);\n        });\n      };\n\n      proto.addValidator = function(name) {\n        var validator = $injector.get(name);\n        services[validator.name] = validator;\n      };\n\n      proto.addRules = function(_rules) {\n        rules = angular.extend({}, rules, _rules);\n        $rootScope.$broadcast(AV_VAL.EVENTS.REVALIDATE);\n      };\n\n      proto.validate = function(key, element, value, ruleName) {\n\n        var ruleConfig = rules[key];\n        if(!ruleConfig) {\n          $log.error('Failed to get rules key [' + key + '].  Forms must be tagged with a rules set name for validation to work.');\n          return;\n        }\n\n        var contraints = ruleConfig[ruleName];\n        if(!contraints) {\n          $log.info('Rule named [' + ruleName + '] could not be found in the current schema.');\n          contraints = [];\n        }\n\n        var el = element[0];\n        var results  = [];\n        var violations = [];\n        var _valid = true;\n\n        angular.forEach(contraints, function(rule, contraintName) {\n\n          if(!rule) {\n            // when extended rule sets, a user can pass nulls to cancel out a rule so if\n            // one doesn't exist just continue\n            return;\n          }\n\n          var validator = services[contraintName];\n\n          if(angular.isUndefined(validator)) {\n            $log.warn('No validator defined for `' + name + '`');\n            return;\n          }\n\n          var valid = validator.validate(value, rule);\n\n          var validationResult = {\n            valid: valid,\n            ruleName: ruleName,\n            contraintName: contraintName,\n            value: value,\n            message: rule.message,\n            field: el.name || el.id\n          };\n\n          var result = angular.extend({}, rule, validationResult);\n\n          results.push(result);\n          if(!valid) {\n            violations.push(validationResult);\n          }\n          _valid = _valid && valid;\n        });\n\n        return {\n          isValid: _valid,\n          all: results, // all the constraint results\n          violations: violations\n        };\n\n      };\n\n      return new AvValidation();\n\n    };\n\n  });\n})(window);\n\n// Source: /lib/core/validation/validators/validator-utils.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValUtils', function() {\n\n    return {\n\n      isDefined: function(value) {\n        return angular.isDefined(value) && value !== '' && value !== null;\n      },\n\n      isEmpty: function(value) {\n        return !this.isDefined(value) || $.trim(value) === '';\n      }\n    };\n\n  });\n})(window);\n\n\n// Source: /lib/core/validation/validators/validator-size.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValSize', function(avValUtils) {\n\n    var validator =  {\n      name: 'size',\n      validate: function(value, rule) {\n        var result = false;\n        var min = rule.min || 0;\n        var max = rule.max;\n\n        if(_.isNull(value) || _.isUndefined(value)) {\n          value = '';\n        }\n\n        if(_.isString(value)) {\n          result = avValUtils.isEmpty(value) || value.length >= min && (max === undefined || value.length <= max);\n        } else if(_.isNumber(value)) {\n          result = avValUtils.isEmpty(value) || value >= min && (max === undefined || value <= max);\n        }\n\n        return result;\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n\n// Source: /lib/core/validation/validators/validator-pattern.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValPattern', function(avValUtils) {\n\n    var validator =  {\n      name: 'pattern',\n      REGEX: /^\\/(.*)\\/([gim]*)$/, //regular expression to test a regular expression\n      asRegExp: function(pattern) {\n        var match;\n\n        if(pattern.test) {\n          return pattern;\n        } else {\n          match = pattern.match(validator.REGEX);\n          if(match) {\n            return new RegExp(match[1], match[2]);\n          } else {\n            throw ('Expected ' + pattern + ' to be a RegExp');\n          }\n        }\n      },\n      validate: function(value, rule) {\n        var values = _.isArray(rule.value) ? rule.value : [rule.value];\n\n        var valid = false;\n\n        _.each(values, function(expresion) {\n          var pattern = validator.asRegExp(expresion);\n          if(avValUtils.isEmpty(value) || pattern.test(value)) {\n            valid = true;\n          }\n        });\n\n        return valid;\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n\n// Source: /lib/core/validation/validators/validator-required.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValRequired', function(avValUtils) {\n\n    var validator =  {\n      name: 'required',\n      validate: function(value) {\n        return !avValUtils.isEmpty(value);\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n\n// Source: /lib/core/validation/validators/validator-date-range.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDateRange', function(AV_VAL, avValUtils) {\n\n    var validator = {\n\n      name: 'dateRange',\n\n      getStartDate: function(start) {\n        return validator.setMin(moment().add(start.value, start.units));\n      },\n\n      getEndDate: function(end) {\n        return validator.setMax(moment().add(end.value, end.units) );\n      },\n\n      setMin: function(value) {\n\n        // [fix]: if time is provided this may cause issues.\n        value.set('hours', 0);\n        value.set('minutes', 0);\n        value.set('seconds', 0);\n\n        return value;\n      },\n\n      setMax: function(value) {\n\n        // [fix]: if time is provided this may cause issues.\n        value.set('hours', 23);\n        value.set('minutes', 59);\n        value.set('seconds', 59);\n\n        return value;\n      },\n\n      validation: function(value, rules) {\n\n        var date;\n        var startDate;\n        var endDate;\n\n        date = moment(value, rules.format || AV_VAL.DATE_FORMAT.SIMPLE);\n        date.set('hours', 0);\n        date.set('minutes', 0);\n        date.set('seconds', 0);\n\n        if(!avValUtils.isEmpty(rules.start.units) && !avValUtils.isEmpty(rules.end.units)) {\n          startDate = validator.getStartDate(rules.start);\n          endDate = validator.getEndDate(rules.end);\n        } else {\n          startDate = moment(rules.start.value, rules.format);\n          endDate = validator.setMax(moment(rules.end.value, rules.format));\n        }\n        return date.isValid() && date.isBetween(startDate, endDate, 'day') || date.isSame(startDate, 'day') || date.isSame(endDate, 'day');\n      },\n\n      validate: function(value, rule) {\n        return avValUtils.isEmpty(value) || validator.validation(value, rule);\n      }\n\n    };\n\n    return validator;\n  });\n})(window);\n\n// Source: /lib/core/validation/validators/validator-date-format.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDate', function(AV_VAL, avValUtils) {\n\n    var validator = {\n      name: 'dateFormat',\n      validate: function(value, rules) {\n        var format = rules && rules.format ? rules.format : AV_VAL.DATE_FORMAT.SIMPLE;\n        return avValUtils.isEmpty(value) || moment(value, format, true).isValid();\n      }\n    };\n    return validator;\n  });\n})(window);\n\n// Source: /lib/core/utils/globals.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_GLOBALS', {\n    REGIONS: [\n      {\n        'name': 'Alabama',\n        'code': 'AL'\n      },\n      {\n        'name': 'Alaska',\n        'code': 'AK'\n      },\n      {\n        'name': 'Arizona',\n        'code': 'AZ'\n      },\n      {\n        'name': 'Arkansas',\n        'code': 'AR'\n      },\n      {\n        'name': 'California',\n        'code': 'CA'\n      },\n      {\n        'name': 'Colorado',\n        'code': 'CO'\n      },\n      {\n        'name': 'Connecticut',\n        'code': 'CT'\n      },\n      {\n        'name': 'Delaware',\n        'code': 'DE'\n      },\n      {\n        'name': 'District Of Columbia',\n        'code': 'DC'\n      },\n      {\n        'name': 'Florida',\n        'code': 'FL'\n      },\n      {\n        'name': 'Georgia',\n        'code': 'GA'\n      },\n      {\n        'name': 'Hawaii',\n        'code': 'HI'\n      },\n      {\n        'name': 'Idaho',\n        'code': 'ID'\n      },\n      {\n        'name': 'Illinois',\n        'code': 'IL'\n      },\n      {\n        'name': 'Indiana',\n        'code': 'IN'\n      },\n      {\n        'name': 'Iowa',\n        'code': 'IA'\n      },\n      {\n        'name': 'Kansas',\n        'code': 'KS'\n      },\n      {\n        'name': 'Kentucky',\n        'code': 'KY'\n      },\n      {\n        'name': 'Louisiana',\n        'code': 'LA'\n      },\n      {\n        'name': 'Maine',\n        'code': 'ME'\n      },\n      {\n        'name': 'Maryland',\n        'code': 'MD'\n      },\n      {\n        'name': 'Massachusetts',\n        'code': 'MA'\n      },\n      {\n        'name': 'Michigan',\n        'code': 'MI'\n      },\n      {\n        'name': 'Minnesota',\n        'code': 'MN'\n      },\n      {\n        'name': 'Mississippi',\n        'code': 'MS'\n      },\n      {\n        'name': 'Missouri',\n        'code': 'MO'\n      },\n      {\n        'name': 'Montana',\n        'code': 'MT'\n      },\n      {\n        'name': 'Nebraska',\n        'code': 'NE'\n      },\n      {\n        'name': 'Nevada',\n        'code': 'NV'\n      },\n      {\n        'name': 'New Hampshire',\n        'code': 'NH'\n      },\n      {\n        'name': 'New Jersey',\n        'code': 'NJ'\n      },\n      {\n        'name': 'New Mexico',\n        'code': 'NM'\n      },\n      {\n        'name': 'New York',\n        'code': 'NY'\n      },\n      {\n        'name': 'North Carolina',\n        'code': 'NC'\n      },\n      {\n        'name': 'North Dakota',\n        'code': 'ND'\n      },\n      {\n        'name': 'Ohio',\n        'code': 'OH'\n      },\n      {\n        'name': 'Oklahoma',\n        'code': 'OK'\n      },\n      {\n        'name': 'Oregon',\n        'code': 'OR'\n      },\n      {\n        'name': 'Pennsylvania',\n        'code': 'PA'\n      },\n      {\n        'name': 'Rhode Island',\n        'code': 'RI'\n      },\n      {\n        'name': 'South Carolina',\n        'code': 'SC'\n      },\n      {\n        'name': 'South Dakota',\n        'code': 'SD'\n      },\n      {\n        'name': 'Tennessee',\n        'code': 'TN'\n      },\n      {\n        'name': 'Texas',\n        'code': 'TX'\n      },\n      {\n        'name': 'Utah',\n        'code': 'UT'\n      },\n      {\n        'name': 'Vermont',\n        'code': 'VT'\n      },\n      {\n        'name': 'Virginia',\n        'code': 'VA'\n      },\n      {\n        'name': 'Washington',\n        'code': 'WA'\n      },\n      {\n        'name': 'West Virginia',\n        'code': 'WV'\n      },\n      {\n        'name': 'Wisconsin',\n        'code': 'WI'\n      },\n      {\n        'name': 'Wyoming',\n        'code': 'WY'\n      }\n    ]\n  });\n\n})(window);\n\n// Source: /lib/core/analytics/analytics.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_ANALYTICS', {\n    VIRTUAL_PAGE_TRACKING: true,\n    SERVICES: {\n      PIWIK: 'avPiwikAnalytics',\n      SPLUNK: 'avSplunkAnalytics'\n    },\n    EVENTS: {\n      PAGE: '$locationChangeSuccess',\n      DEFAULT: 'click'\n    },\n    PRE_FIX: /^avAnalytics(.*)$/,\n    // should ignore these since they are part of the directives API\n    IGNORE: ['avAnalyticsOn', 'avAnalyticsIf'],\n    ENV: { // not sure if this should live here\n      PROD: {\n        URL: 'https://piwik.availity.com/piwik/'\n      },\n      QA: {\n        URL: 'https://qa-piwik.availity.com/piwik/'\n      }\n    }\n  });\n\n  availity.core.provider('avAnalytics', function(AV_ANALYTICS) {\n\n    var plugins = [];\n    var virtualPageTracking = AV_ANALYTICS.VIRTUAL_PAGE_TRACKING;\n    var appId;\n\n    this.registerPlugins = function(_plugins) {\n\n      if(angular.isString(_plugins)) {\n        _plugins = [_plugins];\n      }\n\n      if(_.isArray(_plugins)) {\n        plugins = _plugins;\n      } else {\n        throw new Error('AvAnalytics.registerPlugins() expects a string or an array.');\n      }\n\n      return plugins;\n    };\n\n    this.setVirtualPageTracking = function(value) {\n      if(arguments.length) {\n        virtualPageTracking = !!value;\n      }\n      return virtualPageTracking;\n    };\n\n    this.setAppID = function(id) {\n      appId = id;\n      return appId;\n    };\n\n    this.$get = function($injector, $q, $log) {\n\n      var AvAnalytics = function() {\n\n        var self = this;\n        this.services = {};\n\n        if(!plugins || plugins.length === 0) {\n          plugins = [AV_ANALYTICS.SERVICES.SPLUNK];\n        }\n\n        angular.forEach(plugins, function(plugin) {\n\n          try {\n            self.services[plugin] = $injector.get(plugin);\n          } catch(err) {\n            $log.error('Could not load `{0}` plugin', [plugin]);\n          }\n        });\n\n      };\n\n      var proto = AvAnalytics.prototype;\n\n      proto.trackEvent = function(properties) {\n\n        var promises = [];\n\n        angular.forEach(this.services, function(handler) {\n          var promise = handler.trackEvent(properties);\n          promises.push(promise);\n        });\n\n        return $q.all(promises);\n      };\n\n      proto.getAppId = function() {\n        return appId;\n      };\n\n      proto.trackPageView = function(url) {\n\n        var promises = [];\n\n        angular.forEach(this.services, function(handler) {\n          var promise = handler.trackPageView(url);\n          promises.push(promise);\n        });\n\n        return $q.all(promises);\n      };\n\n      return new AvAnalytics();\n    };\n\n  });\n\n  availity.core.run(function($rootScope, AV_ANALYTICS, avAnalytics, $location ) {\n    if(avAnalytics.virtualPageTracking) {\n      $rootScope.$on(AV_ANALYTICS.EVENTS.PAGE, function() {\n        avAnalytics.trackPageView($location.absUrl());\n      });\n    }\n  });\n\n})(window);\n\n// Source: /lib/core/analytics/analytics-util.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avAnalyticsUtils', function(AV_ANALYTICS, $log) {\n\n    var AnalyticsUtils = function() {};\n\n    var proto = AnalyticsUtils.prototype;\n\n    proto.getProperties = function(attributes) {\n\n      var self = this;\n      var props = {};\n\n      _.forEach(attributes, function(value, key) {\n        if(self.isValidAttribute(key) && self.isNotIgnored(key)) {\n          var result = self.getAttribute(key, value);\n          props[result.key] = result.value;\n        }\n      });\n\n      return props;\n    };\n\n    proto.isExternalLink = function(attrs) {\n      return attrs.href && !attrs.ngClick;\n    };\n\n    proto.isNotIgnored = function(key) {\n      var ignored = _.includes(AV_ANALYTICS.IGNORE, key);\n      return !ignored;\n    };\n\n    proto.isValidAttribute = function(key) {\n      return AV_ANALYTICS.PRE_FIX.test(key);\n    };\n\n    proto.lowercase = function(str) {\n      return str.substr(0, 1).toLowerCase() + str.substr(1);\n    };\n\n    proto.getAttribute = function(key, value) {\n      var simpleKey = key.match(AV_ANALYTICS.PRE_FIX);\n\n      if(simpleKey && simpleKey[1]) {\n        return {\n          key: this.lowercase(simpleKey[1]),\n          value: value\n        };\n      }\n    };\n\n    proto.toNum = function(value) {\n      var parsed = parseInt(value, 10);\n      value = isNaN(parsed) ? 0 : parsed;\n      return value;\n    };\n\n    proto.isValid = function(trackingValues) {\n      var valid = true;\n\n      if(trackingValues.value || trackingValues.value === 0) {\n        delete trackingValues.value;\n      }\n\n      _.forEach(trackingValues, function(key, value) {\n        if(availity.isBlank(value) || _.isUndefined(value)) {\n          $log.warn('The analytic tracking value for ' + key.toUpperCase() +' is not defined.');\n          valid = false;\n        }\n      });\n\n      return valid;\n    };\n\n    return new AnalyticsUtils();\n  });\n})(window);\n\n// Source: /lib/core/analytics/analytics-splunk.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avSplunkAnalytics', function($log, avLogMessagesResource, $location) {\n\n    var SplunkAnalyticsService = function() {};\n\n    var proto = SplunkAnalyticsService.prototype;\n\n    proto.trackEvent = function(properties) {\n      properties.url = $location.$$absUrl || 'N/A';\n      properties.level = properties.level || 'info';\n\n      return avLogMessagesResource[properties.level](properties);\n    };\n\n    proto.trackPageView  = function(url) {\n\n      var properties = {\n        event: 'page',\n        level: 'info',\n        url: url || $location.$$absUrl()\n      };\n\n      return avLogMessagesResource[properties.level](properties);\n    };\n\n    return new SplunkAnalyticsService();\n  });\n\n})(window);\n\n// Source: /lib/core/analytics/analytics-piwik.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.provider('avPiwikAnalytics', function() {\n\n    var that = this;\n    var siteId;\n\n    // can not push these items to `_paq` because it is defined\n    // after page has loaded\n    this._setCustomVariable = function(index, valueName, value, scope) {\n\n      root._paq = root._paq || [];\n\n      if(!index || isNaN(index)) {\n        throw new Error('index must be a number');\n      } else if(!valueName) {\n        throw new Error('valueName must be declared');\n      } else {\n        root._paq.push(['setCustomVariable', index, valueName, value, scope]);\n      }\n    };\n\n    this.setSiteID = function(_siteID) {\n      siteId = _siteID;\n    };\n\n    // allow the user to pass a array of visit variables\n    this.setVisitVariables = function(items) {\n      _.forEach(items, function(item) {\n        that._setCustomVariable(item[0], item[1], item[2], 'visit');\n      });\n    };\n\n    this.setPageVariables = function(index, name, value) {\n      this._setCustomVariable(index, name, value, 'page');\n    };\n\n    this.$get = function(avAnalyticsUtils, avUsersResource, AV_ANALYTICS, $injector, $log, $q, $document, $location, $window) {\n\n      var AvPiwikAnalytics = function() {\n        this.init();\n      };\n\n      var proto = AvPiwikAnalytics.prototype;\n\n      proto.trackEvent = function(properties) {\n\n        if(!root._paq) {\n          $log.warn('Piwik object `_paq` not found in global scope');\n          return $q.when(false);\n        }\n\n        // http://piwik.org/docs/event-tracking/\n        //\n        // PAQ requires that eventValue be an integer.\n        // Check to make sure value is a number if not convert it to 0.\n        //\n        if(properties.value) {\n          properties.value = avAnalyticsUtils.toNum(properties.event);\n        }\n\n        // check to make sure that data being sent to piwik is a string and not null, empty or undefined\n        if(!avAnalyticsUtils.isValid(properties)) {\n          $log.warn('Invalid properties being passed. Tracking info will not be sent.');\n          return $q.when(false);\n        }\n\n        return $q.when(root._paq.push(['trackEvent', properties.category, properties.event, properties.label, properties.value]));\n      };\n\n      proto.trackPageView  = function(url) {\n\n        if(!root._paq) {\n          $log.warn('Piwik object `_paq` not found in global scope');\n          return $q.when(false);\n        }\n\n        return $q.when(root._paq.push(['trackEvent', url]));\n\n      };\n\n      proto.createScript = function() {\n        if(_.isFinite(siteId)) {\n          $log.warn('Invalid Piwik Site Id.  Piwik analytics has been disabled.');\n          return;\n        }\n\n        var url;\n\n        if($location.$$host === 'apps.availity.com') {\n          url = AV_ANALYTICS.ENV.PROD.URL;\n        } else {\n          url = AV_ANALYTICS.ENV.QA.URL;\n        }\n\n        $window._paq = $window._paq || [];\n        $window._paq.push(['enableLinkTracking']);\n        $window._paq.push(['setTrackerUrl', url + 'piwik.php']);\n        $window._paq.push(['setSiteId', siteId]);\n        $window._paq.push(['trackEvent', url]); //track initial page load even if user data is not loaded yet\n\n        var script = document.createElement('script');\n        var target = document.getElementsByTagName('script')[0];\n        script.type = 'text/javascript';\n        script.defer = true;\n        script.async = true;\n        script.src = url + 'piwik.js';\n        target.parentNode.insertBefore(script, target);\n      };\n\n      proto.init = function() {\n        // this.createScript();\n        // avUsersResource.me().then(function(user) {\n        //   $window._paq.push(['setUserId', user.id]);\n        //   self.trackPageView(); //send another page track when the user data loads\n        // });\n\n      };\n\n      return new AvPiwikAnalytics();\n    };\n\n  });\n\n})(window);\n\n// Source: /lib/core/analytics/analytics-exceptions.js\n\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_EXCEPTIONS', {\n    MESSAGES: {\n      NOT_APPLICABLE: 'N/A'\n    },\n    TYPES: {\n      EXCEPTION: 'exception'\n    }\n  });\n\n  availity.core.provider('avExceptionAnalytics', function() {\n\n    var _enabled = true;\n    var appId;\n\n    this.enabled = function(enabled) {\n      _enabled = !!enabled;\n    };\n\n    this.setAppId = function(_id) {\n      appId = _id;\n    };\n\n    this.$get = function(avLogMessagesResource, $location, AV_EXCEPTIONS) {\n\n      var AvExceptionAnalytics = function() {\n\n      };\n\n      var proto = AvExceptionAnalytics.prototype;\n\n      proto.init = function() {\n\n        var self = this;\n\n        if(!_enabled) {\n          return;\n        }\n\n        TraceKit.remoteFetching = false;\n        TraceKit.surroundingLinesToCollect = 11;\n\n        // subscribe() hooks into window.error\n        TraceKit.report.subscribe(function(stacktrace) {\n          self.onError(stacktrace);\n        });\n\n      };\n\n      proto.prettyPrint = function(stacktrace) {\n\n        var message = '';\n\n        var length = stacktrace.stack.length;\n\n        for(var i = 0; i < length; i++) {\n          message += [\n            '[' + _.padLeft(i + '', 2, '0') + '] ',\n            stacktrace.stack[i].func,\n            ' ',\n            stacktrace.stack[i].url,\n            ':',\n            stacktrace.stack[i].line,\n            ':',\n            stacktrace.stack[i].column,\n            i + 1 < length ? '\\n' : ''\n          ].join('');\n\n        }\n\n        return message;\n      };\n\n      proto.onError = function(stacktrace) {\n\n        var userAgent = root.navigator && root.navigator.userAgent ? root.navigator.userAgent : AV_EXCEPTIONS.MESSAGES.NOT_APPLICABLE;\n\n        var message = {\n          errorDate: moment(new Date()).format('YYYY-MM-DDTHH:mm:ssZZ'),\n          errorName: stacktrace.name,\n          errorMessage: stacktrace.message,\n          errorStack: this.prettyPrint(stacktrace),\n          url: $location.$$absUrl,\n          appId: appId || AV_EXCEPTIONS.MESSAGES.NOT_APPLICABLE,\n          // appVersion: AV_EXCEPTIONS.MESSAGES.NOT_APPLICABLE,\n          userAgent: userAgent,\n          userLanguage: navigator.userLanguage,\n          referrer: document.referrer,\n          host: document.domain,\n          screenWidth: $(window).width(),\n          screenHeight: $(window).height(),\n          sdkVersion: availity.VERSION\n        };\n\n        return this.log(message);\n\n      };\n\n      proto.log = function(message) {\n        return avLogMessagesResource['error'](message);\n      };\n\n      proto.trackEvent = function(exception) {\n\n        if(!_enabled) {\n          return;\n        }\n\n        var stacktrace = TraceKit.computeStackTrace(exception);\n\n        return this.onError(stacktrace);\n\n      };\n\n      return new AvExceptionAnalytics();\n\n    };\n  });\n\n  availity.core.config(function($provide) {\n\n    $provide.decorator('$exceptionHandler', function($delegate, $injector) {\n      return function(exception, cause) {\n        $delegate(exception, cause);\n        var errorTacking = $injector.get('avExceptionAnalytics');\n        errorTacking.trackEvent(exception);\n      };\n    });\n\n  });\n\n  availity.core.run(function(avExceptionAnalytics) {\n    avExceptionAnalytics.init();\n  });\n\n})(window);\n\n// Source: /lib/core/utils/date-polyfill.js\n// Issue: https://github.com/angular/angular.js/issues/11165\n// Polyfill: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\n//\n// This polyfill is needed because Angular calls toISOString()\n// when an request parameter is of type Date.  If this polyfill isn't present\n// the ajax call fails.\n//\n(function() {\n\n  'use strict';\n\n  var pad = function(number) {\n    if(number < 10) {\n      return '0' + number;\n    }\n    return number;\n  };\n\n  if(!Date.prototype.toISOString) {\n\n    Date.prototype.toISOString = function() {\n\n      return this.getUTCFullYear() +\n        '-' + pad(this.getUTCMonth() + 1) +\n        '-' + pad(this.getUTCDate()) +\n        'T' + pad(this.getUTCHours()) +\n        ':' + pad(this.getUTCMinutes()) +\n        ':' + pad(this.getUTCSeconds()) +\n        '.' + (this.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) +\n        'Z';\n    };\n  }\n\n})(window);\n\n//# sourceMappingURL=maps/availity-angular.js.map"],"sourceRoot":"/source/"}