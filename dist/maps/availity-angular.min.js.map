{"version":3,"sources":["/source/index.js","/source/strings.js","/source/uuid.js","/source/urls.js","/source/throttle.js","/source/logger.js","/source/logger-config.js","/source/polling.js","/source/api-factory.js","/source/api-users.js","/source/api-permissions.js","/source/api-coverages.js","/source/api-configurations.js","/source/api-log-messages.js","/source/api-documents.js","/source/api-organizations.js","/source/api-codes.js","/source/session.js","/source/idle.js","/source/idle-interceptor.js","/source/validator.js","/source/validator-utils.js","/source/validator-size.js","/source/validator-pattern.js","/source/validator-required.js","/source/validator-date-range.js","/source/validator-date-format.js","/source/globals.js","availity-angular.js"],"names":["root","availity","VERSION","MODULE","core","angular","module","originalModule","modules","name","deps","_","indexOf","Error","push","window","console","log","exports","_stringify","object","isBlank","str","uid","uuid","prefix","index","length","digit","charCodeAt","join","String","fromCharCode","unshift","REGEX_API_URL","getRelativeUrl","url","result","match","constant","OPTIONS","wait","update","trailing","leading","factory","AV_THROTTLE","$timeout","fn","options","merge","THRESHOLD","isDefined","UPDATE","timer","context","this","args","arguments","apply","later","provider","_enabled","enabled","$get","$injector","AvLogger","$delegate","$log","proto","prototype","supplant","o","_supplant","a","b","r","replace","isObject","element","elemStr","isUndefined","constructor","toString","getFormattedTimestamp","date","getHours","getMinutes","getSeconds","getMilliseconds","_log","originalFn","hash","location","now","Date","message","supplantData","get","params","info","warn","debug","error","config","$provide","decorator","INTERVAL","MAX_ELAPSED_TIME","MAX_RETRY","DECAY","EVENTS","REGEX_URL","PollingServiceFactory","$rootScope","$q","AV_POLLING","AvPollingService","pendingRequests","response","isAsyncResponse","onAsyncReponse","when","setDefaults","defaultOptions","pollingInterval","pollingDecay","pollingMaxInterval","pollingRetryCount","pollingStartTime","getTime","extend","responseError","reject","api","status","isFunction","headers","deferred","defer","queueRequest","notify","promise","getUrl","self","_url","_config","method","pollingMaxRetry","_pollingDecay","cache","request","id","timeout","getPollingTimeout","retryRequest","pushRequest","popRequest","i","splice","isPollingMaxTimeout","elaspedTime","isElapsed","isMaxRetried","isPollable","_isTimeout","_isMax","cancel","increment","successCallback","resolve","errorCallback","$http","then","incrementCounter","incrementDecay","clearRequests","forEach","path","version","level","suffix","ApiResourcesFactory","avPollingService","AvApiResource","isString","charAt","_getUrl","_getApiUrl","_createResponse","data","_request","afterCallback","success","_response","_promise","successResponse","call","errorResponse","notifyResponse","always","all","afterAll","query","create","beforeCreate","afterCreate","afterGet","beforeUpdate","afterUpdate","updateWithoutId","remove","afterRemove","UserServiceFactory","AvUsersResource","user","me","PermissionFactory","AvPermissionsResource","permissions","getPermissions","permissionId","LogMessagesFactory","logMessagesResource","buildRequest","entries","requestPayload","AvDocumentsResourceFactory","AvDocumentsResource","getContents","getContentsUrl","OrganizationResourceFactory","OrganizationResource","getOrganizations","organizations","SESSION_TIMEOUT","NOT_AUTHORIZED","avUsersResource","avPermissionsResource","AvSession","getUser","hasPermission","orgId","geography","permission","find","p","undefined","contains","organizationIds","geographies","destroy","permisions","INACTIVE","ACTIVE","SESSION_TIMEOUT_ACTIVE","SESSION_TIMEOUT_INACTIVE","HUMAN","MACHINE","INTERVALS","PING","IDLE","SESSION","URLS","HOME","pingUrl","enable","value","setPingUrl","AV_IDLE","$document","avThrottle","AvIdle","_idleTimer","_sessionTimer","_pingTimer","idleActive","listeners","init","onDisabled","$on","onEnabled","listener","on","event","onEvent","idleTimerInActive","onSessionInactive","idleTimer","sessionTimer","off","each","cancelIdleTimer","isEnabled","onSessionActive","idleTimerActive","$broadcast","document","href","ping","unPing","_send","send","avIdle","$httpProvider","interceptors","classes","valid","invalid","dirty","pristine","touched","untouched","submitted","validators","REVALIDATE","SUBMITTED","FAILED","RESET","DEBOUNCE","DATE_FORMAT","SIMPLE","PATTERNS","ALPHA_ONLY","NUMERIC_ONLY","that","rules","addRules","avValConfig","AV_VAL","AvValidation","initValidators","validator","clearAll","validate","key","ruleName","contraints","el","results","violations","_valid","rule","contraintName","validationResult","field","isValid","isEmpty","$","trim","avValUtils","minLength","min","maxLength","max","REGEX","asRegExp","pattern","test","RegExp","values","isArray","expresion","getMinDate","minDate","period","val","parseInt","moment","subtract","getMaxDate","maxDate","add","set","validation","format","isBefore","isAfter","STATES","code"],"mappings":"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","file":"availity-angular.min.js","sourcesContent":["/*global module*/\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity || {};\n  availity.VERSION = 'v0.0.0';\n  availity.MODULE = 'availity';\n  availity.core = angular.module(availity.MODULE, ['ng']);\n\n  var originalModule = angular.module;\n  var modules = [];\n\n  angular.module = function(name, deps) {\n\n    if(deps && _.indexOf(modules, name) !== -1 ) {\n      throw new Error('redefining module: ' + name);\n    }\n    modules.push(name);\n    if(window.console && window.console.log) {\n      window.console.log(modules);\n    }\n    return originalModule(name, deps);\n  };\n\n  root.availity = availity;\n\n  if(typeof module !== 'undefined' && module.exports) {\n    module.exports = availity;\n  }\n\n})(window);\n\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/helper/makeString.js\n  availity._stringify = function(object) {\n    if(object === null) {\n      return '';\n    }\n    return '' + object;\n  };\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/isBlank.js\n  availity.isBlank = function(str) {\n    availity._stringify(str);\n  };\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var uid = ['0', '0', '0'];\n\n  availity.uuid = function(prefix) {\n    var index = uid.length;\n    var digit;\n\n    while(index) {\n      index--;\n      digit = uid[index].charCodeAt(0);\n      if(digit === 57 /*'9'*/) {\n        uid[index] = 'A';\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n      if(digit === 90  /*'Z'*/) {\n        uid[index] = '0';\n      } else {\n        uid[index] = String.fromCharCode(digit + 1);\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n    }\n    uid.unshift('0');\n    return prefix ? prefix + uid.join('') : uid.join('');\n  };\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.REGEX_API_URL = /^.*?api.availity.com(.*)$/;\n\n  availity.getRelativeUrl = function(url) {\n    var result = url.match(availity.REGEX_API_URL);\n    if(result && result[1]) {\n      return '/api' + result[1];\n    }\n\n    return url;\n  };\n\n})(window);\n","// Original => https://github.com/mgcrea/angular-strap/blob/master/src/helpers/debounce.js\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_THROTTLE', {\n    OPTIONS: {\n      wait: 1000,\n      update: false,\n      trailing: true,\n      leading: false\n    }\n  });\n\n  availity.core.factory('avThrottle', function(AV_THROTTLE, $timeout) {\n\n    return function(fn, wait, options) {\n\n      options = _.merge({}, AV_THROTTLE.OPTIONS, options);\n\n      wait = wait ? wait : AV_THROTTLE.THRESHOLD;\n      var update = angular.isDefined(options.update) ? options.update : AV_THROTTLE.UPDATE;\n      var timer = null;\n\n      return function() {\n        var context = options.context || this;\n        var args = arguments;\n\n        if(!timer) {\n          if(options.leading !== false) {\n            fn.apply(context, args);\n          }\n\n          var later = function() {\n            timer = null;\n            if(options.trailing !== false) {\n              fn.apply(context, args);\n            }\n          };\n\n          timer = $timeout(later, wait, update);\n        }\n\n        return timer;\n\n      };\n    };\n  });\n\n})(window);\n","// Orginal => https://github.com/ericzon/angular-ny-logger/blob/0c594e864c93e7f33d36141200096bc6139ddde1/angular-ny-logger.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.provider('AvLogger', function() {\n\n    var _enabled = false;\n\n    this.enabled = function(enabled) {\n      _enabled = !!enabled;\n    };\n\n    this.$get = function($injector) {\n\n      var AvLogger = function(context, $delegate) {\n\n        this.context = context || '';\n        this.$log = $delegate;\n\n      };\n\n      var proto = AvLogger.prototype;\n\n      AvLogger.supplant = function(str, o) {\n\n        var _supplant = function (a, b) {\n          var r = o[b];\n          return r;\n        };\n\n        return str.replace(/\\{([^{}]*)\\}/g, _supplant);\n      };\n\n      AvLogger.isObject = function(element) {\n        var elemStr = ( !angular.isUndefined(element) && !angular.isUndefined(element.constructor) ) ? element.constructor.toString() : '';\n        return (elemStr.indexOf('Object') > -1);\n      };\n\n      AvLogger.getFormattedTimestamp = function(date) {\n\n        return AvLogger.supplant('{0}:{1}:{2}:{3}', [\n          date.getHours(),\n          date.getMinutes(),\n          date.getSeconds(),\n          date.getMilliseconds()\n        ]);\n\n      };\n\n      proto._log = function(originalFn, args) {\n\n        // Allow enabling logger through query params\n        // Ex:\n        //\n        // http://localhost:3000/ui.html#avLogger\n\n        var hash = window.location.hash;\n        hash = hash || '';\n\n        if(!_enabled && hash.indexOf('avLogger') < 0 && originalFn !== 'error') {\n          return;\n        }\n\n        var now  = AvLogger.getFormattedTimestamp(new Date());\n        var message = '';\n        var supplantData = [];\n\n        var context = this.context ? ' [' + this.context + '] ' : '';\n\n        switch(args.length) {\n          case 1:\n            // (1) If the user supplied one argument, then the argument must be\n            // the message itself and _log()\n            // will print: <timestamp> - <context>: <message>\n            supplantData = args[0];\n            message = AvLogger.supplant('{0}{1} - {2}', [now, context, args[0]]);\n            break;\n          case 3:\n            // (3) If the user supplied three arguments, then the first argument\n            // is a method name, the second is the message and the third is an\n            // object of variables to interpolate with the message. For this, _log()\n            // will print: <timestamp> - <context> - <method name>('<message>')\n            supplantData = args[2];\n            message = AvLogger.supplant(\"{0}{1} - {2}(\\'{3}\\')\", [now, context, args[0], args[1]]);\n            break;\n          case 2:\n            // (2) If the user provided two arguments, we need to find out whether\n            // they supplied a method name or an interpolation object.\n            // In order to figure that out, we’ll check the type of the last argument.\n            // If it is a string, then it has to be the message itself while the\n            // first argument is the method name. Otherwise consider the first argument\n            // as the message and the second as array of interpolation variables.\n            // The output print will be according to this check.\n            if(typeof args[1] === 'string') {\n              message = AvLogger.supplant(\"{0}{1} - {2}(\\'{3}\\')\", [now, context, args[0], args[1]]);\n            } else {\n              supplantData = args[1];\n              message = AvLogger.supplant('{0}{1} - {2}', [now, context, args[0]]);\n            }\n            break;\n        }\n\n        var $log = this.$log || $injector.get('$log');\n\n        var params = (AvLogger.isObject(supplantData)) ? [message, supplantData] : [AvLogger.supplant(message, supplantData)];\n        $log[originalFn].apply(null, params);\n\n      };\n\n      proto.log = function() {\n        this._log('log', arguments);\n      };\n\n      proto.info = function() {\n        this._log('info', arguments);\n      };\n\n      proto.warn = function() {\n        this._log('warn', arguments);\n      };\n\n      proto.debug = function() {\n        this._log('debug', arguments);\n      };\n\n      proto.error = function() {\n        this._log('error', arguments);\n      };\n\n      return AvLogger;\n\n    };\n\n  });\n\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.config(function($provide) {\n\n    $provide.decorator('$log', function($delegate, AvLogger) {\n      return new AvLogger(null, $delegate);\n    });\n\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_POLLING', {\n    INTERVAL: 1000, // delay in ms before retrying an async request\n    MAX_ELAPSED_TIME: 5000, // max time in ms before polling stops and rejects original request\n    MAX_RETRY: 30, // # of times the request will be tried\n    DECAY: 1.2, // % the polling interval decays after every retry\n    // maximum time polling is allowed before rejecting the request\n    EVENTS: {\n      MAX_RETRY: 'av:polling:max:retry'\n    },\n    REGEX_URL: /^.*?api.availity.com(.*)$/ // capture the relative url from API\n  });\n\n  var PollingServiceFactory = function($rootScope, $q, $injector, $timeout, $log, AV_POLLING) {\n\n    var AvPollingService = function() {\n      this.pendingRequests = []; // stores all request for polling\n    };\n\n    var proto = AvPollingService.prototype;\n\n    proto.response = function(response) {\n\n      if(this.isAsyncResponse(response)) {\n        return this.onAsyncReponse(response);\n      }\n\n      return response || $q.when(response);\n    };\n\n    proto.setDefaults = function(config) {\n\n      var defaultOptions = {\n        pollingInterval: AV_POLLING.INTERVAL,\n        pollingDecay: AV_POLLING.DECAY,\n        pollingMaxInterval: AV_POLLING.MAX_ELAPSED_TIME,\n        pollingRetryCount: 0,\n        pollingStartTime: new Date().getTime()\n      };\n\n      config = _.extend(defaultOptions, config);\n    };\n\n    proto.responseError = function(response) {\n      // Return the promise rejection\n      return $q.reject(response);\n    };\n\n    /**\n     * API layer return a link with a polling url for\n     * async responses.\n     *\n     * @param  {Object}  response ajax response\n     * @return {Boolean} true if response has status of 202 (accepted) and location param in header with uri+session link\n     */\n    proto.isAsyncResponse = function(response) {\n\n      return response &&\n        response.config &&\n        response.config.api &&\n        response.status &&\n        response.status === 202 &&\n        angular.isFunction(response.headers) && !availity.isBlank(response.headers('location'));\n    };\n\n    proto.onAsyncReponse = function(response) {\n\n      this.setDefaults(response.config);\n\n      var deferred = $q.defer();\n\n      this.queueRequest(deferred, response);\n\n      // [rm3]: Can't call notify before you return promise object?\n      $timeout(function() {\n        // Notify deferred listeners with the original server response\n        deferred.notify(response);\n      });\n\n      return deferred.promise;\n    };\n\n    proto.getUrl = function(url) {\n\n      var result = url.match(AV_POLLING.REGEX_URL);\n      if(result && result[1]) {\n        return '/api' + result[1];\n      }\n\n      return url;\n    };\n\n    proto.queueRequest = function(deferred, response) {\n\n      var self = this;\n      // server replies with poll href so set the url into config\n      var _url = availity.getRelativeUrl(response.headers('location'));\n      var _config = response.config;\n\n      var config = {\n        method: 'GET',\n        api: true,\n        pollingInterval: _config.pollingInterval,\n        pollingMaxRetry: _config.pollingMaxRetry,\n        pollingMaxInterval: _config.pollingMaxInterval,\n        pollingStartTime: _config.pollingStartTime,\n        _pollingDecay: _config._pollingDecay,\n        pollingRetryCount: _config.pollingRetryCount,\n        pollingDecay: _config.pollingDecay,\n        url: _url, /* set the url from the server response */\n        cache: false\n      };\n\n      var request = {\n        id: availity.uuid('request-'),\n        config: config,\n        deferred: deferred\n      };\n\n      var timeout = this.getPollingTimeout(config);\n\n      // each async request should run on its own timer\n      var timer = $timeout(function() {\n        self.retryRequest(request.id);\n      }, timeout);\n\n      request.timer = timer;\n\n      // add the async request to the queue\n      this.pushRequest(request);\n\n    };\n\n    proto.popRequest = function(id) {\n\n      var index = null;\n      var request = null;\n\n      for(var i = 0; i < this.pendingRequests.length; i++) {\n        if(this.pendingRequests[i].id === id) {\n          index = i;\n          break;\n        }\n      }\n\n      request = this.pendingRequests[index];\n      this.pendingRequests.splice(index, 1);\n\n      return request;\n    };\n\n    proto.pushRequest = function(request) {\n      this.pendingRequests.push(request);\n    };\n\n    proto.getPollingTimeout = function(config) {\n      return config.pollingDecay * config.pollingMaxInterval;\n    };\n\n    proto.isPollingMaxTimeout = function(config) {\n      var now = new Date().getTime();\n      var elaspedTime = now - config.pollingStartTime;\n      var isElapsed = elaspedTime > config.pollingMaxInterval;\n      return isElapsed;\n    },\n\n      proto.isMaxRetried = function(config) {\n        return config.pollingRetryCount >= AV_POLLING.MAX_RETRY;\n      };\n\n    proto.isPollable = function(config) {\n      var _isTimeout = this.isPollingMaxTimeout(config);\n      var _isMax = this.isMaxRetried(config);\n\n      return _isTimeout || _isMax ? false : true;\n\n    };\n\n    proto.retryRequest = function(id) {\n\n      var self = this;\n      var request = this.popRequest(id);\n      $timeout.cancel(request.timer);\n\n      var config = request.config;\n\n      var deferred = request.deferred;\n\n      if(!this.isPollable(config)) {\n        $log.info('Rejecting pollable response due to timeout constraint');\n        return deferred.reject(request);\n      }\n\n      // increment counters and polling timeouts\n      this.increment(config);\n\n      function successCallback(response) {\n        if(self.isAsyncResponse(response)) {\n          deferred.notify(response);\n          self.queueRequest(request.deferred, response);\n        } else {\n          deferred.resolve(response);\n        }\n      }\n\n      function errorCallback(response) {\n        deferred.reject(response);\n      }\n\n      // Silly circular dependency trick\n      var $http = $injector.get('$http');\n\n      $http(config).then(successCallback, errorCallback);\n\n    };\n\n    proto.increment = function(config) {\n      this.incrementCounter(config);\n      this.incrementDecay(config);\n    };\n\n    proto.incrementDecay = function(config) {\n      if(!config._pollingDecay) {\n        // store the original decay param\n        config._pollingDecay = config.pollingDecay;\n      }\n      config.pollingDecay *= config._pollingDecay;\n    };\n\n    proto.incrementCounter = function(config) {\n      config.pollingRetryCount++;\n    };\n\n    proto.clearRequests = function() {\n      angular.forEach(this.pendingRequests, function(request) {\n        $timeout.cancel(request.timer);\n      });\n      this.pendingRequests = [];\n    };\n\n    return new AvPollingService();\n\n  };\n\n  availity.core.factory('avPollingService', PollingServiceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var defaultOptions = {\n    // pre-prend the url with a value like `/public` so we can build urls like `public/api/v1/*`\n    prefix: '',\n    // default base url for endpoints\n    path: '/api',\n    // url to resource endpoint like `coverages` or `payers`\n    url: null,\n    // defaults to version 1\n    version: '/v1',\n    // governance level `/internal`\n    level: '',\n    // post-pend the url with `.json`, `.txt` or `.xml`\n    suffix: '',\n    // cache all request by default\n    cache: true,\n    // flag used to enable behaviors around the Availity Rest API\n    api: true,\n    // # of times the polling service has tried to get a response\n    pollingRetryCount: 0,\n    // in ms\n    pollingInterval: 1000,\n    // % the polling interval decays after every retry\n    pollingDecay: 1.2,\n    // maximum time polling is allowed before rejecting the request\n    pollingMaxInterval: 30000\n\n  };\n\n  // Factory that creates ApiResourcess\n  var ApiResourcesFactory = function($http, $q, avPollingService) {\n\n    var AvApiResource = function(options) {\n\n      if(!options) {\n        throw new Error('[options] cannot be null or undefined');\n      }\n\n      // if string the assume url is being passed in\n      if(angular.isString(options)) {\n        options = options.charAt(0) === '/' ? options : '/' + options;\n        options = angular.extend({}, {url: options});\n      }\n\n      if(!options.url) {\n        throw new Error('[url] cannot be null');\n      }\n\n      // get the default options and merge into this instance\n      this.options = angular.extend({}, defaultOptions, (options || {}));\n    };\n\n    // Alias the prototype\n    var proto = AvApiResource.prototype;\n\n    proto._config = function(config) {\n      return angular.extend({}, this.options, (config || {}));\n    },\n\n      proto._getUrl = function(id) {\n        if(this.options.api) {\n          return this._getApiUrl(id);\n        }\n\n        return this.options.url;\n      };\n\n    proto._createResponse = function(data, status, headers, config) {\n      return {\n        data: data,\n        status: status,\n        headers: headers,\n        config: config\n      };\n    };\n\n    proto._request = function(config, afterCallback) {\n\n      var self = this;\n      var defer = $q.defer();\n\n      $http(config)\n        .success(function(data, status, headers, _config) {\n\n          var _response = {\n            data: data,\n            status: status,\n            headers: headers,\n            config: _config\n          };\n\n          // handle the async response if applicable\n          var _promise = $q.when(avPollingService.response(_response));\n          // notify the promise listener of the original response\n          defer.notify(_response);\n\n          // handle the polling service promise\n          _promise.then(\n            function(successResponse) {\n\n              // if service has a callback then call it\n              // var response = self._createResponse(data, status, headers, _config);\n              if(afterCallback) {\n                successResponse = afterCallback.call(self, successResponse);\n              }\n              defer.resolve(successResponse);\n            }, function(errorResponse) {\n              defer.reject(errorResponse);\n            }, function(notifyResponse) {\n              defer.notify(notifyResponse);\n            });\n\n        })\n        .error(function(data, status, headers, _config) {\n          var response = self._createResponse(data, status, headers, _config);\n          defer.reject(response);\n        });\n\n      var promise = defer.promise;\n\n      // recreate the success callback ala $http\n      promise.success = function(fn) {\n        promise.then(function(response) {\n          fn(response.data, response.status, response.headers, response.config);\n        });\n        return promise;\n      };\n\n      // recreate the error callback ala $http\n      promise.error = function(fn) {\n        promise.then(null, function(response) {\n          fn(response.data, response.status, response.headers, config);\n        });\n        return promise;\n      };\n\n      promise.always = promise['finally'];\n\n      return promise;\n    };\n\n    proto._getApiUrl = function(id) {\n      id = id ? '/' + id : '';\n      return this.options.prefix + this.options.path + this.options.level + this.options.version + this.options.url + id + this.options.suffix;\n    };\n\n    proto.all = function(config) {\n\n      config = this._config(config);\n      config.method = 'GET';\n      config.url = this._getUrl();\n\n      return this._request(config, this.afterAll);\n\n    };\n\n    // alias `all` since it was a bad name to being with\n    proto.query = proto.all;\n\n    proto.create = function(data, config) {\n\n      if(!data) {\n        throw new Error('called method without [data]');\n      }\n\n      if(this.beforeCreate) {\n        this.beforeCreate(this, data);\n      }\n\n      config = this._config(config);\n      config.method = 'POST';\n      config.url = this._getUrl();\n      config.data = data;\n\n      return this._request(config, this.afterCreate);\n\n    },\n\n\n      proto.get = function(id, config) {\n\n        if(!id) {\n          throw new Error('called method without [id]');\n        }\n\n        config = this._config(config);\n        config.method = 'GET';\n        config.url = this._getUrl(id);\n\n        return this._request(config, this.afterGet);\n\n      };\n\n    proto.query = function(params) {\n\n      if(!params) {\n        throw new Error('called query without parameters');\n      }\n\n      var config = this._config(config);\n      config.params = params;\n      config.method = 'GET';\n      config.url = this._getUrl();\n\n      return this._request(config, this.afterGet);\n\n    };\n\n    proto.update = function(id, data, config) {\n      if(!id || !data) {\n        throw new Error('called method without [id] or [data]');\n      }\n\n      config = this._config(config);\n      config.method = 'PUT';\n      config.url = this._getUrl(id);\n      config.data = data;\n\n      if(this.beforeUpdate) {\n        data = this.beforeUpdate(data);\n      }\n\n      return this._request(config, this.beforeUpdate, this.afterUpdate);\n\n\n    };\n\n    proto.updateWithoutId = function(data, config) {\n      if(!data) {\n        throw new Error('called method without [data]');\n      }\n\n      config = this._config(config);\n      config.method = 'PUT';\n      config.url = this._getUrl();\n      config.data = data;\n\n      if(this.beforeUpdate) {\n        data = this.beforeUpdate(data);\n      }\n\n      return this._request(config, this.beforeUpdate, this.afterUpdate);\n    };\n\n    proto.remove = function(id, config) {\n      if(!id) {\n        throw new Error('called method without [id]');\n      }\n\n      config = this._config(config);\n      config.method = 'DELETE';\n      config.url = this._getUrl(id);\n\n      return this._request(config, this.afterRemove);\n    };\n\n    proto.beforeCreate = null;\n    proto.afterCreate = null;\n    proto.afterAll = null;\n    proto.afterGet = null;\n    proto.beforeUpdate = null;\n    proto.afterUpdate = null;\n    proto.afterRemove = null;\n\n    return AvApiResource;\n\n  };\n\n  availity.core.factory('AvApiResource', ApiResourcesFactory);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  var UserServiceFactory = function(AvApiResource, $q) {\n\n    var AvUsersResource = function() {\n      this.user = null;\n      AvApiResource.call(this, 'users');\n    };\n\n    angular.extend(AvUsersResource.prototype, AvApiResource.prototype, {\n\n      afterGet: function(response) {\n        var user = response.data.user ? response.data.user : response.data;\n        this.user = user;\n        return user;\n      },\n\n      me: function() {\n\n        if(this.user) {\n          return $q.when(this.user);\n        }\n\n        return this.get('me');\n      }\n\n    });\n\n    return new AvUsersResource();\n\n  };\n\n  availity.core.factory('avUsersResource', UserServiceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var PermissionFactory = function(AvApiResource) {\n\n    var AvPermissionsResource = function() {\n      AvApiResource.call(this, {version: '/v1', url: '/permissions'});\n    };\n\n    angular.extend(AvPermissionsResource.prototype, AvApiResource.prototype, {\n\n      afterAll: function(response) {\n        return response.data.permissions ? response.data.permissions : response.data;\n      },\n\n      getPermissions: function(permissionId) {\n        return this.all({params: {permissionId: permissionId}}).then(function(response) {\n          var result = response.data.permissions ? response.data.permissions : [];\n          return result;\n        });\n      }\n\n    });\n    return new AvPermissionsResource();\n  };\n\n\n  root.availity.core.factory('avPermissionsResource', PermissionFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avCoveragesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations', cache: false});\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avConfigurationsResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations'});\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var LogMessagesFactory = function(AvApiResource) {\n\n    var logMessagesResource = new AvApiResource({\n      version: '/v1',\n      url: '/log-messages'\n    });\n\n    var buildRequest = function(level, entries) {\n\n      var requestPayload = {};\n\n      if(entries.level) {\n        delete entries.level;\n      }\n\n      requestPayload.level = level;\n      requestPayload.entries = entries;\n\n      return requestPayload;\n    };\n\n    return {\n\n      debug: function(entries) {\n        return logMessagesResource.create(buildRequest('debug', entries));\n      },\n\n      info: function(entries) {\n        return logMessagesResource.create(buildRequest('info', entries));\n      },\n\n      warn: function(entries) {\n        return logMessagesResource.create(buildRequest('warn', entries));\n      },\n\n      error: function(entries) {\n        return logMessagesResource.create(buildRequest('error', entries));\n      }\n\n    };\n  };\n\n  availity.core.factory('avLogMessagesResource', LogMessagesFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvDocumentsResourceFactory = function(AvApiResource) {\n\n    var AvDocumentsResource = function() {\n      AvApiResource.call(this, 'documents');\n    };\n\n    angular.extend(AvDocumentsResource.prototype, AvApiResource.prototype, {\n\n      getContents: function(id) {\n        var config = this._config();\n        config.url = this.getContentsUrl(id);\n        return this._request(config);\n      },\n\n      getContentsUrl: function(id) {\n        return this._getUrl(id) + '/contents';\n      }\n\n    });\n\n    return new AvDocumentsResource();\n\n  };\n\n  availity.core.factory('avDocumentsResource', AvDocumentsResourceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var OrganizationResourceFactory = function(AvApiResource) {\n\n    var OrganizationResource = function() {\n      AvApiResource.call(this, 'organizations');\n    };\n\n    angular.extend(OrganizationResource.prototype, AvApiResource.prototype, {\n\n      getOrganizations: function() {\n        return this.all().then(function(response) {\n          return response.data.organizations ? response.data.organizations : response.data;\n        });\n      }\n\n    });\n\n    return new OrganizationResource();\n  };\n\n  availity.core.factory('avOrganizationsResource', OrganizationResourceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avCodesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/codes'});\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_SESSION', {\n    SESSION_TIMEOUT: 'av:auth:session:timeout',\n    NOT_AUTHORIZED: 'av:auth:not:authorized'\n  });\n\n  availity.core.factory('avSession', function($q, avUsersResource, avPermissionsResource) {\n\n    var AvSession = function() {\n      this.user = null;\n      this.permissions = null;\n    };\n\n    var proto = AvSession.prototype;\n\n    proto.getUser = function() {\n      var self = this;\n\n      if(this.user) {\n        return $q.when(this.user);\n      }\n\n      return avUsersResource.me().then(function(user) {\n        self.user = user;\n        return self.user;\n      });\n    };\n\n    proto.getPermissions = function() {\n      var self = this;\n\n      if(this.permissions) {\n        return $q.when(this.permissions);\n      }\n\n      return avPermissionsResource.all().then(function(permissions) {\n        self.permissions = permissions;\n        return self.permissions;\n      });\n    };\n\n    proto.hasPermission = function(permissionId, orgId, geography) {\n      return this.getPermissions().then(function(permissions) {\n        var permission = _.find(permissions, function(p) {\n          return p.id === permissionId;\n        });\n        if(permission === undefined) {\n          return false;\n        }\n\n        if(orgId !== undefined && orgId !== null && !_.contains(permission.organizationIds, orgId)) {\n          return false;\n        }\n\n        if(geography !== undefined && geography !== null && !_.contains(permission.geographies, geography)) {\n          return false;\n        }\n\n        return true;\n      });\n    };\n\n    proto.destroy = function() {\n      this.user = null;\n      this.permisions = null;\n    };\n\n    return new AvSession();\n  });\n\n})(window);\n","// Inspiration => https://github.com/HackedByChinese/ng-idle\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_IDLE', {\n    EVENTS: {\n      INACTIVE: 'av:idle:inactive',\n      ACTIVE: 'av:idle:active',\n      SESSION_TIMEOUT_ACTIVE: 'av:idle:session:active',\n      SESSION_TIMEOUT_INACTIVE: 'av:idle:session:inactive',\n      HUMAN: 'keydown mousemove DOMMouseScroll mousewheel mousedown scroll',\n      MACHINE: '$locationChangeSuccess'\n    },\n    INTERVALS: {\n      PING: 3 * 60 * 1000, // 3 minutes\n      IDLE: 25 * 60 * 1000, // 25 minutes\n      SESSION: 30 * 60 * 1000 // 30 minutes\n      // PING: 2000\n      // PING: 3 * 60 * 1000, // 3 minutes\n      // IDLE: 5000\n      // IDLE: 25 * 60 * 1000, // 25 minutes\n      // SESSION: 10000\n      // SESSION: 30 * 60 * 1000 // 30 minutes\n    },\n    URLS: {\n      HOME: '/availity/web/public.elegant.login',\n      PING: '/api/v1/users/me'\n    }\n  });\n\n  // Rules:\n  //\n  //  * ping after 3 minutes from last human activity\n  //  * reset session after api success except 401\n  //  * idle show after 25 of inactivity\n  //\n  availity.core.provider('avIdle', function() {\n\n    var enabled = true;\n    var pingUrl;\n\n\n    this.enable = function(value) {\n      if(arguments.length) {\n        enabled = !!value;\n      }\n      return enabled;\n    };\n\n    this.setPingUrl = function(url) {\n      pingUrl = url;\n    };\n\n    this.$get = function(AV_IDLE, $log, $document, $rootScope, $timeout, avThrottle, $q, $injector) {\n\n      var AvIdle = function() {\n\n        pingUrl = pingUrl || AV_IDLE.URLS.PING;\n\n        this._idleTimer = null;\n        this._sessionTimer = null;\n        this._pingTimer = null;\n        this.idleActive = false;\n\n        this.listeners = [];\n\n        this.init();\n\n      };\n\n      var proto = AvIdle.prototype;\n\n      proto.init = function() {\n\n        if(!enabled) {\n          this.onDisabled();\n          return;\n        }\n\n        $rootScope.$on('$destroy', function() {\n          proto.onDisabled();\n        });\n\n        this.onEnabled();\n      };\n\n      proto.onEnabled = function() {\n        var self = this;\n\n        var listener;\n\n        $document.find('body').on(AV_IDLE.EVENTS.HUMAN, function(event) {\n          self.onEvent(event);\n        });\n\n        listener = $rootScope.$on(AV_IDLE.EVENTS.MACHINE, function(event) {\n          self.onEvent(event);\n        });\n        this.listeners.push(listener);\n\n        listener = $rootScope.$on(AV_IDLE.EVENTS.INACTIVE, function() {\n          self.idleTimerInActive();\n        });\n        this.listeners.push(listener);\n\n        $rootScope.$on(AV_IDLE.EVENTS.SESSION_TIMEOUT_INACTIVE, function() {\n          self.onSessionInactive();\n        });\n\n\n        this.idleTimer();\n        this.sessionTimer();\n      };\n\n      proto.onDisabled = function() {\n\n        $document.find('body').off(AV_IDLE.EVENTS.HUMAN);\n\n        // turns off Angular event listeners => http://stackoverflow.com/a/14898795\n        _.each(this.listeners, function(listener) {\n          listener();\n        });\n\n        $timeout.cancel(this._sessionTimer);\n        $timeout.cancel(this._idleTimer);\n        this.cancelIdleTimer();\n      };\n\n      proto.cancelIdleTimer = function() {\n        $timeout.cancel(this._idleTimer);\n      };\n\n      proto.isEnabled = function() {\n        return enabled;\n      };\n\n      proto.enable = function(value) {\n        if(arguments.length) {\n          enabled = !!value;\n        }\n\n        return this;\n      };\n\n      proto.response = function(response) {\n        this.sessionTimer();\n        return response;\n      };\n\n      proto.responseError = function(response) {\n\n        if(response.status !== 401) {\n          this.sessionTimer();\n        }\n\n        return $q.reject(response);\n      };\n\n      proto.sessionTimer = function() {\n\n        var self = this;\n        $timeout.cancel(this._sessionTimer);\n\n        var later = function() {\n          self.onSessionActive();\n        };\n\n        this._sessionTimer = $timeout(later, AV_IDLE.INTERVALS.SESSION, false);\n\n      };\n\n      proto.idleTimer = function() {\n        var self = this;\n        $timeout.cancel(this._idleTimer);\n\n        var later = function() {\n          self.idleTimerActive();\n        };\n\n        this._idleTimer = $timeout(later, AV_IDLE.INTERVALS.IDLE, false);\n      };\n\n      proto.onSessionActive = function() {\n        $log.info('idle session active');\n        $rootScope.$broadcast(AV_IDLE.EVENTS.SESSION_TIMEOUT_ACTIVE);\n      };\n\n      proto.idleTimerActive = function() {\n        $log.info('idle active');\n        this.idleActive = true;\n        $rootScope.$broadcast(AV_IDLE.EVENTS.ACTIVE);\n      };\n\n      proto.idleTimerInActive = function() {\n        $log.info('idle inactive');\n        this.idleActive = false;\n      };\n\n      proto.onSessionInactive = function() {\n        $log.info('idle session inactive');\n        this.onDisabled();\n        document.location.href = AV_IDLE.URLS.HOME;\n      };\n\n      proto.ping = function() {\n\n        if(this.idleActive) {\n          this.unPing();\n          return;\n        }\n\n        if(!this._send) {\n          this._send = avThrottle(this.send, AV_IDLE.INTERVALS.PING, {context: this});\n        }\n\n        this._pingTimer = this._send();\n      };\n\n      proto.unPing = function() {\n        if(this._pingTimer) {\n          $timeout.cancel(this._pingTimer);\n        }\n      };\n\n      proto.send = function() {\n        $log.info('sending ping');\n        var $http = $injector.get('$http');\n        $http.get(pingUrl);\n      };\n\n      proto.onEvent = function() {\n        this.idleTimer();\n        this.ping();\n      };\n\n      return new AvIdle();\n\n    };\n\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avIdleInterceptor', function(avIdle) {\n    return {\n      response: function(response) {\n        return avIdle.response(response);\n      },\n      responseError: function(response) {\n        return avIdle.responseError(response);\n      }\n    };\n\n  });\n\n  availity.core.config(function($httpProvider) {\n    $httpProvider.interceptors.push('avIdleInterceptor');\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.value('avValConfig', {\n    classes: {\n      valid: 'ng-valid',\n      invalid: 'ng-invalid',\n      dirty: 'ng-dirty',\n      pristine: 'ng-pristine',\n      touched: 'ng-touched',\n      untouched: 'ng-untouched',\n      submitted: 'ng-submitted'\n    },\n    validators: [\n      'avValPattern',\n      'avValSize',\n      'avValRequired',\n      'avValDateRange',\n      'avValDate'\n    ]\n  });\n\n  availity.core.constant('AV_VAL', {\n    EVENTS: {\n      REVALIDATE: 'av:val:revalidate',\n      SUBMITTED: 'av:val:submitted',\n      FAILED: 'av:val:failed',\n      RESET: 'av:val:reset'\n    },\n    DEBOUNCE: 500,\n    DATE_FORMAT: {\n      SIMPLE: 'MM/DD/YYYY'\n    },\n    PATTERNS: {\n      ALPHA_ONLY: /[^A-Za-z]+/g,\n      NUMERIC_ONLY: /[^0-9]+/g\n    }\n  });\n\n  availity.core.provider('avVal', function() {\n\n    var that = this;\n\n    this.rules = {};\n\n    this.addRules = function(rules) {\n      this.rules = angular.extend(this.rules, rules);\n    };\n\n    this.$get = function($injector, $rootScope, $http, $log, avValConfig, AV_VAL) {\n\n      var AvValidation = function() {\n        this.rules = that.rules;\n        this.validators = [];\n        this.initValidators();\n      };\n\n      var proto = AvValidation.prototype;\n\n      proto.initValidators = function() {\n        var self = this;\n\n        angular.forEach(avValConfig.validators, function(name) {\n          var validator = $injector.get(name);\n          self.validators[validator.name] = validator;\n        });\n      };\n\n      proto.clearAll = function() {\n        // this.validators.splice(0, this.validators.length);\n        // this.rules = {};\n      };\n\n      proto.addRules = function(rules) {\n        this.rules = angular.extend(this.rules, rules);\n        $rootScope.$broadcast(AV_VAL.EVENTS.REVALIDATE);\n      };\n\n      proto.validate = function(key, element, value, ruleName) {\n\n        var self = this;\n\n        var rules = this.rules[key];\n        if(!rules) {\n          $log.error('Failed to get rules key [' + key + '].  Forms must be tagged with a rules set name for validation to work.');\n          return;\n        }\n        var contraints = rules[ruleName];\n        if(!contraints) {\n          $log.info('Rule named [' + ruleName + '] could not be found in the current schema.');\n          contraints = [];\n        }\n\n        var el = element[0];\n        var results  = [];\n        var violations = [];\n        var _valid = true;\n\n        angular.forEach(contraints, function(rule, contraintName) {\n\n          if(!rule) {\n            // when extended rule sets, a user can pass nulls to cancel out a rule so if\n            // one doesn't exist just continue\n            return;\n          }\n\n          var validator = self.validators[contraintName];\n\n          if(angular.isUndefined(validator)) {\n            $log.warn('No validator defined for `' + name + '`');\n            return;\n          }\n\n          var valid = validator.validate(value, rule);\n\n          var validationResult = {\n            valid: valid,\n            ruleName: ruleName,\n            contraintName: contraintName,\n            value: value,\n            message: rule.message,\n            field: el.name || el.id\n          };\n\n          // $log.info(validationResult);\n\n          var result = angular.extend({}, rule, validationResult);\n\n          results.push(result);\n          if(!valid) {\n            violations.push(validationResult);\n          }\n          _valid = _valid && valid;\n        });\n\n        return {\n          isValid: _valid,\n          all: results, // all the constraint results\n          violations: violations\n        };\n\n      };\n\n      return new AvValidation();\n    };\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValUtils', function() {\n\n    return {\n\n      isDefined: function(value) {\n        return angular.isDefined(value) && value !== '' && value !== null;\n      },\n\n      isEmpty: function(value) {\n        return !this.isDefined(value) || $.trim(value) === '';\n      }\n    };\n\n  });\n})(window);\n\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValSize', function(avValUtils) {\n\n    var validator =  {\n      name: 'size',\n      validate: function(value, rule) {\n        var minLength = rule.min || 0;\n        var maxLength = rule.max;\n\n        value = value || '';\n        return avValUtils.isEmpty(value) || value.length >= minLength && (maxLength === undefined || value.length <= maxLength);\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValPattern', function(avValUtils) {\n\n    var validator =  {\n      name: 'pattern',\n      REGEX: /^\\/(.*)\\/([gim]*)$/, //regular expression to test a regular expression\n      asRegExp: function(pattern) {\n        var match;\n\n        if(pattern.test) {\n          return pattern;\n        } else {\n          match = pattern.match(validator.REGEX);\n          if(match) {\n            return new RegExp(match[1], match[2]);\n          } else {\n            throw ('Expected ' + pattern + ' to be a RegExp');\n          }\n        }\n      },\n      validate: function(value, rule) {\n        var values = _.isArray(rule.value) ? rule.value : [rule.value];\n\n        var valid = false;\n\n        _.each(values, function(expresion) {\n          var pattern = validator.asRegExp(expresion);\n          if(avValUtils.isEmpty(value) || pattern.test(value)) {\n            valid = true;\n          }\n        });\n\n        return valid;\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValRequired', function(avValUtils) {\n\n    var validator =  {\n      name: 'required',\n      validate: function(value) {\n        return !avValUtils.isEmpty(value);\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDateRange', function(AV_VAL, avValUtils) {\n\n    var validator = {\n      name: 'dateRange',\n      getMinDate: function(minDate) {\n        var period = minDate.replace(AV_VAL.PATTERNS.ALPHA_ONLY, '');\n        var val = parseInt( minDate.replace(AV_VAL.PATTERNS.NUMERIC_ONLY, ''), 10);\n        var min = moment().subtract(val, period);\n        return min;\n      },\n      getMaxDate: function(maxDate) {\n        var max = moment();\n        var period = maxDate.replace(AV_VAL.PATTERNS.ALPHA_ONLY, '');\n        var val = parseInt( maxDate.replace(AV_VAL.PATTERNS.NUMERIC_ONLY, ''), 10);\n\n        if(maxDate !== 'today') {\n          max = moment().add(val, period);\n        } else {\n          max.set('hours', 23);\n          max.set('minutes', 59);\n          max.set('seconds', 59);\n        }\n        return max;\n      },\n      validation: function(value, rules) {\n        var minDate = validator.getMinDate(rules.min);\n        var maxDate = validator.getMaxDate(rules.max);\n        value = moment(value, rules.format);\n        return !value.isBefore(minDate) && !value.isAfter(maxDate);\n      },\n      validate: function(value, rule) {\n        return avValUtils.isEmpty(value) || validator.validation(value, rule);\n      }\n    };\n\n    return validator;\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDate', function(AV_VAL, avValUtils) {\n\n    var validator = {\n      name: 'dateFormat',\n      validate: function(value, rules) {\n\n        var format = rules && rules.format ? rules.format : AV_VAL.DATE_FORMAT.SIMPLE;\n\n        return avValUtils.isEmpty(value) || moment(value, format, true).isValid();\n      }\n    };\n    return validator;\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_GLOBALS', function() {\n\n    return {\n\n      STATES: [\n        {\n          'name': 'Alabama',\n          'code': 'AL'\n        },\n        {\n          'name': 'Alaska',\n          'code': 'AK'\n        },\n        {\n          'name': 'Arizona',\n          'code': 'AZ'\n        },\n        {\n          'name': 'Arkansas',\n          'code': 'AR'\n        },\n        {\n          'name': 'California',\n          'code': 'CA'\n        },\n        {\n          'name': 'Colorado',\n          'code': 'CO'\n        },\n        {\n          'name': 'Connecticut',\n          'code': 'CT'\n        },\n        {\n          'name': 'Delaware',\n          'code': 'DE'\n        },\n        {\n          'name': 'District Of Columbia',\n          'code': 'DC'\n        },\n        {\n          'name': 'Florida',\n          'code': 'FL'\n        },\n        {\n          'name': 'Georgia',\n          'code': 'GA'\n        },\n        {\n          'name': 'Hawaii',\n          'code': 'HI'\n        },\n        {\n          'name': 'Idaho',\n          'code': 'ID'\n        },\n        {\n          'name': 'Illinois',\n          'code': 'IL'\n        },\n        {\n          'name': 'Indiana',\n          'code': 'IN'\n        },\n        {\n          'name': 'Iowa',\n          'code': 'IA'\n        },\n        {\n          'name': 'Kansas',\n          'code': 'KS'\n        },\n        {\n          'name': 'Kentucky',\n          'code': 'KY'\n        },\n        {\n          'name': 'Louisiana',\n          'code': 'LA'\n        },\n        {\n          'name': 'Maine',\n          'code': 'ME'\n        },\n        {\n          'name': 'Maryland',\n          'code': 'MD'\n        },\n        {\n          'name': 'Massachusetts',\n          'code': 'MA'\n        },\n        {\n          'name': 'Michigan',\n          'code': 'MI'\n        },\n        {\n          'name': 'Minnesota',\n          'code': 'MN'\n        },\n        {\n          'name': 'Mississippi',\n          'code': 'MS'\n        },\n        {\n          'name': 'Missouri',\n          'code': 'MO'\n        },\n        {\n          'name': 'Montana',\n          'code': 'MT'\n        },\n        {\n          'name': 'Nebraska',\n          'code': 'NE'\n        },\n        {\n          'name': 'Nevada',\n          'code': 'NV'\n        },\n        {\n          'name': 'New Hampshire',\n          'code': 'NH'\n        },\n        {\n          'name': 'New Jersey',\n          'code': 'NJ'\n        },\n        {\n          'name': 'New Mexico',\n          'code': 'NM'\n        },\n        {\n          'name': 'New York',\n          'code': 'NY'\n        },\n        {\n          'name': 'North Carolina',\n          'code': 'NC'\n        },\n        {\n          'name': 'North Dakota',\n          'code': 'ND'\n        },\n        {\n          'name': 'Ohio',\n          'code': 'OH'\n        },\n        {\n          'name': 'Oklahoma',\n          'code': 'OK'\n        },\n        {\n          'name': 'Oregon',\n          'code': 'OR'\n        },\n        {\n          'name': 'Pennsylvania',\n          'code': 'PA'\n        },\n        {\n          'name': 'Rhode Island',\n          'code': 'RI'\n        },\n        {\n          'name': 'South Carolina',\n          'code': 'SC'\n        },\n        {\n          'name': 'South Dakota',\n          'code': 'SD'\n        },\n        {\n          'name': 'Tennessee',\n          'code': 'TN'\n        },\n        {\n          'name': 'Texas',\n          'code': 'TX'\n        },\n        {\n          'name': 'Utah',\n          'code': 'UT'\n        },\n        {\n          'name': 'Vermont',\n          'code': 'VT'\n        },\n        {\n          'name': 'Virginia',\n          'code': 'VA'\n        },\n        {\n          'name': 'Washington',\n          'code': 'WA'\n        },\n        {\n          'name': 'West Virginia',\n          'code': 'WV'\n        },\n        {\n          'name': 'Wisconsin',\n          'code': 'WI'\n        },\n        {\n          'name': 'Wyoming',\n          'code': 'WY'\n        }\n      ]\n    };\n\n  });\n\n})(window);\n","/**\n * availity-angular v0.6.1 -- March-31\n * Copyright 2015 Availity, LLC \n */\n\n// Source: /lib/core/index.js\n\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity || {};\n  availity.VERSION = 'v0.6.1';\n  availity.MODULE = 'availity';\n  availity.core = angular.module(availity.MODULE, ['ng']);\n\n  var originalModule = angular.module;\n  var modules = [];\n\n  angular.module = function(name, deps) {\n\n    if(deps && _.indexOf(modules, name) !== -1 ) {\n      throw new Error('redefining module: ' + name);\n    }\n    modules.push(name);\n    if(window.console && window.console.log) {\n      window.console.log(modules);\n    }\n    return originalModule(name, deps);\n  };\n\n  root.availity = availity;\n\n  if(typeof module !== 'undefined' && module.exports) {\n    module.exports = availity;\n  }\n\n})(window);\n\n\n// Source: /lib/core/utils/strings.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/helper/makeString.js\n  availity._stringify = function(object) {\n    if(object === null) {\n      return '';\n    }\n    return '' + object;\n  };\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/isBlank.js\n  availity.isBlank = function(str) {\n    availity._stringify(str);\n  };\n\n})(window);\n\n// Source: /lib/core/utils/uuid.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var uid = ['0', '0', '0'];\n\n  availity.uuid = function(prefix) {\n    var index = uid.length;\n    var digit;\n\n    while(index) {\n      index--;\n      digit = uid[index].charCodeAt(0);\n      if(digit === 57 /*'9'*/) {\n        uid[index] = 'A';\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n      if(digit === 90  /*'Z'*/) {\n        uid[index] = '0';\n      } else {\n        uid[index] = String.fromCharCode(digit + 1);\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n    }\n    uid.unshift('0');\n    return prefix ? prefix + uid.join('') : uid.join('');\n  };\n\n})(window);\n\n// Source: /lib/core/utils/urls.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.REGEX_API_URL = /^.*?api.availity.com(.*)$/;\n\n  availity.getRelativeUrl = function(url) {\n    var result = url.match(availity.REGEX_API_URL);\n    if(result && result[1]) {\n      return '/api' + result[1];\n    }\n\n    return url;\n  };\n\n})(window);\n\n// Source: /lib/core/utils/throttle.js\n// Original => https://github.com/mgcrea/angular-strap/blob/master/src/helpers/debounce.js\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_THROTTLE', {\n    OPTIONS: {\n      wait: 1000,\n      update: false,\n      trailing: true,\n      leading: false\n    }\n  });\n\n  availity.core.factory('avThrottle', function(AV_THROTTLE, $timeout) {\n\n    return function(fn, wait, options) {\n\n      options = _.merge({}, AV_THROTTLE.OPTIONS, options);\n\n      wait = wait ? wait : AV_THROTTLE.THRESHOLD;\n      var update = angular.isDefined(options.update) ? options.update : AV_THROTTLE.UPDATE;\n      var timer = null;\n\n      return function() {\n        var context = options.context || this;\n        var args = arguments;\n\n        if(!timer) {\n          if(options.leading !== false) {\n            fn.apply(context, args);\n          }\n\n          var later = function() {\n            timer = null;\n            if(options.trailing !== false) {\n              fn.apply(context, args);\n            }\n          };\n\n          timer = $timeout(later, wait, update);\n        }\n\n        return timer;\n\n      };\n    };\n  });\n\n})(window);\n\n// Source: /lib/logger/logger.js\n// Orginal => https://github.com/ericzon/angular-ny-logger/blob/0c594e864c93e7f33d36141200096bc6139ddde1/angular-ny-logger.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.provider('AvLogger', function() {\n\n    var _enabled = false;\n\n    this.enabled = function(enabled) {\n      _enabled = !!enabled;\n    };\n\n    this.$get = function($injector) {\n\n      var AvLogger = function(context, $delegate) {\n\n        this.context = context || '';\n        this.$log = $delegate;\n\n      };\n\n      var proto = AvLogger.prototype;\n\n      AvLogger.supplant = function(str, o) {\n\n        var _supplant = function (a, b) {\n          var r = o[b];\n          return r;\n        };\n\n        return str.replace(/\\{([^{}]*)\\}/g, _supplant);\n      };\n\n      AvLogger.isObject = function(element) {\n        var elemStr = ( !angular.isUndefined(element) && !angular.isUndefined(element.constructor) ) ? element.constructor.toString() : '';\n        return (elemStr.indexOf('Object') > -1);\n      };\n\n      AvLogger.getFormattedTimestamp = function(date) {\n\n        return AvLogger.supplant('{0}:{1}:{2}:{3}', [\n          date.getHours(),\n          date.getMinutes(),\n          date.getSeconds(),\n          date.getMilliseconds()\n        ]);\n\n      };\n\n      proto._log = function(originalFn, args) {\n\n        // Allow enabling logger through query params\n        // Ex:\n        //\n        // http://localhost:3000/ui.html#avLogger\n\n        var hash = window.location.hash;\n        hash = hash || '';\n\n        if(!_enabled && hash.indexOf('avLogger') < 0 && originalFn !== 'error') {\n          return;\n        }\n\n        var now  = AvLogger.getFormattedTimestamp(new Date());\n        var message = '';\n        var supplantData = [];\n\n        var context = this.context ? ' [' + this.context + '] ' : '';\n\n        switch(args.length) {\n          case 1:\n            // (1) If the user supplied one argument, then the argument must be\n            // the message itself and _log()\n            // will print: <timestamp> - <context>: <message>\n            supplantData = args[0];\n            message = AvLogger.supplant('{0}{1} - {2}', [now, context, args[0]]);\n            break;\n          case 3:\n            // (3) If the user supplied three arguments, then the first argument\n            // is a method name, the second is the message and the third is an\n            // object of variables to interpolate with the message. For this, _log()\n            // will print: <timestamp> - <context> - <method name>('<message>')\n            supplantData = args[2];\n            message = AvLogger.supplant(\"{0}{1} - {2}(\\'{3}\\')\", [now, context, args[0], args[1]]);\n            break;\n          case 2:\n            // (2) If the user provided two arguments, we need to find out whether\n            // they supplied a method name or an interpolation object.\n            // In order to figure that out, we’ll check the type of the last argument.\n            // If it is a string, then it has to be the message itself while the\n            // first argument is the method name. Otherwise consider the first argument\n            // as the message and the second as array of interpolation variables.\n            // The output print will be according to this check.\n            if(typeof args[1] === 'string') {\n              message = AvLogger.supplant(\"{0}{1} - {2}(\\'{3}\\')\", [now, context, args[0], args[1]]);\n            } else {\n              supplantData = args[1];\n              message = AvLogger.supplant('{0}{1} - {2}', [now, context, args[0]]);\n            }\n            break;\n        }\n\n        var $log = this.$log || $injector.get('$log');\n\n        var params = (AvLogger.isObject(supplantData)) ? [message, supplantData] : [AvLogger.supplant(message, supplantData)];\n        $log[originalFn].apply(null, params);\n\n      };\n\n      proto.log = function() {\n        this._log('log', arguments);\n      };\n\n      proto.info = function() {\n        this._log('info', arguments);\n      };\n\n      proto.warn = function() {\n        this._log('warn', arguments);\n      };\n\n      proto.debug = function() {\n        this._log('debug', arguments);\n      };\n\n      proto.error = function() {\n        this._log('error', arguments);\n      };\n\n      return AvLogger;\n\n    };\n\n  });\n\n\n})(window);\n\n// Source: /lib/logger/logger-config.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.config(function($provide) {\n\n    $provide.decorator('$log', function($delegate, AvLogger) {\n      return new AvLogger(null, $delegate);\n    });\n\n  });\n\n})(window);\n\n// Source: /lib/core/polling/polling.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_POLLING', {\n    INTERVAL: 1000, // delay in ms before retrying an async request\n    MAX_ELAPSED_TIME: 5000, // max time in ms before polling stops and rejects original request\n    MAX_RETRY: 30, // # of times the request will be tried\n    DECAY: 1.2, // % the polling interval decays after every retry\n    // maximum time polling is allowed before rejecting the request\n    EVENTS: {\n      MAX_RETRY: 'av:polling:max:retry'\n    },\n    REGEX_URL: /^.*?api.availity.com(.*)$/ // capture the relative url from API\n  });\n\n  var PollingServiceFactory = function($rootScope, $q, $injector, $timeout, $log, AV_POLLING) {\n\n    var AvPollingService = function() {\n      this.pendingRequests = []; // stores all request for polling\n    };\n\n    var proto = AvPollingService.prototype;\n\n    proto.response = function(response) {\n\n      if(this.isAsyncResponse(response)) {\n        return this.onAsyncReponse(response);\n      }\n\n      return response || $q.when(response);\n    };\n\n    proto.setDefaults = function(config) {\n\n      var defaultOptions = {\n        pollingInterval: AV_POLLING.INTERVAL,\n        pollingDecay: AV_POLLING.DECAY,\n        pollingMaxInterval: AV_POLLING.MAX_ELAPSED_TIME,\n        pollingRetryCount: 0,\n        pollingStartTime: new Date().getTime()\n      };\n\n      config = _.extend(defaultOptions, config);\n    };\n\n    proto.responseError = function(response) {\n      // Return the promise rejection\n      return $q.reject(response);\n    };\n\n    /**\n     * API layer return a link with a polling url for\n     * async responses.\n     *\n     * @param  {Object}  response ajax response\n     * @return {Boolean} true if response has status of 202 (accepted) and location param in header with uri+session link\n     */\n    proto.isAsyncResponse = function(response) {\n\n      return response &&\n        response.config &&\n        response.config.api &&\n        response.status &&\n        response.status === 202 &&\n        angular.isFunction(response.headers) && !availity.isBlank(response.headers('location'));\n    };\n\n    proto.onAsyncReponse = function(response) {\n\n      this.setDefaults(response.config);\n\n      var deferred = $q.defer();\n\n      this.queueRequest(deferred, response);\n\n      // [rm3]: Can't call notify before you return promise object?\n      $timeout(function() {\n        // Notify deferred listeners with the original server response\n        deferred.notify(response);\n      });\n\n      return deferred.promise;\n    };\n\n    proto.getUrl = function(url) {\n\n      var result = url.match(AV_POLLING.REGEX_URL);\n      if(result && result[1]) {\n        return '/api' + result[1];\n      }\n\n      return url;\n    };\n\n    proto.queueRequest = function(deferred, response) {\n\n      var self = this;\n      // server replies with poll href so set the url into config\n      var _url = availity.getRelativeUrl(response.headers('location'));\n      var _config = response.config;\n\n      var config = {\n        method: 'GET',\n        api: true,\n        pollingInterval: _config.pollingInterval,\n        pollingMaxRetry: _config.pollingMaxRetry,\n        pollingMaxInterval: _config.pollingMaxInterval,\n        pollingStartTime: _config.pollingStartTime,\n        _pollingDecay: _config._pollingDecay,\n        pollingRetryCount: _config.pollingRetryCount,\n        pollingDecay: _config.pollingDecay,\n        url: _url, /* set the url from the server response */\n        cache: false\n      };\n\n      var request = {\n        id: availity.uuid('request-'),\n        config: config,\n        deferred: deferred\n      };\n\n      var timeout = this.getPollingTimeout(config);\n\n      // each async request should run on its own timer\n      var timer = $timeout(function() {\n        self.retryRequest(request.id);\n      }, timeout);\n\n      request.timer = timer;\n\n      // add the async request to the queue\n      this.pushRequest(request);\n\n    };\n\n    proto.popRequest = function(id) {\n\n      var index = null;\n      var request = null;\n\n      for(var i = 0; i < this.pendingRequests.length; i++) {\n        if(this.pendingRequests[i].id === id) {\n          index = i;\n          break;\n        }\n      }\n\n      request = this.pendingRequests[index];\n      this.pendingRequests.splice(index, 1);\n\n      return request;\n    };\n\n    proto.pushRequest = function(request) {\n      this.pendingRequests.push(request);\n    };\n\n    proto.getPollingTimeout = function(config) {\n      return config.pollingDecay * config.pollingMaxInterval;\n    };\n\n    proto.isPollingMaxTimeout = function(config) {\n      var now = new Date().getTime();\n      var elaspedTime = now - config.pollingStartTime;\n      var isElapsed = elaspedTime > config.pollingMaxInterval;\n      return isElapsed;\n    },\n\n      proto.isMaxRetried = function(config) {\n        return config.pollingRetryCount >= AV_POLLING.MAX_RETRY;\n      };\n\n    proto.isPollable = function(config) {\n      var _isTimeout = this.isPollingMaxTimeout(config);\n      var _isMax = this.isMaxRetried(config);\n\n      return _isTimeout || _isMax ? false : true;\n\n    };\n\n    proto.retryRequest = function(id) {\n\n      var self = this;\n      var request = this.popRequest(id);\n      $timeout.cancel(request.timer);\n\n      var config = request.config;\n\n      var deferred = request.deferred;\n\n      if(!this.isPollable(config)) {\n        $log.info('Rejecting pollable response due to timeout constraint');\n        return deferred.reject(request);\n      }\n\n      // increment counters and polling timeouts\n      this.increment(config);\n\n      function successCallback(response) {\n        if(self.isAsyncResponse(response)) {\n          deferred.notify(response);\n          self.queueRequest(request.deferred, response);\n        } else {\n          deferred.resolve(response);\n        }\n      }\n\n      function errorCallback(response) {\n        deferred.reject(response);\n      }\n\n      // Silly circular dependency trick\n      var $http = $injector.get('$http');\n\n      $http(config).then(successCallback, errorCallback);\n\n    };\n\n    proto.increment = function(config) {\n      this.incrementCounter(config);\n      this.incrementDecay(config);\n    };\n\n    proto.incrementDecay = function(config) {\n      if(!config._pollingDecay) {\n        // store the original decay param\n        config._pollingDecay = config.pollingDecay;\n      }\n      config.pollingDecay *= config._pollingDecay;\n    };\n\n    proto.incrementCounter = function(config) {\n      config.pollingRetryCount++;\n    };\n\n    proto.clearRequests = function() {\n      angular.forEach(this.pendingRequests, function(request) {\n        $timeout.cancel(request.timer);\n      });\n      this.pendingRequests = [];\n    };\n\n    return new AvPollingService();\n\n  };\n\n  availity.core.factory('avPollingService', PollingServiceFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-factory.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var defaultOptions = {\n    // pre-prend the url with a value like `/public` so we can build urls like `public/api/v1/*`\n    prefix: '',\n    // default base url for endpoints\n    path: '/api',\n    // url to resource endpoint like `coverages` or `payers`\n    url: null,\n    // defaults to version 1\n    version: '/v1',\n    // governance level `/internal`\n    level: '',\n    // post-pend the url with `.json`, `.txt` or `.xml`\n    suffix: '',\n    // cache all request by default\n    cache: true,\n    // flag used to enable behaviors around the Availity Rest API\n    api: true,\n    // # of times the polling service has tried to get a response\n    pollingRetryCount: 0,\n    // in ms\n    pollingInterval: 1000,\n    // % the polling interval decays after every retry\n    pollingDecay: 1.2,\n    // maximum time polling is allowed before rejecting the request\n    pollingMaxInterval: 30000\n\n  };\n\n  // Factory that creates ApiResourcess\n  var ApiResourcesFactory = function($http, $q, avPollingService) {\n\n    var AvApiResource = function(options) {\n\n      if(!options) {\n        throw new Error('[options] cannot be null or undefined');\n      }\n\n      // if string the assume url is being passed in\n      if(angular.isString(options)) {\n        options = options.charAt(0) === '/' ? options : '/' + options;\n        options = angular.extend({}, {url: options});\n      }\n\n      if(!options.url) {\n        throw new Error('[url] cannot be null');\n      }\n\n      // get the default options and merge into this instance\n      this.options = angular.extend({}, defaultOptions, (options || {}));\n    };\n\n    // Alias the prototype\n    var proto = AvApiResource.prototype;\n\n    proto._config = function(config) {\n      return angular.extend({}, this.options, (config || {}));\n    },\n\n      proto._getUrl = function(id) {\n        if(this.options.api) {\n          return this._getApiUrl(id);\n        }\n\n        return this.options.url;\n      };\n\n    proto._createResponse = function(data, status, headers, config) {\n      return {\n        data: data,\n        status: status,\n        headers: headers,\n        config: config\n      };\n    };\n\n    proto._request = function(config, afterCallback) {\n\n      var self = this;\n      var defer = $q.defer();\n\n      $http(config)\n        .success(function(data, status, headers, _config) {\n\n          var _response = {\n            data: data,\n            status: status,\n            headers: headers,\n            config: _config\n          };\n\n          // handle the async response if applicable\n          var _promise = $q.when(avPollingService.response(_response));\n          // notify the promise listener of the original response\n          defer.notify(_response);\n\n          // handle the polling service promise\n          _promise.then(\n            function(successResponse) {\n\n              // if service has a callback then call it\n              // var response = self._createResponse(data, status, headers, _config);\n              if(afterCallback) {\n                successResponse = afterCallback.call(self, successResponse);\n              }\n              defer.resolve(successResponse);\n            }, function(errorResponse) {\n              defer.reject(errorResponse);\n            }, function(notifyResponse) {\n              defer.notify(notifyResponse);\n            });\n\n        })\n        .error(function(data, status, headers, _config) {\n          var response = self._createResponse(data, status, headers, _config);\n          defer.reject(response);\n        });\n\n      var promise = defer.promise;\n\n      // recreate the success callback ala $http\n      promise.success = function(fn) {\n        promise.then(function(response) {\n          fn(response.data, response.status, response.headers, response.config);\n        });\n        return promise;\n      };\n\n      // recreate the error callback ala $http\n      promise.error = function(fn) {\n        promise.then(null, function(response) {\n          fn(response.data, response.status, response.headers, config);\n        });\n        return promise;\n      };\n\n      promise.always = promise['finally'];\n\n      return promise;\n    };\n\n    proto._getApiUrl = function(id) {\n      id = id ? '/' + id : '';\n      return this.options.prefix + this.options.path + this.options.level + this.options.version + this.options.url + id + this.options.suffix;\n    };\n\n    proto.all = function(config) {\n\n      config = this._config(config);\n      config.method = 'GET';\n      config.url = this._getUrl();\n\n      return this._request(config, this.afterAll);\n\n    };\n\n    // alias `all` since it was a bad name to being with\n    proto.query = proto.all;\n\n    proto.create = function(data, config) {\n\n      if(!data) {\n        throw new Error('called method without [data]');\n      }\n\n      if(this.beforeCreate) {\n        this.beforeCreate(this, data);\n      }\n\n      config = this._config(config);\n      config.method = 'POST';\n      config.url = this._getUrl();\n      config.data = data;\n\n      return this._request(config, this.afterCreate);\n\n    },\n\n\n      proto.get = function(id, config) {\n\n        if(!id) {\n          throw new Error('called method without [id]');\n        }\n\n        config = this._config(config);\n        config.method = 'GET';\n        config.url = this._getUrl(id);\n\n        return this._request(config, this.afterGet);\n\n      };\n\n    proto.query = function(params) {\n\n      if(!params) {\n        throw new Error('called query without parameters');\n      }\n\n      var config = this._config(config);\n      config.params = params;\n      config.method = 'GET';\n      config.url = this._getUrl();\n\n      return this._request(config, this.afterGet);\n\n    };\n\n    proto.update = function(id, data, config) {\n      if(!id || !data) {\n        throw new Error('called method without [id] or [data]');\n      }\n\n      config = this._config(config);\n      config.method = 'PUT';\n      config.url = this._getUrl(id);\n      config.data = data;\n\n      if(this.beforeUpdate) {\n        data = this.beforeUpdate(data);\n      }\n\n      return this._request(config, this.beforeUpdate, this.afterUpdate);\n\n\n    };\n\n    proto.updateWithoutId = function(data, config) {\n      if(!data) {\n        throw new Error('called method without [data]');\n      }\n\n      config = this._config(config);\n      config.method = 'PUT';\n      config.url = this._getUrl();\n      config.data = data;\n\n      if(this.beforeUpdate) {\n        data = this.beforeUpdate(data);\n      }\n\n      return this._request(config, this.beforeUpdate, this.afterUpdate);\n    };\n\n    proto.remove = function(id, config) {\n      if(!id) {\n        throw new Error('called method without [id]');\n      }\n\n      config = this._config(config);\n      config.method = 'DELETE';\n      config.url = this._getUrl(id);\n\n      return this._request(config, this.afterRemove);\n    };\n\n    proto.beforeCreate = null;\n    proto.afterCreate = null;\n    proto.afterAll = null;\n    proto.afterGet = null;\n    proto.beforeUpdate = null;\n    proto.afterUpdate = null;\n    proto.afterRemove = null;\n\n    return AvApiResource;\n\n  };\n\n  availity.core.factory('AvApiResource', ApiResourcesFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-users.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  var UserServiceFactory = function(AvApiResource, $q) {\n\n    var AvUsersResource = function() {\n      this.user = null;\n      AvApiResource.call(this, 'users');\n    };\n\n    angular.extend(AvUsersResource.prototype, AvApiResource.prototype, {\n\n      afterGet: function(response) {\n        var user = response.data.user ? response.data.user : response.data;\n        this.user = user;\n        return user;\n      },\n\n      me: function() {\n\n        if(this.user) {\n          return $q.when(this.user);\n        }\n\n        return this.get('me');\n      }\n\n    });\n\n    return new AvUsersResource();\n\n  };\n\n  availity.core.factory('avUsersResource', UserServiceFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-permissions.js\n(function(root) {\n\n  'use strict';\n\n  var PermissionFactory = function(AvApiResource) {\n\n    var AvPermissionsResource = function() {\n      AvApiResource.call(this, {version: '/v1', url: '/permissions'});\n    };\n\n    angular.extend(AvPermissionsResource.prototype, AvApiResource.prototype, {\n\n      afterAll: function(response) {\n        return response.data.permissions ? response.data.permissions : response.data;\n      },\n\n      getPermissions: function(permissionId) {\n        return this.all({params: {permissionId: permissionId}}).then(function(response) {\n          var result = response.data.permissions ? response.data.permissions : [];\n          return result;\n        });\n      }\n\n    });\n    return new AvPermissionsResource();\n  };\n\n\n  root.availity.core.factory('avPermissionsResource', PermissionFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-coverages.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avCoveragesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations', cache: false});\n  });\n\n})(window);\n\n// Source: /lib/core/api/api-configurations.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avConfigurationsResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations'});\n  });\n\n})(window);\n\n// Source: /lib/core/api/api-log-messages.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var LogMessagesFactory = function(AvApiResource) {\n\n    var logMessagesResource = new AvApiResource({\n      version: '/v1',\n      url: '/log-messages'\n    });\n\n    var buildRequest = function(level, entries) {\n\n      var requestPayload = {};\n\n      if(entries.level) {\n        delete entries.level;\n      }\n\n      requestPayload.level = level;\n      requestPayload.entries = entries;\n\n      return requestPayload;\n    };\n\n    return {\n\n      debug: function(entries) {\n        return logMessagesResource.create(buildRequest('debug', entries));\n      },\n\n      info: function(entries) {\n        return logMessagesResource.create(buildRequest('info', entries));\n      },\n\n      warn: function(entries) {\n        return logMessagesResource.create(buildRequest('warn', entries));\n      },\n\n      error: function(entries) {\n        return logMessagesResource.create(buildRequest('error', entries));\n      }\n\n    };\n  };\n\n  availity.core.factory('avLogMessagesResource', LogMessagesFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-documents.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvDocumentsResourceFactory = function(AvApiResource) {\n\n    var AvDocumentsResource = function() {\n      AvApiResource.call(this, 'documents');\n    };\n\n    angular.extend(AvDocumentsResource.prototype, AvApiResource.prototype, {\n\n      getContents: function(id) {\n        var config = this._config();\n        config.url = this.getContentsUrl(id);\n        return this._request(config);\n      },\n\n      getContentsUrl: function(id) {\n        return this._getUrl(id) + '/contents';\n      }\n\n    });\n\n    return new AvDocumentsResource();\n\n  };\n\n  availity.core.factory('avDocumentsResource', AvDocumentsResourceFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-organizations.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var OrganizationResourceFactory = function(AvApiResource) {\n\n    var OrganizationResource = function() {\n      AvApiResource.call(this, 'organizations');\n    };\n\n    angular.extend(OrganizationResource.prototype, AvApiResource.prototype, {\n\n      getOrganizations: function() {\n        return this.all().then(function(response) {\n          return response.data.organizations ? response.data.organizations : response.data;\n        });\n      }\n\n    });\n\n    return new OrganizationResource();\n  };\n\n  availity.core.factory('avOrganizationsResource', OrganizationResourceFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-codes.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avCodesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/codes'});\n  });\n\n})(window);\n\n// Source: /lib/core/session/session.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_SESSION', {\n    SESSION_TIMEOUT: 'av:auth:session:timeout',\n    NOT_AUTHORIZED: 'av:auth:not:authorized'\n  });\n\n  availity.core.factory('avSession', function($q, avUsersResource, avPermissionsResource) {\n\n    var AvSession = function() {\n      this.user = null;\n      this.permissions = null;\n    };\n\n    var proto = AvSession.prototype;\n\n    proto.getUser = function() {\n      var self = this;\n\n      if(this.user) {\n        return $q.when(this.user);\n      }\n\n      return avUsersResource.me().then(function(user) {\n        self.user = user;\n        return self.user;\n      });\n    };\n\n    proto.getPermissions = function() {\n      var self = this;\n\n      if(this.permissions) {\n        return $q.when(this.permissions);\n      }\n\n      return avPermissionsResource.all().then(function(permissions) {\n        self.permissions = permissions;\n        return self.permissions;\n      });\n    };\n\n    proto.hasPermission = function(permissionId, orgId, geography) {\n      return this.getPermissions().then(function(permissions) {\n        var permission = _.find(permissions, function(p) {\n          return p.id === permissionId;\n        });\n        if(permission === undefined) {\n          return false;\n        }\n\n        if(orgId !== undefined && orgId !== null && !_.contains(permission.organizationIds, orgId)) {\n          return false;\n        }\n\n        if(geography !== undefined && geography !== null && !_.contains(permission.geographies, geography)) {\n          return false;\n        }\n\n        return true;\n      });\n    };\n\n    proto.destroy = function() {\n      this.user = null;\n      this.permisions = null;\n    };\n\n    return new AvSession();\n  });\n\n})(window);\n\n// Source: /lib/core/idle/idle.js\n// Inspiration => https://github.com/HackedByChinese/ng-idle\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_IDLE', {\n    EVENTS: {\n      INACTIVE: 'av:idle:inactive',\n      ACTIVE: 'av:idle:active',\n      SESSION_TIMEOUT_ACTIVE: 'av:idle:session:active',\n      SESSION_TIMEOUT_INACTIVE: 'av:idle:session:inactive',\n      HUMAN: 'keydown mousemove DOMMouseScroll mousewheel mousedown scroll',\n      MACHINE: '$locationChangeSuccess'\n    },\n    INTERVALS: {\n      PING: 3 * 60 * 1000, // 3 minutes\n      IDLE: 25 * 60 * 1000, // 25 minutes\n      SESSION: 30 * 60 * 1000 // 30 minutes\n      // PING: 2000\n      // PING: 3 * 60 * 1000, // 3 minutes\n      // IDLE: 5000\n      // IDLE: 25 * 60 * 1000, // 25 minutes\n      // SESSION: 10000\n      // SESSION: 30 * 60 * 1000 // 30 minutes\n    },\n    URLS: {\n      HOME: '/availity/web/public.elegant.login',\n      PING: '/api/v1/users/me'\n    }\n  });\n\n  // Rules:\n  //\n  //  * ping after 3 minutes from last human activity\n  //  * reset session after api success except 401\n  //  * idle show after 25 of inactivity\n  //\n  availity.core.provider('avIdle', function() {\n\n    var enabled = true;\n    var pingUrl;\n\n\n    this.enable = function(value) {\n      if(arguments.length) {\n        enabled = !!value;\n      }\n      return enabled;\n    };\n\n    this.setPingUrl = function(url) {\n      pingUrl = url;\n    };\n\n    this.$get = function(AV_IDLE, $log, $document, $rootScope, $timeout, avThrottle, $q, $injector) {\n\n      var AvIdle = function() {\n\n        pingUrl = pingUrl || AV_IDLE.URLS.PING;\n\n        this._idleTimer = null;\n        this._sessionTimer = null;\n        this._pingTimer = null;\n        this.idleActive = false;\n\n        this.listeners = [];\n\n        this.init();\n\n      };\n\n      var proto = AvIdle.prototype;\n\n      proto.init = function() {\n\n        if(!enabled) {\n          this.onDisabled();\n          return;\n        }\n\n        $rootScope.$on('$destroy', function() {\n          proto.onDisabled();\n        });\n\n        this.onEnabled();\n      };\n\n      proto.onEnabled = function() {\n        var self = this;\n\n        var listener;\n\n        $document.find('body').on(AV_IDLE.EVENTS.HUMAN, function(event) {\n          self.onEvent(event);\n        });\n\n        listener = $rootScope.$on(AV_IDLE.EVENTS.MACHINE, function(event) {\n          self.onEvent(event);\n        });\n        this.listeners.push(listener);\n\n        listener = $rootScope.$on(AV_IDLE.EVENTS.INACTIVE, function() {\n          self.idleTimerInActive();\n        });\n        this.listeners.push(listener);\n\n        $rootScope.$on(AV_IDLE.EVENTS.SESSION_TIMEOUT_INACTIVE, function() {\n          self.onSessionInactive();\n        });\n\n\n        this.idleTimer();\n        this.sessionTimer();\n      };\n\n      proto.onDisabled = function() {\n\n        $document.find('body').off(AV_IDLE.EVENTS.HUMAN);\n\n        // turns off Angular event listeners => http://stackoverflow.com/a/14898795\n        _.each(this.listeners, function(listener) {\n          listener();\n        });\n\n        $timeout.cancel(this._sessionTimer);\n        $timeout.cancel(this._idleTimer);\n        this.cancelIdleTimer();\n      };\n\n      proto.cancelIdleTimer = function() {\n        $timeout.cancel(this._idleTimer);\n      };\n\n      proto.isEnabled = function() {\n        return enabled;\n      };\n\n      proto.enable = function(value) {\n        if(arguments.length) {\n          enabled = !!value;\n        }\n\n        return this;\n      };\n\n      proto.response = function(response) {\n        this.sessionTimer();\n        return response;\n      };\n\n      proto.responseError = function(response) {\n\n        if(response.status !== 401) {\n          this.sessionTimer();\n        }\n\n        return $q.reject(response);\n      };\n\n      proto.sessionTimer = function() {\n\n        var self = this;\n        $timeout.cancel(this._sessionTimer);\n\n        var later = function() {\n          self.onSessionActive();\n        };\n\n        this._sessionTimer = $timeout(later, AV_IDLE.INTERVALS.SESSION, false);\n\n      };\n\n      proto.idleTimer = function() {\n        var self = this;\n        $timeout.cancel(this._idleTimer);\n\n        var later = function() {\n          self.idleTimerActive();\n        };\n\n        this._idleTimer = $timeout(later, AV_IDLE.INTERVALS.IDLE, false);\n      };\n\n      proto.onSessionActive = function() {\n        $log.info('idle session active');\n        $rootScope.$broadcast(AV_IDLE.EVENTS.SESSION_TIMEOUT_ACTIVE);\n      };\n\n      proto.idleTimerActive = function() {\n        $log.info('idle active');\n        this.idleActive = true;\n        $rootScope.$broadcast(AV_IDLE.EVENTS.ACTIVE);\n      };\n\n      proto.idleTimerInActive = function() {\n        $log.info('idle inactive');\n        this.idleActive = false;\n      };\n\n      proto.onSessionInactive = function() {\n        $log.info('idle session inactive');\n        this.onDisabled();\n        document.location.href = AV_IDLE.URLS.HOME;\n      };\n\n      proto.ping = function() {\n\n        if(this.idleActive) {\n          this.unPing();\n          return;\n        }\n\n        if(!this._send) {\n          this._send = avThrottle(this.send, AV_IDLE.INTERVALS.PING, {context: this});\n        }\n\n        this._pingTimer = this._send();\n      };\n\n      proto.unPing = function() {\n        if(this._pingTimer) {\n          $timeout.cancel(this._pingTimer);\n        }\n      };\n\n      proto.send = function() {\n        $log.info('sending ping');\n        var $http = $injector.get('$http');\n        $http.get(pingUrl);\n      };\n\n      proto.onEvent = function() {\n        this.idleTimer();\n        this.ping();\n      };\n\n      return new AvIdle();\n\n    };\n\n  });\n\n})(window);\n\n// Source: /lib/core/idle/idle-interceptor.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avIdleInterceptor', function(avIdle) {\n    return {\n      response: function(response) {\n        return avIdle.response(response);\n      },\n      responseError: function(response) {\n        return avIdle.responseError(response);\n      }\n    };\n\n  });\n\n  availity.core.config(function($httpProvider) {\n    $httpProvider.interceptors.push('avIdleInterceptor');\n  });\n\n})(window);\n\n// Source: /lib/core/validation/validator.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.value('avValConfig', {\n    classes: {\n      valid: 'ng-valid',\n      invalid: 'ng-invalid',\n      dirty: 'ng-dirty',\n      pristine: 'ng-pristine',\n      touched: 'ng-touched',\n      untouched: 'ng-untouched',\n      submitted: 'ng-submitted'\n    },\n    validators: [\n      'avValPattern',\n      'avValSize',\n      'avValRequired',\n      'avValDateRange',\n      'avValDate'\n    ]\n  });\n\n  availity.core.constant('AV_VAL', {\n    EVENTS: {\n      REVALIDATE: 'av:val:revalidate',\n      SUBMITTED: 'av:val:submitted',\n      FAILED: 'av:val:failed',\n      RESET: 'av:val:reset'\n    },\n    DEBOUNCE: 500,\n    DATE_FORMAT: {\n      SIMPLE: 'MM/DD/YYYY'\n    },\n    PATTERNS: {\n      ALPHA_ONLY: /[^A-Za-z]+/g,\n      NUMERIC_ONLY: /[^0-9]+/g\n    }\n  });\n\n  availity.core.provider('avVal', function() {\n\n    var that = this;\n\n    this.rules = {};\n\n    this.addRules = function(rules) {\n      this.rules = angular.extend(this.rules, rules);\n    };\n\n    this.$get = function($injector, $rootScope, $http, $log, avValConfig, AV_VAL) {\n\n      var AvValidation = function() {\n        this.rules = that.rules;\n        this.validators = [];\n        this.initValidators();\n      };\n\n      var proto = AvValidation.prototype;\n\n      proto.initValidators = function() {\n        var self = this;\n\n        angular.forEach(avValConfig.validators, function(name) {\n          var validator = $injector.get(name);\n          self.validators[validator.name] = validator;\n        });\n      };\n\n      proto.clearAll = function() {\n        // this.validators.splice(0, this.validators.length);\n        // this.rules = {};\n      };\n\n      proto.addRules = function(rules) {\n        this.rules = angular.extend(this.rules, rules);\n        $rootScope.$broadcast(AV_VAL.EVENTS.REVALIDATE);\n      };\n\n      proto.validate = function(key, element, value, ruleName) {\n\n        var self = this;\n\n        var rules = this.rules[key];\n        if(!rules) {\n          $log.error('Failed to get rules key [' + key + '].  Forms must be tagged with a rules set name for validation to work.');\n          return;\n        }\n        var contraints = rules[ruleName];\n        if(!contraints) {\n          $log.info('Rule named [' + ruleName + '] could not be found in the current schema.');\n          contraints = [];\n        }\n\n        var el = element[0];\n        var results  = [];\n        var violations = [];\n        var _valid = true;\n\n        angular.forEach(contraints, function(rule, contraintName) {\n\n          if(!rule) {\n            // when extended rule sets, a user can pass nulls to cancel out a rule so if\n            // one doesn't exist just continue\n            return;\n          }\n\n          var validator = self.validators[contraintName];\n\n          if(angular.isUndefined(validator)) {\n            $log.warn('No validator defined for `' + name + '`');\n            return;\n          }\n\n          var valid = validator.validate(value, rule);\n\n          var validationResult = {\n            valid: valid,\n            ruleName: ruleName,\n            contraintName: contraintName,\n            value: value,\n            message: rule.message,\n            field: el.name || el.id\n          };\n\n          // $log.info(validationResult);\n\n          var result = angular.extend({}, rule, validationResult);\n\n          results.push(result);\n          if(!valid) {\n            violations.push(validationResult);\n          }\n          _valid = _valid && valid;\n        });\n\n        return {\n          isValid: _valid,\n          all: results, // all the constraint results\n          violations: violations\n        };\n\n      };\n\n      return new AvValidation();\n    };\n\n  });\n})(window);\n\n// Source: /lib/core/validation/validators/validator-utils.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValUtils', function() {\n\n    return {\n\n      isDefined: function(value) {\n        return angular.isDefined(value) && value !== '' && value !== null;\n      },\n\n      isEmpty: function(value) {\n        return !this.isDefined(value) || $.trim(value) === '';\n      }\n    };\n\n  });\n})(window);\n\n\n// Source: /lib/core/validation/validators/validator-size.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValSize', function(avValUtils) {\n\n    var validator =  {\n      name: 'size',\n      validate: function(value, rule) {\n        var minLength = rule.min || 0;\n        var maxLength = rule.max;\n\n        value = value || '';\n        return avValUtils.isEmpty(value) || value.length >= minLength && (maxLength === undefined || value.length <= maxLength);\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n\n// Source: /lib/core/validation/validators/validator-pattern.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValPattern', function(avValUtils) {\n\n    var validator =  {\n      name: 'pattern',\n      REGEX: /^\\/(.*)\\/([gim]*)$/, //regular expression to test a regular expression\n      asRegExp: function(pattern) {\n        var match;\n\n        if(pattern.test) {\n          return pattern;\n        } else {\n          match = pattern.match(validator.REGEX);\n          if(match) {\n            return new RegExp(match[1], match[2]);\n          } else {\n            throw ('Expected ' + pattern + ' to be a RegExp');\n          }\n        }\n      },\n      validate: function(value, rule) {\n        var values = _.isArray(rule.value) ? rule.value : [rule.value];\n\n        var valid = false;\n\n        _.each(values, function(expresion) {\n          var pattern = validator.asRegExp(expresion);\n          if(avValUtils.isEmpty(value) || pattern.test(value)) {\n            valid = true;\n          }\n        });\n\n        return valid;\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n\n// Source: /lib/core/validation/validators/validator-required.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValRequired', function(avValUtils) {\n\n    var validator =  {\n      name: 'required',\n      validate: function(value) {\n        return !avValUtils.isEmpty(value);\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n\n// Source: /lib/core/validation/validators/validator-date-range.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDateRange', function(AV_VAL, avValUtils) {\n\n    var validator = {\n      name: 'dateRange',\n      getMinDate: function(minDate) {\n        var period = minDate.replace(AV_VAL.PATTERNS.ALPHA_ONLY, '');\n        var val = parseInt( minDate.replace(AV_VAL.PATTERNS.NUMERIC_ONLY, ''), 10);\n        var min = moment().subtract(val, period);\n        return min;\n      },\n      getMaxDate: function(maxDate) {\n        var max = moment();\n        var period = maxDate.replace(AV_VAL.PATTERNS.ALPHA_ONLY, '');\n        var val = parseInt( maxDate.replace(AV_VAL.PATTERNS.NUMERIC_ONLY, ''), 10);\n\n        if(maxDate !== 'today') {\n          max = moment().add(val, period);\n        } else {\n          max.set('hours', 23);\n          max.set('minutes', 59);\n          max.set('seconds', 59);\n        }\n        return max;\n      },\n      validation: function(value, rules) {\n        var minDate = validator.getMinDate(rules.min);\n        var maxDate = validator.getMaxDate(rules.max);\n        value = moment(value, rules.format);\n        return !value.isBefore(minDate) && !value.isAfter(maxDate);\n      },\n      validate: function(value, rule) {\n        return avValUtils.isEmpty(value) || validator.validation(value, rule);\n      }\n    };\n\n    return validator;\n  });\n})(window);\n\n// Source: /lib/core/validation/validators/validator-date-format.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDate', function(AV_VAL, avValUtils) {\n\n    var validator = {\n      name: 'dateFormat',\n      validate: function(value, rules) {\n\n        var format = rules && rules.format ? rules.format : AV_VAL.DATE_FORMAT.SIMPLE;\n\n        return avValUtils.isEmpty(value) || moment(value, format, true).isValid();\n      }\n    };\n    return validator;\n  });\n})(window);\n\n// Source: /lib/core/utils/globals.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_GLOBALS', function() {\n\n    return {\n\n      STATES: [\n        {\n          'name': 'Alabama',\n          'code': 'AL'\n        },\n        {\n          'name': 'Alaska',\n          'code': 'AK'\n        },\n        {\n          'name': 'Arizona',\n          'code': 'AZ'\n        },\n        {\n          'name': 'Arkansas',\n          'code': 'AR'\n        },\n        {\n          'name': 'California',\n          'code': 'CA'\n        },\n        {\n          'name': 'Colorado',\n          'code': 'CO'\n        },\n        {\n          'name': 'Connecticut',\n          'code': 'CT'\n        },\n        {\n          'name': 'Delaware',\n          'code': 'DE'\n        },\n        {\n          'name': 'District Of Columbia',\n          'code': 'DC'\n        },\n        {\n          'name': 'Florida',\n          'code': 'FL'\n        },\n        {\n          'name': 'Georgia',\n          'code': 'GA'\n        },\n        {\n          'name': 'Hawaii',\n          'code': 'HI'\n        },\n        {\n          'name': 'Idaho',\n          'code': 'ID'\n        },\n        {\n          'name': 'Illinois',\n          'code': 'IL'\n        },\n        {\n          'name': 'Indiana',\n          'code': 'IN'\n        },\n        {\n          'name': 'Iowa',\n          'code': 'IA'\n        },\n        {\n          'name': 'Kansas',\n          'code': 'KS'\n        },\n        {\n          'name': 'Kentucky',\n          'code': 'KY'\n        },\n        {\n          'name': 'Louisiana',\n          'code': 'LA'\n        },\n        {\n          'name': 'Maine',\n          'code': 'ME'\n        },\n        {\n          'name': 'Maryland',\n          'code': 'MD'\n        },\n        {\n          'name': 'Massachusetts',\n          'code': 'MA'\n        },\n        {\n          'name': 'Michigan',\n          'code': 'MI'\n        },\n        {\n          'name': 'Minnesota',\n          'code': 'MN'\n        },\n        {\n          'name': 'Mississippi',\n          'code': 'MS'\n        },\n        {\n          'name': 'Missouri',\n          'code': 'MO'\n        },\n        {\n          'name': 'Montana',\n          'code': 'MT'\n        },\n        {\n          'name': 'Nebraska',\n          'code': 'NE'\n        },\n        {\n          'name': 'Nevada',\n          'code': 'NV'\n        },\n        {\n          'name': 'New Hampshire',\n          'code': 'NH'\n        },\n        {\n          'name': 'New Jersey',\n          'code': 'NJ'\n        },\n        {\n          'name': 'New Mexico',\n          'code': 'NM'\n        },\n        {\n          'name': 'New York',\n          'code': 'NY'\n        },\n        {\n          'name': 'North Carolina',\n          'code': 'NC'\n        },\n        {\n          'name': 'North Dakota',\n          'code': 'ND'\n        },\n        {\n          'name': 'Ohio',\n          'code': 'OH'\n        },\n        {\n          'name': 'Oklahoma',\n          'code': 'OK'\n        },\n        {\n          'name': 'Oregon',\n          'code': 'OR'\n        },\n        {\n          'name': 'Pennsylvania',\n          'code': 'PA'\n        },\n        {\n          'name': 'Rhode Island',\n          'code': 'RI'\n        },\n        {\n          'name': 'South Carolina',\n          'code': 'SC'\n        },\n        {\n          'name': 'South Dakota',\n          'code': 'SD'\n        },\n        {\n          'name': 'Tennessee',\n          'code': 'TN'\n        },\n        {\n          'name': 'Texas',\n          'code': 'TX'\n        },\n        {\n          'name': 'Utah',\n          'code': 'UT'\n        },\n        {\n          'name': 'Vermont',\n          'code': 'VT'\n        },\n        {\n          'name': 'Virginia',\n          'code': 'VA'\n        },\n        {\n          'name': 'Washington',\n          'code': 'WA'\n        },\n        {\n          'name': 'West Virginia',\n          'code': 'WV'\n        },\n        {\n          'name': 'Wisconsin',\n          'code': 'WI'\n        },\n        {\n          'name': 'Wyoming',\n          'code': 'WY'\n        }\n      ]\n    };\n\n  });\n\n})(window);\n\n//# sourceMappingURL=maps/availity-angular.js.map"],"sourceRoot":"/source/"}