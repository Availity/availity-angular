{"version":3,"sources":["/source/index.js","/source/strings.js","/source/uuid.js","/source/urls.js","/source/throttle.js","/source/logger.js","/source/logger-config.js","/source/polling.js","/source/api-factory.js","/source/api-users.js","/source/api-permissions.js","/source/api-coverages.js","/source/api-configurations.js","/source/api-log-messages.js","/source/api-documents.js","/source/api-organizations.js","/source/api-codes.js","/source/api-user-permissions.js","/source/user-authorizations.js","/source/session.js","/source/idle.js","/source/idle-interceptor.js","/source/validator.js","/source/validator-utils.js","/source/validator-size.js","/source/validator-pattern.js","/source/validator-required.js","/source/validator-date-range.js","/source/validator-date-format.js","/source/globals.js","availity-angular.js"],"names":["root","availity","VERSION","MODULE","core","angular","module","originalModule","modules","name","deps","_","indexOf","Error","push","exports","window","_stringify","object","isBlank","str","test","uid","uuid","prefix","index","length","digit","charCodeAt","join","String","fromCharCode","unshift","REGEX_API_URL","getRelativeUrl","url","result","match","constant","OPTIONS","wait","update","trailing","leading","factory","AV_THROTTLE","$timeout","fn","options","merge","THRESHOLD","isDefined","UPDATE","timer","context","this","args","arguments","apply","later","provider","_enabled","enabled","$get","$injector","AvLogger","$delegate","$log","proto","prototype","supplant","o","_supplant","a","b","r","replace","isObject","element","elemStr","isUndefined","constructor","toString","getFormattedTimestamp","date","getHours","getMinutes","getSeconds","getMilliseconds","_log","originalFn","hash","location","now","Date","message","supplantData","get","params","log","info","warn","debug","error","config","$provide","decorator","INTERVAL","MAX_ELAPSED_TIME","MAX_RETRY","DECAY","EVENTS","REGEX_URL","PollingServiceFactory","$rootScope","$q","AV_POLLING","AV_API","AvPollingService","pendingRequests","response","isAsyncResponse","onAsyncReponse","when","setDefaults","defaultOptions","pollingInterval","pollingDecay","pollingMaxInterval","pollingRetryCount","pollingStartTime","getTime","extend","responseError","reject","api","status","isFunction","headers","HEADERS","LOCATION","deferred","defer","queueRequest","notify","promise","getUrl","self","_url","_config","method","pollingMaxRetry","_pollingDecay","cache","request","id","timeout","getPollingTimeout","retryRequest","pushRequest","popRequest","i","splice","isPollingMaxTimeout","elaspedTime","isElapsed","isMaxRetried","isPollable","_isTimeout","_isMax","cancel","increment","successCallback","resolve","errorCallback","$http","then","incrementCounter","incrementDecay","clearRequests","forEach","ID","GLOBAL_ID","SESSION_ID","OVERRIDE","CALLBACK_URL","CUSTOMER_ID","path","version","level","suffix","ApiResourcesFactory","avPollingService","AvApiResource","isString","charAt","_getUrl","_getApiUrl","_createResponse","data","_request","afterCallback","success","_response","_promise","successResponse","call","errorResponse","notifyResponse","always","create","beforeCreate","afterCreate","afterGet","query","afterQuery","beforeUpdate","afterUpdate","remove","afterRemove","UserServiceFactory","AvUsersResource","user","me","PermissionFactory","AvPermissionsResource","afterAll","permissions","getPermissions","permissionId","LogMessagesFactory","logMessagesResource","buildRequest","entries","requestPayload","AvDocumentsResourceFactory","AvDocumentsResource","getContents","getContentsUrl","OrganizationResourceFactory","OrganizationResource","getOrganizations","organizations","AvUserPermissionsResourceFactory","AvUserPermissionsResource","sessionDate","moment","toISOString","axiUserPermissions","permissionIds","region","AvUserAuthorizationsFactory","avUserPermissionsResource","AvUserAuthorizations","setRegion","setPermissionIds","isArray","isAuthorized","getPermission","permission","isAnyAuthorized","findWhere","undefined","_permissions","union","toPermissionMap","getPayers","organizationId","organization","resources","map","slice","key","toPermission","description","geographies","SESSION_TIMEOUT","NOT_AUTHORIZED","avUsersResource","avPermissionsResource","AvSession","getUser","hasPermission","orgId","geography","find","p","contains","organizationIds","destroy","permisions","IDLE_INACTIVE","IDLE_ACTIVE","SESSION_TIMEOUT_ACTIVE","SESSION_TIMEOUT_REDIRECT","HUMAN","MACHINE","INTERVALS","PING","IDLE","SESSION","URLS","HOME","AV_IDLE","pingUrl","redirectUrl","sessionTimeout","idleTimeout","pingTimeout","enable","value","setSessionTimeout","setIdleTimeout","setPingTimeout","setPingUrl","$document","avThrottle","AvIdle","_idleTimer","_sessionTimer","_pingTimer","_keepAlive","idleActive","sessionActive","listeners","init","stop","start","listener","setRedirectUrl","$on","on","event","onEvent","oldUrl","newUrl","document","href","startIdleTimer","startSessionTimer","off","each","stopPing","stopSessionTimer","stopIdleTimer","isEnabled","isApiRequest","$broadcast","startPing","keepAlive","avIdle","$httpProvider","interceptors","classes","valid","invalid","dirty","pristine","touched","untouched","submitted","validators","REVALIDATE","SUBMITTED","FAILED","RESET","DEBOUNCE","DATE_FORMAT","SIMPLE","PATTERNS","ALPHA_ONLY","NUMERIC_ONLY","that","rules","addRules","avValConfig","AV_VAL","AvValidation","initValidators","validator","clearAll","validate","ruleName","contraints","el","results","violations","_valid","rule","contraintName","validationResult","field","isValid","all","isEmpty","$","trim","avValUtils","minLength","min","maxLength","max","REGEX","asRegExp","pattern","RegExp","values","expresion","getMinDate","minDate","period","val","parseInt","subtract","getMaxDate","maxDate","add","set","validation","format","isBefore","isAfter","STATES","code"],"mappings":"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","file":"availity-angular.min.js","sourcesContent":["/*global module*/\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity || {};\n  availity.VERSION = 'v0.0.0';\n  availity.MODULE = 'availity';\n  availity.core = angular.module(availity.MODULE, ['ng']);\n\n  var originalModule = angular.module;\n  var modules = [];\n\n  angular.module = function(name, deps) {\n\n    if(deps && _.indexOf(modules, name) !== -1 ) {\n      throw new Error('redefining module: ' + name);\n    }\n\n    modules.push(name);\n\n    return originalModule(name, deps);\n  };\n\n  root.availity = availity;\n\n  if(typeof module !== 'undefined' && module.exports) {\n    module.exports = availity;\n  }\n\n})(window);\n\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/helper/makeString.js\n  availity._stringify = function(object) {\n    if(object === null) {\n      return '';\n    }\n    return '' + object;\n  };\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/isBlank.js\n  availity.isBlank = function(str) {\n    return (/^\\s*$/).test(availity._stringify(str));\n  };\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var uid = ['0', '0', '0'];\n\n  availity.uuid = function(prefix) {\n    var index = uid.length;\n    var digit;\n\n    while(index) {\n      index--;\n      digit = uid[index].charCodeAt(0);\n      if(digit === 57 /*'9'*/) {\n        uid[index] = 'A';\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n      if(digit === 90  /*'Z'*/) {\n        uid[index] = '0';\n      } else {\n        uid[index] = String.fromCharCode(digit + 1);\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n    }\n    uid.unshift('0');\n    return prefix ? prefix + uid.join('') : uid.join('');\n  };\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.REGEX_API_URL = /^.*?api.availity.com(.*)$/;\n\n  availity.getRelativeUrl = function(url) {\n    var result = url.match(availity.REGEX_API_URL);\n    if(result && result[1]) {\n      return '/api' + result[1];\n    }\n\n    return url;\n  };\n\n})(window);\n","// Original => https://github.com/mgcrea/angular-strap/blob/master/src/helpers/debounce.js\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_THROTTLE', {\n    OPTIONS: {\n      wait: 1000,\n      update: false,\n      trailing: true,\n      leading: false\n    }\n  });\n\n  availity.core.factory('avThrottle', function(AV_THROTTLE, $timeout) {\n\n    return function(fn, wait, options) {\n\n      options = _.merge({}, AV_THROTTLE.OPTIONS, options);\n\n      wait = wait ? wait : AV_THROTTLE.THRESHOLD;\n      var update = angular.isDefined(options.update) ? options.update : AV_THROTTLE.UPDATE;\n      var timer = null;\n\n      return function() {\n        var context = options.context || this;\n        var args = arguments;\n\n        if(!timer) {\n          if(options.leading !== false) {\n            fn.apply(context, args);\n          }\n\n          var later = function() {\n            timer = null;\n            if(options.trailing !== false) {\n              fn.apply(context, args);\n            }\n          };\n\n          timer = $timeout(later, wait, update);\n        }\n\n        return timer;\n\n      };\n    };\n  });\n\n})(window);\n","// Orginal => https://github.com/ericzon/angular-ny-logger/blob/0c594e864c93e7f33d36141200096bc6139ddde1/angular-ny-logger.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.provider('AvLogger', function() {\n\n    var _enabled = false;\n\n    this.enabled = function(enabled) {\n      _enabled = !!enabled;\n    };\n\n    this.$get = function($injector) {\n\n      var AvLogger = function(context, $delegate) {\n\n        this.context = context || '';\n        this.$log = $delegate;\n\n      };\n\n      var proto = AvLogger.prototype;\n\n      AvLogger.supplant = function(str, o) {\n\n        var _supplant = function (a, b) {\n          var r = o[b];\n          return r;\n        };\n\n        return str.replace(/\\{([^{}]*)\\}/g, _supplant);\n      };\n\n      AvLogger.isObject = function(element) {\n        var elemStr = ( !angular.isUndefined(element) && !angular.isUndefined(element.constructor) ) ? element.constructor.toString() : '';\n        return (elemStr.indexOf('Object') > -1);\n      };\n\n      AvLogger.getFormattedTimestamp = function(date) {\n\n        return AvLogger.supplant('{0}:{1}:{2}:{3}', [\n          date.getHours(),\n          date.getMinutes(),\n          date.getSeconds(),\n          date.getMilliseconds()\n        ]);\n\n      };\n\n      proto._log = function(originalFn, args) {\n\n        // Allow enabling logger through query params\n        // Ex:\n        //\n        // http://localhost:3000/ui.html#avLogger\n\n        var hash = window.location.hash;\n        hash = hash || '';\n\n        if(!_enabled && hash.indexOf('avLogger') < 0 && originalFn !== 'error') {\n          return;\n        }\n\n        var now  = AvLogger.getFormattedTimestamp(new Date());\n        var message = '';\n        var supplantData = [];\n\n        var context = this.context ? ' [' + this.context + '] ' : '';\n\n        switch(args.length) {\n          case 1:\n            // (1) If the user supplied one argument, then the argument must be\n            // the message itself and _log()\n            // will print: <timestamp> - <context>: <message>\n            supplantData = args[0];\n            message = AvLogger.supplant('{0}{1} - {2}', [now, context, args[0]]);\n            break;\n          case 3:\n            // (3) If the user supplied three arguments, then the first argument\n            // is a method name, the second is the message and the third is an\n            // object of variables to interpolate with the message. For this, _log()\n            // will print: <timestamp> - <context> - <method name>('<message>')\n            supplantData = args[2];\n            message = AvLogger.supplant(\"{0}{1} - {2}(\\'{3}\\')\", [now, context, args[0], args[1]]);\n            break;\n          case 2:\n            // (2) If the user provided two arguments, we need to find out whether\n            // they supplied a method name or an interpolation object.\n            // In order to figure that out, we’ll check the type of the last argument.\n            // If it is a string, then it has to be the message itself while the\n            // first argument is the method name. Otherwise consider the first argument\n            // as the message and the second as array of interpolation variables.\n            // The output print will be according to this check.\n            if(typeof args[1] === 'string') {\n              message = AvLogger.supplant(\"{0}{1} - {2}(\\'{3}\\')\", [now, context, args[0], args[1]]);\n            } else {\n              supplantData = args[1];\n              message = AvLogger.supplant('{0}{1} - {2}', [now, context, args[0]]);\n            }\n            break;\n        }\n\n        var $log = this.$log || $injector.get('$log');\n\n        var params = (AvLogger.isObject(supplantData)) ? [message, supplantData] : [AvLogger.supplant(message, supplantData)];\n        $log[originalFn].apply(null, params);\n\n      };\n\n      proto.log = function() {\n        this._log('log', arguments);\n      };\n\n      proto.info = function() {\n        this._log('info', arguments);\n      };\n\n      proto.warn = function() {\n        this._log('warn', arguments);\n      };\n\n      proto.debug = function() {\n        this._log('debug', arguments);\n      };\n\n      proto.error = function() {\n        this._log('error', arguments);\n      };\n\n      return AvLogger;\n\n    };\n\n  });\n\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.config(function($provide) {\n\n    $provide.decorator('$log', function($delegate, AvLogger) {\n      return new AvLogger(null, $delegate);\n    });\n\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_POLLING', {\n    INTERVAL: 1000, // delay in ms before retrying an async request\n    MAX_ELAPSED_TIME: 5000, // max time in ms before polling stops and rejects original request\n    MAX_RETRY: 30, // # of times the request will be tried\n    DECAY: 1.2, // % the polling interval decays after every retry\n    // maximum time polling is allowed before rejecting the request\n    EVENTS: {\n      MAX_RETRY: 'av:polling:max:retry'\n    },\n    REGEX_URL: /^.*?api.availity.com(.*)$/ // capture the relative url from API\n  });\n\n  var PollingServiceFactory = function($rootScope, $q, $injector, $timeout, $log, AV_POLLING, AV_API) {\n\n    var AvPollingService = function() {\n      this.pendingRequests = []; // stores all request for polling\n    };\n\n    var proto = AvPollingService.prototype;\n\n    proto.response = function(response) {\n\n      if(this.isAsyncResponse(response)) {\n        return this.onAsyncReponse(response);\n      }\n\n      return response || $q.when(response);\n    };\n\n    proto.setDefaults = function(config) {\n\n      var defaultOptions = {\n        pollingInterval: AV_POLLING.INTERVAL,\n        pollingDecay: AV_POLLING.DECAY,\n        pollingMaxInterval: AV_POLLING.MAX_ELAPSED_TIME,\n        pollingRetryCount: 0,\n        pollingStartTime: new Date().getTime()\n      };\n\n      return _.extend(defaultOptions, config);\n    };\n\n    proto.responseError = function(response) {\n      // Return the promise rejection\n      return $q.reject(response);\n    };\n\n    /**\n     * API layer return a link with a polling url for\n     * async responses.\n     *\n     * @param  {Object}  response ajax response\n     * @return {Boolean} true if response has status of 202 (accepted) and location param in header with uri+session link\n     */\n    proto.isAsyncResponse = function(response) {\n\n      return response &&\n        response.config &&\n        response.config.api &&\n        response.status &&\n        response.status === 202 &&\n        angular.isFunction(response.headers) && !availity.isBlank(response.headers(AV_API.HEADERS.LOCATION));\n    };\n\n    proto.onAsyncReponse = function(response) {\n\n      response.config = this.setDefaults(response.config);\n\n      var deferred = $q.defer();\n\n      this.queueRequest(deferred, response);\n\n      // [rm3]: Can't call notify before you return promise object?\n      $timeout(function() {\n        // Notify deferred listeners with the original server response\n        deferred.notify(response);\n      }, 0, false);\n\n      return deferred.promise;\n    };\n\n    proto.getUrl = function(url) {\n\n      var result = url.match(AV_POLLING.REGEX_URL);\n      if(result && result[1]) {\n        return '/api' + result[1];\n      }\n\n      return url;\n    };\n\n    proto.queueRequest = function(deferred, response) {\n\n      var self = this;\n      // server replies with location header so set the url into config\n      var _url = availity.getRelativeUrl(response.headers(AV_API.HEADERS.LOCATION));\n      var _config = response.config;\n\n      var config = {\n        method: 'GET',\n        api: true,\n        pollingInterval: _config.pollingInterval,\n        pollingMaxRetry: _config.pollingMaxRetry,\n        pollingMaxInterval: _config.pollingMaxInterval,\n        pollingStartTime: _config.pollingStartTime,\n        _pollingDecay: _config._pollingDecay,\n        pollingRetryCount: _config.pollingRetryCount,\n        pollingDecay: _config.pollingDecay,\n        url: _url, /* set the url from the server response */\n        cache: false\n      };\n\n      var request = {\n        id: availity.uuid('request-'),\n        config: config,\n        deferred: deferred\n      };\n\n      var timeout = this.getPollingTimeout(config);\n\n      // each async request should run on its own timer\n      var timer = $timeout(function() {\n        self.retryRequest(request.id);\n      }, timeout, false);\n\n      request.timer = timer;\n\n      // add the async request to the queue\n      this.pushRequest(request);\n\n    };\n\n    proto.popRequest = function(id) {\n\n      var index = null;\n      var request = null;\n\n      for(var i = 0; i < this.pendingRequests.length; i++) {\n        if(this.pendingRequests[i].id === id) {\n          index = i;\n          break;\n        }\n      }\n\n      request = this.pendingRequests[index];\n      this.pendingRequests.splice(index, 1);\n\n      return request;\n    };\n\n    proto.pushRequest = function(request) {\n      this.pendingRequests.push(request);\n    };\n\n    proto.getPollingTimeout = function(config) {\n      return config.pollingDecay * config.pollingInterval;\n    };\n\n    proto.isPollingMaxTimeout = function(config) {\n      var now = new Date().getTime();\n      var elaspedTime = now - config.pollingStartTime;\n      var isElapsed = elaspedTime > config.pollingMaxInterval;\n      return isElapsed;\n    },\n\n      proto.isMaxRetried = function(config) {\n        return config.pollingRetryCount >= AV_POLLING.MAX_RETRY;\n      };\n\n    proto.isPollable = function(config) {\n      var _isTimeout = this.isPollingMaxTimeout(config);\n      var _isMax = this.isMaxRetried(config);\n\n      return _isTimeout || _isMax ? false : true;\n\n    };\n\n    proto.retryRequest = function(id) {\n\n      var self = this;\n      var request = this.popRequest(id);\n      $timeout.cancel(request.timer);\n\n      var config = request.config;\n\n      var deferred = request.deferred;\n\n      if(!this.isPollable(config)) {\n        $log.info('Rejecting pollable response due to timeout');\n        return deferred.reject(request);\n      }\n\n      // increment counters and polling timeouts\n      this.increment(config);\n\n      function successCallback(response) {\n        if(self.isAsyncResponse(response)) {\n          deferred.notify(response);\n          self.queueRequest(request.deferred, response);\n        } else {\n          deferred.resolve(response);\n        }\n      }\n\n      function errorCallback(response) {\n        deferred.reject(response);\n      }\n\n      // Silly circular dependency trick\n      var $http = $injector.get('$http');\n\n      $http(config).then(successCallback, errorCallback);\n\n    };\n\n    proto.increment = function(config) {\n      this.incrementCounter(config);\n      this.incrementDecay(config);\n    };\n\n    proto.incrementDecay = function(config) {\n      if(!config._pollingDecay) {\n        // store the original decay param\n        config._pollingDecay = config.pollingDecay;\n      }\n      config.pollingDecay *= config._pollingDecay;\n    };\n\n    proto.incrementCounter = function(config) {\n      config.pollingRetryCount++;\n    };\n\n    proto.clearRequests = function() {\n      angular.forEach(this.pendingRequests, function(request) {\n        $timeout.cancel(request.timer);\n      });\n      this.pendingRequests = [];\n    };\n\n    return new AvPollingService();\n\n  };\n\n  availity.core.factory('avPollingService', PollingServiceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_API', {\n    HEADERS: {\n      ID: 'X-API-ID',\n      GLOBAL_ID: 'X-Global-Transaction-ID',\n      SESSION_ID: 'X-Session-ID',\n      LOCATION: 'Location',\n      OVERRIDE: 'X-HTTP-Method-Override',\n      CALLBACK_URL: 'X-Callback-URL',\n      CUSTOMER_ID: 'X-Availity-Customer-ID'\n    }\n  });\n\n  var defaultOptions = {\n    // pre-prend the url with a value like `/public` so we can build urls like `public/api/v1/*`\n    prefix: '',\n    // default base url for endpoints\n    path: '/api',\n    // url to resource endpoint like `coverages` or `payers`\n    url: null,\n    // defaults to version 1\n    version: '/v1',\n    // governance level `/internal`\n    level: '',\n    // post-pend the url with `.json`, `.txt` or `.xml`\n    suffix: '',\n    // cache all request by default\n    cache: true,\n    // flag used to enable behaviors around the Availity Rest API\n    api: true,\n    // # of times the polling service has tried to get a response\n    pollingRetryCount: 0,\n    // in ms\n    pollingInterval: 1000,\n    // % the polling interval decays after every retry\n    pollingDecay: 1.2,\n    // maximum time polling is allowed before rejecting the request\n    pollingMaxInterval: 30000\n\n  };\n\n  // Factory that creates ApiResourcess\n  var ApiResourcesFactory = function($http, $q, avPollingService) {\n\n    var AvApiResource = function(options) {\n\n      if(!options) {\n        throw new Error('[options] cannot be null or undefined');\n      }\n\n      // if string the assume url is being passed in\n      if(angular.isString(options)) {\n        options = options.charAt(0) === '/' ? options : '/' + options;\n        options = angular.extend({}, {url: options});\n      }\n\n      if(!options.url) {\n        throw new Error('[url] cannot be null');\n      }\n\n      // get the default options and merge into this instance\n      this.options = angular.extend({}, defaultOptions, (options || {}));\n    };\n\n    // Alias the prototype\n    var proto = AvApiResource.prototype;\n\n    proto._config = function(config) {\n      return angular.extend({}, this.options, (config || {}));\n    },\n\n    proto._getUrl = function(id) {\n      if(this.options.api) {\n        return this._getApiUrl(id);\n      }\n\n      return this.options.url;\n    };\n\n    proto._createResponse = function(data, status, headers, config) {\n      return {\n        data: data,\n        status: status,\n        headers: headers,\n        config: config\n      };\n    };\n\n    proto._request = function(config, afterCallback) {\n\n      var self = this;\n      var defer = $q.defer();\n\n      $http(config)\n        .success(function(data, status, headers, _config) {\n\n          var _response = {\n            data: data,\n            status: status,\n            headers: headers,\n            config: _config\n          };\n\n          // handle the async response if applicable\n          var _promise = $q.when(avPollingService.response(_response));\n          // notify the promise listener of the original response\n          defer.notify(_response);\n\n          // handle the polling service promise\n          _promise.then(function(successResponse) {\n\n            // if service has a callback then call it\n            // var response = self._createResponse(data, status, headers, _config);\n            if(afterCallback) {\n              successResponse = afterCallback.call(self, successResponse);\n            }\n            defer.resolve(successResponse);\n          }, function(errorResponse) {\n            defer.reject(errorResponse);\n          }, function(notifyResponse) {\n            defer.notify(notifyResponse);\n          });\n\n        }).error(function(data, status, headers, _config) {\n          var response = self._createResponse(data, status, headers, _config);\n          defer.reject(response);\n        });\n\n      var promise = defer.promise;\n\n      // recreate the success callback ala $http\n      promise.success = function(fn) {\n        promise.then(function(response) {\n          fn(response.data, response.status, response.headers, response.config);\n        });\n        return promise;\n      };\n\n      // recreate the error callback ala $http\n      promise.error = function(fn) {\n        promise.then(null, function(response) {\n          fn(response.data, response.status, response.headers, config);\n        });\n        return promise;\n      };\n\n      promise.always = promise['finally'];\n\n      return promise;\n    };\n\n    proto._getApiUrl = function(id) {\n      id = id ? '/' + id : '';\n      return this.options.prefix + this.options.path + this.options.level + this.options.version + this.options.url + id + this.options.suffix;\n    };\n\n    proto.create = function(data, config) {\n\n      if(!data) {\n        throw new Error('called method without [data]');\n      }\n\n      if(this.beforeCreate) {\n        this.beforeCreate(this, data);\n      }\n\n      config = this._config(config);\n      config.method = 'POST';\n      config.url = this._getUrl();\n      config.data = data;\n\n      return this._request(config, this.afterCreate);\n\n    },\n\n\n    proto.get = function(id, config) {\n\n      if(!id) {\n        throw new Error('called method without [id]');\n      }\n\n      config = this._config(config);\n      config.method = 'GET';\n      config.url = this._getUrl(id);\n\n      return this._request(config, this.afterGet);\n\n    };\n\n    proto.query = function(config) {\n\n      config = this._config(config);\n      config.method = 'GET';\n      config.url = this._getUrl();\n\n      return this._request(config, this.afterQuery);\n\n    };\n\n    proto.update = function(id, data, config) {\n\n      if(!id || !data) {\n        throw new Error('called method without [id] or [data]');\n      }\n\n      config = this._config(config);\n      config.method = 'PUT';\n      config.url = this._getUrl(id);\n      config.data = data;\n\n      if(this.beforeUpdate) {\n        data = this.beforeUpdate(data);\n      }\n\n      return this._request(config, this.beforeUpdate, this.afterUpdate);\n\n\n    };\n\n    proto.remove = function(id, config) {\n      if(!id) {\n        throw new Error('called method without [id]');\n      }\n\n      config = this._config(config);\n      config.method = 'DELETE';\n      config.url = this._getUrl(id);\n\n      return this._request(config, this.afterRemove);\n    };\n\n    proto.beforeCreate = null;\n    proto.afterCreate = null;\n    proto.afterQuery = null;\n    proto.afterGet = null;\n    proto.beforeUpdate = null;\n    proto.afterUpdate = null;\n    proto.afterRemove = null;\n\n    return AvApiResource;\n\n  };\n\n  availity.core.factory('AvApiResource', ApiResourcesFactory);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  var UserServiceFactory = function(AvApiResource, $q) {\n\n    var AvUsersResource = function() {\n      this.user = null;\n      AvApiResource.call(this, 'users');\n    };\n\n    angular.extend(AvUsersResource.prototype, AvApiResource.prototype, {\n\n      afterGet: function(response) {\n        var user = response.data.user ? response.data.user : response.data;\n        this.user = user;\n        return user;\n      },\n\n      me: function() {\n\n        if(this.user) {\n          return $q.when(this.user);\n        }\n\n        return this.get('me');\n      }\n\n    });\n\n    return new AvUsersResource();\n\n  };\n\n  availity.core.factory('avUsersResource', UserServiceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var PermissionFactory = function(AvApiResource) {\n\n    var AvPermissionsResource = function() {\n      AvApiResource.call(this, {version: '/v1', url: '/permissions'});\n    };\n\n    angular.extend(AvPermissionsResource.prototype, AvApiResource.prototype, {\n\n      afterAll: function(response) {\n        return response.data.permissions ? response.data.permissions : response.data;\n      },\n\n      getPermissions: function(permissionId) {\n        return this.query({params: {permissionId: permissionId}}).then(function(response) {\n          var result = response.data.permissions ? response.data.permissions : [];\n          return result;\n        });\n      }\n\n    });\n    return new AvPermissionsResource();\n  };\n\n\n  root.availity.core.factory('avPermissionsResource', PermissionFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avCoveragesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations', cache: false});\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avConfigurationsResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations'});\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var LogMessagesFactory = function(AvApiResource) {\n\n    var logMessagesResource = new AvApiResource({\n      version: '/v1',\n      url: '/log-messages'\n    });\n\n    var buildRequest = function(level, entries) {\n\n      var requestPayload = {};\n\n      if(entries.level) {\n        delete entries.level;\n      }\n\n      requestPayload.level = level;\n      requestPayload.entries = entries;\n\n      return requestPayload;\n    };\n\n    return {\n\n      debug: function(entries) {\n        return logMessagesResource.create(buildRequest('debug', entries));\n      },\n\n      info: function(entries) {\n        return logMessagesResource.create(buildRequest('info', entries));\n      },\n\n      warn: function(entries) {\n        return logMessagesResource.create(buildRequest('warn', entries));\n      },\n\n      error: function(entries) {\n        return logMessagesResource.create(buildRequest('error', entries));\n      }\n\n    };\n  };\n\n  availity.core.factory('avLogMessagesResource', LogMessagesFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvDocumentsResourceFactory = function(AvApiResource) {\n\n    var AvDocumentsResource = function() {\n      AvApiResource.call(this, 'documents');\n    };\n\n    angular.extend(AvDocumentsResource.prototype, AvApiResource.prototype, {\n\n      getContents: function(id) {\n        var config = this._config();\n        config.url = this.getContentsUrl(id);\n        return this._request(config);\n      },\n\n      getContentsUrl: function(id) {\n        return this._getUrl(id) + '/contents';\n      }\n\n    });\n\n    return new AvDocumentsResource();\n\n  };\n\n  availity.core.factory('avDocumentsResource', AvDocumentsResourceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var OrganizationResourceFactory = function(AvApiResource) {\n\n    var OrganizationResource = function() {\n      AvApiResource.call(this, 'organizations');\n    };\n\n    angular.extend(OrganizationResource.prototype, AvApiResource.prototype, {\n\n      getOrganizations: function() {\n        return this.query().then(function(response) {\n          return response.data.organizations ? response.data.organizations : response.data;\n        });\n      }\n\n    });\n\n    return new OrganizationResource();\n  };\n\n  availity.core.factory('avOrganizationsResource', OrganizationResourceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avCodesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/codes'});\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvUserPermissionsResourceFactory = function(AvApiResource) {\n\n    var AvUserPermissionsResource = function() {\n      AvApiResource.call(this, {\n        level: '/internal',\n        version: '/v1',\n        url: '/axi-user-permissions'\n      });\n      this.sessionDate = moment().toISOString();\n    };\n\n    angular.extend(AvUserPermissionsResource.prototype, AvApiResource.prototype, {\n\n      afterQuery: function(response) {\n        return response.data.axiUserPermissions ? response.data.axiUserPermissions : [];\n      },\n\n      getPermissions: function(permissionIds, region) {\n        var self = this;\n        return this.query({\n          params: {\n            permissionId: permissionIds,\n            region: region,\n            sessionDate: self.sessionDate\n          }\n        });\n      }\n\n    });\n\n    return new AvUserPermissionsResource();\n\n  };\n\n  availity.core.factory('avUserPermissionsResource', AvUserPermissionsResourceFactory);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvUserAuthorizationsFactory = function($q, $log, avUserPermissionsResource) {\n\n    /**\n     *\n     * @constructor\n     */\n    var AvUserAuthorizations = function() {\n      /**\n       * Region is used to return permission/resources relative to region. If null service will\n       * return all permission relative to current.  If value 'ALL' used it will return value relative\n       * to all regions the user has access to.\n       * @type {string}\n       */\n      this.region = null;\n      /**\n       * PermissionIds contains the set of permissionIds to request from service. If user of service calls\n       * setPermissionIds() or call getPermissions() with complete set of permissionIds needed by application,\n       * then service should only make that one hit to retrieve permission information.\n       * @type {Array}\n       */\n      this.permissionIds = [];\n    };\n\n    var proto = AvUserAuthorizations.prototype;\n\n    proto.setRegion = function(region) {\n      this.region = region;\n      return this;\n    };\n\n    proto.setPermissionIds = function(permissionIds) {\n      if(!angular.isArray(permissionIds)) {\n        throw new Error('permissionsIds must be an array of string IDs for avUserAuthorizations#addPermissionIds');\n      }\n      this.permissionIds = permissionIds;\n      return this;\n    };\n\n    proto.isAuthorized = function(permissionId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        return permission.isAuthorized;\n      });\n    };\n\n    proto.isAnyAuthorized = function(permissionIds) {\n      return this.getPermissions(permissionIds).then(function(permissions) {\n        var permission = _.findWhere(permissions, {isAuthorized: true});\n        return permission !== undefined;\n      });\n    };\n\n    proto.getPermission = function(permissionId) {\n      if(!angular.isString(permissionId)) {\n        throw new Error('permissionsId must be a string ID for avUserAuthorizations#getPermission');\n      }\n\n      return this.getPermissions([permissionId])\n        .then(function(_permissions) {\n          return _permissions[permissionId];\n        });\n    };\n\n    proto.getPermissions = function(permissionIds) {\n      var self = this;\n\n      if(!angular.isArray(permissionIds)) {\n        throw new Error('permissionsIds must be an array of string IDs for avUserAuthorizations#getPermissions');\n      }\n      // merge permission ids to reduce calls to backend\n      self.permissionIds = _.union(self.permissionIds, permissionIds);\n\n      return avUserPermissionsResource\n        .getPermissions(self.permissionIds, self.region)\n        .then(function(_permissions) {\n          return self.toPermissionMap(permissionIds, _permissions);\n        });\n    };\n\n    proto.getOrganizations = function(permissionId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        return permission.organizations;\n      });\n    };\n\n    proto.getPayers = function(permissionId, organizationId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        var organization = _.findWhere(permission.organizations, {id: organizationId});\n\n        if(organization && organization.resources) {\n          return organization.resources;\n        }\n        return [];\n      });\n\n    };\n\n    /**\n     * Converts array permissions to map with value for each permissionId, creating empty permission\n     * if can't find permission in array\n     * @private\n     */\n    proto.toPermissionMap = function(permissionIds, permissions) {\n      var self = this;\n      var map = {};\n      permissions = _.slice(permissions);\n      _.forEach(permissionIds, function(permissionId) {\n        var key = {id: permissionId};\n        var permission = _.findWhere(permissions, key);\n        permission = permission ? self.toPermission(permission) : self.toPermission(key);\n        map[permission.id] = permission;\n      });\n      return map;\n    };\n\n    /**\n     * Convert a permission resource into a structure that is easier to work with.\n     * @private\n     */\n    proto.toPermission = function(permission) {\n      return {\n        id: permission.id,\n        description: permission.description ? permission.description : '',\n        geographies: permission.geographies ? permission.geographies : [],\n        organizations: permission.organizations ? permission.organizations : [],\n        isAuthorized: permission.organizations ? permission.organizations.length > 0 : false\n      };\n    };\n\n    return new AvUserAuthorizations();\n\n  };\n\n  availity.core.factory('avUserAuthorizations', AvUserAuthorizationsFactory);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_SESSION', {\n    SESSION_TIMEOUT: 'av:auth:session:timeout',\n    NOT_AUTHORIZED: 'av:auth:not:authorized'\n  });\n\n  availity.core.factory('avSession', function($q, avUsersResource, avPermissionsResource) {\n\n    var AvSession = function() {\n      this.user = null;\n      this.permissions = null;\n    };\n\n    var proto = AvSession.prototype;\n\n    proto.getUser = function() {\n      var self = this;\n\n      if(this.user) {\n        return $q.when(this.user);\n      }\n\n      return avUsersResource.me().then(function(user) {\n        self.user = user;\n        return self.user;\n      });\n    };\n\n    proto.getPermissions = function() {\n      var self = this;\n\n      if(this.permissions) {\n        return $q.when(this.permissions);\n      }\n\n      return avPermissionsResource.query().then(function(permissions) {\n        self.permissions = permissions;\n        return self.permissions;\n      });\n    };\n\n    proto.hasPermission = function(permissionId, orgId, geography) {\n      return this.getPermissions().then(function(permissions) {\n        var permission = _.find(permissions, function(p) {\n          return p.id === permissionId;\n        });\n        if(permission === undefined) {\n          return false;\n        }\n\n        if(orgId !== undefined && orgId !== null && !_.contains(permission.organizationIds, orgId)) {\n          return false;\n        }\n\n        if(geography !== undefined && geography !== null && !_.contains(permission.geographies, geography)) {\n          return false;\n        }\n\n        return true;\n      });\n    };\n\n    proto.destroy = function() {\n      this.user = null;\n      this.permisions = null;\n    };\n\n    return new AvSession();\n  });\n\n})(window);\n","// Inspiration => https://github.com/HackedByChinese/ng-idle\n//\n// Rules:\n//\n//  * ping after 3 minutes from last human activity\n//  * reset session after api success except 401\n//  * idle show after 25 of inactivity\n//\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_IDLE', {\n    EVENTS: {\n      IDLE_INACTIVE: 'av:idle:inactive',\n      IDLE_ACTIVE: 'av:idle:active',\n      SESSION_TIMEOUT_ACTIVE: 'av:idle:session:active',\n      SESSION_TIMEOUT_REDIRECT: 'av:idle:session:redirect',\n      HUMAN: 'keydown.av.idle mousedown.av.idle keydown.av.idle',\n      MACHINE: '$locationChangeSuccess'\n    },\n    INTERVALS: {\n      PING: 3 * 60 * 1000, // 3 minutes\n      IDLE: 25 * 60 * 1000, // 25 minutes\n      SESSION: 30 * 60 * 1000 // 30 minutes\n    },\n    URLS: {\n      HOME: '/availity/web/public.elegant.login',\n      PING: '/api/v1/users/me'\n    }\n  });\n\n  availity.core.provider('avIdle', function(AV_IDLE) {\n\n    var enabled = true;\n    var pingUrl;\n    var redirectUrl;\n    var sessionTimeout;\n    var idleTimeout;\n    var pingTimeout;\n\n    this.enable = function(value) {\n      if(arguments.length) {\n        enabled = !!value;\n      }\n      return enabled;\n    };\n\n    this.setSessionTimeout = function(timeout) {\n      sessionTimeout = timeout || AV_IDLE.INTERVALS.SESSION;\n    };\n\n    this.setIdleTimeout = function(timeout) {\n      idleTimeout = timeout || AV_IDLE.INTERVALS.IDLE;\n    };\n\n    this.setPingTimeout = function(timeout) {\n      pingTimeout = timeout || AV_IDLE.INTERVALS.PING;\n    };\n\n    this.setPingUrl = function(url) {\n      pingUrl = url || AV_IDLE.URLS.PING;\n    };\n\n    this.$get = function(AV_IDLE, $log, $document, $rootScope, $timeout, avThrottle, $q, $injector) {\n\n      var AvIdle = function() {\n\n        // $timeout references\n        this._idleTimer = null;\n        this._sessionTimer = null;\n        this._pingTimer = null;\n        this._keepAlive = null;\n\n        // flag used to track if the if user is idle or session expired\n        this.idleActive = false;\n        this.sessionActive = false;\n\n        this.listeners = [];\n\n        this.init();\n\n      };\n\n      var proto = AvIdle.prototype;\n\n      proto.init = function() {\n\n        if(!enabled) {\n          this.stop();\n          return;\n        }\n\n        this.start();\n      };\n\n      proto.start = function() {\n\n        $log.info('avIdle start');\n\n        var self = this;\n        var listener;\n\n        !sessionTimeout && this.setSessionTimeout();\n        !idleTimeout && this.setIdleTimeout();\n        !pingTimeout && this.setPingTimeout();\n        !pingUrl && this.setPingUrl();\n        !redirectUrl && this.setRedirectUrl();\n\n        $rootScope.$on('$destroy', function() {\n          self.stop();\n        });\n\n        $document.find('body').on(AV_IDLE.EVENTS.HUMAN, function(event) {\n          self.onEvent(event);\n        });\n\n        listener = $rootScope.$on(AV_IDLE.EVENTS.MACHINE, function(event, oldUrl, newUrl) {\n          if(oldUrl !== newUrl) {\n            self.onEvent(event);\n          }\n        });\n        this.listeners.push(listener);\n\n        $rootScope.$on(AV_IDLE.EVENTS.SESSION_TIMEOUT_REDIRECT, function() {\n          document.location.href = redirectUrl;\n        });\n\n        this.startIdleTimer();\n        this.startSessionTimer();\n      };\n\n      proto.stop = function() {\n\n        $document.find('body').off(AV_IDLE.EVENTS.HUMAN);\n\n        // turns off Angular event listeners @see http://stackoverflow.com/a/14898795\n        _.each(this.listeners, function(listener) {\n          listener();\n        });\n\n        this.stopPing();\n        this.stopSessionTimer();\n        this.stopIdleTimer();\n      };\n\n      proto.isEnabled = function() {\n        return enabled;\n      };\n\n      proto.enable = function(value) {\n        if(arguments.length) {\n          enabled = !!value;\n        }\n\n        return this;\n      };\n\n      proto.setSessionTimeout = function(timeout) {\n        sessionTimeout = timeout || AV_IDLE.INTERVALS.SESSION;\n        return this;\n      };\n\n      proto.setIdleTimeout = function(timeout) {\n        idleTimeout = timeout || AV_IDLE.INTERVALS.IDLE;\n        return this;\n      };\n\n      proto.setPingTimeout = function(timeout) {\n        pingTimeout = timeout || AV_IDLE.INTERVALS.PING;\n        return this;\n      };\n\n      proto.setPingUrl = function(url) {\n        pingUrl = url || AV_IDLE.URLS.PING;\n        return this;\n      };\n\n      proto.setRedirectUrl = function(url) {\n        redirectUrl = url || AV_IDLE.URLS.HOME;\n        return this;\n      };\n\n      proto.response = function(response) {\n\n        if(this.isApiRequest(response)) {\n          this.startSessionTimer();\n        }\n\n        return response;\n      };\n\n      proto.isApiRequest = function(response) {\n        return response && response.config && response.config.api;\n      };\n\n      proto.responseError = function(response) {\n\n        if(this.isApiRequest(response) && response.status !== 401) {\n          this.startSessionTimer();\n        }\n\n        if(this.isApiRequest() && response.status === 401) {\n          this.stopPing();\n        }\n\n        return $q.reject(response);\n      };\n\n      proto.startSessionTimer = function() {\n\n        var self = this;\n\n        this.stopSessionTimer();\n\n        var later = function() {\n          $log.info('avIdle session has TIMED OUT');\n          self.stop();\n          $rootScope.$broadcast(AV_IDLE.EVENTS.SESSION_TIMEOUT_ACTIVE);\n        };\n\n        $log.info('avIdle session timer has STARTED');\n        this._sessionTimer = $timeout(later, sessionTimeout, false);\n\n      };\n\n      proto.stopSessionTimer = function() {\n        $log.info('avIdle session timer has STOPPED');\n        $timeout.cancel(this._sessionTimer);\n      };\n\n      proto.startIdleTimer = function() {\n\n        var self = this;\n\n        this.stopIdleTimer();\n\n        var later = function() {\n          self.stopIdleTimer();\n          $log.info('avIdle is IDLING');\n          $rootScope.$broadcast(AV_IDLE.EVENTS.IDLE_ACTIVE);\n        };\n\n        $log.info('avIdle idle timer has STARTED');\n        this._idleTimer = $timeout(later, idleTimeout, false);\n      };\n\n      proto.stopIdleTimer = function() {\n        $log.info('avIdle idle timer has STOPPED');\n        $timeout.cancel(this._idleTimer);\n      };\n\n      proto.startPing = function() {\n\n        if(!this._keepAlive) {\n          $log.info('avIdle ping timer has STARTED');\n          this._keepAlive = avThrottle(this.keepAlive, pingTimeout, {context: this});\n        }\n\n        this._pingTimer = this._keepAlive();\n      };\n\n      proto.stopPing = function() {\n        $log.info('avIdle ping timer has STOPPED');\n        if(this._pingTimer) {\n          $timeout.cancel(this._pingTimer);\n        }\n      };\n\n      proto.keepAlive = function() {\n\n        // destroy the reference to that a new throttle gets created upon\n        // next user or system event\n        this._keepAlive = null;\n        var $http = $injector.get('$http');\n\n        $http.get(pingUrl, {\n          cache: false,\n          api: true\n        }).success(function() {\n          $log.info('avIdle keep-alive SUCCESS');\n        }).error(function() {\n          $log.error('avIdle keep-alive FAILURE');\n        });\n      };\n\n      proto.onEvent = function() {\n        this.startIdleTimer();\n        this.startPing();\n      };\n\n      return new AvIdle();\n\n    };\n\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avIdleInterceptor', function(avIdle) {\n    return {\n      response: function(response) {\n        return avIdle.response(response);\n      },\n      responseError: function(response) {\n        return avIdle.responseError(response);\n      }\n    };\n\n  });\n\n  availity.core.config(function($httpProvider) {\n    $httpProvider.interceptors.push('avIdleInterceptor');\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.value('avValConfig', {\n    classes: {\n      valid: 'ng-valid',\n      invalid: 'ng-invalid',\n      dirty: 'ng-dirty',\n      pristine: 'ng-pristine',\n      touched: 'ng-touched',\n      untouched: 'ng-untouched',\n      submitted: 'ng-submitted'\n    },\n    validators: [\n      'avValPattern',\n      'avValSize',\n      'avValRequired',\n      'avValDateRange',\n      'avValDate'\n    ]\n  });\n\n  availity.core.constant('AV_VAL', {\n    EVENTS: {\n      REVALIDATE: 'av:val:revalidate',\n      SUBMITTED: 'av:val:submitted',\n      FAILED: 'av:val:failed',\n      RESET: 'av:val:reset'\n    },\n    DEBOUNCE: 500,\n    DATE_FORMAT: {\n      SIMPLE: 'MM/DD/YYYY'\n    },\n    PATTERNS: {\n      ALPHA_ONLY: /[^A-Za-z]+/g,\n      NUMERIC_ONLY: /[^0-9]+/g\n    }\n  });\n\n  availity.core.provider('avVal', function() {\n\n    var that = this;\n\n    this.rules = {};\n\n    this.addRules = function(rules) {\n      this.rules = angular.extend(this.rules, rules);\n    };\n\n    this.$get = function($injector, $rootScope, $http, $log, avValConfig, AV_VAL) {\n\n      var AvValidation = function() {\n        this.rules = that.rules;\n        this.validators = [];\n        this.initValidators();\n      };\n\n      var proto = AvValidation.prototype;\n\n      proto.initValidators = function() {\n        var self = this;\n\n        angular.forEach(avValConfig.validators, function(name) {\n          var validator = $injector.get(name);\n          self.validators[validator.name] = validator;\n        });\n      };\n\n      proto.clearAll = function() {\n        // this.validators.splice(0, this.validators.length);\n        // this.rules = {};\n      };\n\n      proto.addRules = function(rules) {\n        this.rules = angular.extend(this.rules, rules);\n        $rootScope.$broadcast(AV_VAL.EVENTS.REVALIDATE);\n      };\n\n      proto.validate = function(key, element, value, ruleName) {\n\n        var self = this;\n\n        var rules = this.rules[key];\n        if(!rules) {\n          $log.error('Failed to get rules key [' + key + '].  Forms must be tagged with a rules set name for validation to work.');\n          return;\n        }\n        var contraints = rules[ruleName];\n        if(!contraints) {\n          $log.info('Rule named [' + ruleName + '] could not be found in the current schema.');\n          contraints = [];\n        }\n\n        var el = element[0];\n        var results  = [];\n        var violations = [];\n        var _valid = true;\n\n        angular.forEach(contraints, function(rule, contraintName) {\n\n          if(!rule) {\n            // when extended rule sets, a user can pass nulls to cancel out a rule so if\n            // one doesn't exist just continue\n            return;\n          }\n\n          var validator = self.validators[contraintName];\n\n          if(angular.isUndefined(validator)) {\n            $log.warn('No validator defined for `' + name + '`');\n            return;\n          }\n\n          var valid = validator.validate(value, rule);\n\n          var validationResult = {\n            valid: valid,\n            ruleName: ruleName,\n            contraintName: contraintName,\n            value: value,\n            message: rule.message,\n            field: el.name || el.id\n          };\n\n          // $log.info(validationResult);\n\n          var result = angular.extend({}, rule, validationResult);\n\n          results.push(result);\n          if(!valid) {\n            violations.push(validationResult);\n          }\n          _valid = _valid && valid;\n        });\n\n        return {\n          isValid: _valid,\n          all: results, // all the constraint results\n          violations: violations\n        };\n\n      };\n\n      return new AvValidation();\n    };\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValUtils', function() {\n\n    return {\n\n      isDefined: function(value) {\n        return angular.isDefined(value) && value !== '' && value !== null;\n      },\n\n      isEmpty: function(value) {\n        return !this.isDefined(value) || $.trim(value) === '';\n      }\n    };\n\n  });\n})(window);\n\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValSize', function(avValUtils) {\n\n    var validator =  {\n      name: 'size',\n      validate: function(value, rule) {\n        var minLength = rule.min || 0;\n        var maxLength = rule.max;\n\n        value = value || '';\n        return avValUtils.isEmpty(value) || value.length >= minLength && (maxLength === undefined || value.length <= maxLength);\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValPattern', function(avValUtils) {\n\n    var validator =  {\n      name: 'pattern',\n      REGEX: /^\\/(.*)\\/([gim]*)$/, //regular expression to test a regular expression\n      asRegExp: function(pattern) {\n        var match;\n\n        if(pattern.test) {\n          return pattern;\n        } else {\n          match = pattern.match(validator.REGEX);\n          if(match) {\n            return new RegExp(match[1], match[2]);\n          } else {\n            throw ('Expected ' + pattern + ' to be a RegExp');\n          }\n        }\n      },\n      validate: function(value, rule) {\n        var values = _.isArray(rule.value) ? rule.value : [rule.value];\n\n        var valid = false;\n\n        _.each(values, function(expresion) {\n          var pattern = validator.asRegExp(expresion);\n          if(avValUtils.isEmpty(value) || pattern.test(value)) {\n            valid = true;\n          }\n        });\n\n        return valid;\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValRequired', function(avValUtils) {\n\n    var validator =  {\n      name: 'required',\n      validate: function(value) {\n        return !avValUtils.isEmpty(value);\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDateRange', function(AV_VAL, avValUtils) {\n\n    var validator = {\n      name: 'dateRange',\n      getMinDate: function(minDate) {\n        var period = minDate.replace(AV_VAL.PATTERNS.ALPHA_ONLY, '');\n        var val = parseInt( minDate.replace(AV_VAL.PATTERNS.NUMERIC_ONLY, ''), 10);\n        var min = moment().subtract(val, period);\n        return min;\n      },\n      getMaxDate: function(maxDate) {\n        var max = moment();\n        var period = maxDate.replace(AV_VAL.PATTERNS.ALPHA_ONLY, '');\n        var val = parseInt( maxDate.replace(AV_VAL.PATTERNS.NUMERIC_ONLY, ''), 10);\n\n        if(maxDate !== 'today') {\n          max = moment().add(val, period);\n        } else {\n          max.set('hours', 23);\n          max.set('minutes', 59);\n          max.set('seconds', 59);\n        }\n        return max;\n      },\n      validation: function(value, rules) {\n        var minDate = validator.getMinDate(rules.min);\n        var maxDate = validator.getMaxDate(rules.max);\n        value = moment(value, rules.format);\n        return !value.isBefore(minDate) && !value.isAfter(maxDate);\n      },\n      validate: function(value, rule) {\n        return avValUtils.isEmpty(value) || validator.validation(value, rule);\n      }\n    };\n\n    return validator;\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDate', function(AV_VAL, avValUtils) {\n\n    var validator = {\n      name: 'dateFormat',\n      validate: function(value, rules) {\n\n        var format = rules && rules.format ? rules.format : AV_VAL.DATE_FORMAT.SIMPLE;\n\n        return avValUtils.isEmpty(value) || moment(value, format, true).isValid();\n      }\n    };\n    return validator;\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_GLOBALS', function() {\n\n    return {\n\n      STATES: [\n        {\n          'name': 'Alabama',\n          'code': 'AL'\n        },\n        {\n          'name': 'Alaska',\n          'code': 'AK'\n        },\n        {\n          'name': 'Arizona',\n          'code': 'AZ'\n        },\n        {\n          'name': 'Arkansas',\n          'code': 'AR'\n        },\n        {\n          'name': 'California',\n          'code': 'CA'\n        },\n        {\n          'name': 'Colorado',\n          'code': 'CO'\n        },\n        {\n          'name': 'Connecticut',\n          'code': 'CT'\n        },\n        {\n          'name': 'Delaware',\n          'code': 'DE'\n        },\n        {\n          'name': 'District Of Columbia',\n          'code': 'DC'\n        },\n        {\n          'name': 'Florida',\n          'code': 'FL'\n        },\n        {\n          'name': 'Georgia',\n          'code': 'GA'\n        },\n        {\n          'name': 'Hawaii',\n          'code': 'HI'\n        },\n        {\n          'name': 'Idaho',\n          'code': 'ID'\n        },\n        {\n          'name': 'Illinois',\n          'code': 'IL'\n        },\n        {\n          'name': 'Indiana',\n          'code': 'IN'\n        },\n        {\n          'name': 'Iowa',\n          'code': 'IA'\n        },\n        {\n          'name': 'Kansas',\n          'code': 'KS'\n        },\n        {\n          'name': 'Kentucky',\n          'code': 'KY'\n        },\n        {\n          'name': 'Louisiana',\n          'code': 'LA'\n        },\n        {\n          'name': 'Maine',\n          'code': 'ME'\n        },\n        {\n          'name': 'Maryland',\n          'code': 'MD'\n        },\n        {\n          'name': 'Massachusetts',\n          'code': 'MA'\n        },\n        {\n          'name': 'Michigan',\n          'code': 'MI'\n        },\n        {\n          'name': 'Minnesota',\n          'code': 'MN'\n        },\n        {\n          'name': 'Mississippi',\n          'code': 'MS'\n        },\n        {\n          'name': 'Missouri',\n          'code': 'MO'\n        },\n        {\n          'name': 'Montana',\n          'code': 'MT'\n        },\n        {\n          'name': 'Nebraska',\n          'code': 'NE'\n        },\n        {\n          'name': 'Nevada',\n          'code': 'NV'\n        },\n        {\n          'name': 'New Hampshire',\n          'code': 'NH'\n        },\n        {\n          'name': 'New Jersey',\n          'code': 'NJ'\n        },\n        {\n          'name': 'New Mexico',\n          'code': 'NM'\n        },\n        {\n          'name': 'New York',\n          'code': 'NY'\n        },\n        {\n          'name': 'North Carolina',\n          'code': 'NC'\n        },\n        {\n          'name': 'North Dakota',\n          'code': 'ND'\n        },\n        {\n          'name': 'Ohio',\n          'code': 'OH'\n        },\n        {\n          'name': 'Oklahoma',\n          'code': 'OK'\n        },\n        {\n          'name': 'Oregon',\n          'code': 'OR'\n        },\n        {\n          'name': 'Pennsylvania',\n          'code': 'PA'\n        },\n        {\n          'name': 'Rhode Island',\n          'code': 'RI'\n        },\n        {\n          'name': 'South Carolina',\n          'code': 'SC'\n        },\n        {\n          'name': 'South Dakota',\n          'code': 'SD'\n        },\n        {\n          'name': 'Tennessee',\n          'code': 'TN'\n        },\n        {\n          'name': 'Texas',\n          'code': 'TX'\n        },\n        {\n          'name': 'Utah',\n          'code': 'UT'\n        },\n        {\n          'name': 'Vermont',\n          'code': 'VT'\n        },\n        {\n          'name': 'Virginia',\n          'code': 'VA'\n        },\n        {\n          'name': 'Washington',\n          'code': 'WA'\n        },\n        {\n          'name': 'West Virginia',\n          'code': 'WV'\n        },\n        {\n          'name': 'Wisconsin',\n          'code': 'WI'\n        },\n        {\n          'name': 'Wyoming',\n          'code': 'WY'\n        }\n      ]\n    };\n\n  });\n\n})(window);\n","/**\n * availity-angular v0.7.1 -- May-10\n * Copyright 2015 Availity, LLC \n */\n\n// Source: /lib/core/index.js\n\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity || {};\n  availity.VERSION = 'v0.7.1';\n  availity.MODULE = 'availity';\n  availity.core = angular.module(availity.MODULE, ['ng']);\n\n  var originalModule = angular.module;\n  var modules = [];\n\n  angular.module = function(name, deps) {\n\n    if(deps && _.indexOf(modules, name) !== -1 ) {\n      throw new Error('redefining module: ' + name);\n    }\n\n    modules.push(name);\n\n    return originalModule(name, deps);\n  };\n\n  root.availity = availity;\n\n  if(typeof module !== 'undefined' && module.exports) {\n    module.exports = availity;\n  }\n\n})(window);\n\n\n// Source: /lib/core/utils/strings.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/helper/makeString.js\n  availity._stringify = function(object) {\n    if(object === null) {\n      return '';\n    }\n    return '' + object;\n  };\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/isBlank.js\n  availity.isBlank = function(str) {\n    return (/^\\s*$/).test(availity._stringify(str));\n  };\n\n})(window);\n\n// Source: /lib/core/utils/uuid.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var uid = ['0', '0', '0'];\n\n  availity.uuid = function(prefix) {\n    var index = uid.length;\n    var digit;\n\n    while(index) {\n      index--;\n      digit = uid[index].charCodeAt(0);\n      if(digit === 57 /*'9'*/) {\n        uid[index] = 'A';\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n      if(digit === 90  /*'Z'*/) {\n        uid[index] = '0';\n      } else {\n        uid[index] = String.fromCharCode(digit + 1);\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n    }\n    uid.unshift('0');\n    return prefix ? prefix + uid.join('') : uid.join('');\n  };\n\n})(window);\n\n// Source: /lib/core/utils/urls.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.REGEX_API_URL = /^.*?api.availity.com(.*)$/;\n\n  availity.getRelativeUrl = function(url) {\n    var result = url.match(availity.REGEX_API_URL);\n    if(result && result[1]) {\n      return '/api' + result[1];\n    }\n\n    return url;\n  };\n\n})(window);\n\n// Source: /lib/core/utils/throttle.js\n// Original => https://github.com/mgcrea/angular-strap/blob/master/src/helpers/debounce.js\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_THROTTLE', {\n    OPTIONS: {\n      wait: 1000,\n      update: false,\n      trailing: true,\n      leading: false\n    }\n  });\n\n  availity.core.factory('avThrottle', function(AV_THROTTLE, $timeout) {\n\n    return function(fn, wait, options) {\n\n      options = _.merge({}, AV_THROTTLE.OPTIONS, options);\n\n      wait = wait ? wait : AV_THROTTLE.THRESHOLD;\n      var update = angular.isDefined(options.update) ? options.update : AV_THROTTLE.UPDATE;\n      var timer = null;\n\n      return function() {\n        var context = options.context || this;\n        var args = arguments;\n\n        if(!timer) {\n          if(options.leading !== false) {\n            fn.apply(context, args);\n          }\n\n          var later = function() {\n            timer = null;\n            if(options.trailing !== false) {\n              fn.apply(context, args);\n            }\n          };\n\n          timer = $timeout(later, wait, update);\n        }\n\n        return timer;\n\n      };\n    };\n  });\n\n})(window);\n\n// Source: /lib/core/logger/logger.js\n// Orginal => https://github.com/ericzon/angular-ny-logger/blob/0c594e864c93e7f33d36141200096bc6139ddde1/angular-ny-logger.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.provider('AvLogger', function() {\n\n    var _enabled = false;\n\n    this.enabled = function(enabled) {\n      _enabled = !!enabled;\n    };\n\n    this.$get = function($injector) {\n\n      var AvLogger = function(context, $delegate) {\n\n        this.context = context || '';\n        this.$log = $delegate;\n\n      };\n\n      var proto = AvLogger.prototype;\n\n      AvLogger.supplant = function(str, o) {\n\n        var _supplant = function (a, b) {\n          var r = o[b];\n          return r;\n        };\n\n        return str.replace(/\\{([^{}]*)\\}/g, _supplant);\n      };\n\n      AvLogger.isObject = function(element) {\n        var elemStr = ( !angular.isUndefined(element) && !angular.isUndefined(element.constructor) ) ? element.constructor.toString() : '';\n        return (elemStr.indexOf('Object') > -1);\n      };\n\n      AvLogger.getFormattedTimestamp = function(date) {\n\n        return AvLogger.supplant('{0}:{1}:{2}:{3}', [\n          date.getHours(),\n          date.getMinutes(),\n          date.getSeconds(),\n          date.getMilliseconds()\n        ]);\n\n      };\n\n      proto._log = function(originalFn, args) {\n\n        // Allow enabling logger through query params\n        // Ex:\n        //\n        // http://localhost:3000/ui.html#avLogger\n\n        var hash = window.location.hash;\n        hash = hash || '';\n\n        if(!_enabled && hash.indexOf('avLogger') < 0 && originalFn !== 'error') {\n          return;\n        }\n\n        var now  = AvLogger.getFormattedTimestamp(new Date());\n        var message = '';\n        var supplantData = [];\n\n        var context = this.context ? ' [' + this.context + '] ' : '';\n\n        switch(args.length) {\n          case 1:\n            // (1) If the user supplied one argument, then the argument must be\n            // the message itself and _log()\n            // will print: <timestamp> - <context>: <message>\n            supplantData = args[0];\n            message = AvLogger.supplant('{0}{1} - {2}', [now, context, args[0]]);\n            break;\n          case 3:\n            // (3) If the user supplied three arguments, then the first argument\n            // is a method name, the second is the message and the third is an\n            // object of variables to interpolate with the message. For this, _log()\n            // will print: <timestamp> - <context> - <method name>('<message>')\n            supplantData = args[2];\n            message = AvLogger.supplant(\"{0}{1} - {2}(\\'{3}\\')\", [now, context, args[0], args[1]]);\n            break;\n          case 2:\n            // (2) If the user provided two arguments, we need to find out whether\n            // they supplied a method name or an interpolation object.\n            // In order to figure that out, we’ll check the type of the last argument.\n            // If it is a string, then it has to be the message itself while the\n            // first argument is the method name. Otherwise consider the first argument\n            // as the message and the second as array of interpolation variables.\n            // The output print will be according to this check.\n            if(typeof args[1] === 'string') {\n              message = AvLogger.supplant(\"{0}{1} - {2}(\\'{3}\\')\", [now, context, args[0], args[1]]);\n            } else {\n              supplantData = args[1];\n              message = AvLogger.supplant('{0}{1} - {2}', [now, context, args[0]]);\n            }\n            break;\n        }\n\n        var $log = this.$log || $injector.get('$log');\n\n        var params = (AvLogger.isObject(supplantData)) ? [message, supplantData] : [AvLogger.supplant(message, supplantData)];\n        $log[originalFn].apply(null, params);\n\n      };\n\n      proto.log = function() {\n        this._log('log', arguments);\n      };\n\n      proto.info = function() {\n        this._log('info', arguments);\n      };\n\n      proto.warn = function() {\n        this._log('warn', arguments);\n      };\n\n      proto.debug = function() {\n        this._log('debug', arguments);\n      };\n\n      proto.error = function() {\n        this._log('error', arguments);\n      };\n\n      return AvLogger;\n\n    };\n\n  });\n\n\n})(window);\n\n// Source: /lib/core/logger/logger-config.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.config(function($provide) {\n\n    $provide.decorator('$log', function($delegate, AvLogger) {\n      return new AvLogger(null, $delegate);\n    });\n\n  });\n\n})(window);\n\n// Source: /lib/core/polling/polling.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_POLLING', {\n    INTERVAL: 1000, // delay in ms before retrying an async request\n    MAX_ELAPSED_TIME: 5000, // max time in ms before polling stops and rejects original request\n    MAX_RETRY: 30, // # of times the request will be tried\n    DECAY: 1.2, // % the polling interval decays after every retry\n    // maximum time polling is allowed before rejecting the request\n    EVENTS: {\n      MAX_RETRY: 'av:polling:max:retry'\n    },\n    REGEX_URL: /^.*?api.availity.com(.*)$/ // capture the relative url from API\n  });\n\n  var PollingServiceFactory = function($rootScope, $q, $injector, $timeout, $log, AV_POLLING, AV_API) {\n\n    var AvPollingService = function() {\n      this.pendingRequests = []; // stores all request for polling\n    };\n\n    var proto = AvPollingService.prototype;\n\n    proto.response = function(response) {\n\n      if(this.isAsyncResponse(response)) {\n        return this.onAsyncReponse(response);\n      }\n\n      return response || $q.when(response);\n    };\n\n    proto.setDefaults = function(config) {\n\n      var defaultOptions = {\n        pollingInterval: AV_POLLING.INTERVAL,\n        pollingDecay: AV_POLLING.DECAY,\n        pollingMaxInterval: AV_POLLING.MAX_ELAPSED_TIME,\n        pollingRetryCount: 0,\n        pollingStartTime: new Date().getTime()\n      };\n\n      return _.extend(defaultOptions, config);\n    };\n\n    proto.responseError = function(response) {\n      // Return the promise rejection\n      return $q.reject(response);\n    };\n\n    /**\n     * API layer return a link with a polling url for\n     * async responses.\n     *\n     * @param  {Object}  response ajax response\n     * @return {Boolean} true if response has status of 202 (accepted) and location param in header with uri+session link\n     */\n    proto.isAsyncResponse = function(response) {\n\n      return response &&\n        response.config &&\n        response.config.api &&\n        response.status &&\n        response.status === 202 &&\n        angular.isFunction(response.headers) && !availity.isBlank(response.headers(AV_API.HEADERS.LOCATION));\n    };\n\n    proto.onAsyncReponse = function(response) {\n\n      response.config = this.setDefaults(response.config);\n\n      var deferred = $q.defer();\n\n      this.queueRequest(deferred, response);\n\n      // [rm3]: Can't call notify before you return promise object?\n      $timeout(function() {\n        // Notify deferred listeners with the original server response\n        deferred.notify(response);\n      }, 0, false);\n\n      return deferred.promise;\n    };\n\n    proto.getUrl = function(url) {\n\n      var result = url.match(AV_POLLING.REGEX_URL);\n      if(result && result[1]) {\n        return '/api' + result[1];\n      }\n\n      return url;\n    };\n\n    proto.queueRequest = function(deferred, response) {\n\n      var self = this;\n      // server replies with location header so set the url into config\n      var _url = availity.getRelativeUrl(response.headers(AV_API.HEADERS.LOCATION));\n      var _config = response.config;\n\n      var config = {\n        method: 'GET',\n        api: true,\n        pollingInterval: _config.pollingInterval,\n        pollingMaxRetry: _config.pollingMaxRetry,\n        pollingMaxInterval: _config.pollingMaxInterval,\n        pollingStartTime: _config.pollingStartTime,\n        _pollingDecay: _config._pollingDecay,\n        pollingRetryCount: _config.pollingRetryCount,\n        pollingDecay: _config.pollingDecay,\n        url: _url, /* set the url from the server response */\n        cache: false\n      };\n\n      var request = {\n        id: availity.uuid('request-'),\n        config: config,\n        deferred: deferred\n      };\n\n      var timeout = this.getPollingTimeout(config);\n\n      // each async request should run on its own timer\n      var timer = $timeout(function() {\n        self.retryRequest(request.id);\n      }, timeout, false);\n\n      request.timer = timer;\n\n      // add the async request to the queue\n      this.pushRequest(request);\n\n    };\n\n    proto.popRequest = function(id) {\n\n      var index = null;\n      var request = null;\n\n      for(var i = 0; i < this.pendingRequests.length; i++) {\n        if(this.pendingRequests[i].id === id) {\n          index = i;\n          break;\n        }\n      }\n\n      request = this.pendingRequests[index];\n      this.pendingRequests.splice(index, 1);\n\n      return request;\n    };\n\n    proto.pushRequest = function(request) {\n      this.pendingRequests.push(request);\n    };\n\n    proto.getPollingTimeout = function(config) {\n      return config.pollingDecay * config.pollingInterval;\n    };\n\n    proto.isPollingMaxTimeout = function(config) {\n      var now = new Date().getTime();\n      var elaspedTime = now - config.pollingStartTime;\n      var isElapsed = elaspedTime > config.pollingMaxInterval;\n      return isElapsed;\n    },\n\n      proto.isMaxRetried = function(config) {\n        return config.pollingRetryCount >= AV_POLLING.MAX_RETRY;\n      };\n\n    proto.isPollable = function(config) {\n      var _isTimeout = this.isPollingMaxTimeout(config);\n      var _isMax = this.isMaxRetried(config);\n\n      return _isTimeout || _isMax ? false : true;\n\n    };\n\n    proto.retryRequest = function(id) {\n\n      var self = this;\n      var request = this.popRequest(id);\n      $timeout.cancel(request.timer);\n\n      var config = request.config;\n\n      var deferred = request.deferred;\n\n      if(!this.isPollable(config)) {\n        $log.info('Rejecting pollable response due to timeout');\n        return deferred.reject(request);\n      }\n\n      // increment counters and polling timeouts\n      this.increment(config);\n\n      function successCallback(response) {\n        if(self.isAsyncResponse(response)) {\n          deferred.notify(response);\n          self.queueRequest(request.deferred, response);\n        } else {\n          deferred.resolve(response);\n        }\n      }\n\n      function errorCallback(response) {\n        deferred.reject(response);\n      }\n\n      // Silly circular dependency trick\n      var $http = $injector.get('$http');\n\n      $http(config).then(successCallback, errorCallback);\n\n    };\n\n    proto.increment = function(config) {\n      this.incrementCounter(config);\n      this.incrementDecay(config);\n    };\n\n    proto.incrementDecay = function(config) {\n      if(!config._pollingDecay) {\n        // store the original decay param\n        config._pollingDecay = config.pollingDecay;\n      }\n      config.pollingDecay *= config._pollingDecay;\n    };\n\n    proto.incrementCounter = function(config) {\n      config.pollingRetryCount++;\n    };\n\n    proto.clearRequests = function() {\n      angular.forEach(this.pendingRequests, function(request) {\n        $timeout.cancel(request.timer);\n      });\n      this.pendingRequests = [];\n    };\n\n    return new AvPollingService();\n\n  };\n\n  availity.core.factory('avPollingService', PollingServiceFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-factory.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_API', {\n    HEADERS: {\n      ID: 'X-API-ID',\n      GLOBAL_ID: 'X-Global-Transaction-ID',\n      SESSION_ID: 'X-Session-ID',\n      LOCATION: 'Location',\n      OVERRIDE: 'X-HTTP-Method-Override',\n      CALLBACK_URL: 'X-Callback-URL',\n      CUSTOMER_ID: 'X-Availity-Customer-ID'\n    }\n  });\n\n  var defaultOptions = {\n    // pre-prend the url with a value like `/public` so we can build urls like `public/api/v1/*`\n    prefix: '',\n    // default base url for endpoints\n    path: '/api',\n    // url to resource endpoint like `coverages` or `payers`\n    url: null,\n    // defaults to version 1\n    version: '/v1',\n    // governance level `/internal`\n    level: '',\n    // post-pend the url with `.json`, `.txt` or `.xml`\n    suffix: '',\n    // cache all request by default\n    cache: true,\n    // flag used to enable behaviors around the Availity Rest API\n    api: true,\n    // # of times the polling service has tried to get a response\n    pollingRetryCount: 0,\n    // in ms\n    pollingInterval: 1000,\n    // % the polling interval decays after every retry\n    pollingDecay: 1.2,\n    // maximum time polling is allowed before rejecting the request\n    pollingMaxInterval: 30000\n\n  };\n\n  // Factory that creates ApiResourcess\n  var ApiResourcesFactory = function($http, $q, avPollingService) {\n\n    var AvApiResource = function(options) {\n\n      if(!options) {\n        throw new Error('[options] cannot be null or undefined');\n      }\n\n      // if string the assume url is being passed in\n      if(angular.isString(options)) {\n        options = options.charAt(0) === '/' ? options : '/' + options;\n        options = angular.extend({}, {url: options});\n      }\n\n      if(!options.url) {\n        throw new Error('[url] cannot be null');\n      }\n\n      // get the default options and merge into this instance\n      this.options = angular.extend({}, defaultOptions, (options || {}));\n    };\n\n    // Alias the prototype\n    var proto = AvApiResource.prototype;\n\n    proto._config = function(config) {\n      return angular.extend({}, this.options, (config || {}));\n    },\n\n    proto._getUrl = function(id) {\n      if(this.options.api) {\n        return this._getApiUrl(id);\n      }\n\n      return this.options.url;\n    };\n\n    proto._createResponse = function(data, status, headers, config) {\n      return {\n        data: data,\n        status: status,\n        headers: headers,\n        config: config\n      };\n    };\n\n    proto._request = function(config, afterCallback) {\n\n      var self = this;\n      var defer = $q.defer();\n\n      $http(config)\n        .success(function(data, status, headers, _config) {\n\n          var _response = {\n            data: data,\n            status: status,\n            headers: headers,\n            config: _config\n          };\n\n          // handle the async response if applicable\n          var _promise = $q.when(avPollingService.response(_response));\n          // notify the promise listener of the original response\n          defer.notify(_response);\n\n          // handle the polling service promise\n          _promise.then(function(successResponse) {\n\n            // if service has a callback then call it\n            // var response = self._createResponse(data, status, headers, _config);\n            if(afterCallback) {\n              successResponse = afterCallback.call(self, successResponse);\n            }\n            defer.resolve(successResponse);\n          }, function(errorResponse) {\n            defer.reject(errorResponse);\n          }, function(notifyResponse) {\n            defer.notify(notifyResponse);\n          });\n\n        }).error(function(data, status, headers, _config) {\n          var response = self._createResponse(data, status, headers, _config);\n          defer.reject(response);\n        });\n\n      var promise = defer.promise;\n\n      // recreate the success callback ala $http\n      promise.success = function(fn) {\n        promise.then(function(response) {\n          fn(response.data, response.status, response.headers, response.config);\n        });\n        return promise;\n      };\n\n      // recreate the error callback ala $http\n      promise.error = function(fn) {\n        promise.then(null, function(response) {\n          fn(response.data, response.status, response.headers, config);\n        });\n        return promise;\n      };\n\n      promise.always = promise['finally'];\n\n      return promise;\n    };\n\n    proto._getApiUrl = function(id) {\n      id = id ? '/' + id : '';\n      return this.options.prefix + this.options.path + this.options.level + this.options.version + this.options.url + id + this.options.suffix;\n    };\n\n    proto.create = function(data, config) {\n\n      if(!data) {\n        throw new Error('called method without [data]');\n      }\n\n      if(this.beforeCreate) {\n        this.beforeCreate(this, data);\n      }\n\n      config = this._config(config);\n      config.method = 'POST';\n      config.url = this._getUrl();\n      config.data = data;\n\n      return this._request(config, this.afterCreate);\n\n    },\n\n\n    proto.get = function(id, config) {\n\n      if(!id) {\n        throw new Error('called method without [id]');\n      }\n\n      config = this._config(config);\n      config.method = 'GET';\n      config.url = this._getUrl(id);\n\n      return this._request(config, this.afterGet);\n\n    };\n\n    proto.query = function(config) {\n\n      config = this._config(config);\n      config.method = 'GET';\n      config.url = this._getUrl();\n\n      return this._request(config, this.afterQuery);\n\n    };\n\n    proto.update = function(id, data, config) {\n\n      if(!id || !data) {\n        throw new Error('called method without [id] or [data]');\n      }\n\n      config = this._config(config);\n      config.method = 'PUT';\n      config.url = this._getUrl(id);\n      config.data = data;\n\n      if(this.beforeUpdate) {\n        data = this.beforeUpdate(data);\n      }\n\n      return this._request(config, this.beforeUpdate, this.afterUpdate);\n\n\n    };\n\n    proto.remove = function(id, config) {\n      if(!id) {\n        throw new Error('called method without [id]');\n      }\n\n      config = this._config(config);\n      config.method = 'DELETE';\n      config.url = this._getUrl(id);\n\n      return this._request(config, this.afterRemove);\n    };\n\n    proto.beforeCreate = null;\n    proto.afterCreate = null;\n    proto.afterQuery = null;\n    proto.afterGet = null;\n    proto.beforeUpdate = null;\n    proto.afterUpdate = null;\n    proto.afterRemove = null;\n\n    return AvApiResource;\n\n  };\n\n  availity.core.factory('AvApiResource', ApiResourcesFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-users.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  var UserServiceFactory = function(AvApiResource, $q) {\n\n    var AvUsersResource = function() {\n      this.user = null;\n      AvApiResource.call(this, 'users');\n    };\n\n    angular.extend(AvUsersResource.prototype, AvApiResource.prototype, {\n\n      afterGet: function(response) {\n        var user = response.data.user ? response.data.user : response.data;\n        this.user = user;\n        return user;\n      },\n\n      me: function() {\n\n        if(this.user) {\n          return $q.when(this.user);\n        }\n\n        return this.get('me');\n      }\n\n    });\n\n    return new AvUsersResource();\n\n  };\n\n  availity.core.factory('avUsersResource', UserServiceFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-permissions.js\n(function(root) {\n\n  'use strict';\n\n  var PermissionFactory = function(AvApiResource) {\n\n    var AvPermissionsResource = function() {\n      AvApiResource.call(this, {version: '/v1', url: '/permissions'});\n    };\n\n    angular.extend(AvPermissionsResource.prototype, AvApiResource.prototype, {\n\n      afterAll: function(response) {\n        return response.data.permissions ? response.data.permissions : response.data;\n      },\n\n      getPermissions: function(permissionId) {\n        return this.query({params: {permissionId: permissionId}}).then(function(response) {\n          var result = response.data.permissions ? response.data.permissions : [];\n          return result;\n        });\n      }\n\n    });\n    return new AvPermissionsResource();\n  };\n\n\n  root.availity.core.factory('avPermissionsResource', PermissionFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-coverages.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avCoveragesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations', cache: false});\n  });\n\n})(window);\n\n// Source: /lib/core/api/api-configurations.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avConfigurationsResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations'});\n  });\n\n})(window);\n\n// Source: /lib/core/api/api-log-messages.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var LogMessagesFactory = function(AvApiResource) {\n\n    var logMessagesResource = new AvApiResource({\n      version: '/v1',\n      url: '/log-messages'\n    });\n\n    var buildRequest = function(level, entries) {\n\n      var requestPayload = {};\n\n      if(entries.level) {\n        delete entries.level;\n      }\n\n      requestPayload.level = level;\n      requestPayload.entries = entries;\n\n      return requestPayload;\n    };\n\n    return {\n\n      debug: function(entries) {\n        return logMessagesResource.create(buildRequest('debug', entries));\n      },\n\n      info: function(entries) {\n        return logMessagesResource.create(buildRequest('info', entries));\n      },\n\n      warn: function(entries) {\n        return logMessagesResource.create(buildRequest('warn', entries));\n      },\n\n      error: function(entries) {\n        return logMessagesResource.create(buildRequest('error', entries));\n      }\n\n    };\n  };\n\n  availity.core.factory('avLogMessagesResource', LogMessagesFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-documents.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvDocumentsResourceFactory = function(AvApiResource) {\n\n    var AvDocumentsResource = function() {\n      AvApiResource.call(this, 'documents');\n    };\n\n    angular.extend(AvDocumentsResource.prototype, AvApiResource.prototype, {\n\n      getContents: function(id) {\n        var config = this._config();\n        config.url = this.getContentsUrl(id);\n        return this._request(config);\n      },\n\n      getContentsUrl: function(id) {\n        return this._getUrl(id) + '/contents';\n      }\n\n    });\n\n    return new AvDocumentsResource();\n\n  };\n\n  availity.core.factory('avDocumentsResource', AvDocumentsResourceFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-organizations.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var OrganizationResourceFactory = function(AvApiResource) {\n\n    var OrganizationResource = function() {\n      AvApiResource.call(this, 'organizations');\n    };\n\n    angular.extend(OrganizationResource.prototype, AvApiResource.prototype, {\n\n      getOrganizations: function() {\n        return this.query().then(function(response) {\n          return response.data.organizations ? response.data.organizations : response.data;\n        });\n      }\n\n    });\n\n    return new OrganizationResource();\n  };\n\n  availity.core.factory('avOrganizationsResource', OrganizationResourceFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-codes.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avCodesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/codes'});\n  });\n\n})(window);\n\n// Source: /lib/core/api/api-user-permissions.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvUserPermissionsResourceFactory = function(AvApiResource) {\n\n    var AvUserPermissionsResource = function() {\n      AvApiResource.call(this, {\n        level: '/internal',\n        version: '/v1',\n        url: '/axi-user-permissions'\n      });\n      this.sessionDate = moment().toISOString();\n    };\n\n    angular.extend(AvUserPermissionsResource.prototype, AvApiResource.prototype, {\n\n      afterQuery: function(response) {\n        return response.data.axiUserPermissions ? response.data.axiUserPermissions : [];\n      },\n\n      getPermissions: function(permissionIds, region) {\n        var self = this;\n        return this.query({\n          params: {\n            permissionId: permissionIds,\n            region: region,\n            sessionDate: self.sessionDate\n          }\n        });\n      }\n\n    });\n\n    return new AvUserPermissionsResource();\n\n  };\n\n  availity.core.factory('avUserPermissionsResource', AvUserPermissionsResourceFactory);\n\n})(window);\n\n// Source: /lib/core/authorizations/user-authorizations.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvUserAuthorizationsFactory = function($q, $log, avUserPermissionsResource) {\n\n    /**\n     *\n     * @constructor\n     */\n    var AvUserAuthorizations = function() {\n      /**\n       * Region is used to return permission/resources relative to region. If null service will\n       * return all permission relative to current.  If value 'ALL' used it will return value relative\n       * to all regions the user has access to.\n       * @type {string}\n       */\n      this.region = null;\n      /**\n       * PermissionIds contains the set of permissionIds to request from service. If user of service calls\n       * setPermissionIds() or call getPermissions() with complete set of permissionIds needed by application,\n       * then service should only make that one hit to retrieve permission information.\n       * @type {Array}\n       */\n      this.permissionIds = [];\n    };\n\n    var proto = AvUserAuthorizations.prototype;\n\n    proto.setRegion = function(region) {\n      this.region = region;\n      return this;\n    };\n\n    proto.setPermissionIds = function(permissionIds) {\n      if(!angular.isArray(permissionIds)) {\n        throw new Error('permissionsIds must be an array of string IDs for avUserAuthorizations#addPermissionIds');\n      }\n      this.permissionIds = permissionIds;\n      return this;\n    };\n\n    proto.isAuthorized = function(permissionId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        return permission.isAuthorized;\n      });\n    };\n\n    proto.isAnyAuthorized = function(permissionIds) {\n      return this.getPermissions(permissionIds).then(function(permissions) {\n        var permission = _.findWhere(permissions, {isAuthorized: true});\n        return permission !== undefined;\n      });\n    };\n\n    proto.getPermission = function(permissionId) {\n      if(!angular.isString(permissionId)) {\n        throw new Error('permissionsId must be a string ID for avUserAuthorizations#getPermission');\n      }\n\n      return this.getPermissions([permissionId])\n        .then(function(_permissions) {\n          return _permissions[permissionId];\n        });\n    };\n\n    proto.getPermissions = function(permissionIds) {\n      var self = this;\n\n      if(!angular.isArray(permissionIds)) {\n        throw new Error('permissionsIds must be an array of string IDs for avUserAuthorizations#getPermissions');\n      }\n      // merge permission ids to reduce calls to backend\n      self.permissionIds = _.union(self.permissionIds, permissionIds);\n\n      return avUserPermissionsResource\n        .getPermissions(self.permissionIds, self.region)\n        .then(function(_permissions) {\n          return self.toPermissionMap(permissionIds, _permissions);\n        });\n    };\n\n    proto.getOrganizations = function(permissionId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        return permission.organizations;\n      });\n    };\n\n    proto.getPayers = function(permissionId, organizationId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        var organization = _.findWhere(permission.organizations, {id: organizationId});\n\n        if(organization && organization.resources) {\n          return organization.resources;\n        }\n        return [];\n      });\n\n    };\n\n    /**\n     * Converts array permissions to map with value for each permissionId, creating empty permission\n     * if can't find permission in array\n     * @private\n     */\n    proto.toPermissionMap = function(permissionIds, permissions) {\n      var self = this;\n      var map = {};\n      permissions = _.slice(permissions);\n      _.forEach(permissionIds, function(permissionId) {\n        var key = {id: permissionId};\n        var permission = _.findWhere(permissions, key);\n        permission = permission ? self.toPermission(permission) : self.toPermission(key);\n        map[permission.id] = permission;\n      });\n      return map;\n    };\n\n    /**\n     * Convert a permission resource into a structure that is easier to work with.\n     * @private\n     */\n    proto.toPermission = function(permission) {\n      return {\n        id: permission.id,\n        description: permission.description ? permission.description : '',\n        geographies: permission.geographies ? permission.geographies : [],\n        organizations: permission.organizations ? permission.organizations : [],\n        isAuthorized: permission.organizations ? permission.organizations.length > 0 : false\n      };\n    };\n\n    return new AvUserAuthorizations();\n\n  };\n\n  availity.core.factory('avUserAuthorizations', AvUserAuthorizationsFactory);\n\n})(window);\n\n// Source: /lib/core/session/session.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_SESSION', {\n    SESSION_TIMEOUT: 'av:auth:session:timeout',\n    NOT_AUTHORIZED: 'av:auth:not:authorized'\n  });\n\n  availity.core.factory('avSession', function($q, avUsersResource, avPermissionsResource) {\n\n    var AvSession = function() {\n      this.user = null;\n      this.permissions = null;\n    };\n\n    var proto = AvSession.prototype;\n\n    proto.getUser = function() {\n      var self = this;\n\n      if(this.user) {\n        return $q.when(this.user);\n      }\n\n      return avUsersResource.me().then(function(user) {\n        self.user = user;\n        return self.user;\n      });\n    };\n\n    proto.getPermissions = function() {\n      var self = this;\n\n      if(this.permissions) {\n        return $q.when(this.permissions);\n      }\n\n      return avPermissionsResource.query().then(function(permissions) {\n        self.permissions = permissions;\n        return self.permissions;\n      });\n    };\n\n    proto.hasPermission = function(permissionId, orgId, geography) {\n      return this.getPermissions().then(function(permissions) {\n        var permission = _.find(permissions, function(p) {\n          return p.id === permissionId;\n        });\n        if(permission === undefined) {\n          return false;\n        }\n\n        if(orgId !== undefined && orgId !== null && !_.contains(permission.organizationIds, orgId)) {\n          return false;\n        }\n\n        if(geography !== undefined && geography !== null && !_.contains(permission.geographies, geography)) {\n          return false;\n        }\n\n        return true;\n      });\n    };\n\n    proto.destroy = function() {\n      this.user = null;\n      this.permisions = null;\n    };\n\n    return new AvSession();\n  });\n\n})(window);\n\n// Source: /lib/core/idle/idle.js\n// Inspiration => https://github.com/HackedByChinese/ng-idle\n//\n// Rules:\n//\n//  * ping after 3 minutes from last human activity\n//  * reset session after api success except 401\n//  * idle show after 25 of inactivity\n//\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_IDLE', {\n    EVENTS: {\n      IDLE_INACTIVE: 'av:idle:inactive',\n      IDLE_ACTIVE: 'av:idle:active',\n      SESSION_TIMEOUT_ACTIVE: 'av:idle:session:active',\n      SESSION_TIMEOUT_REDIRECT: 'av:idle:session:redirect',\n      HUMAN: 'keydown.av.idle mousedown.av.idle keydown.av.idle',\n      MACHINE: '$locationChangeSuccess'\n    },\n    INTERVALS: {\n      PING: 3 * 60 * 1000, // 3 minutes\n      IDLE: 25 * 60 * 1000, // 25 minutes\n      SESSION: 30 * 60 * 1000 // 30 minutes\n    },\n    URLS: {\n      HOME: '/availity/web/public.elegant.login',\n      PING: '/api/v1/users/me'\n    }\n  });\n\n  availity.core.provider('avIdle', function(AV_IDLE) {\n\n    var enabled = true;\n    var pingUrl;\n    var redirectUrl;\n    var sessionTimeout;\n    var idleTimeout;\n    var pingTimeout;\n\n    this.enable = function(value) {\n      if(arguments.length) {\n        enabled = !!value;\n      }\n      return enabled;\n    };\n\n    this.setSessionTimeout = function(timeout) {\n      sessionTimeout = timeout || AV_IDLE.INTERVALS.SESSION;\n    };\n\n    this.setIdleTimeout = function(timeout) {\n      idleTimeout = timeout || AV_IDLE.INTERVALS.IDLE;\n    };\n\n    this.setPingTimeout = function(timeout) {\n      pingTimeout = timeout || AV_IDLE.INTERVALS.PING;\n    };\n\n    this.setPingUrl = function(url) {\n      pingUrl = url || AV_IDLE.URLS.PING;\n    };\n\n    this.$get = function(AV_IDLE, $log, $document, $rootScope, $timeout, avThrottle, $q, $injector) {\n\n      var AvIdle = function() {\n\n        // $timeout references\n        this._idleTimer = null;\n        this._sessionTimer = null;\n        this._pingTimer = null;\n        this._keepAlive = null;\n\n        // flag used to track if the if user is idle or session expired\n        this.idleActive = false;\n        this.sessionActive = false;\n\n        this.listeners = [];\n\n        this.init();\n\n      };\n\n      var proto = AvIdle.prototype;\n\n      proto.init = function() {\n\n        if(!enabled) {\n          this.stop();\n          return;\n        }\n\n        this.start();\n      };\n\n      proto.start = function() {\n\n        $log.info('avIdle start');\n\n        var self = this;\n        var listener;\n\n        !sessionTimeout && this.setSessionTimeout();\n        !idleTimeout && this.setIdleTimeout();\n        !pingTimeout && this.setPingTimeout();\n        !pingUrl && this.setPingUrl();\n        !redirectUrl && this.setRedirectUrl();\n\n        $rootScope.$on('$destroy', function() {\n          self.stop();\n        });\n\n        $document.find('body').on(AV_IDLE.EVENTS.HUMAN, function(event) {\n          self.onEvent(event);\n        });\n\n        listener = $rootScope.$on(AV_IDLE.EVENTS.MACHINE, function(event, oldUrl, newUrl) {\n          if(oldUrl !== newUrl) {\n            self.onEvent(event);\n          }\n        });\n        this.listeners.push(listener);\n\n        $rootScope.$on(AV_IDLE.EVENTS.SESSION_TIMEOUT_REDIRECT, function() {\n          document.location.href = redirectUrl;\n        });\n\n        this.startIdleTimer();\n        this.startSessionTimer();\n      };\n\n      proto.stop = function() {\n\n        $document.find('body').off(AV_IDLE.EVENTS.HUMAN);\n\n        // turns off Angular event listeners @see http://stackoverflow.com/a/14898795\n        _.each(this.listeners, function(listener) {\n          listener();\n        });\n\n        this.stopPing();\n        this.stopSessionTimer();\n        this.stopIdleTimer();\n      };\n\n      proto.isEnabled = function() {\n        return enabled;\n      };\n\n      proto.enable = function(value) {\n        if(arguments.length) {\n          enabled = !!value;\n        }\n\n        return this;\n      };\n\n      proto.setSessionTimeout = function(timeout) {\n        sessionTimeout = timeout || AV_IDLE.INTERVALS.SESSION;\n        return this;\n      };\n\n      proto.setIdleTimeout = function(timeout) {\n        idleTimeout = timeout || AV_IDLE.INTERVALS.IDLE;\n        return this;\n      };\n\n      proto.setPingTimeout = function(timeout) {\n        pingTimeout = timeout || AV_IDLE.INTERVALS.PING;\n        return this;\n      };\n\n      proto.setPingUrl = function(url) {\n        pingUrl = url || AV_IDLE.URLS.PING;\n        return this;\n      };\n\n      proto.setRedirectUrl = function(url) {\n        redirectUrl = url || AV_IDLE.URLS.HOME;\n        return this;\n      };\n\n      proto.response = function(response) {\n\n        if(this.isApiRequest(response)) {\n          this.startSessionTimer();\n        }\n\n        return response;\n      };\n\n      proto.isApiRequest = function(response) {\n        return response && response.config && response.config.api;\n      };\n\n      proto.responseError = function(response) {\n\n        if(this.isApiRequest(response) && response.status !== 401) {\n          this.startSessionTimer();\n        }\n\n        if(this.isApiRequest() && response.status === 401) {\n          this.stopPing();\n        }\n\n        return $q.reject(response);\n      };\n\n      proto.startSessionTimer = function() {\n\n        var self = this;\n\n        this.stopSessionTimer();\n\n        var later = function() {\n          $log.info('avIdle session has TIMED OUT');\n          self.stop();\n          $rootScope.$broadcast(AV_IDLE.EVENTS.SESSION_TIMEOUT_ACTIVE);\n        };\n\n        $log.info('avIdle session timer has STARTED');\n        this._sessionTimer = $timeout(later, sessionTimeout, false);\n\n      };\n\n      proto.stopSessionTimer = function() {\n        $log.info('avIdle session timer has STOPPED');\n        $timeout.cancel(this._sessionTimer);\n      };\n\n      proto.startIdleTimer = function() {\n\n        var self = this;\n\n        this.stopIdleTimer();\n\n        var later = function() {\n          self.stopIdleTimer();\n          $log.info('avIdle is IDLING');\n          $rootScope.$broadcast(AV_IDLE.EVENTS.IDLE_ACTIVE);\n        };\n\n        $log.info('avIdle idle timer has STARTED');\n        this._idleTimer = $timeout(later, idleTimeout, false);\n      };\n\n      proto.stopIdleTimer = function() {\n        $log.info('avIdle idle timer has STOPPED');\n        $timeout.cancel(this._idleTimer);\n      };\n\n      proto.startPing = function() {\n\n        if(!this._keepAlive) {\n          $log.info('avIdle ping timer has STARTED');\n          this._keepAlive = avThrottle(this.keepAlive, pingTimeout, {context: this});\n        }\n\n        this._pingTimer = this._keepAlive();\n      };\n\n      proto.stopPing = function() {\n        $log.info('avIdle ping timer has STOPPED');\n        if(this._pingTimer) {\n          $timeout.cancel(this._pingTimer);\n        }\n      };\n\n      proto.keepAlive = function() {\n\n        // destroy the reference to that a new throttle gets created upon\n        // next user or system event\n        this._keepAlive = null;\n        var $http = $injector.get('$http');\n\n        $http.get(pingUrl, {\n          cache: false,\n          api: true\n        }).success(function() {\n          $log.info('avIdle keep-alive SUCCESS');\n        }).error(function() {\n          $log.error('avIdle keep-alive FAILURE');\n        });\n      };\n\n      proto.onEvent = function() {\n        this.startIdleTimer();\n        this.startPing();\n      };\n\n      return new AvIdle();\n\n    };\n\n  });\n\n})(window);\n\n// Source: /lib/core/idle/idle-interceptor.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avIdleInterceptor', function(avIdle) {\n    return {\n      response: function(response) {\n        return avIdle.response(response);\n      },\n      responseError: function(response) {\n        return avIdle.responseError(response);\n      }\n    };\n\n  });\n\n  availity.core.config(function($httpProvider) {\n    $httpProvider.interceptors.push('avIdleInterceptor');\n  });\n\n})(window);\n\n// Source: /lib/core/validation/validator.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.value('avValConfig', {\n    classes: {\n      valid: 'ng-valid',\n      invalid: 'ng-invalid',\n      dirty: 'ng-dirty',\n      pristine: 'ng-pristine',\n      touched: 'ng-touched',\n      untouched: 'ng-untouched',\n      submitted: 'ng-submitted'\n    },\n    validators: [\n      'avValPattern',\n      'avValSize',\n      'avValRequired',\n      'avValDateRange',\n      'avValDate'\n    ]\n  });\n\n  availity.core.constant('AV_VAL', {\n    EVENTS: {\n      REVALIDATE: 'av:val:revalidate',\n      SUBMITTED: 'av:val:submitted',\n      FAILED: 'av:val:failed',\n      RESET: 'av:val:reset'\n    },\n    DEBOUNCE: 500,\n    DATE_FORMAT: {\n      SIMPLE: 'MM/DD/YYYY'\n    },\n    PATTERNS: {\n      ALPHA_ONLY: /[^A-Za-z]+/g,\n      NUMERIC_ONLY: /[^0-9]+/g\n    }\n  });\n\n  availity.core.provider('avVal', function() {\n\n    var that = this;\n\n    this.rules = {};\n\n    this.addRules = function(rules) {\n      this.rules = angular.extend(this.rules, rules);\n    };\n\n    this.$get = function($injector, $rootScope, $http, $log, avValConfig, AV_VAL) {\n\n      var AvValidation = function() {\n        this.rules = that.rules;\n        this.validators = [];\n        this.initValidators();\n      };\n\n      var proto = AvValidation.prototype;\n\n      proto.initValidators = function() {\n        var self = this;\n\n        angular.forEach(avValConfig.validators, function(name) {\n          var validator = $injector.get(name);\n          self.validators[validator.name] = validator;\n        });\n      };\n\n      proto.clearAll = function() {\n        // this.validators.splice(0, this.validators.length);\n        // this.rules = {};\n      };\n\n      proto.addRules = function(rules) {\n        this.rules = angular.extend(this.rules, rules);\n        $rootScope.$broadcast(AV_VAL.EVENTS.REVALIDATE);\n      };\n\n      proto.validate = function(key, element, value, ruleName) {\n\n        var self = this;\n\n        var rules = this.rules[key];\n        if(!rules) {\n          $log.error('Failed to get rules key [' + key + '].  Forms must be tagged with a rules set name for validation to work.');\n          return;\n        }\n        var contraints = rules[ruleName];\n        if(!contraints) {\n          $log.info('Rule named [' + ruleName + '] could not be found in the current schema.');\n          contraints = [];\n        }\n\n        var el = element[0];\n        var results  = [];\n        var violations = [];\n        var _valid = true;\n\n        angular.forEach(contraints, function(rule, contraintName) {\n\n          if(!rule) {\n            // when extended rule sets, a user can pass nulls to cancel out a rule so if\n            // one doesn't exist just continue\n            return;\n          }\n\n          var validator = self.validators[contraintName];\n\n          if(angular.isUndefined(validator)) {\n            $log.warn('No validator defined for `' + name + '`');\n            return;\n          }\n\n          var valid = validator.validate(value, rule);\n\n          var validationResult = {\n            valid: valid,\n            ruleName: ruleName,\n            contraintName: contraintName,\n            value: value,\n            message: rule.message,\n            field: el.name || el.id\n          };\n\n          // $log.info(validationResult);\n\n          var result = angular.extend({}, rule, validationResult);\n\n          results.push(result);\n          if(!valid) {\n            violations.push(validationResult);\n          }\n          _valid = _valid && valid;\n        });\n\n        return {\n          isValid: _valid,\n          all: results, // all the constraint results\n          violations: violations\n        };\n\n      };\n\n      return new AvValidation();\n    };\n\n  });\n})(window);\n\n// Source: /lib/core/validation/validators/validator-utils.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValUtils', function() {\n\n    return {\n\n      isDefined: function(value) {\n        return angular.isDefined(value) && value !== '' && value !== null;\n      },\n\n      isEmpty: function(value) {\n        return !this.isDefined(value) || $.trim(value) === '';\n      }\n    };\n\n  });\n})(window);\n\n\n// Source: /lib/core/validation/validators/validator-size.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValSize', function(avValUtils) {\n\n    var validator =  {\n      name: 'size',\n      validate: function(value, rule) {\n        var minLength = rule.min || 0;\n        var maxLength = rule.max;\n\n        value = value || '';\n        return avValUtils.isEmpty(value) || value.length >= minLength && (maxLength === undefined || value.length <= maxLength);\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n\n// Source: /lib/core/validation/validators/validator-pattern.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValPattern', function(avValUtils) {\n\n    var validator =  {\n      name: 'pattern',\n      REGEX: /^\\/(.*)\\/([gim]*)$/, //regular expression to test a regular expression\n      asRegExp: function(pattern) {\n        var match;\n\n        if(pattern.test) {\n          return pattern;\n        } else {\n          match = pattern.match(validator.REGEX);\n          if(match) {\n            return new RegExp(match[1], match[2]);\n          } else {\n            throw ('Expected ' + pattern + ' to be a RegExp');\n          }\n        }\n      },\n      validate: function(value, rule) {\n        var values = _.isArray(rule.value) ? rule.value : [rule.value];\n\n        var valid = false;\n\n        _.each(values, function(expresion) {\n          var pattern = validator.asRegExp(expresion);\n          if(avValUtils.isEmpty(value) || pattern.test(value)) {\n            valid = true;\n          }\n        });\n\n        return valid;\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n\n// Source: /lib/core/validation/validators/validator-required.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValRequired', function(avValUtils) {\n\n    var validator =  {\n      name: 'required',\n      validate: function(value) {\n        return !avValUtils.isEmpty(value);\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n\n// Source: /lib/core/validation/validators/validator-date-range.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDateRange', function(AV_VAL, avValUtils) {\n\n    var validator = {\n      name: 'dateRange',\n      getMinDate: function(minDate) {\n        var period = minDate.replace(AV_VAL.PATTERNS.ALPHA_ONLY, '');\n        var val = parseInt( minDate.replace(AV_VAL.PATTERNS.NUMERIC_ONLY, ''), 10);\n        var min = moment().subtract(val, period);\n        return min;\n      },\n      getMaxDate: function(maxDate) {\n        var max = moment();\n        var period = maxDate.replace(AV_VAL.PATTERNS.ALPHA_ONLY, '');\n        var val = parseInt( maxDate.replace(AV_VAL.PATTERNS.NUMERIC_ONLY, ''), 10);\n\n        if(maxDate !== 'today') {\n          max = moment().add(val, period);\n        } else {\n          max.set('hours', 23);\n          max.set('minutes', 59);\n          max.set('seconds', 59);\n        }\n        return max;\n      },\n      validation: function(value, rules) {\n        var minDate = validator.getMinDate(rules.min);\n        var maxDate = validator.getMaxDate(rules.max);\n        value = moment(value, rules.format);\n        return !value.isBefore(minDate) && !value.isAfter(maxDate);\n      },\n      validate: function(value, rule) {\n        return avValUtils.isEmpty(value) || validator.validation(value, rule);\n      }\n    };\n\n    return validator;\n  });\n})(window);\n\n// Source: /lib/core/validation/validators/validator-date-format.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDate', function(AV_VAL, avValUtils) {\n\n    var validator = {\n      name: 'dateFormat',\n      validate: function(value, rules) {\n\n        var format = rules && rules.format ? rules.format : AV_VAL.DATE_FORMAT.SIMPLE;\n\n        return avValUtils.isEmpty(value) || moment(value, format, true).isValid();\n      }\n    };\n    return validator;\n  });\n})(window);\n\n// Source: /lib/core/utils/globals.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_GLOBALS', function() {\n\n    return {\n\n      STATES: [\n        {\n          'name': 'Alabama',\n          'code': 'AL'\n        },\n        {\n          'name': 'Alaska',\n          'code': 'AK'\n        },\n        {\n          'name': 'Arizona',\n          'code': 'AZ'\n        },\n        {\n          'name': 'Arkansas',\n          'code': 'AR'\n        },\n        {\n          'name': 'California',\n          'code': 'CA'\n        },\n        {\n          'name': 'Colorado',\n          'code': 'CO'\n        },\n        {\n          'name': 'Connecticut',\n          'code': 'CT'\n        },\n        {\n          'name': 'Delaware',\n          'code': 'DE'\n        },\n        {\n          'name': 'District Of Columbia',\n          'code': 'DC'\n        },\n        {\n          'name': 'Florida',\n          'code': 'FL'\n        },\n        {\n          'name': 'Georgia',\n          'code': 'GA'\n        },\n        {\n          'name': 'Hawaii',\n          'code': 'HI'\n        },\n        {\n          'name': 'Idaho',\n          'code': 'ID'\n        },\n        {\n          'name': 'Illinois',\n          'code': 'IL'\n        },\n        {\n          'name': 'Indiana',\n          'code': 'IN'\n        },\n        {\n          'name': 'Iowa',\n          'code': 'IA'\n        },\n        {\n          'name': 'Kansas',\n          'code': 'KS'\n        },\n        {\n          'name': 'Kentucky',\n          'code': 'KY'\n        },\n        {\n          'name': 'Louisiana',\n          'code': 'LA'\n        },\n        {\n          'name': 'Maine',\n          'code': 'ME'\n        },\n        {\n          'name': 'Maryland',\n          'code': 'MD'\n        },\n        {\n          'name': 'Massachusetts',\n          'code': 'MA'\n        },\n        {\n          'name': 'Michigan',\n          'code': 'MI'\n        },\n        {\n          'name': 'Minnesota',\n          'code': 'MN'\n        },\n        {\n          'name': 'Mississippi',\n          'code': 'MS'\n        },\n        {\n          'name': 'Missouri',\n          'code': 'MO'\n        },\n        {\n          'name': 'Montana',\n          'code': 'MT'\n        },\n        {\n          'name': 'Nebraska',\n          'code': 'NE'\n        },\n        {\n          'name': 'Nevada',\n          'code': 'NV'\n        },\n        {\n          'name': 'New Hampshire',\n          'code': 'NH'\n        },\n        {\n          'name': 'New Jersey',\n          'code': 'NJ'\n        },\n        {\n          'name': 'New Mexico',\n          'code': 'NM'\n        },\n        {\n          'name': 'New York',\n          'code': 'NY'\n        },\n        {\n          'name': 'North Carolina',\n          'code': 'NC'\n        },\n        {\n          'name': 'North Dakota',\n          'code': 'ND'\n        },\n        {\n          'name': 'Ohio',\n          'code': 'OH'\n        },\n        {\n          'name': 'Oklahoma',\n          'code': 'OK'\n        },\n        {\n          'name': 'Oregon',\n          'code': 'OR'\n        },\n        {\n          'name': 'Pennsylvania',\n          'code': 'PA'\n        },\n        {\n          'name': 'Rhode Island',\n          'code': 'RI'\n        },\n        {\n          'name': 'South Carolina',\n          'code': 'SC'\n        },\n        {\n          'name': 'South Dakota',\n          'code': 'SD'\n        },\n        {\n          'name': 'Tennessee',\n          'code': 'TN'\n        },\n        {\n          'name': 'Texas',\n          'code': 'TX'\n        },\n        {\n          'name': 'Utah',\n          'code': 'UT'\n        },\n        {\n          'name': 'Vermont',\n          'code': 'VT'\n        },\n        {\n          'name': 'Virginia',\n          'code': 'VA'\n        },\n        {\n          'name': 'Washington',\n          'code': 'WA'\n        },\n        {\n          'name': 'West Virginia',\n          'code': 'WV'\n        },\n        {\n          'name': 'Wisconsin',\n          'code': 'WI'\n        },\n        {\n          'name': 'Wyoming',\n          'code': 'WY'\n        }\n      ]\n    };\n\n  });\n\n})(window);\n\n//# sourceMappingURL=maps/availity-angular.js.map"],"sourceRoot":"/source/"}