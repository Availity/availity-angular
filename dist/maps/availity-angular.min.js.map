{"version":3,"sources":["/source/index.js","/source/strings.js","/source/uuid.js","/source/urls.js","/source/throttle.js","/source/logger.js","/source/logger-config.js","/source/polling.js","/source/api-factory.js","/source/api-users.js","/source/api-coverages.js","/source/api-configurations.js","/source/api-log-messages.js","/source/api-documents.js","/source/api-organizations.js","/source/api-codes.js","/source/api-user-permissions.js","/source/user-authorizations.js","/source/session.js","/source/idle.js","/source/idle-interceptor.js","/source/validator.js","/source/validator-utils.js","/source/validator-size.js","/source/validator-pattern.js","/source/validator-required.js","/source/validator-date-range.js","/source/validator-date-format.js","/source/globals.js","/source/analytics.js","/source/analytics-util.js","/source/analytics-splunk.js","/source/analytics-piwik.js","/source/data-polyfill.js","availity-angular.js"],"names":["root","availity","VERSION","MODULE","core","angular","module","originalModule","modules","name","deps","_","indexOf","Error","push","exports","window","_stringify","object","isBlank","str","test","uid","uuid","prefix","index","length","digit","charCodeAt","join","String","fromCharCode","unshift","REGEX_API_URL","getRelativeUrl","url","result","match","constant","OPTIONS","wait","update","trailing","leading","factory","AV_THROTTLE","$timeout","fn","options","merge","THRESHOLD","isDefined","UPDATE","timer","context","this","args","arguments","apply","later","provider","_enabled","enabled","$get","$injector","AvLogger","$delegate","$log","proto","prototype","supplant","o","_supplant","a","b","r","replace","isObject","element","elemStr","isUndefined","constructor","toString","getFormattedTimestamp","date","getHours","getMinutes","getSeconds","getMilliseconds","_log","originalFn","hash","location","now","Date","message","supplantData","get","params","log","info","warn","debug","error","config","$provide","decorator","INTERVAL","MAX_ELAPSED_TIME","MAX_RETRY","DECAY","EVENTS","REGEX_URL","PollingServiceFactory","$rootScope","$q","AV_POLLING","AV_API","AvPollingService","pendingRequests","response","isAsyncResponse","onAsyncReponse","when","setDefaults","defaultOptions","pollingInterval","pollingDecay","pollingMaxInterval","pollingRetryCount","pollingStartTime","getTime","extend","responseError","reject","api","status","isFunction","headers","HEADERS","LOCATION","deferred","defer","queueRequest","notify","promise","getUrl","self","_url","_config","method","pollingMaxRetry","_pollingDecay","cache","request","id","timeout","getPollingTimeout","retryRequest","pushRequest","popRequest","i","splice","isPollingMaxTimeout","elaspedTime","isElapsed","isMaxRetried","isPollable","_isTimeout","_isMax","cancel","increment","successCallback","resolve","errorCallback","$http","then","incrementCounter","incrementDecay","clearRequests","forEach","ID","GLOBAL_ID","SESSION_ID","OVERRIDE","CALLBACK_URL","CUSTOMER_ID","path","version","level","suffix","ApiResourcesFactory","avPollingService","AvApiResource","isString","charAt","_getUrl","_getApiUrl","_createResponse","data","_request","afterCallback","success","_response","_promise","successResponse","call","errorResponse","notifyResponse","always","create","beforeCreate","afterCreate","afterGet","query","afterQuery","isNumber","beforeUpdate","afterUpdate","remove","afterRemove","UserServiceFactory","AvUsersResource","user","me","LogMessagesFactory","AvLogMessagesResource","buildRequest","entries","requestPayload","AvDocumentsResourceFactory","AvDocumentsResource","getContents","getContentsUrl","OrganizationResourceFactory","OrganizationResource","getOrganizations","organizations","AvCodesResourceFactory","AvCodesResource","getCodes","offset","page","myResults","codes","isEmpty","each","code","moreVal","limit","totalCount","more","results","AvUserPermissionsResourceFactory","AvUserPermissionsResource","sessionDate","moment","toISOString","axiUserPermissions","getPermissions","permissionIds","region","permissionId","AvUserAuthorizationsFactory","avUserPermissionsResource","AvUserAuthorizations","setRegion","setPermissionIds","isArray","isAuthorized","getPermission","permission","isAnyAuthorized","permissions","findWhere","undefined","_permissions","union","toPermissionMap","getPayers","organizationId","organization","resources","map","slice","key","toPermission","description","geographies","SESSION_TIMEOUT","NOT_AUTHORIZED","avUsersResource","AvSession","getUser","destroy","permisions","IDLE_INACTIVE","IDLE_ACTIVE","SESSION_TIMEOUT_ACTIVE","SESSION_TIMEOUT_REDIRECT","HUMAN","MACHINE","INTERVALS","PING","IDLE","SESSION","URLS","HOME","AV_IDLE","pingUrl","redirectUrl","sessionTimeout","idleTimeout","pingTimeout","enable","value","setSessionTimeout","setIdleTimeout","setPingTimeout","setPingUrl","$document","avThrottle","AvIdle","_idleTimer","_sessionTimer","_pingTimer","_keepAlive","idleActive","sessionActive","listeners","init","stop","start","listener","setRedirectUrl","$on","find","on","event","onEvent","oldUrl","newUrl","document","href","startIdleTimer","startSessionTimer","off","stopPing","stopSessionTimer","stopIdleTimer","isEnabled","isApiRequest","$broadcast","startPing","keepAlive","avIdle","$httpProvider","interceptors","classes","valid","invalid","dirty","pristine","touched","untouched","submitted","validators","REVALIDATE","SUBMITTED","FAILED","RESET","DEBOUNCE","DATE_FORMAT","SIMPLE","PATTERNS","ALPHA_ONLY","NUMERIC_ONLY","that","rules","addRules","avValConfig","AV_VAL","AvValidation","initValidators","validator","clearAll","validate","ruleName","contraints","el","violations","_valid","rule","contraintName","validationResult","field","isValid","all","$","trim","avValUtils","minLength","min","maxLength","max","REGEX","asRegExp","pattern","RegExp","values","expresion","getStartDate","setMin","add","units","getEndDate","end","setMax","set","validation","startDate","endDate","format","isBetween","isSame","REGIONS","VIRTUAL_PAGE_TRACKING","SERVICES","PIWIK","SPLUNK","PAGE","DEFAULT","PRE_FIX","IGNORE","ENV","PROD","URL","QA","AV_ANALYTICS","plugins","virtualPageTracking","appId","registerPlugins","_plugins","setVirtualPageTracking","setAppID","AvAnalytics","services","plugin","err","trackEvent","properties","promises","handler","getAppId","trackPageView","run","avAnalytics","$location","absUrl","AnalyticsUtils","getProperties","attributes","props","isValidAttribute","isNotIgnored","getAttribute","isExternalLink","attrs","ngClick","ignored","includes","lowercase","substr","toLowerCase","simpleKey","toNum","parsed","parseInt","isNaN","trackingValues","toUpperCase","avLogMessagesResource","SplunkAnalyticsService","$$absUrl","siteId","_setCustomVariable","valueName","scope","_paq","setSiteID","_siteID","setVisitVariables","items","item","setPageVariables","avAnalyticsUtils","$window","AvPiwikAnalytics","category","label","createScript","isFinite","$$host","script","createElement","target","getElementsByTagName","type","async","src","parentNode","insertBefore","pad","number","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","toFixed"],"mappings":"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","file":"availity-angular.min.js","sourcesContent":["/*global module*/\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity || {};\n  availity.VERSION = 'v0.0.0';\n  availity.MODULE = 'availity';\n  availity.core = angular.module(availity.MODULE, ['ng']);\n\n  var originalModule = angular.module;\n  var modules = [];\n\n  angular.module = function(name, deps) {\n\n    if(deps && _.indexOf(modules, name) !== -1 ) {\n      throw new Error('redefining module: ' + name);\n    }\n\n    modules.push(name);\n\n    return originalModule(name, deps);\n  };\n\n  root.availity = availity;\n\n  if(typeof module !== 'undefined' && module.exports) {\n    module.exports = availity;\n  }\n\n})(window);\n\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/helper/makeString.js\n  availity._stringify = function(object) {\n    if(object === null) {\n      return '';\n    }\n    return '' + object;\n  };\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/isBlank.js\n  availity.isBlank = function(str) {\n    return (/^\\s*$/).test(availity._stringify(str));\n  };\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var uid = ['0', '0', '0'];\n\n  availity.uuid = function(prefix) {\n    var index = uid.length;\n    var digit;\n\n    while(index) {\n      index--;\n      digit = uid[index].charCodeAt(0);\n      if(digit === 57 /*'9'*/) {\n        uid[index] = 'A';\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n      if(digit === 90  /*'Z'*/) {\n        uid[index] = '0';\n      } else {\n        uid[index] = String.fromCharCode(digit + 1);\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n    }\n    uid.unshift('0');\n    return prefix ? prefix + uid.join('') : uid.join('');\n  };\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.REGEX_API_URL = /^.*?api.availity.com(.*)$/;\n\n  availity.getRelativeUrl = function(url) {\n    var result = url.match(availity.REGEX_API_URL);\n    if(result && result[1]) {\n      return '/api' + result[1];\n    }\n\n    return url;\n  };\n\n})(window);\n","// Original => https://github.com/mgcrea/angular-strap/blob/master/src/helpers/debounce.js\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_THROTTLE', {\n    OPTIONS: {\n      wait: 1000,\n      update: false,\n      trailing: true,\n      leading: false\n    }\n  });\n\n  availity.core.factory('avThrottle', function(AV_THROTTLE, $timeout) {\n\n    return function(fn, wait, options) {\n\n      options = _.merge({}, AV_THROTTLE.OPTIONS, options);\n\n      wait = wait ? wait : AV_THROTTLE.THRESHOLD;\n      var update = angular.isDefined(options.update) ? options.update : AV_THROTTLE.UPDATE;\n      var timer = null;\n\n      return function() {\n        var context = options.context || this;\n        var args = arguments;\n\n        if(!timer) {\n          if(options.leading !== false) {\n            fn.apply(context, args);\n          }\n\n          var later = function() {\n            timer = null;\n            if(options.trailing !== false) {\n              fn.apply(context, args);\n            }\n          };\n\n          timer = $timeout(later, wait, update);\n        }\n\n        return timer;\n\n      };\n    };\n  });\n\n})(window);\n","// Orginal => https://github.com/ericzon/angular-ny-logger/blob/0c594e864c93e7f33d36141200096bc6139ddde1/angular-ny-logger.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.provider('AvLogger', function() {\n\n    var _enabled = false;\n\n    this.enabled = function(enabled) {\n      _enabled = !!enabled;\n    };\n\n    this.$get = function($injector) {\n\n      var AvLogger = function(context, $delegate) {\n\n        this.context = context || '';\n        this.$log = $delegate;\n\n      };\n\n      var proto = AvLogger.prototype;\n\n      AvLogger.supplant = function(str, o) {\n\n        var _supplant = function (a, b) {\n          var r = o[b];\n          return r;\n        };\n\n        return str.replace(/\\{([^{}]*)\\}/g, _supplant);\n      };\n\n      AvLogger.isObject = function(element) {\n        var elemStr = ( !angular.isUndefined(element) && !angular.isUndefined(element.constructor) ) ? element.constructor.toString() : '';\n        return (elemStr.indexOf('Object') > -1);\n      };\n\n      AvLogger.getFormattedTimestamp = function(date) {\n\n        return AvLogger.supplant('{0}:{1}:{2}:{3}', [\n          date.getHours(),\n          date.getMinutes(),\n          date.getSeconds(),\n          date.getMilliseconds()\n        ]);\n\n      };\n\n      proto._log = function(originalFn, args) {\n\n        // Allow enabling logger through query params\n        // Ex:\n        //\n        // http://localhost:3000/ui.html#avLogger\n\n        var hash = window.location.hash;\n        hash = hash || '';\n\n        if(!_enabled && hash.indexOf('avLogger') < 0 && originalFn !== 'error') {\n          return;\n        }\n\n        var now  = AvLogger.getFormattedTimestamp(new Date());\n        var message = '';\n        var supplantData = [];\n\n        var context = this.context ? ' [' + this.context + '] ' : '';\n\n        switch(args.length) {\n          case 1:\n            // (1) If the user supplied one argument, then the argument must be\n            // the message itself and _log()\n            // will print: <timestamp> - <context>: <message>\n            supplantData = args[0];\n            message = AvLogger.supplant('{0}{1} - {2}', [now, context, args[0]]);\n            break;\n          case 3:\n            // (3) If the user supplied three arguments, then the first argument\n            // is a method name, the second is the message and the third is an\n            // object of variables to interpolate with the message. For this, _log()\n            // will print: <timestamp> - <context> - <method name>('<message>')\n            supplantData = args[2];\n            message = AvLogger.supplant(\"{0}{1} - {2}(\\'{3}\\')\", [now, context, args[0], args[1]]);\n            break;\n          case 2:\n            // (2) If the user provided two arguments, we need to find out whether\n            // they supplied a method name or an interpolation object.\n            // In order to figure that out, we’ll check the type of the last argument.\n            // If it is a string, then it has to be the message itself while the\n            // first argument is the method name. Otherwise consider the first argument\n            // as the message and the second as array of interpolation variables.\n            // The output print will be according to this check.\n            if(typeof args[1] === 'string') {\n              message = AvLogger.supplant(\"{0}{1} - {2}(\\'{3}\\')\", [now, context, args[0], args[1]]);\n            } else {\n              supplantData = args[1];\n              message = AvLogger.supplant('{0}{1} - {2}', [now, context, args[0]]);\n            }\n            break;\n        }\n\n        var $log = this.$log || $injector.get('$log');\n\n        var params = (AvLogger.isObject(supplantData)) ? [message, supplantData] : [AvLogger.supplant(message, supplantData)];\n        $log[originalFn].apply(null, params);\n\n      };\n\n      proto.log = function() {\n        this._log('log', arguments);\n      };\n\n      proto.info = function() {\n        this._log('info', arguments);\n      };\n\n      proto.warn = function() {\n        this._log('warn', arguments);\n      };\n\n      proto.debug = function() {\n        this._log('debug', arguments);\n      };\n\n      proto.error = function() {\n        this._log('error', arguments);\n      };\n\n      return AvLogger;\n\n    };\n\n  });\n\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.config(function($provide) {\n\n    $provide.decorator('$log', function($delegate, AvLogger) {\n      return new AvLogger(null, $delegate);\n    });\n\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_POLLING', {\n    INTERVAL: 1000, // delay in ms before retrying an async request\n    MAX_ELAPSED_TIME: 5000, // max time in ms before polling stops and rejects original request\n    MAX_RETRY: 30, // # of times the request will be tried\n    DECAY: 1.2, // % the polling interval decays after every retry\n    // maximum time polling is allowed before rejecting the request\n    EVENTS: {\n      MAX_RETRY: 'av:polling:max:retry'\n    },\n    REGEX_URL: /^.*?api.availity.com(.*)$/ // capture the relative url from API\n  });\n\n  var PollingServiceFactory = function($rootScope, $q, $injector, $timeout, $log, AV_POLLING, AV_API) {\n\n    var AvPollingService = function() {\n      this.pendingRequests = []; // stores all request for polling\n    };\n\n    var proto = AvPollingService.prototype;\n\n    proto.response = function(response) {\n\n      if(this.isAsyncResponse(response)) {\n        return this.onAsyncReponse(response);\n      }\n\n      return response || $q.when(response);\n    };\n\n    proto.setDefaults = function(config) {\n\n      var defaultOptions = {\n        pollingInterval: AV_POLLING.INTERVAL,\n        pollingDecay: AV_POLLING.DECAY,\n        pollingMaxInterval: AV_POLLING.MAX_ELAPSED_TIME,\n        pollingRetryCount: 0,\n        pollingStartTime: new Date().getTime()\n      };\n\n      return _.extend(defaultOptions, config);\n    };\n\n    proto.responseError = function(response) {\n      // Return the promise rejection\n      return $q.reject(response);\n    };\n\n    /**\n     * API layer return a link with a polling url for\n     * async responses.\n     *\n     * @param  {Object}  response ajax response\n     * @return {Boolean} true if response has status of 202 (accepted) and location param in header with uri+session link\n     */\n    proto.isAsyncResponse = function(response) {\n\n      return response &&\n        response.config &&\n        response.config.api &&\n        response.status &&\n        response.status === 202 &&\n        angular.isFunction(response.headers) && !availity.isBlank(response.headers(AV_API.HEADERS.LOCATION));\n    };\n\n    proto.onAsyncReponse = function(response) {\n\n      response.config = this.setDefaults(response.config);\n\n      var deferred = $q.defer();\n\n      this.queueRequest(deferred, response);\n\n      // [rm3]: Can't call notify before you return promise object?\n      $timeout(function() {\n        // Notify deferred listeners with the original server response\n        deferred.notify(response);\n      }, 0, false);\n\n      return deferred.promise;\n    };\n\n    proto.getUrl = function(url) {\n\n      var result = url.match(AV_POLLING.REGEX_URL);\n      if(result && result[1]) {\n        return '/api' + result[1];\n      }\n\n      return url;\n    };\n\n    proto.queueRequest = function(deferred, response) {\n\n      var self = this;\n      // server replies with location header so set the url into config\n      var _url = availity.getRelativeUrl(response.headers(AV_API.HEADERS.LOCATION));\n      var _config = response.config;\n\n      var config = {\n        method: 'GET',\n        api: true,\n        pollingInterval: _config.pollingInterval,\n        pollingMaxRetry: _config.pollingMaxRetry,\n        pollingMaxInterval: _config.pollingMaxInterval,\n        pollingStartTime: _config.pollingStartTime,\n        _pollingDecay: _config._pollingDecay,\n        pollingRetryCount: _config.pollingRetryCount,\n        pollingDecay: _config.pollingDecay,\n        url: _url, /* set the url from the server response */\n        cache: false\n      };\n\n      var request = {\n        id: availity.uuid('request-'),\n        config: config,\n        deferred: deferred\n      };\n\n      var timeout = this.getPollingTimeout(config);\n\n      // each async request should run on its own timer\n      var timer = $timeout(function() {\n        self.retryRequest(request.id);\n      }, timeout, false);\n\n      request.timer = timer;\n\n      // add the async request to the queue\n      this.pushRequest(request);\n\n    };\n\n    proto.popRequest = function(id) {\n\n      var index = null;\n      var request = null;\n\n      for(var i = 0; i < this.pendingRequests.length; i++) {\n        if(this.pendingRequests[i].id === id) {\n          index = i;\n          break;\n        }\n      }\n\n      request = this.pendingRequests[index];\n      this.pendingRequests.splice(index, 1);\n\n      return request;\n    };\n\n    proto.pushRequest = function(request) {\n      this.pendingRequests.push(request);\n    };\n\n    proto.getPollingTimeout = function(config) {\n      return config.pollingDecay * config.pollingInterval;\n    };\n\n    proto.isPollingMaxTimeout = function(config) {\n      var now = new Date().getTime();\n      var elaspedTime = now - config.pollingStartTime;\n      var isElapsed = elaspedTime > config.pollingMaxInterval;\n      return isElapsed;\n    },\n\n      proto.isMaxRetried = function(config) {\n        return config.pollingRetryCount >= AV_POLLING.MAX_RETRY;\n      };\n\n    proto.isPollable = function(config) {\n      var _isTimeout = this.isPollingMaxTimeout(config);\n      var _isMax = this.isMaxRetried(config);\n\n      return _isTimeout || _isMax ? false : true;\n\n    };\n\n    proto.retryRequest = function(id) {\n\n      var self = this;\n      var request = this.popRequest(id);\n      $timeout.cancel(request.timer);\n\n      var config = request.config;\n\n      var deferred = request.deferred;\n\n      if(!this.isPollable(config)) {\n        $log.info('Rejecting pollable response due to timeout');\n        return deferred.reject(request);\n      }\n\n      // increment counters and polling timeouts\n      this.increment(config);\n\n      function successCallback(response) {\n        if(self.isAsyncResponse(response)) {\n          deferred.notify(response);\n          self.queueRequest(request.deferred, response);\n        } else {\n          deferred.resolve(response);\n        }\n      }\n\n      function errorCallback(response) {\n        deferred.reject(response);\n      }\n\n      // Silly circular dependency trick\n      var $http = $injector.get('$http');\n\n      $http(config).then(successCallback, errorCallback);\n\n    };\n\n    proto.increment = function(config) {\n      this.incrementCounter(config);\n      this.incrementDecay(config);\n    };\n\n    proto.incrementDecay = function(config) {\n      if(!config._pollingDecay) {\n        // store the original decay param\n        config._pollingDecay = config.pollingDecay;\n      }\n      config.pollingDecay *= config._pollingDecay;\n    };\n\n    proto.incrementCounter = function(config) {\n      config.pollingRetryCount++;\n    };\n\n    proto.clearRequests = function() {\n      angular.forEach(this.pendingRequests, function(request) {\n        $timeout.cancel(request.timer);\n      });\n      this.pendingRequests = [];\n    };\n\n    return new AvPollingService();\n\n  };\n\n  availity.core.factory('avPollingService', PollingServiceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_API', {\n    HEADERS: {\n      ID: 'X-API-ID',\n      GLOBAL_ID: 'X-Global-Transaction-ID',\n      SESSION_ID: 'X-Session-ID',\n      LOCATION: 'Location',\n      OVERRIDE: 'X-HTTP-Method-Override',\n      CALLBACK_URL: 'X-Callback-URL',\n      CUSTOMER_ID: 'X-Availity-Customer-ID'\n    }\n  });\n\n  var defaultOptions = {\n    // pre-prend the url with a value like `/public` so we can build urls like `public/api/v1/*`\n    prefix: '',\n    // default base url for endpoints\n    path: '/api',\n    // url to resource endpoint like `coverages` or `payers`\n    url: null,\n    // defaults to version 1\n    version: '/v1',\n    // governance level `/internal`\n    level: '',\n    // post-pend the url with `.json`, `.txt` or `.xml`\n    suffix: '',\n    // cache all request by default\n    cache: true,\n    // flag used to enable behaviors around the Availity Rest API\n    api: true,\n    // # of times the polling service has tried to get a response\n    pollingRetryCount: 0,\n    // in ms\n    pollingInterval: 1000,\n    // % the polling interval decays after every retry\n    pollingDecay: 1.2,\n    // maximum time polling is allowed before rejecting the request\n    pollingMaxInterval: 30000\n\n  };\n\n  // Factory that creates ApiResourcess\n  var ApiResourcesFactory = function($http, $q, avPollingService) {\n\n    var AvApiResource = function(options) {\n\n      if(!options) {\n        throw new Error('[options] cannot be null or undefined');\n      }\n\n      // if string the assume url is being passed in\n      if(angular.isString(options)) {\n        options = options.charAt(0) === '/' ? options : '/' + options;\n        options = angular.extend({}, {url: options});\n      }\n\n      if(!options.url) {\n        throw new Error('[url] cannot be null');\n      }\n\n      // get the default options and merge into this instance\n      this.options = angular.extend({}, defaultOptions, (options || {}));\n    };\n\n    // Alias the prototype\n    var proto = AvApiResource.prototype;\n\n    proto._config = function(config) {\n      return angular.extend({}, this.options, (config || {}));\n    },\n\n    proto._getUrl = function(id) {\n      if(this.options.api) {\n        return this._getApiUrl(id);\n      }\n\n      return this.options.url;\n    };\n\n    proto._createResponse = function(data, status, headers, config) {\n      return {\n        data: data,\n        status: status,\n        headers: headers,\n        config: config\n      };\n    };\n\n    proto._request = function(config, afterCallback) {\n\n      var self = this;\n      var defer = $q.defer();\n\n      $http(config)\n        .success(function(data, status, headers, _config) {\n\n          var _response = {\n            data: data,\n            status: status,\n            headers: headers,\n            config: _config\n          };\n\n          // handle the async response if applicable\n          var _promise = $q.when(avPollingService.response(_response));\n          // notify the promise listener of the original response\n          defer.notify(_response);\n\n          // handle the polling service promise\n          _promise.then(function(successResponse) {\n\n            // if service has a callback then call it\n            // var response = self._createResponse(data, status, headers, _config);\n            if(afterCallback) {\n              successResponse = afterCallback.call(self, successResponse);\n            }\n            defer.resolve(successResponse);\n          }, function(errorResponse) {\n            defer.reject(errorResponse);\n          }, function(notifyResponse) {\n            defer.notify(notifyResponse);\n          });\n\n        }).error(function(data, status, headers, _config) {\n          var response = self._createResponse(data, status, headers, _config);\n          defer.reject(response);\n        });\n\n      var promise = defer.promise;\n\n      // recreate the success callback ala $http\n      promise.success = function(fn) {\n        promise.then(function(response) {\n          fn(response.data, response.status, response.headers, response.config);\n        });\n        return promise;\n      };\n\n      // recreate the error callback ala $http\n      promise.error = function(fn) {\n        promise.then(null, function(response) {\n          fn(response.data, response.status, response.headers, config);\n        });\n        return promise;\n      };\n\n      promise.always = promise['finally'];\n\n      return promise;\n    };\n\n    proto._getApiUrl = function(id) {\n      id = id ? '/' + id : '';\n      return this.options.prefix + this.options.path + this.options.level + this.options.version + this.options.url + id + this.options.suffix;\n    };\n\n    proto.create = function(data, config) {\n\n      if(!data) {\n        throw new Error('called method without [data]');\n      }\n\n      if(this.beforeCreate) {\n        this.beforeCreate(this, data);\n      }\n\n      config = this._config(config);\n      config.method = 'POST';\n      config.url = this._getUrl();\n      config.data = data;\n\n      return this._request(config, this.afterCreate);\n\n    },\n\n\n    proto.get = function(id, config) {\n\n      if(!id) {\n        throw new Error('called method without [id]');\n      }\n\n      config = this._config(config);\n      config.method = 'GET';\n      config.url = this._getUrl(id);\n\n      return this._request(config, this.afterGet);\n\n    };\n\n    proto.query = function(config) {\n\n      config = this._config(config);\n      config.method = 'GET';\n      config.url = this._getUrl();\n\n      return this._request(config, this.afterQuery);\n\n    };\n\n    proto.update = function(id, data, config) {\n\n      var url;\n\n      if(_.isString(id) || _.isNumber(id)) {\n        url = this._getUrl(id);\n      }else {\n        url = this._getUrl();\n        config = data;  // config is really the 2nd param for this use case\n        data = id; // data is really the first param for this use case\n      }\n\n      if(this.beforeUpdate) {\n        data = this.beforeUpdate(data);\n      }\n\n      config = this._config(config);\n      config.method = 'PUT';\n      config.url = url;\n      config.data = data;\n\n      return this._request(config, this.beforeUpdate, this.afterUpdate);\n\n    };\n\n    proto.remove = function(id, config) {\n      if(!id) {\n        throw new Error('called method without [id]');\n      }\n\n      config = this._config(config);\n      config.method = 'DELETE';\n      config.url = this._getUrl(id);\n\n      return this._request(config, this.afterRemove);\n    };\n\n    proto.beforeCreate = null;\n    proto.afterCreate = null;\n    proto.afterQuery = null;\n    proto.afterGet = null;\n    proto.beforeUpdate = null;\n    proto.afterUpdate = null;\n    proto.afterRemove = null;\n\n    return AvApiResource;\n\n  };\n\n  availity.core.factory('AvApiResource', ApiResourcesFactory);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  var UserServiceFactory = function(AvApiResource, $q) {\n\n    var AvUsersResource = function() {\n      this.user = null;\n      AvApiResource.call(this, 'users');\n    };\n\n    angular.extend(AvUsersResource.prototype, AvApiResource.prototype, {\n\n      afterGet: function(response) {\n        var user = response.data.user ? response.data.user : response.data;\n        this.user = user;\n        return user;\n      },\n\n      me: function() {\n\n        if(this.user) {\n          return $q.when(this.user);\n        }\n\n        return this.get('me');\n      }\n\n    });\n\n    return new AvUsersResource();\n\n  };\n\n  availity.core.factory('avUsersResource', UserServiceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avCoveragesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations', cache: false});\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avConfigurationsResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations'});\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var LogMessagesFactory = function(AvApiResource) {\n\n    var AvLogMessagesResource = function() {\n\n      AvApiResource.call(this, {\n        version: '/v1',\n        url: '/log-messages'\n      });\n    };\n\n    angular.extend(AvLogMessagesResource.prototype, AvApiResource.prototype, {\n\n      buildRequest: function(level, entries) {\n\n        var requestPayload = {};\n\n        if(entries.level) {\n          delete entries.level;\n        }\n\n        requestPayload.level = level;\n        requestPayload.entries = entries;\n\n        return requestPayload;\n      },\n\n      debug: function(entries) {\n        return this.create(this.buildRequest('debug', entries));\n      },\n\n      info: function(entries) {\n        return this.create(this.buildRequest('info', entries));\n      },\n\n      warn: function(entries) {\n        return this.create(this.buildRequest('warn', entries));\n      },\n\n      error: function(entries) {\n        return this.create(this.buildRequest('error', entries));\n      }\n\n    });\n\n    return new AvLogMessagesResource();\n\n  };\n\n  availity.core.factory('avLogMessagesResource', LogMessagesFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvDocumentsResourceFactory = function(AvApiResource) {\n\n    var AvDocumentsResource = function() {\n      AvApiResource.call(this, 'documents');\n    };\n\n    angular.extend(AvDocumentsResource.prototype, AvApiResource.prototype, {\n\n      getContents: function(id) {\n        var config = this._config();\n        config.url = this.getContentsUrl(id);\n        return this._request(config);\n      },\n\n      getContentsUrl: function(id) {\n        return this._getUrl(id) + '/contents';\n      }\n\n    });\n\n    return new AvDocumentsResource();\n\n  };\n\n  availity.core.factory('avDocumentsResource', AvDocumentsResourceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var OrganizationResourceFactory = function(AvApiResource) {\n\n    var OrganizationResource = function() {\n      AvApiResource.call(this, 'organizations');\n    };\n\n    angular.extend(OrganizationResource.prototype, AvApiResource.prototype, {\n\n      getOrganizations: function() {\n        return this.query().then(function(response) {\n          return response.data.organizations ? response.data.organizations : response.data;\n        });\n      }\n\n    });\n\n    return new OrganizationResource();\n  };\n\n  availity.core.factory('avOrganizationsResource', OrganizationResourceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n\n  var availity = root.availity;\n\n  availity.core.factory('avCodesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/codes'});\n  });\n\n\n  var AvCodesResourceFactory = function(AvApiResource) {\n\n    var AvCodesResource = function () {\n      AvApiResource.call(this, 'codes');\n    };\n\n    angular.extend(AvCodesResource.prototype, AvApiResource.prototype, {\n\n      getCodes: function (data) {\n\n        // config for the api resource query\n        var config = {};\n        config.params = {};\n        config.params.offset = 50 * (data.page - 1);\n\n        return this.query(config).then(function (response) {\n          //format the response into something select2 can read\n          var myResults = response.data.codes;\n          if(_.isEmpty(myResults[0].id)) {\n            _.each(myResults, function (code) {\n              code.id = code.code;\n            });\n          }\n\n          // calculate if we want to continue searching\n          var moreVal = (( (response.data.offset / response.data.limit) - 1) * 50) < response.data.totalCount;\n          return {\n            more: moreVal,\n            results: myResults\n          };\n\n        });\n      }\n\n    });\n\n    return new AvCodesResource();\n\n  };\n\n  availity.core.factory('avCodesResource', AvCodesResourceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvUserPermissionsResourceFactory = function(AvApiResource) {\n\n    var AvUserPermissionsResource = function() {\n      AvApiResource.call(this, {\n        level: '/internal',\n        version: '/v1',\n        url: '/axi-user-permissions'\n      });\n      this.sessionDate = moment().toISOString();\n    };\n\n    angular.extend(AvUserPermissionsResource.prototype, AvApiResource.prototype, {\n\n      afterQuery: function(response) {\n        return response.data.axiUserPermissions ? response.data.axiUserPermissions : [];\n      },\n\n      getPermissions: function(permissionIds, region) {\n        var self = this;\n        return this.query({\n          params: {\n            permissionId: permissionIds,\n            region: region,\n            sessionDate: self.sessionDate\n          }\n        });\n      }\n\n    });\n\n    return new AvUserPermissionsResource();\n\n  };\n\n  availity.core.factory('avUserPermissionsResource', AvUserPermissionsResourceFactory);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvUserAuthorizationsFactory = function($q, $log, avUserPermissionsResource) {\n\n    /**\n     *\n     * @constructor\n     */\n    var AvUserAuthorizations = function() {\n      /**\n       * Region is used to return permission/resources relative to region. If null service will\n       * return all permission relative to current.  If value 'ALL' used it will return value relative\n       * to all regions the user has access to.\n       * @type {string}\n       */\n      this.region = null;\n      /**\n       * PermissionIds contains the set of permissionIds to request from service. If user of service calls\n       * setPermissionIds() or call getPermissions() with complete set of permissionIds needed by application,\n       * then service should only make that one hit to retrieve permission information.\n       * @type {Array}\n       */\n      this.permissionIds = [];\n    };\n\n    var proto = AvUserAuthorizations.prototype;\n\n    proto.setRegion = function(region) {\n      this.region = region;\n      return this;\n    };\n\n    proto.setPermissionIds = function(permissionIds) {\n      if(!angular.isArray(permissionIds)) {\n        throw new Error('permissionsIds must be an array of string IDs for avUserAuthorizations#addPermissionIds');\n      }\n      this.permissionIds = permissionIds;\n      return this;\n    };\n\n    proto.isAuthorized = function(permissionId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        return permission.isAuthorized;\n      });\n    };\n\n    proto.isAnyAuthorized = function(permissionIds) {\n      return this.getPermissions(permissionIds).then(function(permissions) {\n        var permission = _.findWhere(permissions, {isAuthorized: true});\n        return permission !== undefined;\n      });\n    };\n\n    proto.getPermission = function(permissionId) {\n      if(!angular.isString(permissionId)) {\n        throw new Error('permissionsId must be a string ID for avUserAuthorizations#getPermission');\n      }\n\n      return this.getPermissions([permissionId])\n        .then(function(_permissions) {\n          return _permissions[permissionId];\n        });\n    };\n\n    proto.getPermissions = function(permissionIds) {\n      var self = this;\n\n      if(!angular.isArray(permissionIds)) {\n        throw new Error('permissionsIds must be an array of string IDs for avUserAuthorizations#getPermissions');\n      }\n      // merge permission ids to reduce calls to backend\n      self.permissionIds = _.union(self.permissionIds, permissionIds);\n\n      return avUserPermissionsResource\n        .getPermissions(self.permissionIds, self.region)\n        .then(function(_permissions) {\n          return self.toPermissionMap(permissionIds, _permissions);\n        });\n    };\n\n    proto.getOrganizations = function(permissionId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        return permission.organizations;\n      });\n    };\n\n    proto.getPayers = function(permissionId, organizationId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        var organization = _.findWhere(permission.organizations, {id: organizationId});\n\n        if(organization && organization.resources) {\n          return organization.resources;\n        }\n        return [];\n      });\n\n    };\n\n    /**\n     * Converts array permissions to map with value for each permissionId, creating empty permission\n     * if can't find permission in array\n     * @private\n     */\n    proto.toPermissionMap = function(permissionIds, permissions) {\n      var self = this;\n      var map = {};\n      permissions = _.slice(permissions);\n      _.forEach(permissionIds, function(permissionId) {\n        var key = {id: permissionId};\n        var permission = _.findWhere(permissions, key);\n        permission = permission ? self.toPermission(permission) : self.toPermission(key);\n        map[permission.id] = permission;\n      });\n      return map;\n    };\n\n    /**\n     * Convert a permission resource into a structure that is easier to work with.\n     * @private\n     */\n    proto.toPermission = function(permission) {\n      return {\n        id: permission.id,\n        description: permission.description ? permission.description : '',\n        geographies: permission.geographies ? permission.geographies : [],\n        organizations: permission.organizations ? permission.organizations : [],\n        isAuthorized: permission.organizations ? permission.organizations.length > 0 : false\n      };\n    };\n\n    return new AvUserAuthorizations();\n\n  };\n\n  availity.core.factory('avUserAuthorizations', AvUserAuthorizationsFactory);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_SESSION', {\n    SESSION_TIMEOUT: 'av:auth:session:timeout',\n    NOT_AUTHORIZED: 'av:auth:not:authorized'\n  });\n\n  availity.core.factory('avSession', function($q, avUsersResource) {\n\n    var AvSession = function() {\n      this.user = null;\n      this.permissions = null;\n    };\n\n    var proto = AvSession.prototype;\n\n    proto.getUser = function() {\n      var self = this;\n\n      if(this.user) {\n        return $q.when(this.user);\n      }\n\n      return avUsersResource.me().then(function(user) {\n        self.user = user;\n        return self.user;\n      });\n    };\n\n\n    proto.destroy = function() {\n      this.user = null;\n      this.permisions = null;\n    };\n\n    return new AvSession();\n  });\n\n})(window);\n","// Inspiration => https://github.com/HackedByChinese/ng-idle\n//\n// Rules:\n//\n//  * ping after 3 minutes from last human activity\n//  * reset session after api success except 401\n//  * idle show after 25 of inactivity\n//\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_IDLE', {\n    EVENTS: {\n      IDLE_INACTIVE: 'av:idle:inactive',\n      IDLE_ACTIVE: 'av:idle:active',\n      SESSION_TIMEOUT_ACTIVE: 'av:idle:session:active',\n      SESSION_TIMEOUT_REDIRECT: 'av:idle:session:redirect',\n      HUMAN: 'keydown.av.idle mousedown.av.idle keydown.av.idle',\n      MACHINE: '$locationChangeSuccess'\n    },\n    INTERVALS: {\n      PING: 3 * 60 * 1000, // 3 minutes\n      IDLE: 25 * 60 * 1000, // 25 minutes\n      SESSION: 30 * 60 * 1000 // 30 minutes\n    },\n    URLS: {\n      HOME: '/availity/web/public.elegant.login',\n      PING: '/api/v1/users/me'\n    }\n  });\n\n  availity.core.provider('avIdle', function(AV_IDLE) {\n\n    var enabled = false;\n    var pingUrl;\n    var redirectUrl;\n    var sessionTimeout;\n    var idleTimeout;\n    var pingTimeout;\n\n    this.enable = function(value) {\n      if(arguments.length) {\n        enabled = !!value;\n      }\n      return enabled;\n    };\n\n    this.setSessionTimeout = function(timeout) {\n      sessionTimeout = timeout || AV_IDLE.INTERVALS.SESSION;\n    };\n\n    this.setIdleTimeout = function(timeout) {\n      idleTimeout = timeout || AV_IDLE.INTERVALS.IDLE;\n    };\n\n    this.setPingTimeout = function(timeout) {\n      pingTimeout = timeout || AV_IDLE.INTERVALS.PING;\n    };\n\n    this.setPingUrl = function(url) {\n      pingUrl = url || AV_IDLE.URLS.PING;\n    };\n\n    this.$get = function(AV_IDLE, $log, $document, $rootScope, $timeout, avThrottle, $q, $injector) {\n\n      var AvIdle = function() {\n\n        // $timeout references\n        this._idleTimer = null;\n        this._sessionTimer = null;\n        this._pingTimer = null;\n        this._keepAlive = null;\n\n        // flag used to track if the if user is idle or session expired\n        this.idleActive = false;\n        this.sessionActive = false;\n\n        this.listeners = [];\n\n        this.init();\n\n      };\n\n      var proto = AvIdle.prototype;\n\n      proto.init = function() {\n\n        if(!enabled) {\n          this.stop();\n          return;\n        }\n\n        this.start();\n      };\n\n      proto.start = function() {\n\n        $log.info('avIdle start');\n\n        var self = this;\n        var listener;\n\n        !sessionTimeout && this.setSessionTimeout();\n        !idleTimeout && this.setIdleTimeout();\n        !pingTimeout && this.setPingTimeout();\n        !pingUrl && this.setPingUrl();\n        !redirectUrl && this.setRedirectUrl();\n\n        $rootScope.$on('$destroy', function() {\n          self.stop();\n        });\n\n        $document.find('body').on(AV_IDLE.EVENTS.HUMAN, function(event) {\n          self.onEvent(event);\n        });\n\n        listener = $rootScope.$on(AV_IDLE.EVENTS.MACHINE, function(event, oldUrl, newUrl) {\n          if(oldUrl !== newUrl) {\n            self.onEvent(event);\n          }\n        });\n        this.listeners.push(listener);\n\n        $rootScope.$on(AV_IDLE.EVENTS.SESSION_TIMEOUT_REDIRECT, function() {\n          document.location.href = redirectUrl;\n        });\n\n        this.startIdleTimer();\n        this.startSessionTimer();\n      };\n\n      proto.stop = function() {\n\n        $document.find('body').off(AV_IDLE.EVENTS.HUMAN);\n\n        // turns off Angular event listeners @see http://stackoverflow.com/a/14898795\n        _.each(this.listeners, function(listener) {\n          listener();\n        });\n\n        this.stopPing();\n        this.stopSessionTimer();\n        this.stopIdleTimer();\n      };\n\n      proto.isEnabled = function() {\n        return enabled;\n      };\n\n      proto.enable = function(value) {\n        if(arguments.length) {\n          enabled = !!value;\n        }\n\n        return this;\n      };\n\n      proto.setSessionTimeout = function(timeout) {\n        sessionTimeout = timeout || AV_IDLE.INTERVALS.SESSION;\n        return this;\n      };\n\n      proto.setIdleTimeout = function(timeout) {\n        idleTimeout = timeout || AV_IDLE.INTERVALS.IDLE;\n        return this;\n      };\n\n      proto.setPingTimeout = function(timeout) {\n        pingTimeout = timeout || AV_IDLE.INTERVALS.PING;\n        return this;\n      };\n\n      proto.setPingUrl = function(url) {\n        pingUrl = url || AV_IDLE.URLS.PING;\n        return this;\n      };\n\n      proto.setRedirectUrl = function(url) {\n        redirectUrl = url || AV_IDLE.URLS.HOME;\n        return this;\n      };\n\n      proto.response = function(response) {\n\n        if(this.isApiRequest(response)) {\n          this.startSessionTimer();\n        }\n\n        return response;\n      };\n\n      proto.isApiRequest = function(response) {\n        return response && response.config && response.config.api;\n      };\n\n      proto.responseError = function(response) {\n\n        if(this.isApiRequest(response) && response.status !== 401) {\n          this.startSessionTimer();\n        }\n\n        if(this.isApiRequest() && response.status === 401) {\n          this.stopPing();\n        }\n\n        return $q.reject(response);\n      };\n\n      proto.startSessionTimer = function() {\n\n        var self = this;\n\n        this.stopSessionTimer();\n\n        var later = function() {\n          $log.info('avIdle session has TIMED OUT');\n          self.stop();\n          $rootScope.$broadcast(AV_IDLE.EVENTS.SESSION_TIMEOUT_ACTIVE);\n        };\n\n        $log.info('avIdle session timer has STARTED');\n        this._sessionTimer = $timeout(later, sessionTimeout, false);\n\n      };\n\n      proto.stopSessionTimer = function() {\n        $log.info('avIdle session timer has STOPPED');\n        $timeout.cancel(this._sessionTimer);\n      };\n\n      proto.startIdleTimer = function() {\n\n        var self = this;\n\n        this.stopIdleTimer();\n\n        var later = function() {\n          self.stopIdleTimer();\n          $log.info('avIdle is IDLING');\n          $rootScope.$broadcast(AV_IDLE.EVENTS.IDLE_ACTIVE);\n        };\n\n        $log.info('avIdle idle timer has STARTED');\n        this._idleTimer = $timeout(later, idleTimeout, false);\n      };\n\n      proto.stopIdleTimer = function() {\n        $log.info('avIdle idle timer has STOPPED');\n        $timeout.cancel(this._idleTimer);\n      };\n\n      proto.startPing = function() {\n\n        if(!this._keepAlive) {\n          $log.info('avIdle ping timer has STARTED');\n          this._keepAlive = avThrottle(this.keepAlive, pingTimeout, {context: this});\n        }\n\n        this._pingTimer = this._keepAlive();\n      };\n\n      proto.stopPing = function() {\n        $log.info('avIdle ping timer has STOPPED');\n        if(this._pingTimer) {\n          $timeout.cancel(this._pingTimer);\n        }\n      };\n\n      proto.keepAlive = function() {\n\n        // destroy the reference to that a new throttle gets created upon\n        // next user or system event\n        this._keepAlive = null;\n        var $http = $injector.get('$http');\n\n        $http.get(pingUrl, {\n          cache: false,\n          api: true\n        }).success(function() {\n          $log.info('avIdle keep-alive SUCCESS');\n        }).error(function() {\n          $log.error('avIdle keep-alive FAILURE');\n        });\n      };\n\n      proto.onEvent = function() {\n        this.startIdleTimer();\n        this.startPing();\n      };\n\n      return new AvIdle();\n\n    };\n\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avIdleInterceptor', function(avIdle) {\n    return {\n      response: function(response) {\n        return avIdle.response(response);\n      },\n      responseError: function(response) {\n        return avIdle.responseError(response);\n      }\n    };\n\n  });\n\n  availity.core.config(function($httpProvider) {\n    $httpProvider.interceptors.push('avIdleInterceptor');\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.value('avValConfig', {\n    classes: {\n      valid: 'ng-valid',\n      invalid: 'ng-invalid',\n      dirty: 'ng-dirty',\n      pristine: 'ng-pristine',\n      touched: 'ng-touched',\n      untouched: 'ng-untouched',\n      submitted: 'ng-submitted'\n    },\n    validators: [\n      'avValPattern',\n      'avValSize',\n      'avValRequired',\n      'avValDateRange',\n      'avValDate'\n    ]\n  });\n\n  availity.core.constant('AV_VAL', {\n    EVENTS: {\n      REVALIDATE: 'av:val:revalidate',\n      SUBMITTED: 'av:val:submitted',\n      FAILED: 'av:val:failed',\n      RESET: 'av:val:reset'\n    },\n    DEBOUNCE: 500,\n    DATE_FORMAT: {\n      SIMPLE: 'MM/DD/YYYY'\n    },\n    PATTERNS: {\n      ALPHA_ONLY: /[^A-Za-z]+/g,\n      NUMERIC_ONLY: /[^0-9]+/g\n    }\n  });\n\n  availity.core.provider('avVal', function() {\n\n    var that = this;\n\n    this.rules = {};\n\n    this.addRules = function(rules) {\n      this.rules = angular.extend(this.rules, rules);\n    };\n\n    this.$get = function($injector, $rootScope, $http, $log, avValConfig, AV_VAL) {\n\n      var AvValidation = function() {\n        this.rules = that.rules;\n        this.validators = [];\n        this.initValidators();\n      };\n\n      var proto = AvValidation.prototype;\n\n      proto.initValidators = function() {\n        var self = this;\n\n        angular.forEach(avValConfig.validators, function(name) {\n          var validator = $injector.get(name);\n          self.validators[validator.name] = validator;\n        });\n      };\n\n      proto.clearAll = function() {\n        // this.validators.splice(0, this.validators.length);\n        // this.rules = {};\n      };\n\n      proto.addRules = function(rules) {\n        this.rules = angular.extend(this.rules, rules);\n        $rootScope.$broadcast(AV_VAL.EVENTS.REVALIDATE);\n      };\n\n      proto.validate = function(key, element, value, ruleName) {\n\n        var self = this;\n\n        var rules = this.rules[key];\n        if(!rules) {\n          $log.error('Failed to get rules key [' + key + '].  Forms must be tagged with a rules set name for validation to work.');\n          return;\n        }\n        var contraints = rules[ruleName];\n        if(!contraints) {\n          $log.info('Rule named [' + ruleName + '] could not be found in the current schema.');\n          contraints = [];\n        }\n\n        var el = element[0];\n        var results  = [];\n        var violations = [];\n        var _valid = true;\n\n        angular.forEach(contraints, function(rule, contraintName) {\n\n          if(!rule) {\n            // when extended rule sets, a user can pass nulls to cancel out a rule so if\n            // one doesn't exist just continue\n            return;\n          }\n\n          var validator = self.validators[contraintName];\n\n          if(angular.isUndefined(validator)) {\n            $log.warn('No validator defined for `' + name + '`');\n            return;\n          }\n\n          var valid = validator.validate(value, rule);\n\n          var validationResult = {\n            valid: valid,\n            ruleName: ruleName,\n            contraintName: contraintName,\n            value: value,\n            message: rule.message,\n            field: el.name || el.id\n          };\n\n          // $log.info(validationResult);\n\n          var result = angular.extend({}, rule, validationResult);\n\n          results.push(result);\n          if(!valid) {\n            violations.push(validationResult);\n          }\n          _valid = _valid && valid;\n        });\n\n        return {\n          isValid: _valid,\n          all: results, // all the constraint results\n          violations: violations\n        };\n\n      };\n\n      return new AvValidation();\n    };\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValUtils', function() {\n\n    return {\n\n      isDefined: function(value) {\n        return angular.isDefined(value) && value !== '' && value !== null;\n      },\n\n      isEmpty: function(value) {\n        return !this.isDefined(value) || $.trim(value) === '';\n      }\n    };\n\n  });\n})(window);\n\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValSize', function(avValUtils) {\n\n    var validator =  {\n      name: 'size',\n      validate: function(value, rule) {\n        var minLength = rule.min || 0;\n        var maxLength = rule.max;\n\n        value = value || '';\n        return avValUtils.isEmpty(value) || value.length >= minLength && (maxLength === undefined || value.length <= maxLength);\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValPattern', function(avValUtils) {\n\n    var validator =  {\n      name: 'pattern',\n      REGEX: /^\\/(.*)\\/([gim]*)$/, //regular expression to test a regular expression\n      asRegExp: function(pattern) {\n        var match;\n\n        if(pattern.test) {\n          return pattern;\n        } else {\n          match = pattern.match(validator.REGEX);\n          if(match) {\n            return new RegExp(match[1], match[2]);\n          } else {\n            throw ('Expected ' + pattern + ' to be a RegExp');\n          }\n        }\n      },\n      validate: function(value, rule) {\n        var values = _.isArray(rule.value) ? rule.value : [rule.value];\n\n        var valid = false;\n\n        _.each(values, function(expresion) {\n          var pattern = validator.asRegExp(expresion);\n          if(avValUtils.isEmpty(value) || pattern.test(value)) {\n            valid = true;\n          }\n        });\n\n        return valid;\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValRequired', function(avValUtils) {\n\n    var validator =  {\n      name: 'required',\n      validate: function(value) {\n        return !avValUtils.isEmpty(value);\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDateRange', function(AV_VAL, avValUtils) {\n\n    var validator = {\n\n      name: 'dateRange',\n\n      getStartDate: function(start) {\n        return validator.setMin(moment().add(start.value, start.units));\n      },\n\n      getEndDate: function(end) {\n        return validator.setMax(moment().add(end.value, end.units) );\n      },\n\n      setMin: function(value) {\n\n        // [fix]: if time is provided this may cause issues.\n        value.set('hours', 0);\n        value.set('minutes', 0);\n        value.set('seconds', 0);\n\n        return value;\n      },\n\n      setMax: function(value) {\n\n        // [fix]: if time is provided this may cause issues.\n        value.set('hours', 23);\n        value.set('minutes', 59);\n        value.set('seconds', 59);\n\n        return value;\n      },\n\n      validation: function(value, rules) {\n\n        var date;\n        var startDate;\n        var endDate;\n\n        date = moment(value, rules.format || AV_VAL.DATE_FORMAT.SIMPLE);\n        date.set('hours', 0);\n        date.set('minutes', 0);\n        date.set('seconds', 0);\n\n        if(!avValUtils.isEmpty(rules.start.units) && !avValUtils.isEmpty(rules.end.units)) {\n          startDate = validator.getStartDate(rules.start);\n          endDate = validator.getEndDate(rules.end);\n        } else {\n          startDate = moment(rules.start.value, rules.format);\n          endDate = validator.setMax(moment(rules.end.value, rules.format));\n        }\n        return date.isBetween(startDate, endDate, 'day') || date.isSame(startDate, 'day') || date.isSame(endDate, 'day');\n      },\n\n      validate: function(value, rule) {\n        return avValUtils.isEmpty(value) || validator.validation(value, rule);\n      }\n\n    };\n\n    return validator;\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDate', function(AV_VAL, avValUtils) {\n\n    var validator = {\n      name: 'dateFormat',\n      validate: function(value, rules) {\n        var format = rules && rules.format ? rules.format : AV_VAL.DATE_FORMAT.SIMPLE;\n        return avValUtils.isEmpty(value) || moment(value, format, true).isValid();\n      }\n    };\n    return validator;\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_GLOBALS', {\n    REGIONS: [\n      {\n        'name': 'Alabama',\n        'code': 'AL'\n      },\n      {\n        'name': 'Alaska',\n        'code': 'AK'\n      },\n      {\n        'name': 'Arizona',\n        'code': 'AZ'\n      },\n      {\n        'name': 'Arkansas',\n        'code': 'AR'\n      },\n      {\n        'name': 'California',\n        'code': 'CA'\n      },\n      {\n        'name': 'Colorado',\n        'code': 'CO'\n      },\n      {\n        'name': 'Connecticut',\n        'code': 'CT'\n      },\n      {\n        'name': 'Delaware',\n        'code': 'DE'\n      },\n      {\n        'name': 'District Of Columbia',\n        'code': 'DC'\n      },\n      {\n        'name': 'Florida',\n        'code': 'FL'\n      },\n      {\n        'name': 'Georgia',\n        'code': 'GA'\n      },\n      {\n        'name': 'Hawaii',\n        'code': 'HI'\n      },\n      {\n        'name': 'Idaho',\n        'code': 'ID'\n      },\n      {\n        'name': 'Illinois',\n        'code': 'IL'\n      },\n      {\n        'name': 'Indiana',\n        'code': 'IN'\n      },\n      {\n        'name': 'Iowa',\n        'code': 'IA'\n      },\n      {\n        'name': 'Kansas',\n        'code': 'KS'\n      },\n      {\n        'name': 'Kentucky',\n        'code': 'KY'\n      },\n      {\n        'name': 'Louisiana',\n        'code': 'LA'\n      },\n      {\n        'name': 'Maine',\n        'code': 'ME'\n      },\n      {\n        'name': 'Maryland',\n        'code': 'MD'\n      },\n      {\n        'name': 'Massachusetts',\n        'code': 'MA'\n      },\n      {\n        'name': 'Michigan',\n        'code': 'MI'\n      },\n      {\n        'name': 'Minnesota',\n        'code': 'MN'\n      },\n      {\n        'name': 'Mississippi',\n        'code': 'MS'\n      },\n      {\n        'name': 'Missouri',\n        'code': 'MO'\n      },\n      {\n        'name': 'Montana',\n        'code': 'MT'\n      },\n      {\n        'name': 'Nebraska',\n        'code': 'NE'\n      },\n      {\n        'name': 'Nevada',\n        'code': 'NV'\n      },\n      {\n        'name': 'New Hampshire',\n        'code': 'NH'\n      },\n      {\n        'name': 'New Jersey',\n        'code': 'NJ'\n      },\n      {\n        'name': 'New Mexico',\n        'code': 'NM'\n      },\n      {\n        'name': 'New York',\n        'code': 'NY'\n      },\n      {\n        'name': 'North Carolina',\n        'code': 'NC'\n      },\n      {\n        'name': 'North Dakota',\n        'code': 'ND'\n      },\n      {\n        'name': 'Ohio',\n        'code': 'OH'\n      },\n      {\n        'name': 'Oklahoma',\n        'code': 'OK'\n      },\n      {\n        'name': 'Oregon',\n        'code': 'OR'\n      },\n      {\n        'name': 'Pennsylvania',\n        'code': 'PA'\n      },\n      {\n        'name': 'Rhode Island',\n        'code': 'RI'\n      },\n      {\n        'name': 'South Carolina',\n        'code': 'SC'\n      },\n      {\n        'name': 'South Dakota',\n        'code': 'SD'\n      },\n      {\n        'name': 'Tennessee',\n        'code': 'TN'\n      },\n      {\n        'name': 'Texas',\n        'code': 'TX'\n      },\n      {\n        'name': 'Utah',\n        'code': 'UT'\n      },\n      {\n        'name': 'Vermont',\n        'code': 'VT'\n      },\n      {\n        'name': 'Virginia',\n        'code': 'VA'\n      },\n      {\n        'name': 'Washington',\n        'code': 'WA'\n      },\n      {\n        'name': 'West Virginia',\n        'code': 'WV'\n      },\n      {\n        'name': 'Wisconsin',\n        'code': 'WI'\n      },\n      {\n        'name': 'Wyoming',\n        'code': 'WY'\n      }\n    ]\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_ANALYTICS', {\n    VIRTUAL_PAGE_TRACKING: true,\n    SERVICES: {\n      PIWIK: 'avPiwikAnalytics',\n      SPLUNK: 'avSplunkAnalytics'\n    },\n    EVENTS: {\n      PAGE: '$locationChangeSuccess',\n      DEFAULT: 'click'\n    },\n    PRE_FIX: /^avAnalytics(.*)$/,\n    // should ignore these since they are part of the directives API\n    IGNORE: ['avAnalyticsOn', 'avAnalyticsIf'],\n    ENV: { // not sure if this should live here\n      PROD: {\n        URL: 'https://piwik.availity.com/piwik/'\n      },\n      QA: {\n        URL: 'https://qa-piwik.availity.com/piwik/'\n      }\n    }\n  });\n\n  availity.core.provider('avAnalytics', function(AV_ANALYTICS) {\n\n    var plugins = [];\n    var virtualPageTracking = AV_ANALYTICS.VIRTUAL_PAGE_TRACKING;\n    var appId;\n\n    this.registerPlugins = function(_plugins) {\n\n      if(angular.isString(_plugins)) {\n        _plugins = [_plugins];\n      }\n\n      if(_.isArray(_plugins)) {\n        plugins = _plugins;\n      } else {\n        throw new Error('AvAnalytics.registerPlugins() expects a string or an array.');\n      }\n\n      return plugins;\n    };\n\n    this.setVirtualPageTracking = function(value) {\n      if(arguments.length) {\n        virtualPageTracking = !!value;\n      }\n      return virtualPageTracking;\n    };\n\n    this.setAppID = function(id) {\n      appId = id;\n      return appId;\n    };\n\n    this.$get = function($injector, $q, $log) {\n\n      var AvAnalytics = function() {\n\n        var self = this;\n        this.services = {};\n\n        if(!plugins || plugins.length === 0) {\n          plugins = [AV_ANALYTICS.SERVICES.SPLUNK];\n        }\n\n        angular.forEach(plugins, function(plugin) {\n\n          try {\n            self.services[plugin] = $injector.get(plugin);\n          } catch(err) {\n            $log.error('Could not load `{0}` plugin', [plugin]);\n          }\n        });\n\n      };\n\n      var proto = AvAnalytics.prototype;\n\n      proto.trackEvent = function(properties) {\n\n        var promises = [];\n\n        angular.forEach(this.services, function(handler) {\n          var promise = handler.trackEvent(properties);\n          promises.push(promise);\n        });\n\n        return $q.all(promises);\n      };\n\n      proto.getAppId = function() {\n        return appId;\n      };\n\n      proto.trackPageView = function(url) {\n\n        var promises = [];\n\n        angular.forEach(this.services, function(handler) {\n          var promise = handler.trackPageView(url);\n          promises.push(promise);\n        });\n\n        return $q.all(promises);\n      };\n\n      return new AvAnalytics();\n    };\n\n  });\n\n  availity.core.run(function($rootScope, AV_ANALYTICS, avAnalytics, $location ) {\n    if(avAnalytics.virtualPageTracking) {\n      $rootScope.$on(AV_ANALYTICS.EVENTS.PAGE, function() {\n        avAnalytics.trackPageView($location.absUrl());\n      });\n    }\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avAnalyticsUtils', function(AV_ANALYTICS, $log) {\n\n    var AnalyticsUtils = function() {};\n\n    var proto = AnalyticsUtils.prototype;\n\n    proto.getProperties = function(attributes) {\n\n      var self = this;\n      var props = {};\n\n      _.forEach(attributes, function(value, key) {\n        if(self.isValidAttribute(key) && self.isNotIgnored(key)) {\n          var result = self.getAttribute(key, value);\n          props[result.key] = result.value;\n        }\n      });\n\n      return props;\n    };\n\n    proto.isExternalLink = function(attrs) {\n      return attrs.href && !attrs.ngClick;\n    };\n\n    proto.isNotIgnored = function(key) {\n      var ignored = _.includes(AV_ANALYTICS.IGNORE, key);\n      return !ignored;\n    };\n\n    proto.isValidAttribute = function(key) {\n      return AV_ANALYTICS.PRE_FIX.test(key);\n    };\n\n    proto.lowercase = function(str) {\n      return str.substr(0, 1).toLowerCase() + str.substr(1);\n    };\n\n    proto.getAttribute = function(key, value) {\n      var simpleKey = key.match(AV_ANALYTICS.PRE_FIX);\n\n      if(simpleKey && simpleKey[1]) {\n        return {\n          key: this.lowercase(simpleKey[1]),\n          value: value\n        };\n      }\n    };\n\n    proto.toNum = function(value) {\n      var parsed = parseInt(value, 10);\n      value = isNaN(parsed) ? 0 : parsed;\n      return value;\n    };\n\n    proto.isValid = function(trackingValues) {\n      var valid = true;\n\n      if(trackingValues.value || trackingValues.value === 0) {\n        delete trackingValues.value;\n      }\n\n      _.forEach(trackingValues, function(key, value) {\n        if(availity.isBlank(value) || _.isUndefined(value)) {\n          $log.warn('The analytic tracking value for ' + key.toUpperCase() +' is not defined.');\n          valid = false;\n        }\n      });\n\n      return valid;\n    };\n\n    return new AnalyticsUtils();\n  });\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avSplunkAnalytics', function($log, avLogMessagesResource, $location) {\n\n    var SplunkAnalyticsService = function() {};\n\n    var proto = SplunkAnalyticsService.prototype;\n\n    proto.trackEvent = function(properties) {\n      properties.url = $location.$$absUrl || 'N/A';\n      properties.level = properties.level || 'info';\n\n      return avLogMessagesResource[properties.level](properties);\n    };\n\n    proto.trackPageView  = function(url) {\n\n      var properties = {\n        event: 'page',\n        level: 'info',\n        url: url || $location.$$absUrl()\n      };\n\n      return avLogMessagesResource[properties.level](properties);\n    };\n\n    return new SplunkAnalyticsService();\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.provider('avPiwikAnalytics', function() {\n\n    var that = this;\n    var siteId;\n\n    // can not push these items to `_paq` because it is defined\n    // after page has loaded\n    this._setCustomVariable = function(index, valueName, value, scope) {\n\n      root._paq = root._paq || [];\n\n      if(!index || isNaN(index)) {\n        throw new Error('index must be a number');\n      } else if(!valueName) {\n        throw new Error('valueName must be declared');\n      } else {\n        root._paq.push(['setCustomVariable', index, valueName, value, scope]);\n      }\n    };\n\n    this.setSiteID = function(_siteID) {\n      siteId = _siteID;\n    };\n\n    // allow the user to pass a array of visit variables\n    this.setVisitVariables = function(items) {\n      _.forEach(items, function(item) {\n        that._setCustomVariable(item[0], item[1], item[2], 'visit');\n      });\n    };\n\n    this.setPageVariables = function(index, name, value) {\n      this._setCustomVariable(index, name, value, 'page');\n    };\n\n    this.$get = function(avAnalyticsUtils, avUsersResource, AV_ANALYTICS, $injector, $log, $q, $document, $location, $window) {\n\n      var AvPiwikAnalytics = function() {\n        this.init();\n      };\n\n      var proto = AvPiwikAnalytics.prototype;\n\n      proto.trackEvent = function(properties) {\n\n        if(!root._paq) {\n          $log.warn('Piwik object `_paq` not found in global scope');\n          return $q.when(false);\n        }\n\n        // http://piwik.org/docs/event-tracking/\n        //\n        // PAQ requires that eventValue be an integer.\n        // Check to make sure value is a number if not convert it to 0.\n        //\n        if(properties.value) {\n          properties.value = avAnalyticsUtils.toNum(properties.event);\n        }\n\n        // check to make sure that data being sent to piwik is a string and not null, empty or undefined\n        if(!avAnalyticsUtils.isValid(properties)) {\n          $log.warn('Invalid properties being passed. Tracking info will not be sent.');\n          return $q.when(false);\n        }\n\n        return $q.when(root._paq.push(['trackEvent', properties.category, properties.event, properties.label, properties.value]));\n      };\n\n      proto.trackPageView  = function(url) {\n\n        if(!root._paq) {\n          $log.warn('Piwik object `_paq` not found in global scope');\n          return $q.when(false);\n        }\n\n        return $q.when(root._paq.push(['trackEvent', url]));\n\n      };\n\n      proto.createScript = function() {\n        if(_.isFinite(siteId)) {\n          $log.warn('Invalid Piwik Site Id.  Piwik analytics has been disabled.');\n          return;\n        }\n\n        var url;\n\n        if($location.$$host === 'apps.availity.com') {\n          url = AV_ANALYTICS.ENV.PROD.URL;\n        } else {\n          url = AV_ANALYTICS.ENV.QA.URL;\n        }\n\n        $window._paq = $window._paq || [];\n        $window._paq.push(['enableLinkTracking']);\n        $window._paq.push(['setTrackerUrl', url + 'piwik.php']);\n        $window._paq.push(['setSiteId', siteId]);\n        $window._paq.push(['trackEvent', url]); //track initial page load even if user data is not loaded yet\n\n        var script = document.createElement('script');\n        var target = document.getElementsByTagName('script')[0];\n        script.type = 'text/javascript';\n        script.defer = true;\n        script.async = true;\n        script.src = url + 'piwik.js';\n        target.parentNode.insertBefore(script, target);\n      };\n\n      proto.init = function() {\n        // this.createScript();\n        // avUsersResource.me().then(function(user) {\n        //   $window._paq.push(['setUserId', user.id]);\n        //   self.trackPageView(); //send another page track when the user data loads\n        // });\n\n      };\n\n      return new AvPiwikAnalytics();\n    };\n\n  });\n\n})(window);\n","// Issue: https://github.com/angular/angular.js/issues/11165\n// Polyfill: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\n//\n// This polyfill is needed because Angular calls toISOString()\n// when an request parameter is of type Date.  If this polyfill isn't present\n// the ajax call fails.\n//\n(function() {\n\n  'use strict';\n\n  var pad = function(number) {\n    if(number < 10) {\n      return '0' + number;\n    }\n    return number;\n  };\n\n  if(!Date.prototype.toISOString) {\n\n    Date.prototype.toISOString = function() {\n\n      return this.getUTCFullYear() +\n        '-' + pad(this.getUTCMonth() + 1) +\n        '-' + pad(this.getUTCDate()) +\n        'T' + pad(this.getUTCHours()) +\n        ':' + pad(this.getUTCMinutes()) +\n        ':' + pad(this.getUTCSeconds()) +\n        '.' + (this.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) +\n        'Z';\n    };\n  }\n\n})(window);\n","/**\n * availity-angular v0.11.0 -- June-15\n * Copyright 2015 Availity, LLC \n */\n\n// Source: /lib/core/index.js\n\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity || {};\n  availity.VERSION = 'v0.11.0';\n  availity.MODULE = 'availity';\n  availity.core = angular.module(availity.MODULE, ['ng']);\n\n  var originalModule = angular.module;\n  var modules = [];\n\n  angular.module = function(name, deps) {\n\n    if(deps && _.indexOf(modules, name) !== -1 ) {\n      throw new Error('redefining module: ' + name);\n    }\n\n    modules.push(name);\n\n    return originalModule(name, deps);\n  };\n\n  root.availity = availity;\n\n  if(typeof module !== 'undefined' && module.exports) {\n    module.exports = availity;\n  }\n\n})(window);\n\n\n// Source: /lib/core/utils/strings.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/helper/makeString.js\n  availity._stringify = function(object) {\n    if(object === null) {\n      return '';\n    }\n    return '' + object;\n  };\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/isBlank.js\n  availity.isBlank = function(str) {\n    return (/^\\s*$/).test(availity._stringify(str));\n  };\n\n})(window);\n\n// Source: /lib/core/utils/uuid.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var uid = ['0', '0', '0'];\n\n  availity.uuid = function(prefix) {\n    var index = uid.length;\n    var digit;\n\n    while(index) {\n      index--;\n      digit = uid[index].charCodeAt(0);\n      if(digit === 57 /*'9'*/) {\n        uid[index] = 'A';\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n      if(digit === 90  /*'Z'*/) {\n        uid[index] = '0';\n      } else {\n        uid[index] = String.fromCharCode(digit + 1);\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n    }\n    uid.unshift('0');\n    return prefix ? prefix + uid.join('') : uid.join('');\n  };\n\n})(window);\n\n// Source: /lib/core/utils/urls.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.REGEX_API_URL = /^.*?api.availity.com(.*)$/;\n\n  availity.getRelativeUrl = function(url) {\n    var result = url.match(availity.REGEX_API_URL);\n    if(result && result[1]) {\n      return '/api' + result[1];\n    }\n\n    return url;\n  };\n\n})(window);\n\n// Source: /lib/core/utils/throttle.js\n// Original => https://github.com/mgcrea/angular-strap/blob/master/src/helpers/debounce.js\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_THROTTLE', {\n    OPTIONS: {\n      wait: 1000,\n      update: false,\n      trailing: true,\n      leading: false\n    }\n  });\n\n  availity.core.factory('avThrottle', function(AV_THROTTLE, $timeout) {\n\n    return function(fn, wait, options) {\n\n      options = _.merge({}, AV_THROTTLE.OPTIONS, options);\n\n      wait = wait ? wait : AV_THROTTLE.THRESHOLD;\n      var update = angular.isDefined(options.update) ? options.update : AV_THROTTLE.UPDATE;\n      var timer = null;\n\n      return function() {\n        var context = options.context || this;\n        var args = arguments;\n\n        if(!timer) {\n          if(options.leading !== false) {\n            fn.apply(context, args);\n          }\n\n          var later = function() {\n            timer = null;\n            if(options.trailing !== false) {\n              fn.apply(context, args);\n            }\n          };\n\n          timer = $timeout(later, wait, update);\n        }\n\n        return timer;\n\n      };\n    };\n  });\n\n})(window);\n\n// Source: /lib/core/logger/logger.js\n// Orginal => https://github.com/ericzon/angular-ny-logger/blob/0c594e864c93e7f33d36141200096bc6139ddde1/angular-ny-logger.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.provider('AvLogger', function() {\n\n    var _enabled = false;\n\n    this.enabled = function(enabled) {\n      _enabled = !!enabled;\n    };\n\n    this.$get = function($injector) {\n\n      var AvLogger = function(context, $delegate) {\n\n        this.context = context || '';\n        this.$log = $delegate;\n\n      };\n\n      var proto = AvLogger.prototype;\n\n      AvLogger.supplant = function(str, o) {\n\n        var _supplant = function (a, b) {\n          var r = o[b];\n          return r;\n        };\n\n        return str.replace(/\\{([^{}]*)\\}/g, _supplant);\n      };\n\n      AvLogger.isObject = function(element) {\n        var elemStr = ( !angular.isUndefined(element) && !angular.isUndefined(element.constructor) ) ? element.constructor.toString() : '';\n        return (elemStr.indexOf('Object') > -1);\n      };\n\n      AvLogger.getFormattedTimestamp = function(date) {\n\n        return AvLogger.supplant('{0}:{1}:{2}:{3}', [\n          date.getHours(),\n          date.getMinutes(),\n          date.getSeconds(),\n          date.getMilliseconds()\n        ]);\n\n      };\n\n      proto._log = function(originalFn, args) {\n\n        // Allow enabling logger through query params\n        // Ex:\n        //\n        // http://localhost:3000/ui.html#avLogger\n\n        var hash = window.location.hash;\n        hash = hash || '';\n\n        if(!_enabled && hash.indexOf('avLogger') < 0 && originalFn !== 'error') {\n          return;\n        }\n\n        var now  = AvLogger.getFormattedTimestamp(new Date());\n        var message = '';\n        var supplantData = [];\n\n        var context = this.context ? ' [' + this.context + '] ' : '';\n\n        switch(args.length) {\n          case 1:\n            // (1) If the user supplied one argument, then the argument must be\n            // the message itself and _log()\n            // will print: <timestamp> - <context>: <message>\n            supplantData = args[0];\n            message = AvLogger.supplant('{0}{1} - {2}', [now, context, args[0]]);\n            break;\n          case 3:\n            // (3) If the user supplied three arguments, then the first argument\n            // is a method name, the second is the message and the third is an\n            // object of variables to interpolate with the message. For this, _log()\n            // will print: <timestamp> - <context> - <method name>('<message>')\n            supplantData = args[2];\n            message = AvLogger.supplant(\"{0}{1} - {2}(\\'{3}\\')\", [now, context, args[0], args[1]]);\n            break;\n          case 2:\n            // (2) If the user provided two arguments, we need to find out whether\n            // they supplied a method name or an interpolation object.\n            // In order to figure that out, we’ll check the type of the last argument.\n            // If it is a string, then it has to be the message itself while the\n            // first argument is the method name. Otherwise consider the first argument\n            // as the message and the second as array of interpolation variables.\n            // The output print will be according to this check.\n            if(typeof args[1] === 'string') {\n              message = AvLogger.supplant(\"{0}{1} - {2}(\\'{3}\\')\", [now, context, args[0], args[1]]);\n            } else {\n              supplantData = args[1];\n              message = AvLogger.supplant('{0}{1} - {2}', [now, context, args[0]]);\n            }\n            break;\n        }\n\n        var $log = this.$log || $injector.get('$log');\n\n        var params = (AvLogger.isObject(supplantData)) ? [message, supplantData] : [AvLogger.supplant(message, supplantData)];\n        $log[originalFn].apply(null, params);\n\n      };\n\n      proto.log = function() {\n        this._log('log', arguments);\n      };\n\n      proto.info = function() {\n        this._log('info', arguments);\n      };\n\n      proto.warn = function() {\n        this._log('warn', arguments);\n      };\n\n      proto.debug = function() {\n        this._log('debug', arguments);\n      };\n\n      proto.error = function() {\n        this._log('error', arguments);\n      };\n\n      return AvLogger;\n\n    };\n\n  });\n\n\n})(window);\n\n// Source: /lib/core/logger/logger-config.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.config(function($provide) {\n\n    $provide.decorator('$log', function($delegate, AvLogger) {\n      return new AvLogger(null, $delegate);\n    });\n\n  });\n\n})(window);\n\n// Source: /lib/core/polling/polling.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_POLLING', {\n    INTERVAL: 1000, // delay in ms before retrying an async request\n    MAX_ELAPSED_TIME: 5000, // max time in ms before polling stops and rejects original request\n    MAX_RETRY: 30, // # of times the request will be tried\n    DECAY: 1.2, // % the polling interval decays after every retry\n    // maximum time polling is allowed before rejecting the request\n    EVENTS: {\n      MAX_RETRY: 'av:polling:max:retry'\n    },\n    REGEX_URL: /^.*?api.availity.com(.*)$/ // capture the relative url from API\n  });\n\n  var PollingServiceFactory = function($rootScope, $q, $injector, $timeout, $log, AV_POLLING, AV_API) {\n\n    var AvPollingService = function() {\n      this.pendingRequests = []; // stores all request for polling\n    };\n\n    var proto = AvPollingService.prototype;\n\n    proto.response = function(response) {\n\n      if(this.isAsyncResponse(response)) {\n        return this.onAsyncReponse(response);\n      }\n\n      return response || $q.when(response);\n    };\n\n    proto.setDefaults = function(config) {\n\n      var defaultOptions = {\n        pollingInterval: AV_POLLING.INTERVAL,\n        pollingDecay: AV_POLLING.DECAY,\n        pollingMaxInterval: AV_POLLING.MAX_ELAPSED_TIME,\n        pollingRetryCount: 0,\n        pollingStartTime: new Date().getTime()\n      };\n\n      return _.extend(defaultOptions, config);\n    };\n\n    proto.responseError = function(response) {\n      // Return the promise rejection\n      return $q.reject(response);\n    };\n\n    /**\n     * API layer return a link with a polling url for\n     * async responses.\n     *\n     * @param  {Object}  response ajax response\n     * @return {Boolean} true if response has status of 202 (accepted) and location param in header with uri+session link\n     */\n    proto.isAsyncResponse = function(response) {\n\n      return response &&\n        response.config &&\n        response.config.api &&\n        response.status &&\n        response.status === 202 &&\n        angular.isFunction(response.headers) && !availity.isBlank(response.headers(AV_API.HEADERS.LOCATION));\n    };\n\n    proto.onAsyncReponse = function(response) {\n\n      response.config = this.setDefaults(response.config);\n\n      var deferred = $q.defer();\n\n      this.queueRequest(deferred, response);\n\n      // [rm3]: Can't call notify before you return promise object?\n      $timeout(function() {\n        // Notify deferred listeners with the original server response\n        deferred.notify(response);\n      }, 0, false);\n\n      return deferred.promise;\n    };\n\n    proto.getUrl = function(url) {\n\n      var result = url.match(AV_POLLING.REGEX_URL);\n      if(result && result[1]) {\n        return '/api' + result[1];\n      }\n\n      return url;\n    };\n\n    proto.queueRequest = function(deferred, response) {\n\n      var self = this;\n      // server replies with location header so set the url into config\n      var _url = availity.getRelativeUrl(response.headers(AV_API.HEADERS.LOCATION));\n      var _config = response.config;\n\n      var config = {\n        method: 'GET',\n        api: true,\n        pollingInterval: _config.pollingInterval,\n        pollingMaxRetry: _config.pollingMaxRetry,\n        pollingMaxInterval: _config.pollingMaxInterval,\n        pollingStartTime: _config.pollingStartTime,\n        _pollingDecay: _config._pollingDecay,\n        pollingRetryCount: _config.pollingRetryCount,\n        pollingDecay: _config.pollingDecay,\n        url: _url, /* set the url from the server response */\n        cache: false\n      };\n\n      var request = {\n        id: availity.uuid('request-'),\n        config: config,\n        deferred: deferred\n      };\n\n      var timeout = this.getPollingTimeout(config);\n\n      // each async request should run on its own timer\n      var timer = $timeout(function() {\n        self.retryRequest(request.id);\n      }, timeout, false);\n\n      request.timer = timer;\n\n      // add the async request to the queue\n      this.pushRequest(request);\n\n    };\n\n    proto.popRequest = function(id) {\n\n      var index = null;\n      var request = null;\n\n      for(var i = 0; i < this.pendingRequests.length; i++) {\n        if(this.pendingRequests[i].id === id) {\n          index = i;\n          break;\n        }\n      }\n\n      request = this.pendingRequests[index];\n      this.pendingRequests.splice(index, 1);\n\n      return request;\n    };\n\n    proto.pushRequest = function(request) {\n      this.pendingRequests.push(request);\n    };\n\n    proto.getPollingTimeout = function(config) {\n      return config.pollingDecay * config.pollingInterval;\n    };\n\n    proto.isPollingMaxTimeout = function(config) {\n      var now = new Date().getTime();\n      var elaspedTime = now - config.pollingStartTime;\n      var isElapsed = elaspedTime > config.pollingMaxInterval;\n      return isElapsed;\n    },\n\n      proto.isMaxRetried = function(config) {\n        return config.pollingRetryCount >= AV_POLLING.MAX_RETRY;\n      };\n\n    proto.isPollable = function(config) {\n      var _isTimeout = this.isPollingMaxTimeout(config);\n      var _isMax = this.isMaxRetried(config);\n\n      return _isTimeout || _isMax ? false : true;\n\n    };\n\n    proto.retryRequest = function(id) {\n\n      var self = this;\n      var request = this.popRequest(id);\n      $timeout.cancel(request.timer);\n\n      var config = request.config;\n\n      var deferred = request.deferred;\n\n      if(!this.isPollable(config)) {\n        $log.info('Rejecting pollable response due to timeout');\n        return deferred.reject(request);\n      }\n\n      // increment counters and polling timeouts\n      this.increment(config);\n\n      function successCallback(response) {\n        if(self.isAsyncResponse(response)) {\n          deferred.notify(response);\n          self.queueRequest(request.deferred, response);\n        } else {\n          deferred.resolve(response);\n        }\n      }\n\n      function errorCallback(response) {\n        deferred.reject(response);\n      }\n\n      // Silly circular dependency trick\n      var $http = $injector.get('$http');\n\n      $http(config).then(successCallback, errorCallback);\n\n    };\n\n    proto.increment = function(config) {\n      this.incrementCounter(config);\n      this.incrementDecay(config);\n    };\n\n    proto.incrementDecay = function(config) {\n      if(!config._pollingDecay) {\n        // store the original decay param\n        config._pollingDecay = config.pollingDecay;\n      }\n      config.pollingDecay *= config._pollingDecay;\n    };\n\n    proto.incrementCounter = function(config) {\n      config.pollingRetryCount++;\n    };\n\n    proto.clearRequests = function() {\n      angular.forEach(this.pendingRequests, function(request) {\n        $timeout.cancel(request.timer);\n      });\n      this.pendingRequests = [];\n    };\n\n    return new AvPollingService();\n\n  };\n\n  availity.core.factory('avPollingService', PollingServiceFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-factory.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_API', {\n    HEADERS: {\n      ID: 'X-API-ID',\n      GLOBAL_ID: 'X-Global-Transaction-ID',\n      SESSION_ID: 'X-Session-ID',\n      LOCATION: 'Location',\n      OVERRIDE: 'X-HTTP-Method-Override',\n      CALLBACK_URL: 'X-Callback-URL',\n      CUSTOMER_ID: 'X-Availity-Customer-ID'\n    }\n  });\n\n  var defaultOptions = {\n    // pre-prend the url with a value like `/public` so we can build urls like `public/api/v1/*`\n    prefix: '',\n    // default base url for endpoints\n    path: '/api',\n    // url to resource endpoint like `coverages` or `payers`\n    url: null,\n    // defaults to version 1\n    version: '/v1',\n    // governance level `/internal`\n    level: '',\n    // post-pend the url with `.json`, `.txt` or `.xml`\n    suffix: '',\n    // cache all request by default\n    cache: true,\n    // flag used to enable behaviors around the Availity Rest API\n    api: true,\n    // # of times the polling service has tried to get a response\n    pollingRetryCount: 0,\n    // in ms\n    pollingInterval: 1000,\n    // % the polling interval decays after every retry\n    pollingDecay: 1.2,\n    // maximum time polling is allowed before rejecting the request\n    pollingMaxInterval: 30000\n\n  };\n\n  // Factory that creates ApiResourcess\n  var ApiResourcesFactory = function($http, $q, avPollingService) {\n\n    var AvApiResource = function(options) {\n\n      if(!options) {\n        throw new Error('[options] cannot be null or undefined');\n      }\n\n      // if string the assume url is being passed in\n      if(angular.isString(options)) {\n        options = options.charAt(0) === '/' ? options : '/' + options;\n        options = angular.extend({}, {url: options});\n      }\n\n      if(!options.url) {\n        throw new Error('[url] cannot be null');\n      }\n\n      // get the default options and merge into this instance\n      this.options = angular.extend({}, defaultOptions, (options || {}));\n    };\n\n    // Alias the prototype\n    var proto = AvApiResource.prototype;\n\n    proto._config = function(config) {\n      return angular.extend({}, this.options, (config || {}));\n    },\n\n    proto._getUrl = function(id) {\n      if(this.options.api) {\n        return this._getApiUrl(id);\n      }\n\n      return this.options.url;\n    };\n\n    proto._createResponse = function(data, status, headers, config) {\n      return {\n        data: data,\n        status: status,\n        headers: headers,\n        config: config\n      };\n    };\n\n    proto._request = function(config, afterCallback) {\n\n      var self = this;\n      var defer = $q.defer();\n\n      $http(config)\n        .success(function(data, status, headers, _config) {\n\n          var _response = {\n            data: data,\n            status: status,\n            headers: headers,\n            config: _config\n          };\n\n          // handle the async response if applicable\n          var _promise = $q.when(avPollingService.response(_response));\n          // notify the promise listener of the original response\n          defer.notify(_response);\n\n          // handle the polling service promise\n          _promise.then(function(successResponse) {\n\n            // if service has a callback then call it\n            // var response = self._createResponse(data, status, headers, _config);\n            if(afterCallback) {\n              successResponse = afterCallback.call(self, successResponse);\n            }\n            defer.resolve(successResponse);\n          }, function(errorResponse) {\n            defer.reject(errorResponse);\n          }, function(notifyResponse) {\n            defer.notify(notifyResponse);\n          });\n\n        }).error(function(data, status, headers, _config) {\n          var response = self._createResponse(data, status, headers, _config);\n          defer.reject(response);\n        });\n\n      var promise = defer.promise;\n\n      // recreate the success callback ala $http\n      promise.success = function(fn) {\n        promise.then(function(response) {\n          fn(response.data, response.status, response.headers, response.config);\n        });\n        return promise;\n      };\n\n      // recreate the error callback ala $http\n      promise.error = function(fn) {\n        promise.then(null, function(response) {\n          fn(response.data, response.status, response.headers, config);\n        });\n        return promise;\n      };\n\n      promise.always = promise['finally'];\n\n      return promise;\n    };\n\n    proto._getApiUrl = function(id) {\n      id = id ? '/' + id : '';\n      return this.options.prefix + this.options.path + this.options.level + this.options.version + this.options.url + id + this.options.suffix;\n    };\n\n    proto.create = function(data, config) {\n\n      if(!data) {\n        throw new Error('called method without [data]');\n      }\n\n      if(this.beforeCreate) {\n        this.beforeCreate(this, data);\n      }\n\n      config = this._config(config);\n      config.method = 'POST';\n      config.url = this._getUrl();\n      config.data = data;\n\n      return this._request(config, this.afterCreate);\n\n    },\n\n\n    proto.get = function(id, config) {\n\n      if(!id) {\n        throw new Error('called method without [id]');\n      }\n\n      config = this._config(config);\n      config.method = 'GET';\n      config.url = this._getUrl(id);\n\n      return this._request(config, this.afterGet);\n\n    };\n\n    proto.query = function(config) {\n\n      config = this._config(config);\n      config.method = 'GET';\n      config.url = this._getUrl();\n\n      return this._request(config, this.afterQuery);\n\n    };\n\n    proto.update = function(id, data, config) {\n\n      var url;\n\n      if(_.isString(id) || _.isNumber(id)) {\n        url = this._getUrl(id);\n      }else {\n        url = this._getUrl();\n        config = data;  // config is really the 2nd param for this use case\n        data = id; // data is really the first param for this use case\n      }\n\n      if(this.beforeUpdate) {\n        data = this.beforeUpdate(data);\n      }\n\n      config = this._config(config);\n      config.method = 'PUT';\n      config.url = url;\n      config.data = data;\n\n      return this._request(config, this.beforeUpdate, this.afterUpdate);\n\n    };\n\n    proto.remove = function(id, config) {\n      if(!id) {\n        throw new Error('called method without [id]');\n      }\n\n      config = this._config(config);\n      config.method = 'DELETE';\n      config.url = this._getUrl(id);\n\n      return this._request(config, this.afterRemove);\n    };\n\n    proto.beforeCreate = null;\n    proto.afterCreate = null;\n    proto.afterQuery = null;\n    proto.afterGet = null;\n    proto.beforeUpdate = null;\n    proto.afterUpdate = null;\n    proto.afterRemove = null;\n\n    return AvApiResource;\n\n  };\n\n  availity.core.factory('AvApiResource', ApiResourcesFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-users.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  var UserServiceFactory = function(AvApiResource, $q) {\n\n    var AvUsersResource = function() {\n      this.user = null;\n      AvApiResource.call(this, 'users');\n    };\n\n    angular.extend(AvUsersResource.prototype, AvApiResource.prototype, {\n\n      afterGet: function(response) {\n        var user = response.data.user ? response.data.user : response.data;\n        this.user = user;\n        return user;\n      },\n\n      me: function() {\n\n        if(this.user) {\n          return $q.when(this.user);\n        }\n\n        return this.get('me');\n      }\n\n    });\n\n    return new AvUsersResource();\n\n  };\n\n  availity.core.factory('avUsersResource', UserServiceFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-coverages.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avCoveragesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations', cache: false});\n  });\n\n})(window);\n\n// Source: /lib/core/api/api-configurations.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avConfigurationsResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations'});\n  });\n\n})(window);\n\n// Source: /lib/core/api/api-log-messages.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var LogMessagesFactory = function(AvApiResource) {\n\n    var AvLogMessagesResource = function() {\n\n      AvApiResource.call(this, {\n        version: '/v1',\n        url: '/log-messages'\n      });\n    };\n\n    angular.extend(AvLogMessagesResource.prototype, AvApiResource.prototype, {\n\n      buildRequest: function(level, entries) {\n\n        var requestPayload = {};\n\n        if(entries.level) {\n          delete entries.level;\n        }\n\n        requestPayload.level = level;\n        requestPayload.entries = entries;\n\n        return requestPayload;\n      },\n\n      debug: function(entries) {\n        return this.create(this.buildRequest('debug', entries));\n      },\n\n      info: function(entries) {\n        return this.create(this.buildRequest('info', entries));\n      },\n\n      warn: function(entries) {\n        return this.create(this.buildRequest('warn', entries));\n      },\n\n      error: function(entries) {\n        return this.create(this.buildRequest('error', entries));\n      }\n\n    });\n\n    return new AvLogMessagesResource();\n\n  };\n\n  availity.core.factory('avLogMessagesResource', LogMessagesFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-documents.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvDocumentsResourceFactory = function(AvApiResource) {\n\n    var AvDocumentsResource = function() {\n      AvApiResource.call(this, 'documents');\n    };\n\n    angular.extend(AvDocumentsResource.prototype, AvApiResource.prototype, {\n\n      getContents: function(id) {\n        var config = this._config();\n        config.url = this.getContentsUrl(id);\n        return this._request(config);\n      },\n\n      getContentsUrl: function(id) {\n        return this._getUrl(id) + '/contents';\n      }\n\n    });\n\n    return new AvDocumentsResource();\n\n  };\n\n  availity.core.factory('avDocumentsResource', AvDocumentsResourceFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-organizations.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var OrganizationResourceFactory = function(AvApiResource) {\n\n    var OrganizationResource = function() {\n      AvApiResource.call(this, 'organizations');\n    };\n\n    angular.extend(OrganizationResource.prototype, AvApiResource.prototype, {\n\n      getOrganizations: function() {\n        return this.query().then(function(response) {\n          return response.data.organizations ? response.data.organizations : response.data;\n        });\n      }\n\n    });\n\n    return new OrganizationResource();\n  };\n\n  availity.core.factory('avOrganizationsResource', OrganizationResourceFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-codes.js\n(function(root) {\n\n  'use strict';\n\n\n  var availity = root.availity;\n\n  availity.core.factory('avCodesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/codes'});\n  });\n\n\n  var AvCodesResourceFactory = function(AvApiResource) {\n\n    var AvCodesResource = function () {\n      AvApiResource.call(this, 'codes');\n    };\n\n    angular.extend(AvCodesResource.prototype, AvApiResource.prototype, {\n\n      getCodes: function (data) {\n\n        // config for the api resource query\n        var config = {};\n        config.params = {};\n        config.params.offset = 50 * (data.page - 1);\n\n        return this.query(config).then(function (response) {\n          //format the response into something select2 can read\n          var myResults = response.data.codes;\n          if(_.isEmpty(myResults[0].id)) {\n            _.each(myResults, function (code) {\n              code.id = code.code;\n            });\n          }\n\n          // calculate if we want to continue searching\n          var moreVal = (( (response.data.offset / response.data.limit) - 1) * 50) < response.data.totalCount;\n          return {\n            more: moreVal,\n            results: myResults\n          };\n\n        });\n      }\n\n    });\n\n    return new AvCodesResource();\n\n  };\n\n  availity.core.factory('avCodesResource', AvCodesResourceFactory);\n\n})(window);\n\n// Source: /lib/core/api/api-user-permissions.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvUserPermissionsResourceFactory = function(AvApiResource) {\n\n    var AvUserPermissionsResource = function() {\n      AvApiResource.call(this, {\n        level: '/internal',\n        version: '/v1',\n        url: '/axi-user-permissions'\n      });\n      this.sessionDate = moment().toISOString();\n    };\n\n    angular.extend(AvUserPermissionsResource.prototype, AvApiResource.prototype, {\n\n      afterQuery: function(response) {\n        return response.data.axiUserPermissions ? response.data.axiUserPermissions : [];\n      },\n\n      getPermissions: function(permissionIds, region) {\n        var self = this;\n        return this.query({\n          params: {\n            permissionId: permissionIds,\n            region: region,\n            sessionDate: self.sessionDate\n          }\n        });\n      }\n\n    });\n\n    return new AvUserPermissionsResource();\n\n  };\n\n  availity.core.factory('avUserPermissionsResource', AvUserPermissionsResourceFactory);\n\n})(window);\n\n// Source: /lib/core/authorizations/user-authorizations.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvUserAuthorizationsFactory = function($q, $log, avUserPermissionsResource) {\n\n    /**\n     *\n     * @constructor\n     */\n    var AvUserAuthorizations = function() {\n      /**\n       * Region is used to return permission/resources relative to region. If null service will\n       * return all permission relative to current.  If value 'ALL' used it will return value relative\n       * to all regions the user has access to.\n       * @type {string}\n       */\n      this.region = null;\n      /**\n       * PermissionIds contains the set of permissionIds to request from service. If user of service calls\n       * setPermissionIds() or call getPermissions() with complete set of permissionIds needed by application,\n       * then service should only make that one hit to retrieve permission information.\n       * @type {Array}\n       */\n      this.permissionIds = [];\n    };\n\n    var proto = AvUserAuthorizations.prototype;\n\n    proto.setRegion = function(region) {\n      this.region = region;\n      return this;\n    };\n\n    proto.setPermissionIds = function(permissionIds) {\n      if(!angular.isArray(permissionIds)) {\n        throw new Error('permissionsIds must be an array of string IDs for avUserAuthorizations#addPermissionIds');\n      }\n      this.permissionIds = permissionIds;\n      return this;\n    };\n\n    proto.isAuthorized = function(permissionId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        return permission.isAuthorized;\n      });\n    };\n\n    proto.isAnyAuthorized = function(permissionIds) {\n      return this.getPermissions(permissionIds).then(function(permissions) {\n        var permission = _.findWhere(permissions, {isAuthorized: true});\n        return permission !== undefined;\n      });\n    };\n\n    proto.getPermission = function(permissionId) {\n      if(!angular.isString(permissionId)) {\n        throw new Error('permissionsId must be a string ID for avUserAuthorizations#getPermission');\n      }\n\n      return this.getPermissions([permissionId])\n        .then(function(_permissions) {\n          return _permissions[permissionId];\n        });\n    };\n\n    proto.getPermissions = function(permissionIds) {\n      var self = this;\n\n      if(!angular.isArray(permissionIds)) {\n        throw new Error('permissionsIds must be an array of string IDs for avUserAuthorizations#getPermissions');\n      }\n      // merge permission ids to reduce calls to backend\n      self.permissionIds = _.union(self.permissionIds, permissionIds);\n\n      return avUserPermissionsResource\n        .getPermissions(self.permissionIds, self.region)\n        .then(function(_permissions) {\n          return self.toPermissionMap(permissionIds, _permissions);\n        });\n    };\n\n    proto.getOrganizations = function(permissionId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        return permission.organizations;\n      });\n    };\n\n    proto.getPayers = function(permissionId, organizationId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        var organization = _.findWhere(permission.organizations, {id: organizationId});\n\n        if(organization && organization.resources) {\n          return organization.resources;\n        }\n        return [];\n      });\n\n    };\n\n    /**\n     * Converts array permissions to map with value for each permissionId, creating empty permission\n     * if can't find permission in array\n     * @private\n     */\n    proto.toPermissionMap = function(permissionIds, permissions) {\n      var self = this;\n      var map = {};\n      permissions = _.slice(permissions);\n      _.forEach(permissionIds, function(permissionId) {\n        var key = {id: permissionId};\n        var permission = _.findWhere(permissions, key);\n        permission = permission ? self.toPermission(permission) : self.toPermission(key);\n        map[permission.id] = permission;\n      });\n      return map;\n    };\n\n    /**\n     * Convert a permission resource into a structure that is easier to work with.\n     * @private\n     */\n    proto.toPermission = function(permission) {\n      return {\n        id: permission.id,\n        description: permission.description ? permission.description : '',\n        geographies: permission.geographies ? permission.geographies : [],\n        organizations: permission.organizations ? permission.organizations : [],\n        isAuthorized: permission.organizations ? permission.organizations.length > 0 : false\n      };\n    };\n\n    return new AvUserAuthorizations();\n\n  };\n\n  availity.core.factory('avUserAuthorizations', AvUserAuthorizationsFactory);\n\n})(window);\n\n// Source: /lib/core/session/session.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_SESSION', {\n    SESSION_TIMEOUT: 'av:auth:session:timeout',\n    NOT_AUTHORIZED: 'av:auth:not:authorized'\n  });\n\n  availity.core.factory('avSession', function($q, avUsersResource) {\n\n    var AvSession = function() {\n      this.user = null;\n      this.permissions = null;\n    };\n\n    var proto = AvSession.prototype;\n\n    proto.getUser = function() {\n      var self = this;\n\n      if(this.user) {\n        return $q.when(this.user);\n      }\n\n      return avUsersResource.me().then(function(user) {\n        self.user = user;\n        return self.user;\n      });\n    };\n\n\n    proto.destroy = function() {\n      this.user = null;\n      this.permisions = null;\n    };\n\n    return new AvSession();\n  });\n\n})(window);\n\n// Source: /lib/core/idle/idle.js\n// Inspiration => https://github.com/HackedByChinese/ng-idle\n//\n// Rules:\n//\n//  * ping after 3 minutes from last human activity\n//  * reset session after api success except 401\n//  * idle show after 25 of inactivity\n//\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_IDLE', {\n    EVENTS: {\n      IDLE_INACTIVE: 'av:idle:inactive',\n      IDLE_ACTIVE: 'av:idle:active',\n      SESSION_TIMEOUT_ACTIVE: 'av:idle:session:active',\n      SESSION_TIMEOUT_REDIRECT: 'av:idle:session:redirect',\n      HUMAN: 'keydown.av.idle mousedown.av.idle keydown.av.idle',\n      MACHINE: '$locationChangeSuccess'\n    },\n    INTERVALS: {\n      PING: 3 * 60 * 1000, // 3 minutes\n      IDLE: 25 * 60 * 1000, // 25 minutes\n      SESSION: 30 * 60 * 1000 // 30 minutes\n    },\n    URLS: {\n      HOME: '/availity/web/public.elegant.login',\n      PING: '/api/v1/users/me'\n    }\n  });\n\n  availity.core.provider('avIdle', function(AV_IDLE) {\n\n    var enabled = false;\n    var pingUrl;\n    var redirectUrl;\n    var sessionTimeout;\n    var idleTimeout;\n    var pingTimeout;\n\n    this.enable = function(value) {\n      if(arguments.length) {\n        enabled = !!value;\n      }\n      return enabled;\n    };\n\n    this.setSessionTimeout = function(timeout) {\n      sessionTimeout = timeout || AV_IDLE.INTERVALS.SESSION;\n    };\n\n    this.setIdleTimeout = function(timeout) {\n      idleTimeout = timeout || AV_IDLE.INTERVALS.IDLE;\n    };\n\n    this.setPingTimeout = function(timeout) {\n      pingTimeout = timeout || AV_IDLE.INTERVALS.PING;\n    };\n\n    this.setPingUrl = function(url) {\n      pingUrl = url || AV_IDLE.URLS.PING;\n    };\n\n    this.$get = function(AV_IDLE, $log, $document, $rootScope, $timeout, avThrottle, $q, $injector) {\n\n      var AvIdle = function() {\n\n        // $timeout references\n        this._idleTimer = null;\n        this._sessionTimer = null;\n        this._pingTimer = null;\n        this._keepAlive = null;\n\n        // flag used to track if the if user is idle or session expired\n        this.idleActive = false;\n        this.sessionActive = false;\n\n        this.listeners = [];\n\n        this.init();\n\n      };\n\n      var proto = AvIdle.prototype;\n\n      proto.init = function() {\n\n        if(!enabled) {\n          this.stop();\n          return;\n        }\n\n        this.start();\n      };\n\n      proto.start = function() {\n\n        $log.info('avIdle start');\n\n        var self = this;\n        var listener;\n\n        !sessionTimeout && this.setSessionTimeout();\n        !idleTimeout && this.setIdleTimeout();\n        !pingTimeout && this.setPingTimeout();\n        !pingUrl && this.setPingUrl();\n        !redirectUrl && this.setRedirectUrl();\n\n        $rootScope.$on('$destroy', function() {\n          self.stop();\n        });\n\n        $document.find('body').on(AV_IDLE.EVENTS.HUMAN, function(event) {\n          self.onEvent(event);\n        });\n\n        listener = $rootScope.$on(AV_IDLE.EVENTS.MACHINE, function(event, oldUrl, newUrl) {\n          if(oldUrl !== newUrl) {\n            self.onEvent(event);\n          }\n        });\n        this.listeners.push(listener);\n\n        $rootScope.$on(AV_IDLE.EVENTS.SESSION_TIMEOUT_REDIRECT, function() {\n          document.location.href = redirectUrl;\n        });\n\n        this.startIdleTimer();\n        this.startSessionTimer();\n      };\n\n      proto.stop = function() {\n\n        $document.find('body').off(AV_IDLE.EVENTS.HUMAN);\n\n        // turns off Angular event listeners @see http://stackoverflow.com/a/14898795\n        _.each(this.listeners, function(listener) {\n          listener();\n        });\n\n        this.stopPing();\n        this.stopSessionTimer();\n        this.stopIdleTimer();\n      };\n\n      proto.isEnabled = function() {\n        return enabled;\n      };\n\n      proto.enable = function(value) {\n        if(arguments.length) {\n          enabled = !!value;\n        }\n\n        return this;\n      };\n\n      proto.setSessionTimeout = function(timeout) {\n        sessionTimeout = timeout || AV_IDLE.INTERVALS.SESSION;\n        return this;\n      };\n\n      proto.setIdleTimeout = function(timeout) {\n        idleTimeout = timeout || AV_IDLE.INTERVALS.IDLE;\n        return this;\n      };\n\n      proto.setPingTimeout = function(timeout) {\n        pingTimeout = timeout || AV_IDLE.INTERVALS.PING;\n        return this;\n      };\n\n      proto.setPingUrl = function(url) {\n        pingUrl = url || AV_IDLE.URLS.PING;\n        return this;\n      };\n\n      proto.setRedirectUrl = function(url) {\n        redirectUrl = url || AV_IDLE.URLS.HOME;\n        return this;\n      };\n\n      proto.response = function(response) {\n\n        if(this.isApiRequest(response)) {\n          this.startSessionTimer();\n        }\n\n        return response;\n      };\n\n      proto.isApiRequest = function(response) {\n        return response && response.config && response.config.api;\n      };\n\n      proto.responseError = function(response) {\n\n        if(this.isApiRequest(response) && response.status !== 401) {\n          this.startSessionTimer();\n        }\n\n        if(this.isApiRequest() && response.status === 401) {\n          this.stopPing();\n        }\n\n        return $q.reject(response);\n      };\n\n      proto.startSessionTimer = function() {\n\n        var self = this;\n\n        this.stopSessionTimer();\n\n        var later = function() {\n          $log.info('avIdle session has TIMED OUT');\n          self.stop();\n          $rootScope.$broadcast(AV_IDLE.EVENTS.SESSION_TIMEOUT_ACTIVE);\n        };\n\n        $log.info('avIdle session timer has STARTED');\n        this._sessionTimer = $timeout(later, sessionTimeout, false);\n\n      };\n\n      proto.stopSessionTimer = function() {\n        $log.info('avIdle session timer has STOPPED');\n        $timeout.cancel(this._sessionTimer);\n      };\n\n      proto.startIdleTimer = function() {\n\n        var self = this;\n\n        this.stopIdleTimer();\n\n        var later = function() {\n          self.stopIdleTimer();\n          $log.info('avIdle is IDLING');\n          $rootScope.$broadcast(AV_IDLE.EVENTS.IDLE_ACTIVE);\n        };\n\n        $log.info('avIdle idle timer has STARTED');\n        this._idleTimer = $timeout(later, idleTimeout, false);\n      };\n\n      proto.stopIdleTimer = function() {\n        $log.info('avIdle idle timer has STOPPED');\n        $timeout.cancel(this._idleTimer);\n      };\n\n      proto.startPing = function() {\n\n        if(!this._keepAlive) {\n          $log.info('avIdle ping timer has STARTED');\n          this._keepAlive = avThrottle(this.keepAlive, pingTimeout, {context: this});\n        }\n\n        this._pingTimer = this._keepAlive();\n      };\n\n      proto.stopPing = function() {\n        $log.info('avIdle ping timer has STOPPED');\n        if(this._pingTimer) {\n          $timeout.cancel(this._pingTimer);\n        }\n      };\n\n      proto.keepAlive = function() {\n\n        // destroy the reference to that a new throttle gets created upon\n        // next user or system event\n        this._keepAlive = null;\n        var $http = $injector.get('$http');\n\n        $http.get(pingUrl, {\n          cache: false,\n          api: true\n        }).success(function() {\n          $log.info('avIdle keep-alive SUCCESS');\n        }).error(function() {\n          $log.error('avIdle keep-alive FAILURE');\n        });\n      };\n\n      proto.onEvent = function() {\n        this.startIdleTimer();\n        this.startPing();\n      };\n\n      return new AvIdle();\n\n    };\n\n  });\n\n})(window);\n\n// Source: /lib/core/idle/idle-interceptor.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avIdleInterceptor', function(avIdle) {\n    return {\n      response: function(response) {\n        return avIdle.response(response);\n      },\n      responseError: function(response) {\n        return avIdle.responseError(response);\n      }\n    };\n\n  });\n\n  availity.core.config(function($httpProvider) {\n    $httpProvider.interceptors.push('avIdleInterceptor');\n  });\n\n})(window);\n\n// Source: /lib/core/validation/validator.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.value('avValConfig', {\n    classes: {\n      valid: 'ng-valid',\n      invalid: 'ng-invalid',\n      dirty: 'ng-dirty',\n      pristine: 'ng-pristine',\n      touched: 'ng-touched',\n      untouched: 'ng-untouched',\n      submitted: 'ng-submitted'\n    },\n    validators: [\n      'avValPattern',\n      'avValSize',\n      'avValRequired',\n      'avValDateRange',\n      'avValDate'\n    ]\n  });\n\n  availity.core.constant('AV_VAL', {\n    EVENTS: {\n      REVALIDATE: 'av:val:revalidate',\n      SUBMITTED: 'av:val:submitted',\n      FAILED: 'av:val:failed',\n      RESET: 'av:val:reset'\n    },\n    DEBOUNCE: 500,\n    DATE_FORMAT: {\n      SIMPLE: 'MM/DD/YYYY'\n    },\n    PATTERNS: {\n      ALPHA_ONLY: /[^A-Za-z]+/g,\n      NUMERIC_ONLY: /[^0-9]+/g\n    }\n  });\n\n  availity.core.provider('avVal', function() {\n\n    var that = this;\n\n    this.rules = {};\n\n    this.addRules = function(rules) {\n      this.rules = angular.extend(this.rules, rules);\n    };\n\n    this.$get = function($injector, $rootScope, $http, $log, avValConfig, AV_VAL) {\n\n      var AvValidation = function() {\n        this.rules = that.rules;\n        this.validators = [];\n        this.initValidators();\n      };\n\n      var proto = AvValidation.prototype;\n\n      proto.initValidators = function() {\n        var self = this;\n\n        angular.forEach(avValConfig.validators, function(name) {\n          var validator = $injector.get(name);\n          self.validators[validator.name] = validator;\n        });\n      };\n\n      proto.clearAll = function() {\n        // this.validators.splice(0, this.validators.length);\n        // this.rules = {};\n      };\n\n      proto.addRules = function(rules) {\n        this.rules = angular.extend(this.rules, rules);\n        $rootScope.$broadcast(AV_VAL.EVENTS.REVALIDATE);\n      };\n\n      proto.validate = function(key, element, value, ruleName) {\n\n        var self = this;\n\n        var rules = this.rules[key];\n        if(!rules) {\n          $log.error('Failed to get rules key [' + key + '].  Forms must be tagged with a rules set name for validation to work.');\n          return;\n        }\n        var contraints = rules[ruleName];\n        if(!contraints) {\n          $log.info('Rule named [' + ruleName + '] could not be found in the current schema.');\n          contraints = [];\n        }\n\n        var el = element[0];\n        var results  = [];\n        var violations = [];\n        var _valid = true;\n\n        angular.forEach(contraints, function(rule, contraintName) {\n\n          if(!rule) {\n            // when extended rule sets, a user can pass nulls to cancel out a rule so if\n            // one doesn't exist just continue\n            return;\n          }\n\n          var validator = self.validators[contraintName];\n\n          if(angular.isUndefined(validator)) {\n            $log.warn('No validator defined for `' + name + '`');\n            return;\n          }\n\n          var valid = validator.validate(value, rule);\n\n          var validationResult = {\n            valid: valid,\n            ruleName: ruleName,\n            contraintName: contraintName,\n            value: value,\n            message: rule.message,\n            field: el.name || el.id\n          };\n\n          // $log.info(validationResult);\n\n          var result = angular.extend({}, rule, validationResult);\n\n          results.push(result);\n          if(!valid) {\n            violations.push(validationResult);\n          }\n          _valid = _valid && valid;\n        });\n\n        return {\n          isValid: _valid,\n          all: results, // all the constraint results\n          violations: violations\n        };\n\n      };\n\n      return new AvValidation();\n    };\n\n  });\n})(window);\n\n// Source: /lib/core/validation/validators/validator-utils.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValUtils', function() {\n\n    return {\n\n      isDefined: function(value) {\n        return angular.isDefined(value) && value !== '' && value !== null;\n      },\n\n      isEmpty: function(value) {\n        return !this.isDefined(value) || $.trim(value) === '';\n      }\n    };\n\n  });\n})(window);\n\n\n// Source: /lib/core/validation/validators/validator-size.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValSize', function(avValUtils) {\n\n    var validator =  {\n      name: 'size',\n      validate: function(value, rule) {\n        var minLength = rule.min || 0;\n        var maxLength = rule.max;\n\n        value = value || '';\n        return avValUtils.isEmpty(value) || value.length >= minLength && (maxLength === undefined || value.length <= maxLength);\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n\n// Source: /lib/core/validation/validators/validator-pattern.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValPattern', function(avValUtils) {\n\n    var validator =  {\n      name: 'pattern',\n      REGEX: /^\\/(.*)\\/([gim]*)$/, //regular expression to test a regular expression\n      asRegExp: function(pattern) {\n        var match;\n\n        if(pattern.test) {\n          return pattern;\n        } else {\n          match = pattern.match(validator.REGEX);\n          if(match) {\n            return new RegExp(match[1], match[2]);\n          } else {\n            throw ('Expected ' + pattern + ' to be a RegExp');\n          }\n        }\n      },\n      validate: function(value, rule) {\n        var values = _.isArray(rule.value) ? rule.value : [rule.value];\n\n        var valid = false;\n\n        _.each(values, function(expresion) {\n          var pattern = validator.asRegExp(expresion);\n          if(avValUtils.isEmpty(value) || pattern.test(value)) {\n            valid = true;\n          }\n        });\n\n        return valid;\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n\n// Source: /lib/core/validation/validators/validator-required.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValRequired', function(avValUtils) {\n\n    var validator =  {\n      name: 'required',\n      validate: function(value) {\n        return !avValUtils.isEmpty(value);\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n\n// Source: /lib/core/validation/validators/validator-date-range.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDateRange', function(AV_VAL, avValUtils) {\n\n    var validator = {\n\n      name: 'dateRange',\n\n      getStartDate: function(start) {\n        return validator.setMin(moment().add(start.value, start.units));\n      },\n\n      getEndDate: function(end) {\n        return validator.setMax(moment().add(end.value, end.units) );\n      },\n\n      setMin: function(value) {\n\n        // [fix]: if time is provided this may cause issues.\n        value.set('hours', 0);\n        value.set('minutes', 0);\n        value.set('seconds', 0);\n\n        return value;\n      },\n\n      setMax: function(value) {\n\n        // [fix]: if time is provided this may cause issues.\n        value.set('hours', 23);\n        value.set('minutes', 59);\n        value.set('seconds', 59);\n\n        return value;\n      },\n\n      validation: function(value, rules) {\n\n        var date;\n        var startDate;\n        var endDate;\n\n        date = moment(value, rules.format || AV_VAL.DATE_FORMAT.SIMPLE);\n        date.set('hours', 0);\n        date.set('minutes', 0);\n        date.set('seconds', 0);\n\n        if(!avValUtils.isEmpty(rules.start.units) && !avValUtils.isEmpty(rules.end.units)) {\n          startDate = validator.getStartDate(rules.start);\n          endDate = validator.getEndDate(rules.end);\n        } else {\n          startDate = moment(rules.start.value, rules.format);\n          endDate = validator.setMax(moment(rules.end.value, rules.format));\n        }\n        return date.isBetween(startDate, endDate, 'day') || date.isSame(startDate, 'day') || date.isSame(endDate, 'day');\n      },\n\n      validate: function(value, rule) {\n        return avValUtils.isEmpty(value) || validator.validation(value, rule);\n      }\n\n    };\n\n    return validator;\n  });\n})(window);\n\n// Source: /lib/core/validation/validators/validator-date-format.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDate', function(AV_VAL, avValUtils) {\n\n    var validator = {\n      name: 'dateFormat',\n      validate: function(value, rules) {\n        var format = rules && rules.format ? rules.format : AV_VAL.DATE_FORMAT.SIMPLE;\n        return avValUtils.isEmpty(value) || moment(value, format, true).isValid();\n      }\n    };\n    return validator;\n  });\n})(window);\n\n// Source: /lib/core/utils/globals.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_GLOBALS', {\n    REGIONS: [\n      {\n        'name': 'Alabama',\n        'code': 'AL'\n      },\n      {\n        'name': 'Alaska',\n        'code': 'AK'\n      },\n      {\n        'name': 'Arizona',\n        'code': 'AZ'\n      },\n      {\n        'name': 'Arkansas',\n        'code': 'AR'\n      },\n      {\n        'name': 'California',\n        'code': 'CA'\n      },\n      {\n        'name': 'Colorado',\n        'code': 'CO'\n      },\n      {\n        'name': 'Connecticut',\n        'code': 'CT'\n      },\n      {\n        'name': 'Delaware',\n        'code': 'DE'\n      },\n      {\n        'name': 'District Of Columbia',\n        'code': 'DC'\n      },\n      {\n        'name': 'Florida',\n        'code': 'FL'\n      },\n      {\n        'name': 'Georgia',\n        'code': 'GA'\n      },\n      {\n        'name': 'Hawaii',\n        'code': 'HI'\n      },\n      {\n        'name': 'Idaho',\n        'code': 'ID'\n      },\n      {\n        'name': 'Illinois',\n        'code': 'IL'\n      },\n      {\n        'name': 'Indiana',\n        'code': 'IN'\n      },\n      {\n        'name': 'Iowa',\n        'code': 'IA'\n      },\n      {\n        'name': 'Kansas',\n        'code': 'KS'\n      },\n      {\n        'name': 'Kentucky',\n        'code': 'KY'\n      },\n      {\n        'name': 'Louisiana',\n        'code': 'LA'\n      },\n      {\n        'name': 'Maine',\n        'code': 'ME'\n      },\n      {\n        'name': 'Maryland',\n        'code': 'MD'\n      },\n      {\n        'name': 'Massachusetts',\n        'code': 'MA'\n      },\n      {\n        'name': 'Michigan',\n        'code': 'MI'\n      },\n      {\n        'name': 'Minnesota',\n        'code': 'MN'\n      },\n      {\n        'name': 'Mississippi',\n        'code': 'MS'\n      },\n      {\n        'name': 'Missouri',\n        'code': 'MO'\n      },\n      {\n        'name': 'Montana',\n        'code': 'MT'\n      },\n      {\n        'name': 'Nebraska',\n        'code': 'NE'\n      },\n      {\n        'name': 'Nevada',\n        'code': 'NV'\n      },\n      {\n        'name': 'New Hampshire',\n        'code': 'NH'\n      },\n      {\n        'name': 'New Jersey',\n        'code': 'NJ'\n      },\n      {\n        'name': 'New Mexico',\n        'code': 'NM'\n      },\n      {\n        'name': 'New York',\n        'code': 'NY'\n      },\n      {\n        'name': 'North Carolina',\n        'code': 'NC'\n      },\n      {\n        'name': 'North Dakota',\n        'code': 'ND'\n      },\n      {\n        'name': 'Ohio',\n        'code': 'OH'\n      },\n      {\n        'name': 'Oklahoma',\n        'code': 'OK'\n      },\n      {\n        'name': 'Oregon',\n        'code': 'OR'\n      },\n      {\n        'name': 'Pennsylvania',\n        'code': 'PA'\n      },\n      {\n        'name': 'Rhode Island',\n        'code': 'RI'\n      },\n      {\n        'name': 'South Carolina',\n        'code': 'SC'\n      },\n      {\n        'name': 'South Dakota',\n        'code': 'SD'\n      },\n      {\n        'name': 'Tennessee',\n        'code': 'TN'\n      },\n      {\n        'name': 'Texas',\n        'code': 'TX'\n      },\n      {\n        'name': 'Utah',\n        'code': 'UT'\n      },\n      {\n        'name': 'Vermont',\n        'code': 'VT'\n      },\n      {\n        'name': 'Virginia',\n        'code': 'VA'\n      },\n      {\n        'name': 'Washington',\n        'code': 'WA'\n      },\n      {\n        'name': 'West Virginia',\n        'code': 'WV'\n      },\n      {\n        'name': 'Wisconsin',\n        'code': 'WI'\n      },\n      {\n        'name': 'Wyoming',\n        'code': 'WY'\n      }\n    ]\n  });\n\n})(window);\n\n// Source: /lib/core/analytics/analytics.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_ANALYTICS', {\n    VIRTUAL_PAGE_TRACKING: true,\n    SERVICES: {\n      PIWIK: 'avPiwikAnalytics',\n      SPLUNK: 'avSplunkAnalytics'\n    },\n    EVENTS: {\n      PAGE: '$locationChangeSuccess',\n      DEFAULT: 'click'\n    },\n    PRE_FIX: /^avAnalytics(.*)$/,\n    // should ignore these since they are part of the directives API\n    IGNORE: ['avAnalyticsOn', 'avAnalyticsIf'],\n    ENV: { // not sure if this should live here\n      PROD: {\n        URL: 'https://piwik.availity.com/piwik/'\n      },\n      QA: {\n        URL: 'https://qa-piwik.availity.com/piwik/'\n      }\n    }\n  });\n\n  availity.core.provider('avAnalytics', function(AV_ANALYTICS) {\n\n    var plugins = [];\n    var virtualPageTracking = AV_ANALYTICS.VIRTUAL_PAGE_TRACKING;\n    var appId;\n\n    this.registerPlugins = function(_plugins) {\n\n      if(angular.isString(_plugins)) {\n        _plugins = [_plugins];\n      }\n\n      if(_.isArray(_plugins)) {\n        plugins = _plugins;\n      } else {\n        throw new Error('AvAnalytics.registerPlugins() expects a string or an array.');\n      }\n\n      return plugins;\n    };\n\n    this.setVirtualPageTracking = function(value) {\n      if(arguments.length) {\n        virtualPageTracking = !!value;\n      }\n      return virtualPageTracking;\n    };\n\n    this.setAppID = function(id) {\n      appId = id;\n      return appId;\n    };\n\n    this.$get = function($injector, $q, $log) {\n\n      var AvAnalytics = function() {\n\n        var self = this;\n        this.services = {};\n\n        if(!plugins || plugins.length === 0) {\n          plugins = [AV_ANALYTICS.SERVICES.SPLUNK];\n        }\n\n        angular.forEach(plugins, function(plugin) {\n\n          try {\n            self.services[plugin] = $injector.get(plugin);\n          } catch(err) {\n            $log.error('Could not load `{0}` plugin', [plugin]);\n          }\n        });\n\n      };\n\n      var proto = AvAnalytics.prototype;\n\n      proto.trackEvent = function(properties) {\n\n        var promises = [];\n\n        angular.forEach(this.services, function(handler) {\n          var promise = handler.trackEvent(properties);\n          promises.push(promise);\n        });\n\n        return $q.all(promises);\n      };\n\n      proto.getAppId = function() {\n        return appId;\n      };\n\n      proto.trackPageView = function(url) {\n\n        var promises = [];\n\n        angular.forEach(this.services, function(handler) {\n          var promise = handler.trackPageView(url);\n          promises.push(promise);\n        });\n\n        return $q.all(promises);\n      };\n\n      return new AvAnalytics();\n    };\n\n  });\n\n  availity.core.run(function($rootScope, AV_ANALYTICS, avAnalytics, $location ) {\n    if(avAnalytics.virtualPageTracking) {\n      $rootScope.$on(AV_ANALYTICS.EVENTS.PAGE, function() {\n        avAnalytics.trackPageView($location.absUrl());\n      });\n    }\n  });\n\n})(window);\n\n// Source: /lib/core/analytics/analytics-util.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avAnalyticsUtils', function(AV_ANALYTICS, $log) {\n\n    var AnalyticsUtils = function() {};\n\n    var proto = AnalyticsUtils.prototype;\n\n    proto.getProperties = function(attributes) {\n\n      var self = this;\n      var props = {};\n\n      _.forEach(attributes, function(value, key) {\n        if(self.isValidAttribute(key) && self.isNotIgnored(key)) {\n          var result = self.getAttribute(key, value);\n          props[result.key] = result.value;\n        }\n      });\n\n      return props;\n    };\n\n    proto.isExternalLink = function(attrs) {\n      return attrs.href && !attrs.ngClick;\n    };\n\n    proto.isNotIgnored = function(key) {\n      var ignored = _.includes(AV_ANALYTICS.IGNORE, key);\n      return !ignored;\n    };\n\n    proto.isValidAttribute = function(key) {\n      return AV_ANALYTICS.PRE_FIX.test(key);\n    };\n\n    proto.lowercase = function(str) {\n      return str.substr(0, 1).toLowerCase() + str.substr(1);\n    };\n\n    proto.getAttribute = function(key, value) {\n      var simpleKey = key.match(AV_ANALYTICS.PRE_FIX);\n\n      if(simpleKey && simpleKey[1]) {\n        return {\n          key: this.lowercase(simpleKey[1]),\n          value: value\n        };\n      }\n    };\n\n    proto.toNum = function(value) {\n      var parsed = parseInt(value, 10);\n      value = isNaN(parsed) ? 0 : parsed;\n      return value;\n    };\n\n    proto.isValid = function(trackingValues) {\n      var valid = true;\n\n      if(trackingValues.value || trackingValues.value === 0) {\n        delete trackingValues.value;\n      }\n\n      _.forEach(trackingValues, function(key, value) {\n        if(availity.isBlank(value) || _.isUndefined(value)) {\n          $log.warn('The analytic tracking value for ' + key.toUpperCase() +' is not defined.');\n          valid = false;\n        }\n      });\n\n      return valid;\n    };\n\n    return new AnalyticsUtils();\n  });\n})(window);\n\n// Source: /lib/core/analytics/analytics-splunk.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avSplunkAnalytics', function($log, avLogMessagesResource, $location) {\n\n    var SplunkAnalyticsService = function() {};\n\n    var proto = SplunkAnalyticsService.prototype;\n\n    proto.trackEvent = function(properties) {\n      properties.url = $location.$$absUrl || 'N/A';\n      properties.level = properties.level || 'info';\n\n      return avLogMessagesResource[properties.level](properties);\n    };\n\n    proto.trackPageView  = function(url) {\n\n      var properties = {\n        event: 'page',\n        level: 'info',\n        url: url || $location.$$absUrl()\n      };\n\n      return avLogMessagesResource[properties.level](properties);\n    };\n\n    return new SplunkAnalyticsService();\n  });\n\n})(window);\n\n// Source: /lib/core/analytics/analytics-piwik.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.provider('avPiwikAnalytics', function() {\n\n    var that = this;\n    var siteId;\n\n    // can not push these items to `_paq` because it is defined\n    // after page has loaded\n    this._setCustomVariable = function(index, valueName, value, scope) {\n\n      root._paq = root._paq || [];\n\n      if(!index || isNaN(index)) {\n        throw new Error('index must be a number');\n      } else if(!valueName) {\n        throw new Error('valueName must be declared');\n      } else {\n        root._paq.push(['setCustomVariable', index, valueName, value, scope]);\n      }\n    };\n\n    this.setSiteID = function(_siteID) {\n      siteId = _siteID;\n    };\n\n    // allow the user to pass a array of visit variables\n    this.setVisitVariables = function(items) {\n      _.forEach(items, function(item) {\n        that._setCustomVariable(item[0], item[1], item[2], 'visit');\n      });\n    };\n\n    this.setPageVariables = function(index, name, value) {\n      this._setCustomVariable(index, name, value, 'page');\n    };\n\n    this.$get = function(avAnalyticsUtils, avUsersResource, AV_ANALYTICS, $injector, $log, $q, $document, $location, $window) {\n\n      var AvPiwikAnalytics = function() {\n        this.init();\n      };\n\n      var proto = AvPiwikAnalytics.prototype;\n\n      proto.trackEvent = function(properties) {\n\n        if(!root._paq) {\n          $log.warn('Piwik object `_paq` not found in global scope');\n          return $q.when(false);\n        }\n\n        // http://piwik.org/docs/event-tracking/\n        //\n        // PAQ requires that eventValue be an integer.\n        // Check to make sure value is a number if not convert it to 0.\n        //\n        if(properties.value) {\n          properties.value = avAnalyticsUtils.toNum(properties.event);\n        }\n\n        // check to make sure that data being sent to piwik is a string and not null, empty or undefined\n        if(!avAnalyticsUtils.isValid(properties)) {\n          $log.warn('Invalid properties being passed. Tracking info will not be sent.');\n          return $q.when(false);\n        }\n\n        return $q.when(root._paq.push(['trackEvent', properties.category, properties.event, properties.label, properties.value]));\n      };\n\n      proto.trackPageView  = function(url) {\n\n        if(!root._paq) {\n          $log.warn('Piwik object `_paq` not found in global scope');\n          return $q.when(false);\n        }\n\n        return $q.when(root._paq.push(['trackEvent', url]));\n\n      };\n\n      proto.createScript = function() {\n        if(_.isFinite(siteId)) {\n          $log.warn('Invalid Piwik Site Id.  Piwik analytics has been disabled.');\n          return;\n        }\n\n        var url;\n\n        if($location.$$host === 'apps.availity.com') {\n          url = AV_ANALYTICS.ENV.PROD.URL;\n        } else {\n          url = AV_ANALYTICS.ENV.QA.URL;\n        }\n\n        $window._paq = $window._paq || [];\n        $window._paq.push(['enableLinkTracking']);\n        $window._paq.push(['setTrackerUrl', url + 'piwik.php']);\n        $window._paq.push(['setSiteId', siteId]);\n        $window._paq.push(['trackEvent', url]); //track initial page load even if user data is not loaded yet\n\n        var script = document.createElement('script');\n        var target = document.getElementsByTagName('script')[0];\n        script.type = 'text/javascript';\n        script.defer = true;\n        script.async = true;\n        script.src = url + 'piwik.js';\n        target.parentNode.insertBefore(script, target);\n      };\n\n      proto.init = function() {\n        // this.createScript();\n        // avUsersResource.me().then(function(user) {\n        //   $window._paq.push(['setUserId', user.id]);\n        //   self.trackPageView(); //send another page track when the user data loads\n        // });\n\n      };\n\n      return new AvPiwikAnalytics();\n    };\n\n  });\n\n})(window);\n\n// Source: /lib/core/utils/data-polyfill.js\n// Issue: https://github.com/angular/angular.js/issues/11165\n// Polyfill: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\n//\n// This polyfill is needed because Angular calls toISOString()\n// when an request parameter is of type Date.  If this polyfill isn't present\n// the ajax call fails.\n//\n(function() {\n\n  'use strict';\n\n  var pad = function(number) {\n    if(number < 10) {\n      return '0' + number;\n    }\n    return number;\n  };\n\n  if(!Date.prototype.toISOString) {\n\n    Date.prototype.toISOString = function() {\n\n      return this.getUTCFullYear() +\n        '-' + pad(this.getUTCMonth() + 1) +\n        '-' + pad(this.getUTCDate()) +\n        'T' + pad(this.getUTCHours()) +\n        ':' + pad(this.getUTCMinutes()) +\n        ':' + pad(this.getUTCSeconds()) +\n        '.' + (this.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) +\n        'Z';\n    };\n  }\n\n})(window);\n\n//# sourceMappingURL=maps/availity-angular.js.map"],"sourceRoot":"/source/"}