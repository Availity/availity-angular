{"version":3,"sources":["availity-angular.js","/source/index.js","/source/strings.js","/source/uuid.js","/source/urls.js","/source/print.js","/source/throttle.js","/source/logger.js","/source/logger-config.js","/source/polling.js","/source/api-factory.js","/source/api-users.js","/source/api-coverages.js","/source/api-configurations.js","/source/api-log-messages.js","/source/api-documents.js","/source/api-organizations.js","/source/api-codes.js","/source/api-user-permissions.js","/source/user-authorizations.js","/source/session.js","/source/idle.js","/source/idle-interceptor.js","/source/validator.js","/source/validator-utils.js","/source/validator-size.js","/source/validator-pattern.js","/source/validator-required.js","/source/validator-date-range.js","/source/validator-date-format.js","/source/validator-phone.js","/source/validator-email.js","/source/globals.js","/source/analytics.js","/source/analytics-util.js","/source/analytics-splunk.js","/source/analytics-piwik.js","/source/analytics-exceptions.js","/source/date-polyfill.js"],"names":["root","availity","VERSION","MODULE","core","angular","module","originalModule","modules","name","deps","_","indexOf","window","__karma__","Error","push","exports","_stringify","object","isBlank","str","test","uid","uuid","prefix","index","length","digit","charCodeAt","join","String","fromCharCode","unshift","REGEX_API_URL","getRelativeUrl","url","result","match","print","document","queryCommandSupported","execCommand","focus","constant","OPTIONS","wait","update","trailing","leading","factory","AV_THROTTLE","$timeout","fn","options","merge","THRESHOLD","isDefined","UPDATE","timer","context","this","args","arguments","apply","later","provider","_enabled","enabled","$get","$injector","AvLogger","$delegate","$log","proto","prototype","supplant","o","_supplant","a","b","r","replace","isObject","element","elemStr","isUndefined","constructor","toString","getFormattedTimestamp","date","getHours","getMinutes","getSeconds","getMilliseconds","_log","originalFn","hash","location","now","Date","message","supplantData","stack","errorMessage","formatError","get","params","log","info","warn","debug","arg","sourceURL","line","error","config","$provide","decorator","INTERVAL","MAX_ELAPSED_TIME","MAX_RETRY","DECAY","EVENTS","REGEX_URL","PollingServiceFactory","$rootScope","$q","AV_POLLING","AV_API","AvPollingService","pendingRequests","response","isAsyncResponse","onAsyncReponse","when","setDefaults","defaultOptions","pollingInterval","pollingDecay","pollingMaxInterval","pollingRetryCount","pollingStartTime","getTime","extend","responseError","reject","api","status","isFunction","headers","HEADERS","SERVER","LOCATION","deferred","defer","queueRequest","notify","promise","getUrl","self","_url","_config","method","pollingMaxRetry","_pollingDecay","cache","request","id","timeout","getPollingTimeout","retryRequest","pushRequest","popRequest","i","splice","isPollingMaxTimeout","elaspedTime","isElapsed","isMaxRetried","isPollable","_isTimeout","_isMax","cancel","increment","successCallback","resolve","errorCallback","$http","then","incrementCounter","incrementDecay","clearRequests","forEach","ID","STATUS","GLOBAL_ID","CLIENT","SESSION_ID","AUTH","OVERRIDE","CALLBACK_URL","CUSTOMER_ID","path","resourceGroup","version","level","suffix","ApiResourcesFactory","avPollingService","AvApiResource","isString","charAt","_cacheBust","cacheBust","_getUrl","_getApiUrl","_createResponse","data","_request","afterCallback","success","_response","_promise","successResponse","call","errorResponse","notifyResponse","always","create","beforeCreate","afterCreate","afterGet","query","afterQuery","isNumber","beforeUpdate","afterUpdate","remove","afterRemove","UserServiceFactory","AvUsersResource","user","me","LogMessagesFactory","AvLogMessagesResource","buildRequest","entries","requestPayload","AvDocumentsResourceFactory","AvDocumentsResource","getContents","getContentsUrl","OrganizationResourceFactory","OrganizationResource","getOrganizations","organizations","AvCodesResourceFactory","AvCodesResource","getCodes","page","offset","list","q","results","codes","has","each","code","moreVal","totalCount","limit","more","AvUserPermissionsResourceFactory","AvUserPermissionsResource","sessionDate","moment","toISOString","axiUserPermissions","getPermissions","permissionIds","region","permissionId","AvUserAuthorizationsFactory","avUserPermissionsResource","AvUserAuthorizations","setRegion","setPermissionIds","isArray","isAuthorized","getPermission","permission","isAnyAuthorized","permissions","findWhere","undefined","_permissions","union","toPermissionMap","getPayers","organizationId","organization","resources","map","slice","key","toPermission","description","geographies","SESSION_TIMEOUT","NOT_AUTHORIZED","avUsersResource","AvSession","getUser","destroy","permisions","IDLE_INACTIVE","IDLE_ACTIVE","SESSION_TIMEOUT_ACTIVE","SESSION_TIMEOUT_REDIRECT","HUMAN","MACHINE","INTERVALS","PING","IDLE","SESSION","URLS","HOME","AV_IDLE","pingUrl","redirectUrl","sessionTimeout","idleTimeout","pingTimeout","enable","value","setSessionTimeout","setIdleTimeout","setPingTimeout","setPingUrl","$document","avThrottle","AvIdle","_idleTimer","_sessionTimer","_pingTimer","_keepAlive","idleActive","sessionActive","listeners","init","stop","start","listener","setRedirectUrl","$on","find","on","event","onEvent","oldUrl","newUrl","href","startIdleTimer","startSessionTimer","off","stopPing","stopSessionTimer","stopIdleTimer","isEnabled","isApiRequest","$broadcast","startPing","keepAlive","avIdle","$httpProvider","interceptors","classes","valid","invalid","dirty","pristine","touched","untouched","submitted","validators","REVALIDATE","SUBMITTED","FAILED","RESET","DEBOUNCE","DATE_FORMAT","SIMPLE","PATTERNS","ALPHA_ONLY","NUMERIC_ONLY","rules","services","addRules","_rules","addValidators","_validators","concat","avValConfig","AV_VAL","AvValidation","initValidators","addValidator","validator","validate","ruleName","ruleConfig","contraints","el","violations","_valid","rule","contraintName","validationResult","field","isValid","all","isEmpty","$","trim","avValUtils","min","max","type","toLowerCase","isNull","parseInt","REGEX","asRegExp","pattern","RegExp","values","expresion","ctrl","$isEmpty","getStartDate","setMin","add","units","getEndDate","end","setMax","set","validation","startDate","endDate","format","isBetween","isSame","avValPattern","PHONE_PATTERN","EMAIL_PATTERN","REGIONS","VIRTUAL_PAGE_TRACKING","SERVICES","PIWIK","SPLUNK","PAGE","DEFAULT","PRE_FIX","IGNORE","ENV","PROD","URL","QA","AV_ANALYTICS","plugins","virtualPageTracking","appId","registerPlugins","_plugins","setVirtualPageTracking","setAppID","AvAnalytics","plugin","err","trackEvent","properties","promises","handler","getAppId","trackPageView","run","avAnalytics","$location","absUrl","AnalyticsUtils","getProperties","attributes","props","isValidAttribute","isNotIgnored","getAttribute","isExternalLink","attrs","ngClick","ignored","includes","lowercase","substr","simpleKey","toNum","parsed","isNaN","trackingValues","toUpperCase","avLogMessagesResource","SplunkAnalyticsService","$$absUrl","that","siteId","_setCustomVariable","valueName","scope","_paq","setSiteID","_siteID","setVisitVariables","items","item","setPageVariables","avAnalyticsUtils","$window","AvPiwikAnalytics","category","label","createScript","isFinite","$$host","script","createElement","target","getElementsByTagName","async","src","parentNode","insertBefore","MESSAGES","NOT_APPLICABLE","TYPES","EXCEPTION","setAppId","_id","AV_EXCEPTIONS","AvExceptionAnalytics","TraceKit","remoteFetching","surroundingLinesToCollect","report","subscribe","stacktrace","onError","prettyPrint","padLeft","func","column","userAgent","navigator","errorDate","errorName","errorStack","userLanguage","referrer","host","domain","screenWidth","width","screenHeight","height","sdkVersion","exception","computeStackTrace","cause","errorTacking","avExceptionAnalytics","pad","number","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","toFixed"],"mappings":"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","file":"availity-angular.min.js","sourcesContent":["/**\n * availity-angular v1.1.0 -- October-12\n * Copyright 2015 Availity, LLC \n */\n\n// Source: \\lib\\core\\index.js\n\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity || {};\n  availity.VERSION = 'v1.1.0';\n  availity.MODULE = 'availity';\n  availity.core = angular.module(availity.MODULE, ['ng']);\n\n  var originalModule = angular.module;\n  var modules = [];\n\n  angular.module = function(name, deps) {\n\n    if(deps && _.indexOf(modules, name) !== -1 && !window.__karma__) {\n      throw new Error('redefining module: ' + name);\n    }\n\n    modules.push(name);\n\n    return originalModule(name, deps);\n  };\n\n  root.availity = availity;\n\n  if(typeof module !== 'undefined' && module.exports) {\n    module.exports = availity;\n  }\n\n})(window);\n\n\n// Source: \\lib\\core\\utils\\strings.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/helper/makeString.js\n  availity._stringify = function(object) {\n    if(object === null) {\n      return '';\n    }\n    return '' + object;\n  };\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/isBlank.js\n  availity.isBlank = function(str) {\n    return (/^\\s*$/).test(availity._stringify(str));\n  };\n\n})(window);\n\n// Source: \\lib\\core\\utils\\uuid.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var uid = ['0', '0', '0'];\n\n  availity.uuid = function(prefix) {\n    var index = uid.length;\n    var digit;\n\n    while(index) {\n      index--;\n      digit = uid[index].charCodeAt(0);\n      if(digit === 57 /*'9'*/) {\n        uid[index] = 'A';\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n      if(digit === 90  /*'Z'*/) {\n        uid[index] = '0';\n      } else {\n        uid[index] = String.fromCharCode(digit + 1);\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n    }\n    uid.unshift('0');\n    return prefix ? prefix + uid.join('') : uid.join('');\n  };\n\n})(window);\n\n// Source: \\lib\\core\\utils\\urls.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.REGEX_API_URL = /^.*?api.availity.com(.*)$/;\n\n  availity.getRelativeUrl = function(url) {\n    var result = url.match(availity.REGEX_API_URL);\n    if(result && result[1]) {\n      return '/api' + result[1];\n    }\n\n    return url;\n  };\n\n})(window);\n\n// Source: \\lib\\core\\utils\\print.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // https://github.com/jasonday/printThis/commit/66f9cbd0e3760767342eed4ef32cf8294417b227\n  availity.print = function() {\n\n    if(document.queryCommandSupported('print')) {\n      document.execCommand('print', false, null);\n    } else {\n      window.focus();\n      window.print();\n    }\n  };\n\n})(window);\n\n// Source: \\lib\\core\\utils\\throttle.js\n// Original => https://github.com/mgcrea/angular-strap/blob/master/src/helpers/debounce.js\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_THROTTLE', {\n    OPTIONS: {\n      wait: 1000,\n      update: false,\n      trailing: true,\n      leading: false\n    }\n  });\n\n  availity.core.factory('avThrottle', function(AV_THROTTLE, $timeout) {\n\n    return function(fn, wait, options) {\n\n      options = _.merge({}, AV_THROTTLE.OPTIONS, options);\n\n      wait = wait ? wait : AV_THROTTLE.THRESHOLD;\n      var update = angular.isDefined(options.update) ? options.update : AV_THROTTLE.UPDATE;\n      var timer = null;\n\n      return function() {\n        var context = options.context || this;\n        var args = arguments;\n\n        if(!timer) {\n          if(options.leading !== false) {\n            fn.apply(context, args);\n          }\n\n          var later = function() {\n            timer = null;\n            if(options.trailing !== false) {\n              fn.apply(context, args);\n            }\n          };\n\n          timer = $timeout(later, wait, update);\n        }\n\n        return timer;\n\n      };\n    };\n  });\n\n})(window);\n\n// Source: \\lib\\core\\logger\\logger.js\n// Orginal => https://github.com/ericzon/angular-ny-logger/blob/0c594e864c93e7f33d36141200096bc6139ddde1/angular-ny-logger.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.provider('AvLogger', function() {\n\n    var _enabled = false;\n\n    this.enabled = function(enabled) {\n      _enabled = !!enabled;\n    };\n\n    this.$get = function($injector) {\n\n      var AvLogger = function(context, $delegate) {\n\n        this.context = context || '';\n        this.$log = $delegate;\n\n      };\n\n      var proto = AvLogger.prototype;\n\n      AvLogger.supplant = function(str, o) {\n\n        var _supplant = function (a, b) {\n          var r = o[b];\n          return r;\n        };\n\n        return str.replace(/\\{([^{}]*)\\}/g, _supplant);\n      };\n\n      AvLogger.isObject = function(element) {\n        var elemStr = ( !angular.isUndefined(element) && !angular.isUndefined(element.constructor) ) ? element.constructor.toString() : '';\n        return (elemStr.indexOf('Object') > -1);\n      };\n\n      AvLogger.getFormattedTimestamp = function(date) {\n\n        return AvLogger.supplant('{0}:{1}:{2}:{3}', [\n          date.getHours(),\n          date.getMinutes(),\n          date.getSeconds(),\n          date.getMilliseconds()\n        ]);\n\n      };\n\n      proto._log = function(originalFn, args) {\n\n        // Allow enabling logger through query params\n        // Ex:\n        //\n        // http://localhost:3000/ui.html#avLogger\n\n        var hash = window.location.hash;\n        hash = hash || '';\n\n        if(!_enabled && hash.indexOf('avLogger') < 0 && originalFn !== 'error') {\n          return;\n        }\n\n        var now  = AvLogger.getFormattedTimestamp(new Date());\n        var message = '';\n        var supplantData = [];\n\n        var context = this.context ? ' [' + this.context + '] ' : '';\n\n        switch(args.length) {\n          case 1:\n            // (1) If the user supplied one argument, then the argument must be\n            // the message itself and _log()\n            // will print: <timestamp> - <context>: <message>\n            supplantData = args[0];\n            message = AvLogger.supplant('{0}{1} - {2}', [now, context, args[0]]);\n            break;\n          case 3:\n            // (3) If the user supplied three arguments, then the first argument\n            // is a method name, the second is the message and the third is an\n            // object of variables to interpolate with the message. For this, _log()\n            // will print: <timestamp> - <context> - <method name>('<message>')\n            supplantData = args[2];\n            message = AvLogger.supplant(\"{0}{1} - {2}(\\'{3}\\')\", [now, context, args[0], args[1]]);\n            break;\n          case 2:\n            // (2) If the user provided two arguments, we need to find out whether\n            // they supplied a method name or an interpolation object.\n            // In order to figure that out, we’ll check the type of the last argument.\n            // If it is a string, then it has to be the message itself while the\n            // first argument is the method name. Otherwise consider the first argument\n            // as the message and the second as array of interpolation variables.\n            // The output print will be according to this check.\n            if(typeof args[1] === 'string') {\n\n              message = AvLogger.supplant(\"{0}{1} - {2}(\\'{3}\\')\", [now, context, args[0], args[1]]);\n\n            } else {\n\n              // If the message is an error, there may be a stack included. If so, we\n              // should include the stack in the message to make it more meaningful.\n              if(args[0].stack) {\n                var errorMessage = this.formatError(args[0]);\n                message = AvLogger.supplant('{0}{1} - {2}', [now, context, errorMessage]);\n                supplantData = args[1];\n\n              }else {\n                supplantData = args[1];\n\n              }\n\n            }\n            break;\n        }\n\n        var $log = this.$log || $injector.get('$log');\n\n        var params = (AvLogger.isObject(supplantData)) ? [message, supplantData] : [AvLogger.supplant(message, supplantData)];\n        $log[originalFn].apply(null, params);\n\n      };\n\n      proto.log = function() {\n        this._log('log', arguments);\n      };\n\n      proto.info = function() {\n        this._log('info', arguments);\n      };\n\n      proto.warn = function() {\n        this._log('warn', arguments);\n      };\n\n      proto.debug = function() {\n        this._log('debug', arguments);\n      };\n\n      // https://github.com/angular/angular.js/blob/v1.2.27/src/ng/log.js#L122\n      proto.formatError = function(arg) {\n        if(arg instanceof Error) {\n          if(arg.stack) {\n\n            arg = (arg.message && arg.stack.indexOf(arg.message) === -1) ?\n              'Error: ' + arg.message + '\\n' + arg.stack : arg.stack;\n\n          } else if(arg.sourceURL) {\n            arg = arg.message + '\\n' + arg.sourceURL + ':' + arg.line;\n          }\n        }\n        return arg;\n      };\n\n      proto.error = function() {\n        this._log('error', arguments);\n      };\n\n      return AvLogger;\n\n    };\n\n  });\n\n\n})(window);\n\n// Source: \\lib\\core\\logger\\logger-config.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.config(function($provide) {\n\n    $provide.decorator('$log', function($delegate, AvLogger) {\n      return new AvLogger(null, $delegate);\n    });\n\n  });\n\n})(window);\n\n// Source: \\lib\\core\\polling\\polling.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_POLLING', {\n    INTERVAL: 1000, // delay in ms before retrying an async request\n    MAX_ELAPSED_TIME: 5000, // max time in ms before polling stops and rejects original request\n    MAX_RETRY: 30, // # of times the request will be tried\n    DECAY: 1.2, // % the polling interval decays after every retry\n    // maximum time polling is allowed before rejecting the request\n    EVENTS: {\n      MAX_RETRY: 'av:polling:max:retry'\n    },\n    REGEX_URL: /^.*?api.availity.com(.*)$/ // capture the relative url from API\n  });\n\n  var PollingServiceFactory = function($rootScope, $q, $injector, $timeout, $log, AV_POLLING, AV_API) {\n\n    var AvPollingService = function() {\n      this.pendingRequests = []; // stores all request for polling\n    };\n\n    var proto = AvPollingService.prototype;\n\n    proto.response = function(response) {\n\n      if(this.isAsyncResponse(response)) {\n        return this.onAsyncReponse(response);\n      }\n\n      return response || $q.when(response);\n    };\n\n    proto.setDefaults = function(config) {\n\n      var defaultOptions = {\n        pollingInterval: AV_POLLING.INTERVAL,\n        pollingDecay: AV_POLLING.DECAY,\n        pollingMaxInterval: AV_POLLING.MAX_ELAPSED_TIME,\n        pollingRetryCount: 0,\n        pollingStartTime: new Date().getTime()\n      };\n\n      return _.extend(defaultOptions, config);\n    };\n\n    proto.responseError = function(response) {\n      // Return the promise rejection\n      return $q.reject(response);\n    };\n\n    /**\n     * API layer return a link with a polling url for\n     * async responses.\n     *\n     * @param  {Object}  response ajax response\n     * @return {Boolean} true if response has status of 202 (accepted) and location param in header with uri+session link\n     */\n    proto.isAsyncResponse = function(response) {\n\n      return response &&\n        response.config &&\n        response.config.api &&\n        response.status &&\n        response.status === 202 &&\n        angular.isFunction(response.headers) && !availity.isBlank(response.headers(AV_API.HEADERS.SERVER.LOCATION));\n    };\n\n    proto.onAsyncReponse = function(response) {\n\n      response.config = this.setDefaults(response.config);\n\n      var deferred = $q.defer();\n\n      this.queueRequest(deferred, response);\n\n      // [rm3]: Can't call notify before you return promise object?\n      $timeout(function() {\n        // Notify deferred listeners with the original server response\n        deferred.notify(response);\n      }, 0, false);\n\n      return deferred.promise;\n    };\n\n    proto.getUrl = function(url) {\n\n      var result = url.match(AV_POLLING.REGEX_URL);\n      if(result && result[1]) {\n        return '/api' + result[1];\n      }\n\n      return url;\n    };\n\n    proto.queueRequest = function(deferred, response) {\n\n      var self = this;\n      // server replies with location header so set the url into config\n      var _url = availity.getRelativeUrl(response.headers(AV_API.HEADERS.SERVER.LOCATION));\n      var _config = response.config;\n\n\n      // headers – {Object} – Map of strings or functions which return strings representing HTTP headers\n      //  to send to the server. If the return value of a function is null, the header\n      //  will not be sent. Functions accept a config object as an argument.\n      var config = {\n        method: 'GET',\n        api: true,\n        headers: _config.headers,\n        pollingInterval: _config.pollingInterval,\n        pollingMaxRetry: _config.pollingMaxRetry,\n        pollingMaxInterval: _config.pollingMaxInterval,\n        pollingStartTime: _config.pollingStartTime,\n        _pollingDecay: _config._pollingDecay,\n        pollingRetryCount: _config.pollingRetryCount,\n        pollingDecay: _config.pollingDecay,\n        url: _url, /* set the url from the server response */\n        cache: false\n      };\n\n      var request = {\n        id: availity.uuid('request-'),\n        config: config,\n        deferred: deferred\n      };\n\n      var timeout = this.getPollingTimeout(config);\n\n      // each async request should run on its own timer\n      var timer = $timeout(function() {\n        self.retryRequest(request.id);\n      }, timeout, false);\n\n      request.timer = timer;\n\n      // add the async request to the queue\n      this.pushRequest(request);\n\n    };\n\n    proto.popRequest = function(id) {\n\n      var index = null;\n      var request = null;\n\n      for(var i = 0; i < this.pendingRequests.length; i++) {\n        if(this.pendingRequests[i].id === id) {\n          index = i;\n          break;\n        }\n      }\n\n      request = this.pendingRequests[index];\n      this.pendingRequests.splice(index, 1);\n\n      return request;\n    };\n\n    proto.pushRequest = function(request) {\n      this.pendingRequests.push(request);\n    };\n\n    proto.getPollingTimeout = function(config) {\n      return config.pollingDecay * config.pollingInterval;\n    };\n\n    proto.isPollingMaxTimeout = function(config) {\n      var now = new Date().getTime();\n      var elaspedTime = now - config.pollingStartTime;\n      var isElapsed = elaspedTime > config.pollingMaxInterval;\n      return isElapsed;\n    },\n\n      proto.isMaxRetried = function(config) {\n        return config.pollingRetryCount >= AV_POLLING.MAX_RETRY;\n      };\n\n    proto.isPollable = function(config) {\n      var _isTimeout = this.isPollingMaxTimeout(config);\n      var _isMax = this.isMaxRetried(config);\n\n      return _isTimeout || _isMax ? false : true;\n\n    };\n\n    proto.retryRequest = function(id) {\n\n      var self = this;\n      var request = this.popRequest(id);\n      $timeout.cancel(request.timer);\n\n      var config = request.config;\n\n      var deferred = request.deferred;\n\n      if(!this.isPollable(config)) {\n        $log.info('Rejecting pollable response due to timeout');\n        return deferred.reject(request);\n      }\n\n      // increment counters and polling timeouts\n      this.increment(config);\n\n      function successCallback(response) {\n        if(self.isAsyncResponse(response)) {\n          deferred.notify(response);\n          self.queueRequest(request.deferred, response);\n        } else {\n          deferred.resolve(response);\n        }\n      }\n\n      function errorCallback(response) {\n        deferred.reject(response);\n      }\n\n      // Silly circular dependency trick\n      var $http = $injector.get('$http');\n\n      $http(config).then(successCallback, errorCallback);\n\n    };\n\n    proto.increment = function(config) {\n      this.incrementCounter(config);\n      this.incrementDecay(config);\n    };\n\n    proto.incrementDecay = function(config) {\n      if(!config._pollingDecay) {\n        // store the original decay param\n        config._pollingDecay = config.pollingDecay;\n      }\n      config.pollingDecay *= config._pollingDecay;\n    };\n\n    proto.incrementCounter = function(config) {\n      config.pollingRetryCount++;\n    };\n\n    proto.clearRequests = function() {\n      angular.forEach(this.pendingRequests, function(request) {\n        $timeout.cancel(request.timer);\n      });\n      this.pendingRequests = [];\n    };\n\n    return new AvPollingService();\n\n  };\n\n  availity.core.factory('avPollingService', PollingServiceFactory);\n\n})(window);\n\n// Source: \\lib\\core\\api\\api-factory.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_API', {\n    HEADERS: {\n      SERVER: {\n        ID: 'X-API-ID',\n        LOCATION: 'Location',\n        STATUS: 'X-Status-Message',\n        GLOBAL_ID: 'X-Global-Transaction-ID'\n      },\n      CLIENT: {\n        SESSION_ID: 'X-Session-ID',\n        AUTH: 'Authorization',\n        OVERRIDE: 'X-HTTP-Method-Override',\n        CALLBACK_URL: 'X-Callback-URL',\n        CUSTOMER_ID: 'X-Availity-Customer-ID'\n      }\n    }\n  });\n\n  var defaultOptions = {\n    // pre-prend the url with a value like `/public` so we can build urls like `public/api/v1/*`\n    prefix: '',\n    // default base url for endpoints\n    path: '/api',\n    // url resource group, such as `/foo`, for urls like `public/api/foo/v1/*`\n    resourceGroup: '',\n    // url to resource endpoint like `coverages` or `payers`\n    url: null,\n    // defaults to version 1\n    version: '/v1',\n    // governance level `/internal`\n    level: '',\n    // post-pend the url with `.json`, `.txt` or `.xml`\n    suffix: '',\n    // cache all request by default\n    cache: true,\n    // flag used to enable behaviors around the Availity Rest API\n    api: true,\n    // # of times the polling service has tried to get a response\n    pollingRetryCount: 0,\n    // in ms\n    pollingInterval: 1000,\n    // % the polling interval decays after every retry\n    pollingDecay: 1.2,\n    // maximum time polling is allowed before rejecting the request\n    pollingMaxInterval: 30000\n\n  };\n\n  // Factory that creates ApiResourcess\n  var ApiResourcesFactory = function($http, $q, avPollingService) {\n\n    var AvApiResource = function(options) {\n\n      if(!options) {\n        throw new Error('[options] cannot be null or undefined');\n      }\n\n      // if string the assume url is being passed in\n      if(angular.isString(options)) {\n        options = options.charAt(0) === '/' ? options : '/' + options;\n        options = angular.extend({}, {url: options});\n      }\n\n      if(!options.url) {\n        throw new Error('[url] cannot be null');\n      }\n\n      // get the default options and merge into this instance\n      this.options = angular.extend({}, defaultOptions, (options || {}));\n    };\n\n    // Alias the prototype\n    var proto = AvApiResource.prototype;\n\n    proto._config = function(config) {\n      return angular.extend({}, this.options, (config || {}));\n    },\n\n    proto._cacheBust = function(config) {\n      config.cacheBust = null;\n      config.params = config.params || {};\n      config.params.cacheBust = new Date().getTime();\n      return config;\n    },\n\n    proto._getUrl = function(id) {\n      if(this.options.api) {\n        return this._getApiUrl(id);\n      }\n\n      return this.options.url;\n    };\n\n    proto._createResponse = function(data, status, headers, config) {\n      return {\n        data: data,\n        status: status,\n        headers: headers,\n        config: config\n      };\n    };\n\n    proto._request = function(config, afterCallback) {\n\n      var self = this;\n      var defer = $q.defer();\n\n      $http(config)\n        .success(function(data, status, headers, _config) {\n\n          var _response = {\n            data: data,\n            status: status,\n            headers: headers,\n            config: _config\n          };\n\n          // handle the async response if applicable\n          var _promise = $q.when(avPollingService.response(_response));\n          // notify the promise listener of the original response\n          defer.notify(_response);\n\n          // handle the polling service promise\n          _promise.then(function(successResponse) {\n\n            // if service has a callback then call it\n            // var response = self._createResponse(data, status, headers, _config);\n            if(afterCallback) {\n              successResponse = afterCallback.call(self, successResponse, config.data);\n            }\n            defer.resolve(successResponse);\n          }, function(errorResponse) {\n            defer.reject(errorResponse);\n          }, function(notifyResponse) {\n            defer.notify(notifyResponse);\n          });\n\n        }).error(function(data, status, headers, _config) {\n          var response = self._createResponse(data, status, headers, _config);\n          defer.reject(response);\n        });\n\n      var promise = defer.promise;\n\n      // recreate the success callback ala $http\n      promise.success = function(fn) {\n        promise.then(function(response) {\n          fn(response.data, response.status, response.headers, response.config);\n        });\n        return promise;\n      };\n\n      // recreate the error callback ala $http\n      promise.error = function(fn) {\n        promise.then(null, function(response) {\n          fn(response.data, response.status, response.headers, config);\n        });\n        return promise;\n      };\n\n      promise.always = promise['finally'];\n\n      return promise;\n    };\n\n    proto._getApiUrl = function(id) {\n      id = id ? '/' + id : '';\n      return this.options.prefix + this.options.path + this.options.level + this.options.resourceGroup + this.options.version + this.options.url + id + this.options.suffix;\n    };\n\n    proto.create = function(data, config) {\n\n      if(!data) {\n        throw new Error('called method without [data]');\n      }\n\n      if(this.beforeCreate) {\n        data = this.beforeCreate(data);\n      }\n\n      config = this._config(config);\n      config.method = 'POST';\n      config.url = this._getUrl();\n      config.data = data;\n\n      return this._request(config, this.afterCreate);\n\n    };\n\n    proto.get = function(id, config) {\n\n      if(!id) {\n        throw new Error('called method without [id]');\n      }\n\n      config = this._config(config);\n      if(config.cacheBust) {\n        config = this._cacheBust(config);\n      }\n      config.method = 'GET';\n      config.url = this._getUrl(id);\n\n\n      return this._request(config, this.afterGet);\n\n    };\n\n    proto.query = function(config) {\n\n      config = this._config(config);\n      if(config.cacheBust) {\n        config = this._cacheBust(config);\n      }\n      config.method = 'GET';\n      config.url = this._getUrl();\n\n      return this._request(config, this.afterQuery);\n\n    };\n\n    proto.update = function(id, data, config) {\n\n      var url;\n\n      if(_.isString(id) || _.isNumber(id)) {\n        url = this._getUrl(id);\n      }else {\n        url = this._getUrl();\n        // At this point the function signature becomes:\n        //\n        // proto.update = function(data, config) {} a.k.a function(id, data)\n        //\n        config = data;  // config is really the 2nd param\n        data = id; // data is really the first param\n      }\n\n      if(this.beforeUpdate) {\n        data = this.beforeUpdate(data);\n      }\n\n      config = this._config(config);\n      config.method = 'PUT';\n      config.url = url;\n      config.data = data;\n\n      return this._request(config, this.afterUpdate);\n\n    };\n\n    proto.remove = function(id, config) {\n\n      var url;\n      var data;\n\n      if(_.isString(id) || _.isNumber(id)) {\n        url = this._getUrl(id);\n      }else {\n        // At this point the function signature becomes:\n        //\n        // proto.remove = function(data, config)\n        //\n        url = this._getUrl();\n        data = id;\n      }\n\n      config = this._config(config);\n      config.method = 'DELETE';\n      config.url = url;\n      config.data = data;\n\n      return this._request(config, this.afterRemove);\n    };\n\n    proto.beforeCreate = null;\n    proto.afterCreate = null;\n    proto.afterQuery = null;\n    proto.afterGet = null;\n    proto.beforeUpdate = null;\n    proto.afterUpdate = null;\n    proto.afterRemove = null;\n\n    return AvApiResource;\n\n  };\n\n  availity.core.factory('AvApiResource', ApiResourcesFactory);\n\n})(window);\n\n// Source: \\lib\\core\\api\\api-users.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  var UserServiceFactory = function(AvApiResource) {\n\n    var AvUsersResource = function() {\n      AvApiResource.call(this, 'users');\n    };\n\n    angular.extend(AvUsersResource.prototype, AvApiResource.prototype, {\n\n      afterGet: function(response) {\n        var user = response.data.user ? response.data.user : response.data;\n        return user;\n      },\n\n      me: function(config) {\n        return this.get('me', config);\n      }\n\n    });\n\n    return new AvUsersResource();\n\n  };\n\n  availity.core.factory('avUsersResource', UserServiceFactory);\n\n})(window);\n\n// Source: \\lib\\core\\api\\api-coverages.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avCoveragesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations', cache: false});\n  });\n\n})(window);\n\n// Source: \\lib\\core\\api\\api-configurations.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avConfigurationsResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations'});\n  });\n\n})(window);\n\n// Source: \\lib\\core\\api\\api-log-messages.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var LogMessagesFactory = function(AvApiResource) {\n\n    var AvLogMessagesResource = function() {\n\n      AvApiResource.call(this, {\n        version: '/v1',\n        url: '/log-messages'\n      });\n    };\n\n    angular.extend(AvLogMessagesResource.prototype, AvApiResource.prototype, {\n\n      buildRequest: function(level, entries) {\n\n        var requestPayload = {};\n\n        if(entries.level) {\n          delete entries.level;\n        }\n\n        requestPayload.level = level;\n        requestPayload.entries = entries;\n\n        return requestPayload;\n      },\n\n      debug: function(entries) {\n        return this.create(this.buildRequest('debug', entries));\n      },\n\n      info: function(entries) {\n        return this.create(this.buildRequest('info', entries));\n      },\n\n      warn: function(entries) {\n        return this.create(this.buildRequest('warn', entries));\n      },\n\n      error: function(entries) {\n        return this.create(this.buildRequest('error', entries));\n      }\n\n    });\n\n    return new AvLogMessagesResource();\n\n  };\n\n  availity.core.factory('avLogMessagesResource', LogMessagesFactory);\n\n})(window);\n\n// Source: \\lib\\core\\api\\api-documents.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvDocumentsResourceFactory = function(AvApiResource) {\n\n    var AvDocumentsResource = function() {\n      AvApiResource.call(this, 'documents');\n    };\n\n    angular.extend(AvDocumentsResource.prototype, AvApiResource.prototype, {\n\n      getContents: function(id) {\n        var config = this._config();\n        config.url = this.getContentsUrl(id);\n        return this._request(config);\n      },\n\n      getContentsUrl: function(id) {\n        return this._getUrl(id) + '/contents';\n      }\n\n    });\n\n    return new AvDocumentsResource();\n\n  };\n\n  availity.core.factory('avDocumentsResource', AvDocumentsResourceFactory);\n\n})(window);\n\n// Source: \\lib\\core\\api\\api-organizations.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var OrganizationResourceFactory = function(AvApiResource) {\n\n    var OrganizationResource = function() {\n      AvApiResource.call(this, 'organizations');\n    };\n\n    angular.extend(OrganizationResource.prototype, AvApiResource.prototype, {\n\n      getOrganizations: function(config) {\n        return this.query(config).then(function(response) {\n          return response.data.organizations ? response.data.organizations : response.data;\n        });\n      }\n\n    });\n\n    return new OrganizationResource();\n  };\n\n  availity.core.factory('avOrganizationsResource', OrganizationResourceFactory);\n\n})(window);\n\n// Source: \\lib\\core\\api\\api-codes.js\n(function(root) {\n\n  'use strict';\n\n\n  var availity = root.availity;\n\n  availity.core.factory('avCodesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/codes'});\n  });\n\n  var AvCodesResourceFactory = function(AvApiResource) {\n\n    var AvCodesResource = function () {\n      AvApiResource.call(this, 'codes');\n    };\n\n    angular.extend(AvCodesResource.prototype, AvApiResource.prototype, {\n\n      getCodes: function (data) {\n\n        // config for the api resource query\n        var config = {};\n        config.params = {};\n\n        if(data.page) {\n          config.params.offset = 50 * (data.page - 1);\n        }\n        if(data.offset) {\n          config.params.offset = data.offset;\n        }\n        if(data.list) {\n          config.params.list = data.list;\n        }\n        if(data.q) {\n          config.params.q = data.q;\n        }\n\n        return this.query(config).then(function (response) {\n          // Format the response into something select2 can read\n          var results = response.data.codes;\n          if(results && !_.has(results[0], 'id')) {\n            _.each(results, function (code) {\n              code.id = code.code;\n            });\n          }\n\n          // calculate if we want to continue searching\n          var moreVal = response.data.offset < response.data.totalCount - response.data.limit;\n          return {\n            more: moreVal,\n            results: results\n          };\n\n        });\n      }\n\n    });\n\n    return new AvCodesResource();\n\n  };\n\n  availity.core.factory('avCodesResource', AvCodesResourceFactory);\n\n})(window);\n\n// Source: \\lib\\core\\api\\api-user-permissions.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvUserPermissionsResourceFactory = function(AvApiResource) {\n\n    var AvUserPermissionsResource = function() {\n      AvApiResource.call(this, {\n        level: '/internal',\n        version: '/v1',\n        url: '/axi-user-permissions'\n      });\n      this.sessionDate = moment().toISOString();\n    };\n\n    angular.extend(AvUserPermissionsResource.prototype, AvApiResource.prototype, {\n\n      afterQuery: function(response) {\n        return response.data.axiUserPermissions ? response.data.axiUserPermissions : [];\n      },\n\n      getPermissions: function(permissionIds, region) {\n        var self = this;\n        return this.query({\n          params: {\n            permissionId: permissionIds,\n            region: region,\n            sessionDate: self.sessionDate\n          }\n        });\n      }\n\n    });\n\n    return new AvUserPermissionsResource();\n\n  };\n\n  availity.core.factory('avUserPermissionsResource', AvUserPermissionsResourceFactory);\n\n})(window);\n\n// Source: \\lib\\core\\authorizations\\user-authorizations.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvUserAuthorizationsFactory = function($q, $log, avUserPermissionsResource) {\n\n    /**\n     *\n     * @constructor\n     */\n    var AvUserAuthorizations = function() {\n      /**\n       * Region is used to return permission/resources relative to region. If null service will\n       * return all permission relative to current.  If value 'ALL' used it will return value relative\n       * to all regions the user has access to.\n       * @type {string}\n       */\n      this.region = null;\n      /**\n       * PermissionIds contains the set of permissionIds to request from service. If user of service calls\n       * setPermissionIds() or call getPermissions() with complete set of permissionIds needed by application,\n       * then service should only make that one hit to retrieve permission information.\n       * @type {Array}\n       */\n      this.permissionIds = [];\n    };\n\n    var proto = AvUserAuthorizations.prototype;\n\n    proto.setRegion = function(region) {\n      this.region = region;\n      return this;\n    };\n\n    proto.setPermissionIds = function(permissionIds) {\n      if(!angular.isArray(permissionIds)) {\n        throw new Error('permissionsIds must be an array of string IDs for avUserAuthorizations#addPermissionIds');\n      }\n      this.permissionIds = permissionIds;\n      return this;\n    };\n\n    proto.isAuthorized = function(permissionId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        return permission.isAuthorized;\n      });\n    };\n\n    proto.isAnyAuthorized = function(permissionIds) {\n      return this.getPermissions(permissionIds).then(function(permissions) {\n        var permission = _.findWhere(permissions, {isAuthorized: true});\n        return permission !== undefined;\n      });\n    };\n\n    proto.getPermission = function(permissionId) {\n      if(!angular.isString(permissionId)) {\n        throw new Error('permissionsId must be a string ID for avUserAuthorizations#getPermission');\n      }\n\n      return this.getPermissions([permissionId])\n        .then(function(_permissions) {\n          return _permissions[permissionId];\n        });\n    };\n\n    proto.getPermissions = function(permissionIds) {\n      var self = this;\n\n      if(!angular.isArray(permissionIds)) {\n        throw new Error('permissionsIds must be an array of string IDs for avUserAuthorizations#getPermissions');\n      }\n      // merge permission ids to reduce calls to backend\n      self.permissionIds = _.union(self.permissionIds, permissionIds);\n\n      return avUserPermissionsResource\n        .getPermissions(self.permissionIds, self.region)\n        .then(function(_permissions) {\n          return self.toPermissionMap(permissionIds, _permissions);\n        });\n    };\n\n    proto.getOrganizations = function(permissionId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        return permission.organizations;\n      });\n    };\n\n    proto.getPayers = function(permissionId, organizationId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        var organization = _.findWhere(permission.organizations, {id: organizationId});\n\n        if(organization && organization.resources) {\n          return organization.resources;\n        }\n        return [];\n      });\n\n    };\n\n    /**\n     * Converts array permissions to map with value for each permissionId, creating empty permission\n     * if can't find permission in array\n     * @private\n     */\n    proto.toPermissionMap = function(permissionIds, permissions) {\n      var self = this;\n      var map = {};\n      permissions = _.slice(permissions);\n      _.forEach(permissionIds, function(permissionId) {\n        var key = {id: permissionId};\n        var permission = _.findWhere(permissions, key);\n        permission = permission ? self.toPermission(permission) : self.toPermission(key);\n        map[permission.id] = permission;\n      });\n      return map;\n    };\n\n    /**\n     * Convert a permission resource into a structure that is easier to work with.\n     * @private\n     */\n    proto.toPermission = function(permission) {\n      return {\n        id: permission.id,\n        description: permission.description ? permission.description : '',\n        geographies: permission.geographies ? permission.geographies : [],\n        organizations: permission.organizations ? permission.organizations : [],\n        isAuthorized: permission.organizations ? permission.organizations.length > 0 : false\n      };\n    };\n\n    return new AvUserAuthorizations();\n\n  };\n\n  availity.core.factory('avUserAuthorizations', AvUserAuthorizationsFactory);\n\n})(window);\n\n// Source: \\lib\\core\\session\\session.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_SESSION', {\n    SESSION_TIMEOUT: 'av:auth:session:timeout',\n    NOT_AUTHORIZED: 'av:auth:not:authorized'\n  });\n\n  availity.core.factory('avSession', function($q, avUsersResource) {\n\n    var AvSession = function() {\n      this.user = null;\n      this.permissions = null;\n    };\n\n    var proto = AvSession.prototype;\n\n    proto.getUser = function() {\n      var self = this;\n\n      if(this.user) {\n        return $q.when(this.user);\n      }\n\n      return avUsersResource.me().then(function(user) {\n        self.user = user;\n        return self.user;\n      });\n    };\n\n\n    proto.destroy = function() {\n      this.user = null;\n      this.permisions = null;\n    };\n\n    return new AvSession();\n  });\n\n})(window);\n\n// Source: \\lib\\core\\idle\\idle.js\n// Inspiration => https://github.com/HackedByChinese/ng-idle\n//\n// Rules:\n//\n//  * ping after 3 minutes from last human activity\n//  * reset session after api success except 401\n//  * idle show after 25 of inactivity\n//\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_IDLE', {\n    EVENTS: {\n      IDLE_INACTIVE: 'av:idle:inactive',\n      IDLE_ACTIVE: 'av:idle:active',\n      SESSION_TIMEOUT_ACTIVE: 'av:idle:session:active',\n      SESSION_TIMEOUT_REDIRECT: 'av:idle:session:redirect',\n      HUMAN: 'keydown.av.idle mousedown.av.idle keydown.av.idle',\n      MACHINE: '$locationChangeSuccess'\n    },\n    INTERVALS: {\n      PING: 3 * 60 * 1000, // 3 minutes\n      IDLE: 25 * 60 * 1000, // 25 minutes\n      SESSION: 30 * 60 * 1000 // 30 minutes\n    },\n    URLS: {\n      HOME: '/availity/web/public.elegant.login',\n      PING: '/api/v1/users/me'\n    }\n  });\n\n  availity.core.provider('avIdle', function(AV_IDLE) {\n\n    var enabled = false;\n    var pingUrl;\n    var redirectUrl;\n    var sessionTimeout;\n    var idleTimeout;\n    var pingTimeout;\n\n    this.enable = function(value) {\n      if(arguments.length) {\n        enabled = !!value;\n      }\n      return enabled;\n    };\n\n    this.setSessionTimeout = function(timeout) {\n      sessionTimeout = timeout || AV_IDLE.INTERVALS.SESSION;\n    };\n\n    this.setIdleTimeout = function(timeout) {\n      idleTimeout = timeout || AV_IDLE.INTERVALS.IDLE;\n    };\n\n    this.setPingTimeout = function(timeout) {\n      pingTimeout = timeout || AV_IDLE.INTERVALS.PING;\n    };\n\n    this.setPingUrl = function(url) {\n      pingUrl = url || AV_IDLE.URLS.PING;\n    };\n\n    this.$get = function(AV_IDLE, $log, $document, $rootScope, $timeout, avThrottle, $q, $injector) {\n\n      var AvIdle = function() {\n\n        // $timeout references\n        this._idleTimer = null;\n        this._sessionTimer = null;\n        this._pingTimer = null;\n        this._keepAlive = null;\n\n        // flag used to track if the if user is idle or session expired\n        this.idleActive = false;\n        this.sessionActive = false;\n\n        this.listeners = [];\n\n        this.init();\n\n      };\n\n      var proto = AvIdle.prototype;\n\n      proto.init = function() {\n\n        if(!enabled) {\n          this.stop();\n          return;\n        }\n\n        this.start();\n      };\n\n      proto.start = function() {\n\n        $log.info('avIdle start');\n\n        var self = this;\n        var listener;\n\n        !sessionTimeout && this.setSessionTimeout();\n        !idleTimeout && this.setIdleTimeout();\n        !pingTimeout && this.setPingTimeout();\n        !pingUrl && this.setPingUrl();\n        !redirectUrl && this.setRedirectUrl();\n\n        $rootScope.$on('$destroy', function() {\n          self.stop();\n        });\n\n        $document.find('body').on(AV_IDLE.EVENTS.HUMAN, function(event) {\n          self.onEvent(event);\n        });\n\n        listener = $rootScope.$on(AV_IDLE.EVENTS.MACHINE, function(event, oldUrl, newUrl) {\n          if(oldUrl !== newUrl) {\n            self.onEvent(event);\n          }\n        });\n        this.listeners.push(listener);\n\n        $rootScope.$on(AV_IDLE.EVENTS.SESSION_TIMEOUT_REDIRECT, function() {\n          document.location.href = redirectUrl;\n        });\n\n        this.startIdleTimer();\n        this.startSessionTimer();\n      };\n\n      proto.stop = function() {\n\n        $document.find('body').off(AV_IDLE.EVENTS.HUMAN);\n\n        // turns off Angular event listeners @see http://stackoverflow.com/a/14898795\n        _.each(this.listeners, function(listener) {\n          listener();\n        });\n\n        this.stopPing();\n        this.stopSessionTimer();\n        this.stopIdleTimer();\n      };\n\n      proto.isEnabled = function() {\n        return enabled;\n      };\n\n      proto.enable = function(value) {\n        if(arguments.length) {\n          enabled = !!value;\n        }\n\n        return this;\n      };\n\n      proto.setSessionTimeout = function(timeout) {\n        sessionTimeout = timeout || AV_IDLE.INTERVALS.SESSION;\n        return this;\n      };\n\n      proto.setIdleTimeout = function(timeout) {\n        idleTimeout = timeout || AV_IDLE.INTERVALS.IDLE;\n        return this;\n      };\n\n      proto.setPingTimeout = function(timeout) {\n        pingTimeout = timeout || AV_IDLE.INTERVALS.PING;\n        return this;\n      };\n\n      proto.setPingUrl = function(url) {\n        pingUrl = url || AV_IDLE.URLS.PING;\n        return this;\n      };\n\n      proto.setRedirectUrl = function(url) {\n        redirectUrl = url || AV_IDLE.URLS.HOME;\n        return this;\n      };\n\n      proto.response = function(response) {\n\n        if(this.isApiRequest(response)) {\n          this.startSessionTimer();\n        }\n\n        return response;\n      };\n\n      proto.isApiRequest = function(response) {\n        return response && response.config && response.config.api;\n      };\n\n      proto.responseError = function(response) {\n\n        if(this.isApiRequest(response) && response.status !== 401) {\n          this.startSessionTimer();\n        }\n\n        if(this.isApiRequest() && response.status === 401) {\n          this.stopPing();\n        }\n\n        return $q.reject(response);\n      };\n\n      proto.startSessionTimer = function() {\n\n        var self = this;\n\n        this.stopSessionTimer();\n\n        var later = function() {\n          $log.info('avIdle session has TIMED OUT');\n          self.stop();\n          $rootScope.$broadcast(AV_IDLE.EVENTS.SESSION_TIMEOUT_ACTIVE);\n        };\n\n        $log.info('avIdle session timer has STARTED');\n        this._sessionTimer = $timeout(later, sessionTimeout, false);\n\n      };\n\n      proto.stopSessionTimer = function() {\n        $log.info('avIdle session timer has STOPPED');\n        $timeout.cancel(this._sessionTimer);\n      };\n\n      proto.startIdleTimer = function() {\n\n        var self = this;\n\n        this.stopIdleTimer();\n\n        var later = function() {\n          self.stopIdleTimer();\n          $log.info('avIdle is IDLING');\n          $rootScope.$broadcast(AV_IDLE.EVENTS.IDLE_ACTIVE);\n        };\n\n        $log.info('avIdle idle timer has STARTED');\n        this._idleTimer = $timeout(later, idleTimeout, false);\n      };\n\n      proto.stopIdleTimer = function() {\n        $log.info('avIdle idle timer has STOPPED');\n        $timeout.cancel(this._idleTimer);\n      };\n\n      proto.startPing = function() {\n\n        if(!this._keepAlive) {\n          $log.info('avIdle ping timer has STARTED');\n          this._keepAlive = avThrottle(this.keepAlive, pingTimeout, {context: this});\n        }\n\n        this._pingTimer = this._keepAlive();\n      };\n\n      proto.stopPing = function() {\n        $log.info('avIdle ping timer has STOPPED');\n        if(this._pingTimer) {\n          $timeout.cancel(this._pingTimer);\n        }\n      };\n\n      proto.keepAlive = function() {\n\n        // destroy the reference to that a new throttle gets created upon\n        // next user or system event\n        this._keepAlive = null;\n        var $http = $injector.get('$http');\n\n        $http.get(pingUrl, {\n          cache: false,\n          api: true\n        }).success(function() {\n          $log.info('avIdle keep-alive SUCCESS');\n        }).error(function() {\n          $log.error('avIdle keep-alive FAILURE');\n        });\n      };\n\n      proto.onEvent = function() {\n        this.startIdleTimer();\n        this.startPing();\n      };\n\n      return new AvIdle();\n\n    };\n\n  });\n\n})(window);\n\n// Source: \\lib\\core\\idle\\idle-interceptor.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avIdleInterceptor', function(avIdle) {\n    return {\n      response: function(response) {\n        return avIdle.response(response);\n      },\n      responseError: function(response) {\n        return avIdle.responseError(response);\n      }\n    };\n\n  });\n\n  availity.core.config(function($httpProvider) {\n    $httpProvider.interceptors.push('avIdleInterceptor');\n  });\n\n})(window);\n\n// Source: \\lib\\core\\validation\\validator.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.value('avValConfig', {\n    classes: {\n      valid: 'ng-valid',\n      invalid: 'ng-invalid',\n      dirty: 'ng-dirty',\n      pristine: 'ng-pristine',\n      touched: 'ng-touched',\n      untouched: 'ng-untouched',\n      submitted: 'ng-submitted'\n    },\n    validators: [\n      'avValPattern',\n      'avValSize',\n      'avValRequired',\n      'avValDateRange',\n      'avValDate',\n      'avValPhone',\n      'avValEmail'\n    ]\n  });\n\n  availity.core.constant('AV_VAL', {\n    EVENTS: {\n      REVALIDATE: 'av:val:revalidate',\n      SUBMITTED: 'av:val:submitted',\n      FAILED: 'av:val:failed',\n      RESET: 'av:val:reset'\n    },\n    DEBOUNCE: 800,\n    DATE_FORMAT: {\n      SIMPLE: 'MM/DD/YYYY'\n    },\n    PATTERNS: {\n      ALPHA_ONLY: /[^A-Za-z]+/g,\n      NUMERIC_ONLY: /[^0-9]+/g\n    }\n  });\n\n  availity.core.provider('avVal', function() {\n\n    var validators = [];\n    var rules = {};\n    var services = {};\n\n    this.addRules = function(_rules) {\n      rules = angular.extend({}, rules, _rules);\n      return rules;\n    };\n\n    this.addValidators = function(_validators) {\n      validators = validators.concat(_validators);\n      return validators;\n    };\n\n    this.$get = function($injector, $rootScope, $http, $log, avValConfig, AV_VAL) {\n\n      var AvValidation = function() {\n        this.initValidators();\n      };\n\n      var proto = AvValidation.prototype;\n\n      proto.initValidators = function() {\n        var self = this;\n\n        validators = avValConfig.validators.concat(validators);\n\n        angular.forEach(validators, function(name) {\n          self.addValidator(name);\n        });\n\n      };\n\n      proto.addValidator = function(name) {\n        var validator = $injector.get(name);\n        services[validator.name] = validator;\n      };\n\n      proto.addRules = function(_rules) {\n        rules = angular.extend({}, rules, _rules);\n        $rootScope.$broadcast(AV_VAL.EVENTS.REVALIDATE);\n      };\n\n      proto.validate = function(key, element, value, ruleName) {\n\n        var ruleConfig = rules[key];\n        if(!ruleConfig) {\n          $log.error('Failed to get rules key [' + key + '].  Forms must be tagged with a rules set name for validation to work.');\n          return;\n        }\n\n        var contraints = ruleConfig[ruleName];\n        if(!contraints) {\n          $log.info('Rule named [' + ruleName + '] could not be found in the current schema.');\n          contraints = [];\n        }\n\n        var el = element[0];\n        var results  = [];\n        var violations = [];\n        var _valid = true;\n\n        angular.forEach(contraints, function(rule, contraintName) {\n\n          if(!rule) {\n            // when extended rule sets, a user can pass nulls to cancel out a rule so if\n            // one doesn't exist just continue\n            return;\n          }\n\n          var validator = services[contraintName];\n\n          if(angular.isUndefined(validator)) {\n            $log.warn('No validator defined for `' + name + '`');\n            return;\n          }\n\n          var valid = validator.validate(value, rule, element);\n\n          var validationResult = {\n            valid: valid,\n            ruleName: ruleName,\n            contraintName: contraintName,\n            value: value,\n            message: rule.message,\n            field: el.name || el.id\n          };\n\n          var result = angular.extend({}, rule, validationResult);\n\n          results.push(result);\n          if(!valid) {\n            violations.push(validationResult);\n          }\n          _valid = _valid && valid;\n\n        });\n\n        return {\n          isValid: _valid,\n          all: results, // all the constraint results\n          violations: violations\n        };\n\n      };\n\n      return new AvValidation();\n\n    };\n\n  });\n})(window);\n\n// Source: \\lib\\core\\validation\\validators\\validator-utils.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValUtils', function() {\n\n    return {\n\n      isDefined: function(value) {\n        return angular.isDefined(value) && value !== '' && value !== null;\n      },\n\n      isEmpty: function(value) {\n        return !this.isDefined(value) || $.trim(value) === '';\n      }\n    };\n\n  });\n})(window);\n\n\n// Source: \\lib\\core\\validation\\validators\\validator-size.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValSize', function(avValUtils) {\n\n    var validator =  {\n\n      name: 'size',\n\n      validate: function(value, rule) {\n\n        var min = rule.min || 0;\n        var max = rule.max;\n        var type = rule.type ? rule.type.toLowerCase() : 'text';\n\n        if(_.isNull(value) || _.isUndefined(value)) {\n          value = '';\n        }\n\n        if(type === 'text') {\n          value = value + '';\n          return  avValUtils.isEmpty(value) || value.length >= min && (max === undefined || value.length <= max);\n        }\n\n        // ... must be a Number\n        if(!_.isNumber(value) && /^\\d+$/.test(value)) {\n          value = parseInt(value, 10);\n        }\n\n        return avValUtils.isEmpty(value) || value >= min && (max === undefined || value <= max);\n\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n\n// Source: \\lib\\core\\validation\\validators\\validator-pattern.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValPattern', function(avValUtils) {\n\n    var validator =  {\n      name: 'pattern',\n      REGEX: /^\\/(.*)\\/([gim]*)$/, //regular expression to test a regular expression\n      asRegExp: function(pattern) {\n        var match;\n\n        if(pattern.test) {\n          return pattern;\n        } else {\n          match = pattern.match(validator.REGEX);\n          if(match) {\n            return new RegExp(match[1], match[2]);\n          } else {\n            throw ('Expected ' + pattern + ' to be a RegExp');\n          }\n        }\n      },\n      validate: function(value, rule) {\n        var values = _.isArray(rule.value) ? rule.value : [rule.value];\n\n        var valid = false;\n\n        _.each(values, function(expresion) {\n          var pattern = validator.asRegExp(expresion);\n          if(avValUtils.isEmpty(value) || pattern.test(value)) {\n            valid = true;\n          }\n        });\n\n        return valid;\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n\n// Source: \\lib\\core\\validation\\validators\\validator-required.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValRequired', function(avValUtils) {\n\n    var validator =  {\n      name: 'required',\n      validate: function(value, rule, element) {\n\n        // Using ngModelController.$isEmpty for required checks.  A form component being empty is dependent on the\n        // type of field:\n        //\n        //    - radio\n        //    - checkbox\n        //    - text\n        //    - lists\n        //\n        // You can override $isEmpty for input directives whose concept of being empty is different to the\n        // default. Radio and checkboxes directive do this because in its case a value of `false`\n        // implies empty.\n        //\n        var ctrl = element && element.data('$ngModelController');\n        if(ctrl) {\n          return !ctrl.$isEmpty(value);\n        }\n\n        return !avValUtils.isEmpty(value);\n\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n\n// Source: \\lib\\core\\validation\\validators\\validator-date-range.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDateRange', function(AV_VAL, avValUtils) {\n\n    var validator = {\n\n      name: 'dateRange',\n\n      getStartDate: function(start) {\n        return validator.setMin(moment().add(start.value, start.units));\n      },\n\n      getEndDate: function(end) {\n        return validator.setMax(moment().add(end.value, end.units) );\n      },\n\n      setMin: function(value) {\n\n        // [fix]: if time is provided this may cause issues.\n        value.set('hours', 0);\n        value.set('minutes', 0);\n        value.set('seconds', 0);\n\n        return value;\n      },\n\n      setMax: function(value) {\n\n        // [fix]: if time is provided this may cause issues.\n        value.set('hours', 23);\n        value.set('minutes', 59);\n        value.set('seconds', 59);\n\n        return value;\n      },\n\n      validation: function(value, rules) {\n\n        var date;\n        var startDate;\n        var endDate;\n\n        date = moment(value, rules.format || AV_VAL.DATE_FORMAT.SIMPLE);\n        date.set('hours', 0);\n        date.set('minutes', 0);\n        date.set('seconds', 0);\n\n        if(!avValUtils.isEmpty(rules.start.units) && !avValUtils.isEmpty(rules.end.units)) {\n          startDate = validator.getStartDate(rules.start);\n          endDate = validator.getEndDate(rules.end);\n        } else {\n          startDate = moment(rules.start.value, rules.format);\n          endDate = validator.setMax(moment(rules.end.value, rules.format));\n        }\n        return date.isValid() && date.isBetween(startDate, endDate, 'day') || date.isSame(startDate, 'day') || date.isSame(endDate, 'day');\n      },\n\n      validate: function(value, rule) {\n        return avValUtils.isEmpty(value) || validator.validation(value, rule);\n      }\n\n    };\n\n    return validator;\n  });\n})(window);\n\n// Source: \\lib\\core\\validation\\validators\\validator-date-format.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDate', function(AV_VAL, avValUtils) {\n\n    var validator = {\n      name: 'dateFormat',\n      validate: function(value, rules) {\n        var format = rules && rules.format ? rules.format : AV_VAL.DATE_FORMAT.SIMPLE;\n        return avValUtils.isEmpty(value) || moment(value, format, true).isValid();\n      }\n    };\n    return validator;\n  });\n})(window);\n\n// Source: \\lib\\core\\validation\\validators\\validator-phone.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValPhone', function(avValPattern) {\n\n    var PHONE_PATTERN = /^([0-9][\\.\\-]?)?[(]{0,1}[0-9]{3}[)\\.\\- ]{0,1}[0-9]{3}[\\.\\- ]{0,1}[0-9]{4}$/;\n\n    var validator =  {\n      name: 'phone',\n      validate: function(value, rule) {\n        return avValPattern.validate(value, angular.extend({}, rule, { value: PHONE_PATTERN }));\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n\n// Source: \\lib\\core\\validation\\validators\\validator-email.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValEmail', function(avValPattern) {\n\n    var EMAIL_PATTERN = /[a-z0-9!#$%&'*+\\/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+\\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n\n    var validator =  {\n      name: 'email',\n      validate: function(value, rule) {\n        return avValPattern.validate(value, angular.extend({}, rule, { value: EMAIL_PATTERN }));\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n\n// Source: \\lib\\core\\utils\\globals.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_GLOBALS', {\n    REGIONS: [\n      {\n        'name': 'Alabama',\n        'code': 'AL'\n      },\n      {\n        'name': 'Alaska',\n        'code': 'AK'\n      },\n      {\n        'name': 'Arizona',\n        'code': 'AZ'\n      },\n      {\n        'name': 'Arkansas',\n        'code': 'AR'\n      },\n      {\n        'name': 'California',\n        'code': 'CA'\n      },\n      {\n        'name': 'Colorado',\n        'code': 'CO'\n      },\n      {\n        'name': 'Connecticut',\n        'code': 'CT'\n      },\n      {\n        'name': 'Delaware',\n        'code': 'DE'\n      },\n      {\n        'name': 'District Of Columbia',\n        'code': 'DC'\n      },\n      {\n        'name': 'Florida',\n        'code': 'FL'\n      },\n      {\n        'name': 'Georgia',\n        'code': 'GA'\n      },\n      {\n        'name': 'Hawaii',\n        'code': 'HI'\n      },\n      {\n        'name': 'Idaho',\n        'code': 'ID'\n      },\n      {\n        'name': 'Illinois',\n        'code': 'IL'\n      },\n      {\n        'name': 'Indiana',\n        'code': 'IN'\n      },\n      {\n        'name': 'Iowa',\n        'code': 'IA'\n      },\n      {\n        'name': 'Kansas',\n        'code': 'KS'\n      },\n      {\n        'name': 'Kentucky',\n        'code': 'KY'\n      },\n      {\n        'name': 'Louisiana',\n        'code': 'LA'\n      },\n      {\n        'name': 'Maine',\n        'code': 'ME'\n      },\n      {\n        'name': 'Maryland',\n        'code': 'MD'\n      },\n      {\n        'name': 'Massachusetts',\n        'code': 'MA'\n      },\n      {\n        'name': 'Michigan',\n        'code': 'MI'\n      },\n      {\n        'name': 'Minnesota',\n        'code': 'MN'\n      },\n      {\n        'name': 'Mississippi',\n        'code': 'MS'\n      },\n      {\n        'name': 'Missouri',\n        'code': 'MO'\n      },\n      {\n        'name': 'Montana',\n        'code': 'MT'\n      },\n      {\n        'name': 'Nebraska',\n        'code': 'NE'\n      },\n      {\n        'name': 'Nevada',\n        'code': 'NV'\n      },\n      {\n        'name': 'New Hampshire',\n        'code': 'NH'\n      },\n      {\n        'name': 'New Jersey',\n        'code': 'NJ'\n      },\n      {\n        'name': 'New Mexico',\n        'code': 'NM'\n      },\n      {\n        'name': 'New York',\n        'code': 'NY'\n      },\n      {\n        'name': 'North Carolina',\n        'code': 'NC'\n      },\n      {\n        'name': 'North Dakota',\n        'code': 'ND'\n      },\n      {\n        'name': 'Ohio',\n        'code': 'OH'\n      },\n      {\n        'name': 'Oklahoma',\n        'code': 'OK'\n      },\n      {\n        'name': 'Oregon',\n        'code': 'OR'\n      },\n      {\n        'name': 'Pennsylvania',\n        'code': 'PA'\n      },\n      {\n        'name': 'Rhode Island',\n        'code': 'RI'\n      },\n      {\n        'name': 'South Carolina',\n        'code': 'SC'\n      },\n      {\n        'name': 'South Dakota',\n        'code': 'SD'\n      },\n      {\n        'name': 'Tennessee',\n        'code': 'TN'\n      },\n      {\n        'name': 'Texas',\n        'code': 'TX'\n      },\n      {\n        'name': 'Utah',\n        'code': 'UT'\n      },\n      {\n        'name': 'Vermont',\n        'code': 'VT'\n      },\n      {\n        'name': 'Virginia',\n        'code': 'VA'\n      },\n      {\n        'name': 'Washington',\n        'code': 'WA'\n      },\n      {\n        'name': 'West Virginia',\n        'code': 'WV'\n      },\n      {\n        'name': 'Wisconsin',\n        'code': 'WI'\n      },\n      {\n        'name': 'Wyoming',\n        'code': 'WY'\n      }\n    ]\n  });\n\n})(window);\n\n// Source: \\lib\\core\\analytics\\analytics.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_ANALYTICS', {\n    VIRTUAL_PAGE_TRACKING: true,\n    SERVICES: {\n      PIWIK: 'avPiwikAnalytics',\n      SPLUNK: 'avSplunkAnalytics'\n    },\n    EVENTS: {\n      PAGE: '$locationChangeSuccess',\n      DEFAULT: 'click'\n    },\n    PRE_FIX: /^avAnalytics(.*)$/,\n    // should ignore these since they are part of the directives API\n    IGNORE: ['avAnalyticsOn', 'avAnalyticsIf'],\n    ENV: { // not sure if this should live here\n      PROD: {\n        URL: 'https://piwik.availity.com/piwik/'\n      },\n      QA: {\n        URL: 'https://qa-piwik.availity.com/piwik/'\n      }\n    }\n  });\n\n  availity.core.provider('avAnalytics', function(AV_ANALYTICS) {\n\n    var plugins = [];\n    var virtualPageTracking = AV_ANALYTICS.VIRTUAL_PAGE_TRACKING;\n    var appId;\n\n    this.registerPlugins = function(_plugins) {\n\n      if(angular.isString(_plugins)) {\n        _plugins = [_plugins];\n      }\n\n      if(_.isArray(_plugins)) {\n        plugins = _plugins;\n      } else {\n        throw new Error('AvAnalytics.registerPlugins() expects a string or an array.');\n      }\n\n      return plugins;\n    };\n\n    this.setVirtualPageTracking = function(value) {\n      if(arguments.length) {\n        virtualPageTracking = !!value;\n      }\n      return virtualPageTracking;\n    };\n\n    this.setAppID = function(id) {\n      appId = id;\n      return appId;\n    };\n\n    this.$get = function($injector, $q, $log) {\n\n      var AvAnalytics = function() {\n\n        var self = this;\n        this.services = {};\n\n        if(!plugins || plugins.length === 0) {\n          plugins = [AV_ANALYTICS.SERVICES.SPLUNK];\n        }\n\n        angular.forEach(plugins, function(plugin) {\n\n          try {\n            self.services[plugin] = $injector.get(plugin);\n          } catch(err) {\n            $log.error('Could not load `{0}` plugin', [plugin]);\n          }\n        });\n\n      };\n\n      var proto = AvAnalytics.prototype;\n\n      proto.trackEvent = function(properties) {\n\n        var promises = [];\n\n        angular.forEach(this.services, function(handler) {\n          var promise = handler.trackEvent(properties);\n          promises.push(promise);\n        });\n\n        return $q.all(promises);\n      };\n\n      proto.getAppId = function() {\n        return appId;\n      };\n\n      proto.trackPageView = function(url) {\n\n        var promises = [];\n\n        angular.forEach(this.services, function(handler) {\n          var promise = handler.trackPageView(url);\n          promises.push(promise);\n        });\n\n        return $q.all(promises);\n      };\n\n      return new AvAnalytics();\n    };\n\n  });\n\n  availity.core.run(function($rootScope, AV_ANALYTICS, avAnalytics, $location ) {\n    if(avAnalytics.virtualPageTracking) {\n      $rootScope.$on(AV_ANALYTICS.EVENTS.PAGE, function() {\n        avAnalytics.trackPageView($location.absUrl());\n      });\n    }\n  });\n\n})(window);\n\n// Source: \\lib\\core\\analytics\\analytics-util.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avAnalyticsUtils', function(AV_ANALYTICS, $log) {\n\n    var AnalyticsUtils = function() {};\n\n    var proto = AnalyticsUtils.prototype;\n\n    proto.getProperties = function(attributes) {\n\n      var self = this;\n      var props = {};\n\n      _.forEach(attributes, function(value, key) {\n        if(self.isValidAttribute(key) && self.isNotIgnored(key)) {\n          var result = self.getAttribute(key, value);\n          props[result.key] = result.value;\n        }\n      });\n\n      return props;\n    };\n\n    proto.isExternalLink = function(attrs) {\n      return attrs.href && !attrs.ngClick;\n    };\n\n    proto.isNotIgnored = function(key) {\n      var ignored = _.includes(AV_ANALYTICS.IGNORE, key);\n      return !ignored;\n    };\n\n    proto.isValidAttribute = function(key) {\n      return AV_ANALYTICS.PRE_FIX.test(key);\n    };\n\n    proto.lowercase = function(str) {\n      return str.substr(0, 1).toLowerCase() + str.substr(1);\n    };\n\n    proto.getAttribute = function(key, value) {\n      var simpleKey = key.match(AV_ANALYTICS.PRE_FIX);\n\n      if(simpleKey && simpleKey[1]) {\n        return {\n          key: this.lowercase(simpleKey[1]),\n          value: value\n        };\n      }\n    };\n\n    proto.toNum = function(value) {\n      var parsed = parseInt(value, 10);\n      value = isNaN(parsed) ? 0 : parsed;\n      return value;\n    };\n\n    proto.isValid = function(trackingValues) {\n      var valid = true;\n\n      if(trackingValues.value || trackingValues.value === 0) {\n        delete trackingValues.value;\n      }\n\n      _.forEach(trackingValues, function(key, value) {\n        if(availity.isBlank(value) || _.isUndefined(value)) {\n          $log.warn('The analytic tracking value for ' + key.toUpperCase() +' is not defined.');\n          valid = false;\n        }\n      });\n\n      return valid;\n    };\n\n    return new AnalyticsUtils();\n  });\n})(window);\n\n// Source: \\lib\\core\\analytics\\analytics-splunk.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avSplunkAnalytics', function($log, avLogMessagesResource, $location) {\n\n    var SplunkAnalyticsService = function() {};\n\n    var proto = SplunkAnalyticsService.prototype;\n\n    proto.trackEvent = function(properties) {\n      properties.url = $location.$$absUrl || 'N/A';\n      properties.level = properties.level || 'info';\n\n      return avLogMessagesResource[properties.level](properties);\n    };\n\n    proto.trackPageView  = function(url) {\n\n      var properties = {\n        event: 'page',\n        level: 'info',\n        url: url || $location.$$absUrl()\n      };\n\n      return avLogMessagesResource[properties.level](properties);\n    };\n\n    return new SplunkAnalyticsService();\n  });\n\n})(window);\n\n// Source: \\lib\\core\\analytics\\analytics-piwik.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.provider('avPiwikAnalytics', function() {\n\n    var that = this;\n    var siteId;\n\n    // can not push these items to `_paq` because it is defined\n    // after page has loaded\n    this._setCustomVariable = function(index, valueName, value, scope) {\n\n      root._paq = root._paq || [];\n\n      if(!index || isNaN(index)) {\n        throw new Error('index must be a number');\n      } else if(!valueName) {\n        throw new Error('valueName must be declared');\n      } else {\n        root._paq.push(['setCustomVariable', index, valueName, value, scope]);\n      }\n    };\n\n    this.setSiteID = function(_siteID) {\n      siteId = _siteID;\n    };\n\n    // allow the user to pass a array of visit variables\n    this.setVisitVariables = function(items) {\n      _.forEach(items, function(item) {\n        that._setCustomVariable(item[0], item[1], item[2], 'visit');\n      });\n    };\n\n    this.setPageVariables = function(index, name, value) {\n      this._setCustomVariable(index, name, value, 'page');\n    };\n\n    this.$get = function(avAnalyticsUtils, avUsersResource, AV_ANALYTICS, $injector, $log, $q, $document, $location, $window) {\n\n      var AvPiwikAnalytics = function() {\n        this.init();\n      };\n\n      var proto = AvPiwikAnalytics.prototype;\n\n      proto.trackEvent = function(properties) {\n\n        if(!root._paq) {\n          $log.warn('Piwik object `_paq` not found in global scope');\n          return $q.when(false);\n        }\n\n        // http://piwik.org/docs/event-tracking/\n        //\n        // PAQ requires that eventValue be an integer.\n        // Check to make sure value is a number if not convert it to 0.\n        //\n        if(properties.value) {\n          properties.value = avAnalyticsUtils.toNum(properties.event);\n        }\n\n        // check to make sure that data being sent to piwik is a string and not null, empty or undefined\n        if(!avAnalyticsUtils.isValid(properties)) {\n          $log.warn('Invalid properties being passed. Tracking info will not be sent.');\n          return $q.when(false);\n        }\n\n        return $q.when(root._paq.push(['trackEvent', properties.category, properties.event, properties.label, properties.value]));\n      };\n\n      proto.trackPageView  = function(url) {\n\n        if(!root._paq) {\n          $log.warn('Piwik object `_paq` not found in global scope');\n          return $q.when(false);\n        }\n\n        return $q.when(root._paq.push(['trackEvent', url]));\n\n      };\n\n      proto.createScript = function() {\n        if(_.isFinite(siteId)) {\n          $log.warn('Invalid Piwik Site Id.  Piwik analytics has been disabled.');\n          return;\n        }\n\n        var url;\n\n        if($location.$$host === 'apps.availity.com') {\n          url = AV_ANALYTICS.ENV.PROD.URL;\n        } else {\n          url = AV_ANALYTICS.ENV.QA.URL;\n        }\n\n        $window._paq = $window._paq || [];\n        $window._paq.push(['enableLinkTracking']);\n        $window._paq.push(['setTrackerUrl', url + 'piwik.php']);\n        $window._paq.push(['setSiteId', siteId]);\n        $window._paq.push(['trackEvent', url]); //track initial page load even if user data is not loaded yet\n\n        var script = document.createElement('script');\n        var target = document.getElementsByTagName('script')[0];\n        script.type = 'text/javascript';\n        script.defer = true;\n        script.async = true;\n        script.src = url + 'piwik.js';\n        target.parentNode.insertBefore(script, target);\n      };\n\n      proto.init = function() {\n        // this.createScript();\n        // avUsersResource.me().then(function(user) {\n        //   $window._paq.push(['setUserId', user.id]);\n        //   self.trackPageView(); //send another page track when the user data loads\n        // });\n\n      };\n\n      return new AvPiwikAnalytics();\n    };\n\n  });\n\n})(window);\n\n// Source: \\lib\\core\\analytics\\analytics-exceptions.js\n\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_EXCEPTIONS', {\n    MESSAGES: {\n      NOT_APPLICABLE: 'N/A'\n    },\n    TYPES: {\n      EXCEPTION: 'exception'\n    }\n  });\n\n  availity.core.provider('avExceptionAnalytics', function() {\n\n    var _enabled = true;\n    var appId;\n\n    this.enabled = function(enabled) {\n      _enabled = !!enabled;\n    };\n\n    this.setAppId = function(_id) {\n      appId = _id;\n    };\n\n    this.$get = function(avLogMessagesResource, $location, AV_EXCEPTIONS) {\n\n      var AvExceptionAnalytics = function() {\n\n      };\n\n      var proto = AvExceptionAnalytics.prototype;\n\n      proto.init = function() {\n\n        var self = this;\n\n        if(!_enabled) {\n          return;\n        }\n\n        TraceKit.remoteFetching = false;\n        TraceKit.surroundingLinesToCollect = 11;\n\n        // subscribe() hooks into window.error\n        TraceKit.report.subscribe(function(stacktrace) {\n          self.onError(stacktrace);\n        });\n\n      };\n\n      proto.prettyPrint = function(stacktrace) {\n\n        var message = '';\n\n        var length = stacktrace.stack.length;\n\n        for(var i = 0; i < length; i++) {\n          message += [\n            '[' + _.padLeft(i + '', 2, '0') + '] ',\n            stacktrace.stack[i].func,\n            ' ',\n            stacktrace.stack[i].url,\n            ':',\n            stacktrace.stack[i].line,\n            ':',\n            stacktrace.stack[i].column,\n            i + 1 < length ? '\\n' : ''\n          ].join('');\n\n        }\n\n        return message;\n      };\n\n      proto.onError = function(stacktrace) {\n\n        var userAgent = root.navigator && root.navigator.userAgent ? root.navigator.userAgent : AV_EXCEPTIONS.MESSAGES.NOT_APPLICABLE;\n\n        var message = {\n          errorDate: moment(new Date()).format('YYYY-MM-DDTHH:mm:ssZZ'),\n          errorName: stacktrace.name,\n          errorMessage: stacktrace.message,\n          errorStack: this.prettyPrint(stacktrace),\n          url: $location.$$absUrl,\n          appId: appId || AV_EXCEPTIONS.MESSAGES.NOT_APPLICABLE,\n          // appVersion: AV_EXCEPTIONS.MESSAGES.NOT_APPLICABLE,\n          userAgent: userAgent,\n          userLanguage: navigator.userLanguage,\n          referrer: document.referrer,\n          host: document.domain,\n          screenWidth: $(window).width(),\n          screenHeight: $(window).height(),\n          sdkVersion: availity.VERSION\n        };\n\n        return this.log(message);\n\n      };\n\n      proto.log = function(message) {\n        return avLogMessagesResource['error'](message);\n      };\n\n      proto.trackEvent = function(exception) {\n\n        if(!_enabled) {\n          return;\n        }\n\n        var stacktrace = TraceKit.computeStackTrace(exception);\n\n        return this.onError(stacktrace);\n\n      };\n\n      return new AvExceptionAnalytics();\n\n    };\n  });\n\n  availity.core.config(function($provide) {\n\n    $provide.decorator('$exceptionHandler', function($delegate, $injector) {\n      return function(exception, cause) {\n        $delegate(exception, cause);\n        var errorTacking = $injector.get('avExceptionAnalytics');\n        errorTacking.trackEvent(exception);\n      };\n    });\n\n  });\n\n  availity.core.run(function(avExceptionAnalytics) {\n    avExceptionAnalytics.init();\n  });\n\n})(window);\n\n// Source: \\lib\\core\\utils\\date-polyfill.js\n// Issue: https://github.com/angular/angular.js/issues/11165\n// Polyfill: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\n//\n// This polyfill is needed because Angular calls toISOString()\n// when an request parameter is of type Date.  If this polyfill isn't present\n// the ajax call fails.\n//\n(function() {\n\n  'use strict';\n\n  var pad = function(number) {\n    if(number < 10) {\n      return '0' + number;\n    }\n    return number;\n  };\n\n  if(!Date.prototype.toISOString) {\n\n    Date.prototype.toISOString = function() {\n\n      return this.getUTCFullYear() +\n        '-' + pad(this.getUTCMonth() + 1) +\n        '-' + pad(this.getUTCDate()) +\n        'T' + pad(this.getUTCHours()) +\n        ':' + pad(this.getUTCMinutes()) +\n        ':' + pad(this.getUTCSeconds()) +\n        '.' + (this.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) +\n        'Z';\n    };\n  }\n\n})(window);\n\n//# sourceMappingURL=maps/availity-angular.js.map","/*global module*/\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity || {};\n  availity.VERSION = 'v0.0.0';\n  availity.MODULE = 'availity';\n  availity.core = angular.module(availity.MODULE, ['ng']);\n\n  var originalModule = angular.module;\n  var modules = [];\n\n  angular.module = function(name, deps) {\n\n    if(deps && _.indexOf(modules, name) !== -1 && !window.__karma__) {\n      throw new Error('redefining module: ' + name);\n    }\n\n    modules.push(name);\n\n    return originalModule(name, deps);\n  };\n\n  root.availity = availity;\n\n  if(typeof module !== 'undefined' && module.exports) {\n    module.exports = availity;\n  }\n\n})(window);\n\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/helper/makeString.js\n  availity._stringify = function(object) {\n    if(object === null) {\n      return '';\n    }\n    return '' + object;\n  };\n\n  // https://github.com/epeli/underscore.string/blob/cebddf40cf2e10f0e9b596d9654edd0a1cfefc15/isBlank.js\n  availity.isBlank = function(str) {\n    return (/^\\s*$/).test(availity._stringify(str));\n  };\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var uid = ['0', '0', '0'];\n\n  availity.uuid = function(prefix) {\n    var index = uid.length;\n    var digit;\n\n    while(index) {\n      index--;\n      digit = uid[index].charCodeAt(0);\n      if(digit === 57 /*'9'*/) {\n        uid[index] = 'A';\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n      if(digit === 90  /*'Z'*/) {\n        uid[index] = '0';\n      } else {\n        uid[index] = String.fromCharCode(digit + 1);\n        return prefix ? prefix + uid.join('') : uid.join('');\n      }\n    }\n    uid.unshift('0');\n    return prefix ? prefix + uid.join('') : uid.join('');\n  };\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.REGEX_API_URL = /^.*?api.availity.com(.*)$/;\n\n  availity.getRelativeUrl = function(url) {\n    var result = url.match(availity.REGEX_API_URL);\n    if(result && result[1]) {\n      return '/api' + result[1];\n    }\n\n    return url;\n  };\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // https://github.com/jasonday/printThis/commit/66f9cbd0e3760767342eed4ef32cf8294417b227\n  availity.print = function() {\n\n    if(document.queryCommandSupported('print')) {\n      document.execCommand('print', false, null);\n    } else {\n      window.focus();\n      window.print();\n    }\n  };\n\n})(window);\n","// Original => https://github.com/mgcrea/angular-strap/blob/master/src/helpers/debounce.js\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_THROTTLE', {\n    OPTIONS: {\n      wait: 1000,\n      update: false,\n      trailing: true,\n      leading: false\n    }\n  });\n\n  availity.core.factory('avThrottle', function(AV_THROTTLE, $timeout) {\n\n    return function(fn, wait, options) {\n\n      options = _.merge({}, AV_THROTTLE.OPTIONS, options);\n\n      wait = wait ? wait : AV_THROTTLE.THRESHOLD;\n      var update = angular.isDefined(options.update) ? options.update : AV_THROTTLE.UPDATE;\n      var timer = null;\n\n      return function() {\n        var context = options.context || this;\n        var args = arguments;\n\n        if(!timer) {\n          if(options.leading !== false) {\n            fn.apply(context, args);\n          }\n\n          var later = function() {\n            timer = null;\n            if(options.trailing !== false) {\n              fn.apply(context, args);\n            }\n          };\n\n          timer = $timeout(later, wait, update);\n        }\n\n        return timer;\n\n      };\n    };\n  });\n\n})(window);\n","// Orginal => https://github.com/ericzon/angular-ny-logger/blob/0c594e864c93e7f33d36141200096bc6139ddde1/angular-ny-logger.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.provider('AvLogger', function() {\n\n    var _enabled = false;\n\n    this.enabled = function(enabled) {\n      _enabled = !!enabled;\n    };\n\n    this.$get = function($injector) {\n\n      var AvLogger = function(context, $delegate) {\n\n        this.context = context || '';\n        this.$log = $delegate;\n\n      };\n\n      var proto = AvLogger.prototype;\n\n      AvLogger.supplant = function(str, o) {\n\n        var _supplant = function (a, b) {\n          var r = o[b];\n          return r;\n        };\n\n        return str.replace(/\\{([^{}]*)\\}/g, _supplant);\n      };\n\n      AvLogger.isObject = function(element) {\n        var elemStr = ( !angular.isUndefined(element) && !angular.isUndefined(element.constructor) ) ? element.constructor.toString() : '';\n        return (elemStr.indexOf('Object') > -1);\n      };\n\n      AvLogger.getFormattedTimestamp = function(date) {\n\n        return AvLogger.supplant('{0}:{1}:{2}:{3}', [\n          date.getHours(),\n          date.getMinutes(),\n          date.getSeconds(),\n          date.getMilliseconds()\n        ]);\n\n      };\n\n      proto._log = function(originalFn, args) {\n\n        // Allow enabling logger through query params\n        // Ex:\n        //\n        // http://localhost:3000/ui.html#avLogger\n\n        var hash = window.location.hash;\n        hash = hash || '';\n\n        if(!_enabled && hash.indexOf('avLogger') < 0 && originalFn !== 'error') {\n          return;\n        }\n\n        var now  = AvLogger.getFormattedTimestamp(new Date());\n        var message = '';\n        var supplantData = [];\n\n        var context = this.context ? ' [' + this.context + '] ' : '';\n\n        switch(args.length) {\n          case 1:\n            // (1) If the user supplied one argument, then the argument must be\n            // the message itself and _log()\n            // will print: <timestamp> - <context>: <message>\n            supplantData = args[0];\n            message = AvLogger.supplant('{0}{1} - {2}', [now, context, args[0]]);\n            break;\n          case 3:\n            // (3) If the user supplied three arguments, then the first argument\n            // is a method name, the second is the message and the third is an\n            // object of variables to interpolate with the message. For this, _log()\n            // will print: <timestamp> - <context> - <method name>('<message>')\n            supplantData = args[2];\n            message = AvLogger.supplant(\"{0}{1} - {2}(\\'{3}\\')\", [now, context, args[0], args[1]]);\n            break;\n          case 2:\n            // (2) If the user provided two arguments, we need to find out whether\n            // they supplied a method name or an interpolation object.\n            // In order to figure that out, we’ll check the type of the last argument.\n            // If it is a string, then it has to be the message itself while the\n            // first argument is the method name. Otherwise consider the first argument\n            // as the message and the second as array of interpolation variables.\n            // The output print will be according to this check.\n            if(typeof args[1] === 'string') {\n\n              message = AvLogger.supplant(\"{0}{1} - {2}(\\'{3}\\')\", [now, context, args[0], args[1]]);\n\n            } else {\n\n              // If the message is an error, there may be a stack included. If so, we\n              // should include the stack in the message to make it more meaningful.\n              if(args[0].stack) {\n                var errorMessage = this.formatError(args[0]);\n                message = AvLogger.supplant('{0}{1} - {2}', [now, context, errorMessage]);\n                supplantData = args[1];\n\n              }else {\n                supplantData = args[1];\n\n              }\n\n            }\n            break;\n        }\n\n        var $log = this.$log || $injector.get('$log');\n\n        var params = (AvLogger.isObject(supplantData)) ? [message, supplantData] : [AvLogger.supplant(message, supplantData)];\n        $log[originalFn].apply(null, params);\n\n      };\n\n      proto.log = function() {\n        this._log('log', arguments);\n      };\n\n      proto.info = function() {\n        this._log('info', arguments);\n      };\n\n      proto.warn = function() {\n        this._log('warn', arguments);\n      };\n\n      proto.debug = function() {\n        this._log('debug', arguments);\n      };\n\n      // https://github.com/angular/angular.js/blob/v1.2.27/src/ng/log.js#L122\n      proto.formatError = function(arg) {\n        if(arg instanceof Error) {\n          if(arg.stack) {\n\n            arg = (arg.message && arg.stack.indexOf(arg.message) === -1) ?\n              'Error: ' + arg.message + '\\n' + arg.stack : arg.stack;\n\n          } else if(arg.sourceURL) {\n            arg = arg.message + '\\n' + arg.sourceURL + ':' + arg.line;\n          }\n        }\n        return arg;\n      };\n\n      proto.error = function() {\n        this._log('error', arguments);\n      };\n\n      return AvLogger;\n\n    };\n\n  });\n\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.config(function($provide) {\n\n    $provide.decorator('$log', function($delegate, AvLogger) {\n      return new AvLogger(null, $delegate);\n    });\n\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_POLLING', {\n    INTERVAL: 1000, // delay in ms before retrying an async request\n    MAX_ELAPSED_TIME: 5000, // max time in ms before polling stops and rejects original request\n    MAX_RETRY: 30, // # of times the request will be tried\n    DECAY: 1.2, // % the polling interval decays after every retry\n    // maximum time polling is allowed before rejecting the request\n    EVENTS: {\n      MAX_RETRY: 'av:polling:max:retry'\n    },\n    REGEX_URL: /^.*?api.availity.com(.*)$/ // capture the relative url from API\n  });\n\n  var PollingServiceFactory = function($rootScope, $q, $injector, $timeout, $log, AV_POLLING, AV_API) {\n\n    var AvPollingService = function() {\n      this.pendingRequests = []; // stores all request for polling\n    };\n\n    var proto = AvPollingService.prototype;\n\n    proto.response = function(response) {\n\n      if(this.isAsyncResponse(response)) {\n        return this.onAsyncReponse(response);\n      }\n\n      return response || $q.when(response);\n    };\n\n    proto.setDefaults = function(config) {\n\n      var defaultOptions = {\n        pollingInterval: AV_POLLING.INTERVAL,\n        pollingDecay: AV_POLLING.DECAY,\n        pollingMaxInterval: AV_POLLING.MAX_ELAPSED_TIME,\n        pollingRetryCount: 0,\n        pollingStartTime: new Date().getTime()\n      };\n\n      return _.extend(defaultOptions, config);\n    };\n\n    proto.responseError = function(response) {\n      // Return the promise rejection\n      return $q.reject(response);\n    };\n\n    /**\n     * API layer return a link with a polling url for\n     * async responses.\n     *\n     * @param  {Object}  response ajax response\n     * @return {Boolean} true if response has status of 202 (accepted) and location param in header with uri+session link\n     */\n    proto.isAsyncResponse = function(response) {\n\n      return response &&\n        response.config &&\n        response.config.api &&\n        response.status &&\n        response.status === 202 &&\n        angular.isFunction(response.headers) && !availity.isBlank(response.headers(AV_API.HEADERS.SERVER.LOCATION));\n    };\n\n    proto.onAsyncReponse = function(response) {\n\n      response.config = this.setDefaults(response.config);\n\n      var deferred = $q.defer();\n\n      this.queueRequest(deferred, response);\n\n      // [rm3]: Can't call notify before you return promise object?\n      $timeout(function() {\n        // Notify deferred listeners with the original server response\n        deferred.notify(response);\n      }, 0, false);\n\n      return deferred.promise;\n    };\n\n    proto.getUrl = function(url) {\n\n      var result = url.match(AV_POLLING.REGEX_URL);\n      if(result && result[1]) {\n        return '/api' + result[1];\n      }\n\n      return url;\n    };\n\n    proto.queueRequest = function(deferred, response) {\n\n      var self = this;\n      // server replies with location header so set the url into config\n      var _url = availity.getRelativeUrl(response.headers(AV_API.HEADERS.SERVER.LOCATION));\n      var _config = response.config;\n\n\n      // headers – {Object} – Map of strings or functions which return strings representing HTTP headers\n      //  to send to the server. If the return value of a function is null, the header\n      //  will not be sent. Functions accept a config object as an argument.\n      var config = {\n        method: 'GET',\n        api: true,\n        headers: _config.headers,\n        pollingInterval: _config.pollingInterval,\n        pollingMaxRetry: _config.pollingMaxRetry,\n        pollingMaxInterval: _config.pollingMaxInterval,\n        pollingStartTime: _config.pollingStartTime,\n        _pollingDecay: _config._pollingDecay,\n        pollingRetryCount: _config.pollingRetryCount,\n        pollingDecay: _config.pollingDecay,\n        url: _url, /* set the url from the server response */\n        cache: false\n      };\n\n      var request = {\n        id: availity.uuid('request-'),\n        config: config,\n        deferred: deferred\n      };\n\n      var timeout = this.getPollingTimeout(config);\n\n      // each async request should run on its own timer\n      var timer = $timeout(function() {\n        self.retryRequest(request.id);\n      }, timeout, false);\n\n      request.timer = timer;\n\n      // add the async request to the queue\n      this.pushRequest(request);\n\n    };\n\n    proto.popRequest = function(id) {\n\n      var index = null;\n      var request = null;\n\n      for(var i = 0; i < this.pendingRequests.length; i++) {\n        if(this.pendingRequests[i].id === id) {\n          index = i;\n          break;\n        }\n      }\n\n      request = this.pendingRequests[index];\n      this.pendingRequests.splice(index, 1);\n\n      return request;\n    };\n\n    proto.pushRequest = function(request) {\n      this.pendingRequests.push(request);\n    };\n\n    proto.getPollingTimeout = function(config) {\n      return config.pollingDecay * config.pollingInterval;\n    };\n\n    proto.isPollingMaxTimeout = function(config) {\n      var now = new Date().getTime();\n      var elaspedTime = now - config.pollingStartTime;\n      var isElapsed = elaspedTime > config.pollingMaxInterval;\n      return isElapsed;\n    },\n\n      proto.isMaxRetried = function(config) {\n        return config.pollingRetryCount >= AV_POLLING.MAX_RETRY;\n      };\n\n    proto.isPollable = function(config) {\n      var _isTimeout = this.isPollingMaxTimeout(config);\n      var _isMax = this.isMaxRetried(config);\n\n      return _isTimeout || _isMax ? false : true;\n\n    };\n\n    proto.retryRequest = function(id) {\n\n      var self = this;\n      var request = this.popRequest(id);\n      $timeout.cancel(request.timer);\n\n      var config = request.config;\n\n      var deferred = request.deferred;\n\n      if(!this.isPollable(config)) {\n        $log.info('Rejecting pollable response due to timeout');\n        return deferred.reject(request);\n      }\n\n      // increment counters and polling timeouts\n      this.increment(config);\n\n      function successCallback(response) {\n        if(self.isAsyncResponse(response)) {\n          deferred.notify(response);\n          self.queueRequest(request.deferred, response);\n        } else {\n          deferred.resolve(response);\n        }\n      }\n\n      function errorCallback(response) {\n        deferred.reject(response);\n      }\n\n      // Silly circular dependency trick\n      var $http = $injector.get('$http');\n\n      $http(config).then(successCallback, errorCallback);\n\n    };\n\n    proto.increment = function(config) {\n      this.incrementCounter(config);\n      this.incrementDecay(config);\n    };\n\n    proto.incrementDecay = function(config) {\n      if(!config._pollingDecay) {\n        // store the original decay param\n        config._pollingDecay = config.pollingDecay;\n      }\n      config.pollingDecay *= config._pollingDecay;\n    };\n\n    proto.incrementCounter = function(config) {\n      config.pollingRetryCount++;\n    };\n\n    proto.clearRequests = function() {\n      angular.forEach(this.pendingRequests, function(request) {\n        $timeout.cancel(request.timer);\n      });\n      this.pendingRequests = [];\n    };\n\n    return new AvPollingService();\n\n  };\n\n  availity.core.factory('avPollingService', PollingServiceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_API', {\n    HEADERS: {\n      SERVER: {\n        ID: 'X-API-ID',\n        LOCATION: 'Location',\n        STATUS: 'X-Status-Message',\n        GLOBAL_ID: 'X-Global-Transaction-ID'\n      },\n      CLIENT: {\n        SESSION_ID: 'X-Session-ID',\n        AUTH: 'Authorization',\n        OVERRIDE: 'X-HTTP-Method-Override',\n        CALLBACK_URL: 'X-Callback-URL',\n        CUSTOMER_ID: 'X-Availity-Customer-ID'\n      }\n    }\n  });\n\n  var defaultOptions = {\n    // pre-prend the url with a value like `/public` so we can build urls like `public/api/v1/*`\n    prefix: '',\n    // default base url for endpoints\n    path: '/api',\n    // url resource group, such as `/foo`, for urls like `public/api/foo/v1/*`\n    resourceGroup: '',\n    // url to resource endpoint like `coverages` or `payers`\n    url: null,\n    // defaults to version 1\n    version: '/v1',\n    // governance level `/internal`\n    level: '',\n    // post-pend the url with `.json`, `.txt` or `.xml`\n    suffix: '',\n    // cache all request by default\n    cache: true,\n    // flag used to enable behaviors around the Availity Rest API\n    api: true,\n    // # of times the polling service has tried to get a response\n    pollingRetryCount: 0,\n    // in ms\n    pollingInterval: 1000,\n    // % the polling interval decays after every retry\n    pollingDecay: 1.2,\n    // maximum time polling is allowed before rejecting the request\n    pollingMaxInterval: 30000\n\n  };\n\n  // Factory that creates ApiResourcess\n  var ApiResourcesFactory = function($http, $q, avPollingService) {\n\n    var AvApiResource = function(options) {\n\n      if(!options) {\n        throw new Error('[options] cannot be null or undefined');\n      }\n\n      // if string the assume url is being passed in\n      if(angular.isString(options)) {\n        options = options.charAt(0) === '/' ? options : '/' + options;\n        options = angular.extend({}, {url: options});\n      }\n\n      if(!options.url) {\n        throw new Error('[url] cannot be null');\n      }\n\n      // get the default options and merge into this instance\n      this.options = angular.extend({}, defaultOptions, (options || {}));\n    };\n\n    // Alias the prototype\n    var proto = AvApiResource.prototype;\n\n    proto._config = function(config) {\n      return angular.extend({}, this.options, (config || {}));\n    },\n\n    proto._cacheBust = function(config) {\n      config.cacheBust = null;\n      config.params = config.params || {};\n      config.params.cacheBust = new Date().getTime();\n      return config;\n    },\n\n    proto._getUrl = function(id) {\n      if(this.options.api) {\n        return this._getApiUrl(id);\n      }\n\n      return this.options.url;\n    };\n\n    proto._createResponse = function(data, status, headers, config) {\n      return {\n        data: data,\n        status: status,\n        headers: headers,\n        config: config\n      };\n    };\n\n    proto._request = function(config, afterCallback) {\n\n      var self = this;\n      var defer = $q.defer();\n\n      $http(config)\n        .success(function(data, status, headers, _config) {\n\n          var _response = {\n            data: data,\n            status: status,\n            headers: headers,\n            config: _config\n          };\n\n          // handle the async response if applicable\n          var _promise = $q.when(avPollingService.response(_response));\n          // notify the promise listener of the original response\n          defer.notify(_response);\n\n          // handle the polling service promise\n          _promise.then(function(successResponse) {\n\n            // if service has a callback then call it\n            // var response = self._createResponse(data, status, headers, _config);\n            if(afterCallback) {\n              successResponse = afterCallback.call(self, successResponse, config.data);\n            }\n            defer.resolve(successResponse);\n          }, function(errorResponse) {\n            defer.reject(errorResponse);\n          }, function(notifyResponse) {\n            defer.notify(notifyResponse);\n          });\n\n        }).error(function(data, status, headers, _config) {\n          var response = self._createResponse(data, status, headers, _config);\n          defer.reject(response);\n        });\n\n      var promise = defer.promise;\n\n      // recreate the success callback ala $http\n      promise.success = function(fn) {\n        promise.then(function(response) {\n          fn(response.data, response.status, response.headers, response.config);\n        });\n        return promise;\n      };\n\n      // recreate the error callback ala $http\n      promise.error = function(fn) {\n        promise.then(null, function(response) {\n          fn(response.data, response.status, response.headers, config);\n        });\n        return promise;\n      };\n\n      promise.always = promise['finally'];\n\n      return promise;\n    };\n\n    proto._getApiUrl = function(id) {\n      id = id ? '/' + id : '';\n      return this.options.prefix + this.options.path + this.options.level + this.options.resourceGroup + this.options.version + this.options.url + id + this.options.suffix;\n    };\n\n    proto.create = function(data, config) {\n\n      if(!data) {\n        throw new Error('called method without [data]');\n      }\n\n      if(this.beforeCreate) {\n        data = this.beforeCreate(data);\n      }\n\n      config = this._config(config);\n      config.method = 'POST';\n      config.url = this._getUrl();\n      config.data = data;\n\n      return this._request(config, this.afterCreate);\n\n    };\n\n    proto.get = function(id, config) {\n\n      if(!id) {\n        throw new Error('called method without [id]');\n      }\n\n      config = this._config(config);\n      if(config.cacheBust) {\n        config = this._cacheBust(config);\n      }\n      config.method = 'GET';\n      config.url = this._getUrl(id);\n\n\n      return this._request(config, this.afterGet);\n\n    };\n\n    proto.query = function(config) {\n\n      config = this._config(config);\n      if(config.cacheBust) {\n        config = this._cacheBust(config);\n      }\n      config.method = 'GET';\n      config.url = this._getUrl();\n\n      return this._request(config, this.afterQuery);\n\n    };\n\n    proto.update = function(id, data, config) {\n\n      var url;\n\n      if(_.isString(id) || _.isNumber(id)) {\n        url = this._getUrl(id);\n      }else {\n        url = this._getUrl();\n        // At this point the function signature becomes:\n        //\n        // proto.update = function(data, config) {} a.k.a function(id, data)\n        //\n        config = data;  // config is really the 2nd param\n        data = id; // data is really the first param\n      }\n\n      if(this.beforeUpdate) {\n        data = this.beforeUpdate(data);\n      }\n\n      config = this._config(config);\n      config.method = 'PUT';\n      config.url = url;\n      config.data = data;\n\n      return this._request(config, this.afterUpdate);\n\n    };\n\n    proto.remove = function(id, config) {\n\n      var url;\n      var data;\n\n      if(_.isString(id) || _.isNumber(id)) {\n        url = this._getUrl(id);\n      }else {\n        // At this point the function signature becomes:\n        //\n        // proto.remove = function(data, config)\n        //\n        url = this._getUrl();\n        data = id;\n      }\n\n      config = this._config(config);\n      config.method = 'DELETE';\n      config.url = url;\n      config.data = data;\n\n      return this._request(config, this.afterRemove);\n    };\n\n    proto.beforeCreate = null;\n    proto.afterCreate = null;\n    proto.afterQuery = null;\n    proto.afterGet = null;\n    proto.beforeUpdate = null;\n    proto.afterUpdate = null;\n    proto.afterRemove = null;\n\n    return AvApiResource;\n\n  };\n\n  availity.core.factory('AvApiResource', ApiResourcesFactory);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  var UserServiceFactory = function(AvApiResource) {\n\n    var AvUsersResource = function() {\n      AvApiResource.call(this, 'users');\n    };\n\n    angular.extend(AvUsersResource.prototype, AvApiResource.prototype, {\n\n      afterGet: function(response) {\n        var user = response.data.user ? response.data.user : response.data;\n        return user;\n      },\n\n      me: function(config) {\n        return this.get('me', config);\n      }\n\n    });\n\n    return new AvUsersResource();\n\n  };\n\n  availity.core.factory('avUsersResource', UserServiceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avCoveragesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations', cache: false});\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avConfigurationsResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/configurations'});\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var LogMessagesFactory = function(AvApiResource) {\n\n    var AvLogMessagesResource = function() {\n\n      AvApiResource.call(this, {\n        version: '/v1',\n        url: '/log-messages'\n      });\n    };\n\n    angular.extend(AvLogMessagesResource.prototype, AvApiResource.prototype, {\n\n      buildRequest: function(level, entries) {\n\n        var requestPayload = {};\n\n        if(entries.level) {\n          delete entries.level;\n        }\n\n        requestPayload.level = level;\n        requestPayload.entries = entries;\n\n        return requestPayload;\n      },\n\n      debug: function(entries) {\n        return this.create(this.buildRequest('debug', entries));\n      },\n\n      info: function(entries) {\n        return this.create(this.buildRequest('info', entries));\n      },\n\n      warn: function(entries) {\n        return this.create(this.buildRequest('warn', entries));\n      },\n\n      error: function(entries) {\n        return this.create(this.buildRequest('error', entries));\n      }\n\n    });\n\n    return new AvLogMessagesResource();\n\n  };\n\n  availity.core.factory('avLogMessagesResource', LogMessagesFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvDocumentsResourceFactory = function(AvApiResource) {\n\n    var AvDocumentsResource = function() {\n      AvApiResource.call(this, 'documents');\n    };\n\n    angular.extend(AvDocumentsResource.prototype, AvApiResource.prototype, {\n\n      getContents: function(id) {\n        var config = this._config();\n        config.url = this.getContentsUrl(id);\n        return this._request(config);\n      },\n\n      getContentsUrl: function(id) {\n        return this._getUrl(id) + '/contents';\n      }\n\n    });\n\n    return new AvDocumentsResource();\n\n  };\n\n  availity.core.factory('avDocumentsResource', AvDocumentsResourceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var OrganizationResourceFactory = function(AvApiResource) {\n\n    var OrganizationResource = function() {\n      AvApiResource.call(this, 'organizations');\n    };\n\n    angular.extend(OrganizationResource.prototype, AvApiResource.prototype, {\n\n      getOrganizations: function(config) {\n        return this.query(config).then(function(response) {\n          return response.data.organizations ? response.data.organizations : response.data;\n        });\n      }\n\n    });\n\n    return new OrganizationResource();\n  };\n\n  availity.core.factory('avOrganizationsResource', OrganizationResourceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n\n  var availity = root.availity;\n\n  availity.core.factory('avCodesResource', function(AvApiResource) {\n    return new AvApiResource({version: '/v1', url: '/codes'});\n  });\n\n  var AvCodesResourceFactory = function(AvApiResource) {\n\n    var AvCodesResource = function () {\n      AvApiResource.call(this, 'codes');\n    };\n\n    angular.extend(AvCodesResource.prototype, AvApiResource.prototype, {\n\n      getCodes: function (data) {\n\n        // config for the api resource query\n        var config = {};\n        config.params = {};\n\n        if(data.page) {\n          config.params.offset = 50 * (data.page - 1);\n        }\n        if(data.offset) {\n          config.params.offset = data.offset;\n        }\n        if(data.list) {\n          config.params.list = data.list;\n        }\n        if(data.q) {\n          config.params.q = data.q;\n        }\n\n        return this.query(config).then(function (response) {\n          // Format the response into something select2 can read\n          var results = response.data.codes;\n          if(results && !_.has(results[0], 'id')) {\n            _.each(results, function (code) {\n              code.id = code.code;\n            });\n          }\n\n          // calculate if we want to continue searching\n          var moreVal = response.data.offset < response.data.totalCount - response.data.limit;\n          return {\n            more: moreVal,\n            results: results\n          };\n\n        });\n      }\n\n    });\n\n    return new AvCodesResource();\n\n  };\n\n  availity.core.factory('avCodesResource', AvCodesResourceFactory);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvUserPermissionsResourceFactory = function(AvApiResource) {\n\n    var AvUserPermissionsResource = function() {\n      AvApiResource.call(this, {\n        level: '/internal',\n        version: '/v1',\n        url: '/axi-user-permissions'\n      });\n      this.sessionDate = moment().toISOString();\n    };\n\n    angular.extend(AvUserPermissionsResource.prototype, AvApiResource.prototype, {\n\n      afterQuery: function(response) {\n        return response.data.axiUserPermissions ? response.data.axiUserPermissions : [];\n      },\n\n      getPermissions: function(permissionIds, region) {\n        var self = this;\n        return this.query({\n          params: {\n            permissionId: permissionIds,\n            region: region,\n            sessionDate: self.sessionDate\n          }\n        });\n      }\n\n    });\n\n    return new AvUserPermissionsResource();\n\n  };\n\n  availity.core.factory('avUserPermissionsResource', AvUserPermissionsResourceFactory);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  var AvUserAuthorizationsFactory = function($q, $log, avUserPermissionsResource) {\n\n    /**\n     *\n     * @constructor\n     */\n    var AvUserAuthorizations = function() {\n      /**\n       * Region is used to return permission/resources relative to region. If null service will\n       * return all permission relative to current.  If value 'ALL' used it will return value relative\n       * to all regions the user has access to.\n       * @type {string}\n       */\n      this.region = null;\n      /**\n       * PermissionIds contains the set of permissionIds to request from service. If user of service calls\n       * setPermissionIds() or call getPermissions() with complete set of permissionIds needed by application,\n       * then service should only make that one hit to retrieve permission information.\n       * @type {Array}\n       */\n      this.permissionIds = [];\n    };\n\n    var proto = AvUserAuthorizations.prototype;\n\n    proto.setRegion = function(region) {\n      this.region = region;\n      return this;\n    };\n\n    proto.setPermissionIds = function(permissionIds) {\n      if(!angular.isArray(permissionIds)) {\n        throw new Error('permissionsIds must be an array of string IDs for avUserAuthorizations#addPermissionIds');\n      }\n      this.permissionIds = permissionIds;\n      return this;\n    };\n\n    proto.isAuthorized = function(permissionId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        return permission.isAuthorized;\n      });\n    };\n\n    proto.isAnyAuthorized = function(permissionIds) {\n      return this.getPermissions(permissionIds).then(function(permissions) {\n        var permission = _.findWhere(permissions, {isAuthorized: true});\n        return permission !== undefined;\n      });\n    };\n\n    proto.getPermission = function(permissionId) {\n      if(!angular.isString(permissionId)) {\n        throw new Error('permissionsId must be a string ID for avUserAuthorizations#getPermission');\n      }\n\n      return this.getPermissions([permissionId])\n        .then(function(_permissions) {\n          return _permissions[permissionId];\n        });\n    };\n\n    proto.getPermissions = function(permissionIds) {\n      var self = this;\n\n      if(!angular.isArray(permissionIds)) {\n        throw new Error('permissionsIds must be an array of string IDs for avUserAuthorizations#getPermissions');\n      }\n      // merge permission ids to reduce calls to backend\n      self.permissionIds = _.union(self.permissionIds, permissionIds);\n\n      return avUserPermissionsResource\n        .getPermissions(self.permissionIds, self.region)\n        .then(function(_permissions) {\n          return self.toPermissionMap(permissionIds, _permissions);\n        });\n    };\n\n    proto.getOrganizations = function(permissionId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        return permission.organizations;\n      });\n    };\n\n    proto.getPayers = function(permissionId, organizationId) {\n      return this.getPermission(permissionId).then(function(permission) {\n        var organization = _.findWhere(permission.organizations, {id: organizationId});\n\n        if(organization && organization.resources) {\n          return organization.resources;\n        }\n        return [];\n      });\n\n    };\n\n    /**\n     * Converts array permissions to map with value for each permissionId, creating empty permission\n     * if can't find permission in array\n     * @private\n     */\n    proto.toPermissionMap = function(permissionIds, permissions) {\n      var self = this;\n      var map = {};\n      permissions = _.slice(permissions);\n      _.forEach(permissionIds, function(permissionId) {\n        var key = {id: permissionId};\n        var permission = _.findWhere(permissions, key);\n        permission = permission ? self.toPermission(permission) : self.toPermission(key);\n        map[permission.id] = permission;\n      });\n      return map;\n    };\n\n    /**\n     * Convert a permission resource into a structure that is easier to work with.\n     * @private\n     */\n    proto.toPermission = function(permission) {\n      return {\n        id: permission.id,\n        description: permission.description ? permission.description : '',\n        geographies: permission.geographies ? permission.geographies : [],\n        organizations: permission.organizations ? permission.organizations : [],\n        isAuthorized: permission.organizations ? permission.organizations.length > 0 : false\n      };\n    };\n\n    return new AvUserAuthorizations();\n\n  };\n\n  availity.core.factory('avUserAuthorizations', AvUserAuthorizationsFactory);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_SESSION', {\n    SESSION_TIMEOUT: 'av:auth:session:timeout',\n    NOT_AUTHORIZED: 'av:auth:not:authorized'\n  });\n\n  availity.core.factory('avSession', function($q, avUsersResource) {\n\n    var AvSession = function() {\n      this.user = null;\n      this.permissions = null;\n    };\n\n    var proto = AvSession.prototype;\n\n    proto.getUser = function() {\n      var self = this;\n\n      if(this.user) {\n        return $q.when(this.user);\n      }\n\n      return avUsersResource.me().then(function(user) {\n        self.user = user;\n        return self.user;\n      });\n    };\n\n\n    proto.destroy = function() {\n      this.user = null;\n      this.permisions = null;\n    };\n\n    return new AvSession();\n  });\n\n})(window);\n","// Inspiration => https://github.com/HackedByChinese/ng-idle\n//\n// Rules:\n//\n//  * ping after 3 minutes from last human activity\n//  * reset session after api success except 401\n//  * idle show after 25 of inactivity\n//\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_IDLE', {\n    EVENTS: {\n      IDLE_INACTIVE: 'av:idle:inactive',\n      IDLE_ACTIVE: 'av:idle:active',\n      SESSION_TIMEOUT_ACTIVE: 'av:idle:session:active',\n      SESSION_TIMEOUT_REDIRECT: 'av:idle:session:redirect',\n      HUMAN: 'keydown.av.idle mousedown.av.idle keydown.av.idle',\n      MACHINE: '$locationChangeSuccess'\n    },\n    INTERVALS: {\n      PING: 3 * 60 * 1000, // 3 minutes\n      IDLE: 25 * 60 * 1000, // 25 minutes\n      SESSION: 30 * 60 * 1000 // 30 minutes\n    },\n    URLS: {\n      HOME: '/availity/web/public.elegant.login',\n      PING: '/api/v1/users/me'\n    }\n  });\n\n  availity.core.provider('avIdle', function(AV_IDLE) {\n\n    var enabled = false;\n    var pingUrl;\n    var redirectUrl;\n    var sessionTimeout;\n    var idleTimeout;\n    var pingTimeout;\n\n    this.enable = function(value) {\n      if(arguments.length) {\n        enabled = !!value;\n      }\n      return enabled;\n    };\n\n    this.setSessionTimeout = function(timeout) {\n      sessionTimeout = timeout || AV_IDLE.INTERVALS.SESSION;\n    };\n\n    this.setIdleTimeout = function(timeout) {\n      idleTimeout = timeout || AV_IDLE.INTERVALS.IDLE;\n    };\n\n    this.setPingTimeout = function(timeout) {\n      pingTimeout = timeout || AV_IDLE.INTERVALS.PING;\n    };\n\n    this.setPingUrl = function(url) {\n      pingUrl = url || AV_IDLE.URLS.PING;\n    };\n\n    this.$get = function(AV_IDLE, $log, $document, $rootScope, $timeout, avThrottle, $q, $injector) {\n\n      var AvIdle = function() {\n\n        // $timeout references\n        this._idleTimer = null;\n        this._sessionTimer = null;\n        this._pingTimer = null;\n        this._keepAlive = null;\n\n        // flag used to track if the if user is idle or session expired\n        this.idleActive = false;\n        this.sessionActive = false;\n\n        this.listeners = [];\n\n        this.init();\n\n      };\n\n      var proto = AvIdle.prototype;\n\n      proto.init = function() {\n\n        if(!enabled) {\n          this.stop();\n          return;\n        }\n\n        this.start();\n      };\n\n      proto.start = function() {\n\n        $log.info('avIdle start');\n\n        var self = this;\n        var listener;\n\n        !sessionTimeout && this.setSessionTimeout();\n        !idleTimeout && this.setIdleTimeout();\n        !pingTimeout && this.setPingTimeout();\n        !pingUrl && this.setPingUrl();\n        !redirectUrl && this.setRedirectUrl();\n\n        $rootScope.$on('$destroy', function() {\n          self.stop();\n        });\n\n        $document.find('body').on(AV_IDLE.EVENTS.HUMAN, function(event) {\n          self.onEvent(event);\n        });\n\n        listener = $rootScope.$on(AV_IDLE.EVENTS.MACHINE, function(event, oldUrl, newUrl) {\n          if(oldUrl !== newUrl) {\n            self.onEvent(event);\n          }\n        });\n        this.listeners.push(listener);\n\n        $rootScope.$on(AV_IDLE.EVENTS.SESSION_TIMEOUT_REDIRECT, function() {\n          document.location.href = redirectUrl;\n        });\n\n        this.startIdleTimer();\n        this.startSessionTimer();\n      };\n\n      proto.stop = function() {\n\n        $document.find('body').off(AV_IDLE.EVENTS.HUMAN);\n\n        // turns off Angular event listeners @see http://stackoverflow.com/a/14898795\n        _.each(this.listeners, function(listener) {\n          listener();\n        });\n\n        this.stopPing();\n        this.stopSessionTimer();\n        this.stopIdleTimer();\n      };\n\n      proto.isEnabled = function() {\n        return enabled;\n      };\n\n      proto.enable = function(value) {\n        if(arguments.length) {\n          enabled = !!value;\n        }\n\n        return this;\n      };\n\n      proto.setSessionTimeout = function(timeout) {\n        sessionTimeout = timeout || AV_IDLE.INTERVALS.SESSION;\n        return this;\n      };\n\n      proto.setIdleTimeout = function(timeout) {\n        idleTimeout = timeout || AV_IDLE.INTERVALS.IDLE;\n        return this;\n      };\n\n      proto.setPingTimeout = function(timeout) {\n        pingTimeout = timeout || AV_IDLE.INTERVALS.PING;\n        return this;\n      };\n\n      proto.setPingUrl = function(url) {\n        pingUrl = url || AV_IDLE.URLS.PING;\n        return this;\n      };\n\n      proto.setRedirectUrl = function(url) {\n        redirectUrl = url || AV_IDLE.URLS.HOME;\n        return this;\n      };\n\n      proto.response = function(response) {\n\n        if(this.isApiRequest(response)) {\n          this.startSessionTimer();\n        }\n\n        return response;\n      };\n\n      proto.isApiRequest = function(response) {\n        return response && response.config && response.config.api;\n      };\n\n      proto.responseError = function(response) {\n\n        if(this.isApiRequest(response) && response.status !== 401) {\n          this.startSessionTimer();\n        }\n\n        if(this.isApiRequest() && response.status === 401) {\n          this.stopPing();\n        }\n\n        return $q.reject(response);\n      };\n\n      proto.startSessionTimer = function() {\n\n        var self = this;\n\n        this.stopSessionTimer();\n\n        var later = function() {\n          $log.info('avIdle session has TIMED OUT');\n          self.stop();\n          $rootScope.$broadcast(AV_IDLE.EVENTS.SESSION_TIMEOUT_ACTIVE);\n        };\n\n        $log.info('avIdle session timer has STARTED');\n        this._sessionTimer = $timeout(later, sessionTimeout, false);\n\n      };\n\n      proto.stopSessionTimer = function() {\n        $log.info('avIdle session timer has STOPPED');\n        $timeout.cancel(this._sessionTimer);\n      };\n\n      proto.startIdleTimer = function() {\n\n        var self = this;\n\n        this.stopIdleTimer();\n\n        var later = function() {\n          self.stopIdleTimer();\n          $log.info('avIdle is IDLING');\n          $rootScope.$broadcast(AV_IDLE.EVENTS.IDLE_ACTIVE);\n        };\n\n        $log.info('avIdle idle timer has STARTED');\n        this._idleTimer = $timeout(later, idleTimeout, false);\n      };\n\n      proto.stopIdleTimer = function() {\n        $log.info('avIdle idle timer has STOPPED');\n        $timeout.cancel(this._idleTimer);\n      };\n\n      proto.startPing = function() {\n\n        if(!this._keepAlive) {\n          $log.info('avIdle ping timer has STARTED');\n          this._keepAlive = avThrottle(this.keepAlive, pingTimeout, {context: this});\n        }\n\n        this._pingTimer = this._keepAlive();\n      };\n\n      proto.stopPing = function() {\n        $log.info('avIdle ping timer has STOPPED');\n        if(this._pingTimer) {\n          $timeout.cancel(this._pingTimer);\n        }\n      };\n\n      proto.keepAlive = function() {\n\n        // destroy the reference to that a new throttle gets created upon\n        // next user or system event\n        this._keepAlive = null;\n        var $http = $injector.get('$http');\n\n        $http.get(pingUrl, {\n          cache: false,\n          api: true\n        }).success(function() {\n          $log.info('avIdle keep-alive SUCCESS');\n        }).error(function() {\n          $log.error('avIdle keep-alive FAILURE');\n        });\n      };\n\n      proto.onEvent = function() {\n        this.startIdleTimer();\n        this.startPing();\n      };\n\n      return new AvIdle();\n\n    };\n\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avIdleInterceptor', function(avIdle) {\n    return {\n      response: function(response) {\n        return avIdle.response(response);\n      },\n      responseError: function(response) {\n        return avIdle.responseError(response);\n      }\n    };\n\n  });\n\n  availity.core.config(function($httpProvider) {\n    $httpProvider.interceptors.push('avIdleInterceptor');\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.value('avValConfig', {\n    classes: {\n      valid: 'ng-valid',\n      invalid: 'ng-invalid',\n      dirty: 'ng-dirty',\n      pristine: 'ng-pristine',\n      touched: 'ng-touched',\n      untouched: 'ng-untouched',\n      submitted: 'ng-submitted'\n    },\n    validators: [\n      'avValPattern',\n      'avValSize',\n      'avValRequired',\n      'avValDateRange',\n      'avValDate',\n      'avValPhone',\n      'avValEmail'\n    ]\n  });\n\n  availity.core.constant('AV_VAL', {\n    EVENTS: {\n      REVALIDATE: 'av:val:revalidate',\n      SUBMITTED: 'av:val:submitted',\n      FAILED: 'av:val:failed',\n      RESET: 'av:val:reset'\n    },\n    DEBOUNCE: 800,\n    DATE_FORMAT: {\n      SIMPLE: 'MM/DD/YYYY'\n    },\n    PATTERNS: {\n      ALPHA_ONLY: /[^A-Za-z]+/g,\n      NUMERIC_ONLY: /[^0-9]+/g\n    }\n  });\n\n  availity.core.provider('avVal', function() {\n\n    var validators = [];\n    var rules = {};\n    var services = {};\n\n    this.addRules = function(_rules) {\n      rules = angular.extend({}, rules, _rules);\n      return rules;\n    };\n\n    this.addValidators = function(_validators) {\n      validators = validators.concat(_validators);\n      return validators;\n    };\n\n    this.$get = function($injector, $rootScope, $http, $log, avValConfig, AV_VAL) {\n\n      var AvValidation = function() {\n        this.initValidators();\n      };\n\n      var proto = AvValidation.prototype;\n\n      proto.initValidators = function() {\n        var self = this;\n\n        validators = avValConfig.validators.concat(validators);\n\n        angular.forEach(validators, function(name) {\n          self.addValidator(name);\n        });\n\n      };\n\n      proto.addValidator = function(name) {\n        var validator = $injector.get(name);\n        services[validator.name] = validator;\n      };\n\n      proto.addRules = function(_rules) {\n        rules = angular.extend({}, rules, _rules);\n        $rootScope.$broadcast(AV_VAL.EVENTS.REVALIDATE);\n      };\n\n      proto.validate = function(key, element, value, ruleName) {\n\n        var ruleConfig = rules[key];\n        if(!ruleConfig) {\n          $log.error('Failed to get rules key [' + key + '].  Forms must be tagged with a rules set name for validation to work.');\n          return;\n        }\n\n        var contraints = ruleConfig[ruleName];\n        if(!contraints) {\n          $log.info('Rule named [' + ruleName + '] could not be found in the current schema.');\n          contraints = [];\n        }\n\n        var el = element[0];\n        var results  = [];\n        var violations = [];\n        var _valid = true;\n\n        angular.forEach(contraints, function(rule, contraintName) {\n\n          if(!rule) {\n            // when extended rule sets, a user can pass nulls to cancel out a rule so if\n            // one doesn't exist just continue\n            return;\n          }\n\n          var validator = services[contraintName];\n\n          if(angular.isUndefined(validator)) {\n            $log.warn('No validator defined for `' + name + '`');\n            return;\n          }\n\n          var valid = validator.validate(value, rule, element);\n\n          var validationResult = {\n            valid: valid,\n            ruleName: ruleName,\n            contraintName: contraintName,\n            value: value,\n            message: rule.message,\n            field: el.name || el.id\n          };\n\n          var result = angular.extend({}, rule, validationResult);\n\n          results.push(result);\n          if(!valid) {\n            violations.push(validationResult);\n          }\n          _valid = _valid && valid;\n\n        });\n\n        return {\n          isValid: _valid,\n          all: results, // all the constraint results\n          violations: violations\n        };\n\n      };\n\n      return new AvValidation();\n\n    };\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValUtils', function() {\n\n    return {\n\n      isDefined: function(value) {\n        return angular.isDefined(value) && value !== '' && value !== null;\n      },\n\n      isEmpty: function(value) {\n        return !this.isDefined(value) || $.trim(value) === '';\n      }\n    };\n\n  });\n})(window);\n\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValSize', function(avValUtils) {\n\n    var validator =  {\n\n      name: 'size',\n\n      validate: function(value, rule) {\n\n        var min = rule.min || 0;\n        var max = rule.max;\n        var type = rule.type ? rule.type.toLowerCase() : 'text';\n\n        if(_.isNull(value) || _.isUndefined(value)) {\n          value = '';\n        }\n\n        if(type === 'text') {\n          value = value + '';\n          return  avValUtils.isEmpty(value) || value.length >= min && (max === undefined || value.length <= max);\n        }\n\n        // ... must be a Number\n        if(!_.isNumber(value) && /^\\d+$/.test(value)) {\n          value = parseInt(value, 10);\n        }\n\n        return avValUtils.isEmpty(value) || value >= min && (max === undefined || value <= max);\n\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValPattern', function(avValUtils) {\n\n    var validator =  {\n      name: 'pattern',\n      REGEX: /^\\/(.*)\\/([gim]*)$/, //regular expression to test a regular expression\n      asRegExp: function(pattern) {\n        var match;\n\n        if(pattern.test) {\n          return pattern;\n        } else {\n          match = pattern.match(validator.REGEX);\n          if(match) {\n            return new RegExp(match[1], match[2]);\n          } else {\n            throw ('Expected ' + pattern + ' to be a RegExp');\n          }\n        }\n      },\n      validate: function(value, rule) {\n        var values = _.isArray(rule.value) ? rule.value : [rule.value];\n\n        var valid = false;\n\n        _.each(values, function(expresion) {\n          var pattern = validator.asRegExp(expresion);\n          if(avValUtils.isEmpty(value) || pattern.test(value)) {\n            valid = true;\n          }\n        });\n\n        return valid;\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValRequired', function(avValUtils) {\n\n    var validator =  {\n      name: 'required',\n      validate: function(value, rule, element) {\n\n        // Using ngModelController.$isEmpty for required checks.  A form component being empty is dependent on the\n        // type of field:\n        //\n        //    - radio\n        //    - checkbox\n        //    - text\n        //    - lists\n        //\n        // You can override $isEmpty for input directives whose concept of being empty is different to the\n        // default. Radio and checkboxes directive do this because in its case a value of `false`\n        // implies empty.\n        //\n        var ctrl = element && element.data('$ngModelController');\n        if(ctrl) {\n          return !ctrl.$isEmpty(value);\n        }\n\n        return !avValUtils.isEmpty(value);\n\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDateRange', function(AV_VAL, avValUtils) {\n\n    var validator = {\n\n      name: 'dateRange',\n\n      getStartDate: function(start) {\n        return validator.setMin(moment().add(start.value, start.units));\n      },\n\n      getEndDate: function(end) {\n        return validator.setMax(moment().add(end.value, end.units) );\n      },\n\n      setMin: function(value) {\n\n        // [fix]: if time is provided this may cause issues.\n        value.set('hours', 0);\n        value.set('minutes', 0);\n        value.set('seconds', 0);\n\n        return value;\n      },\n\n      setMax: function(value) {\n\n        // [fix]: if time is provided this may cause issues.\n        value.set('hours', 23);\n        value.set('minutes', 59);\n        value.set('seconds', 59);\n\n        return value;\n      },\n\n      validation: function(value, rules) {\n\n        var date;\n        var startDate;\n        var endDate;\n\n        date = moment(value, rules.format || AV_VAL.DATE_FORMAT.SIMPLE);\n        date.set('hours', 0);\n        date.set('minutes', 0);\n        date.set('seconds', 0);\n\n        if(!avValUtils.isEmpty(rules.start.units) && !avValUtils.isEmpty(rules.end.units)) {\n          startDate = validator.getStartDate(rules.start);\n          endDate = validator.getEndDate(rules.end);\n        } else {\n          startDate = moment(rules.start.value, rules.format);\n          endDate = validator.setMax(moment(rules.end.value, rules.format));\n        }\n        return date.isValid() && date.isBetween(startDate, endDate, 'day') || date.isSame(startDate, 'day') || date.isSame(endDate, 'day');\n      },\n\n      validate: function(value, rule) {\n        return avValUtils.isEmpty(value) || validator.validation(value, rule);\n      }\n\n    };\n\n    return validator;\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValDate', function(AV_VAL, avValUtils) {\n\n    var validator = {\n      name: 'dateFormat',\n      validate: function(value, rules) {\n        var format = rules && rules.format ? rules.format : AV_VAL.DATE_FORMAT.SIMPLE;\n        return avValUtils.isEmpty(value) || moment(value, format, true).isValid();\n      }\n    };\n    return validator;\n  });\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValPhone', function(avValPattern) {\n\n    var PHONE_PATTERN = /^([0-9][\\.\\-]?)?[(]{0,1}[0-9]{3}[)\\.\\- ]{0,1}[0-9]{3}[\\.\\- ]{0,1}[0-9]{4}$/;\n\n    var validator =  {\n      name: 'phone',\n      validate: function(value, rule) {\n        return avValPattern.validate(value, angular.extend({}, rule, { value: PHONE_PATTERN }));\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avValEmail', function(avValPattern) {\n\n    var EMAIL_PATTERN = /[a-z0-9!#$%&'*+\\/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+\\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n\n    var validator =  {\n      name: 'email',\n      validate: function(value, rule) {\n        return avValPattern.validate(value, angular.extend({}, rule, { value: EMAIL_PATTERN }));\n      }\n    };\n\n    return validator;\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_GLOBALS', {\n    REGIONS: [\n      {\n        'name': 'Alabama',\n        'code': 'AL'\n      },\n      {\n        'name': 'Alaska',\n        'code': 'AK'\n      },\n      {\n        'name': 'Arizona',\n        'code': 'AZ'\n      },\n      {\n        'name': 'Arkansas',\n        'code': 'AR'\n      },\n      {\n        'name': 'California',\n        'code': 'CA'\n      },\n      {\n        'name': 'Colorado',\n        'code': 'CO'\n      },\n      {\n        'name': 'Connecticut',\n        'code': 'CT'\n      },\n      {\n        'name': 'Delaware',\n        'code': 'DE'\n      },\n      {\n        'name': 'District Of Columbia',\n        'code': 'DC'\n      },\n      {\n        'name': 'Florida',\n        'code': 'FL'\n      },\n      {\n        'name': 'Georgia',\n        'code': 'GA'\n      },\n      {\n        'name': 'Hawaii',\n        'code': 'HI'\n      },\n      {\n        'name': 'Idaho',\n        'code': 'ID'\n      },\n      {\n        'name': 'Illinois',\n        'code': 'IL'\n      },\n      {\n        'name': 'Indiana',\n        'code': 'IN'\n      },\n      {\n        'name': 'Iowa',\n        'code': 'IA'\n      },\n      {\n        'name': 'Kansas',\n        'code': 'KS'\n      },\n      {\n        'name': 'Kentucky',\n        'code': 'KY'\n      },\n      {\n        'name': 'Louisiana',\n        'code': 'LA'\n      },\n      {\n        'name': 'Maine',\n        'code': 'ME'\n      },\n      {\n        'name': 'Maryland',\n        'code': 'MD'\n      },\n      {\n        'name': 'Massachusetts',\n        'code': 'MA'\n      },\n      {\n        'name': 'Michigan',\n        'code': 'MI'\n      },\n      {\n        'name': 'Minnesota',\n        'code': 'MN'\n      },\n      {\n        'name': 'Mississippi',\n        'code': 'MS'\n      },\n      {\n        'name': 'Missouri',\n        'code': 'MO'\n      },\n      {\n        'name': 'Montana',\n        'code': 'MT'\n      },\n      {\n        'name': 'Nebraska',\n        'code': 'NE'\n      },\n      {\n        'name': 'Nevada',\n        'code': 'NV'\n      },\n      {\n        'name': 'New Hampshire',\n        'code': 'NH'\n      },\n      {\n        'name': 'New Jersey',\n        'code': 'NJ'\n      },\n      {\n        'name': 'New Mexico',\n        'code': 'NM'\n      },\n      {\n        'name': 'New York',\n        'code': 'NY'\n      },\n      {\n        'name': 'North Carolina',\n        'code': 'NC'\n      },\n      {\n        'name': 'North Dakota',\n        'code': 'ND'\n      },\n      {\n        'name': 'Ohio',\n        'code': 'OH'\n      },\n      {\n        'name': 'Oklahoma',\n        'code': 'OK'\n      },\n      {\n        'name': 'Oregon',\n        'code': 'OR'\n      },\n      {\n        'name': 'Pennsylvania',\n        'code': 'PA'\n      },\n      {\n        'name': 'Rhode Island',\n        'code': 'RI'\n      },\n      {\n        'name': 'South Carolina',\n        'code': 'SC'\n      },\n      {\n        'name': 'South Dakota',\n        'code': 'SD'\n      },\n      {\n        'name': 'Tennessee',\n        'code': 'TN'\n      },\n      {\n        'name': 'Texas',\n        'code': 'TX'\n      },\n      {\n        'name': 'Utah',\n        'code': 'UT'\n      },\n      {\n        'name': 'Vermont',\n        'code': 'VT'\n      },\n      {\n        'name': 'Virginia',\n        'code': 'VA'\n      },\n      {\n        'name': 'Washington',\n        'code': 'WA'\n      },\n      {\n        'name': 'West Virginia',\n        'code': 'WV'\n      },\n      {\n        'name': 'Wisconsin',\n        'code': 'WI'\n      },\n      {\n        'name': 'Wyoming',\n        'code': 'WY'\n      }\n    ]\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_ANALYTICS', {\n    VIRTUAL_PAGE_TRACKING: true,\n    SERVICES: {\n      PIWIK: 'avPiwikAnalytics',\n      SPLUNK: 'avSplunkAnalytics'\n    },\n    EVENTS: {\n      PAGE: '$locationChangeSuccess',\n      DEFAULT: 'click'\n    },\n    PRE_FIX: /^avAnalytics(.*)$/,\n    // should ignore these since they are part of the directives API\n    IGNORE: ['avAnalyticsOn', 'avAnalyticsIf'],\n    ENV: { // not sure if this should live here\n      PROD: {\n        URL: 'https://piwik.availity.com/piwik/'\n      },\n      QA: {\n        URL: 'https://qa-piwik.availity.com/piwik/'\n      }\n    }\n  });\n\n  availity.core.provider('avAnalytics', function(AV_ANALYTICS) {\n\n    var plugins = [];\n    var virtualPageTracking = AV_ANALYTICS.VIRTUAL_PAGE_TRACKING;\n    var appId;\n\n    this.registerPlugins = function(_plugins) {\n\n      if(angular.isString(_plugins)) {\n        _plugins = [_plugins];\n      }\n\n      if(_.isArray(_plugins)) {\n        plugins = _plugins;\n      } else {\n        throw new Error('AvAnalytics.registerPlugins() expects a string or an array.');\n      }\n\n      return plugins;\n    };\n\n    this.setVirtualPageTracking = function(value) {\n      if(arguments.length) {\n        virtualPageTracking = !!value;\n      }\n      return virtualPageTracking;\n    };\n\n    this.setAppID = function(id) {\n      appId = id;\n      return appId;\n    };\n\n    this.$get = function($injector, $q, $log) {\n\n      var AvAnalytics = function() {\n\n        var self = this;\n        this.services = {};\n\n        if(!plugins || plugins.length === 0) {\n          plugins = [AV_ANALYTICS.SERVICES.SPLUNK];\n        }\n\n        angular.forEach(plugins, function(plugin) {\n\n          try {\n            self.services[plugin] = $injector.get(plugin);\n          } catch(err) {\n            $log.error('Could not load `{0}` plugin', [plugin]);\n          }\n        });\n\n      };\n\n      var proto = AvAnalytics.prototype;\n\n      proto.trackEvent = function(properties) {\n\n        var promises = [];\n\n        angular.forEach(this.services, function(handler) {\n          var promise = handler.trackEvent(properties);\n          promises.push(promise);\n        });\n\n        return $q.all(promises);\n      };\n\n      proto.getAppId = function() {\n        return appId;\n      };\n\n      proto.trackPageView = function(url) {\n\n        var promises = [];\n\n        angular.forEach(this.services, function(handler) {\n          var promise = handler.trackPageView(url);\n          promises.push(promise);\n        });\n\n        return $q.all(promises);\n      };\n\n      return new AvAnalytics();\n    };\n\n  });\n\n  availity.core.run(function($rootScope, AV_ANALYTICS, avAnalytics, $location ) {\n    if(avAnalytics.virtualPageTracking) {\n      $rootScope.$on(AV_ANALYTICS.EVENTS.PAGE, function() {\n        avAnalytics.trackPageView($location.absUrl());\n      });\n    }\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avAnalyticsUtils', function(AV_ANALYTICS, $log) {\n\n    var AnalyticsUtils = function() {};\n\n    var proto = AnalyticsUtils.prototype;\n\n    proto.getProperties = function(attributes) {\n\n      var self = this;\n      var props = {};\n\n      _.forEach(attributes, function(value, key) {\n        if(self.isValidAttribute(key) && self.isNotIgnored(key)) {\n          var result = self.getAttribute(key, value);\n          props[result.key] = result.value;\n        }\n      });\n\n      return props;\n    };\n\n    proto.isExternalLink = function(attrs) {\n      return attrs.href && !attrs.ngClick;\n    };\n\n    proto.isNotIgnored = function(key) {\n      var ignored = _.includes(AV_ANALYTICS.IGNORE, key);\n      return !ignored;\n    };\n\n    proto.isValidAttribute = function(key) {\n      return AV_ANALYTICS.PRE_FIX.test(key);\n    };\n\n    proto.lowercase = function(str) {\n      return str.substr(0, 1).toLowerCase() + str.substr(1);\n    };\n\n    proto.getAttribute = function(key, value) {\n      var simpleKey = key.match(AV_ANALYTICS.PRE_FIX);\n\n      if(simpleKey && simpleKey[1]) {\n        return {\n          key: this.lowercase(simpleKey[1]),\n          value: value\n        };\n      }\n    };\n\n    proto.toNum = function(value) {\n      var parsed = parseInt(value, 10);\n      value = isNaN(parsed) ? 0 : parsed;\n      return value;\n    };\n\n    proto.isValid = function(trackingValues) {\n      var valid = true;\n\n      if(trackingValues.value || trackingValues.value === 0) {\n        delete trackingValues.value;\n      }\n\n      _.forEach(trackingValues, function(key, value) {\n        if(availity.isBlank(value) || _.isUndefined(value)) {\n          $log.warn('The analytic tracking value for ' + key.toUpperCase() +' is not defined.');\n          valid = false;\n        }\n      });\n\n      return valid;\n    };\n\n    return new AnalyticsUtils();\n  });\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.factory('avSplunkAnalytics', function($log, avLogMessagesResource, $location) {\n\n    var SplunkAnalyticsService = function() {};\n\n    var proto = SplunkAnalyticsService.prototype;\n\n    proto.trackEvent = function(properties) {\n      properties.url = $location.$$absUrl || 'N/A';\n      properties.level = properties.level || 'info';\n\n      return avLogMessagesResource[properties.level](properties);\n    };\n\n    proto.trackPageView  = function(url) {\n\n      var properties = {\n        event: 'page',\n        level: 'info',\n        url: url || $location.$$absUrl()\n      };\n\n      return avLogMessagesResource[properties.level](properties);\n    };\n\n    return new SplunkAnalyticsService();\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.provider('avPiwikAnalytics', function() {\n\n    var that = this;\n    var siteId;\n\n    // can not push these items to `_paq` because it is defined\n    // after page has loaded\n    this._setCustomVariable = function(index, valueName, value, scope) {\n\n      root._paq = root._paq || [];\n\n      if(!index || isNaN(index)) {\n        throw new Error('index must be a number');\n      } else if(!valueName) {\n        throw new Error('valueName must be declared');\n      } else {\n        root._paq.push(['setCustomVariable', index, valueName, value, scope]);\n      }\n    };\n\n    this.setSiteID = function(_siteID) {\n      siteId = _siteID;\n    };\n\n    // allow the user to pass a array of visit variables\n    this.setVisitVariables = function(items) {\n      _.forEach(items, function(item) {\n        that._setCustomVariable(item[0], item[1], item[2], 'visit');\n      });\n    };\n\n    this.setPageVariables = function(index, name, value) {\n      this._setCustomVariable(index, name, value, 'page');\n    };\n\n    this.$get = function(avAnalyticsUtils, avUsersResource, AV_ANALYTICS, $injector, $log, $q, $document, $location, $window) {\n\n      var AvPiwikAnalytics = function() {\n        this.init();\n      };\n\n      var proto = AvPiwikAnalytics.prototype;\n\n      proto.trackEvent = function(properties) {\n\n        if(!root._paq) {\n          $log.warn('Piwik object `_paq` not found in global scope');\n          return $q.when(false);\n        }\n\n        // http://piwik.org/docs/event-tracking/\n        //\n        // PAQ requires that eventValue be an integer.\n        // Check to make sure value is a number if not convert it to 0.\n        //\n        if(properties.value) {\n          properties.value = avAnalyticsUtils.toNum(properties.event);\n        }\n\n        // check to make sure that data being sent to piwik is a string and not null, empty or undefined\n        if(!avAnalyticsUtils.isValid(properties)) {\n          $log.warn('Invalid properties being passed. Tracking info will not be sent.');\n          return $q.when(false);\n        }\n\n        return $q.when(root._paq.push(['trackEvent', properties.category, properties.event, properties.label, properties.value]));\n      };\n\n      proto.trackPageView  = function(url) {\n\n        if(!root._paq) {\n          $log.warn('Piwik object `_paq` not found in global scope');\n          return $q.when(false);\n        }\n\n        return $q.when(root._paq.push(['trackEvent', url]));\n\n      };\n\n      proto.createScript = function() {\n        if(_.isFinite(siteId)) {\n          $log.warn('Invalid Piwik Site Id.  Piwik analytics has been disabled.');\n          return;\n        }\n\n        var url;\n\n        if($location.$$host === 'apps.availity.com') {\n          url = AV_ANALYTICS.ENV.PROD.URL;\n        } else {\n          url = AV_ANALYTICS.ENV.QA.URL;\n        }\n\n        $window._paq = $window._paq || [];\n        $window._paq.push(['enableLinkTracking']);\n        $window._paq.push(['setTrackerUrl', url + 'piwik.php']);\n        $window._paq.push(['setSiteId', siteId]);\n        $window._paq.push(['trackEvent', url]); //track initial page load even if user data is not loaded yet\n\n        var script = document.createElement('script');\n        var target = document.getElementsByTagName('script')[0];\n        script.type = 'text/javascript';\n        script.defer = true;\n        script.async = true;\n        script.src = url + 'piwik.js';\n        target.parentNode.insertBefore(script, target);\n      };\n\n      proto.init = function() {\n        // this.createScript();\n        // avUsersResource.me().then(function(user) {\n        //   $window._paq.push(['setUserId', user.id]);\n        //   self.trackPageView(); //send another page track when the user data loads\n        // });\n\n      };\n\n      return new AvPiwikAnalytics();\n    };\n\n  });\n\n})(window);\n","/* global TraceKit */\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.core.constant('AV_EXCEPTIONS', {\n    MESSAGES: {\n      NOT_APPLICABLE: 'N/A'\n    },\n    TYPES: {\n      EXCEPTION: 'exception'\n    }\n  });\n\n  availity.core.provider('avExceptionAnalytics', function() {\n\n    var _enabled = true;\n    var appId;\n\n    this.enabled = function(enabled) {\n      _enabled = !!enabled;\n    };\n\n    this.setAppId = function(_id) {\n      appId = _id;\n    };\n\n    this.$get = function(avLogMessagesResource, $location, AV_EXCEPTIONS) {\n\n      var AvExceptionAnalytics = function() {\n\n      };\n\n      var proto = AvExceptionAnalytics.prototype;\n\n      proto.init = function() {\n\n        var self = this;\n\n        if(!_enabled) {\n          return;\n        }\n\n        TraceKit.remoteFetching = false;\n        TraceKit.surroundingLinesToCollect = 11;\n\n        // subscribe() hooks into window.error\n        TraceKit.report.subscribe(function(stacktrace) {\n          self.onError(stacktrace);\n        });\n\n      };\n\n      proto.prettyPrint = function(stacktrace) {\n\n        var message = '';\n\n        var length = stacktrace.stack.length;\n\n        for(var i = 0; i < length; i++) {\n          message += [\n            '[' + _.padLeft(i + '', 2, '0') + '] ',\n            stacktrace.stack[i].func,\n            ' ',\n            stacktrace.stack[i].url,\n            ':',\n            stacktrace.stack[i].line,\n            ':',\n            stacktrace.stack[i].column,\n            i + 1 < length ? '\\n' : ''\n          ].join('');\n\n        }\n\n        return message;\n      };\n\n      proto.onError = function(stacktrace) {\n\n        var userAgent = root.navigator && root.navigator.userAgent ? root.navigator.userAgent : AV_EXCEPTIONS.MESSAGES.NOT_APPLICABLE;\n\n        var message = {\n          errorDate: moment(new Date()).format('YYYY-MM-DDTHH:mm:ssZZ'),\n          errorName: stacktrace.name,\n          errorMessage: stacktrace.message,\n          errorStack: this.prettyPrint(stacktrace),\n          url: $location.$$absUrl,\n          appId: appId || AV_EXCEPTIONS.MESSAGES.NOT_APPLICABLE,\n          // appVersion: AV_EXCEPTIONS.MESSAGES.NOT_APPLICABLE,\n          userAgent: userAgent,\n          userLanguage: navigator.userLanguage,\n          referrer: document.referrer,\n          host: document.domain,\n          screenWidth: $(window).width(),\n          screenHeight: $(window).height(),\n          sdkVersion: availity.VERSION\n        };\n\n        return this.log(message);\n\n      };\n\n      proto.log = function(message) {\n        return avLogMessagesResource['error'](message);\n      };\n\n      proto.trackEvent = function(exception) {\n\n        if(!_enabled) {\n          return;\n        }\n\n        var stacktrace = TraceKit.computeStackTrace(exception);\n\n        return this.onError(stacktrace);\n\n      };\n\n      return new AvExceptionAnalytics();\n\n    };\n  });\n\n  availity.core.config(function($provide) {\n\n    $provide.decorator('$exceptionHandler', function($delegate, $injector) {\n      return function(exception, cause) {\n        $delegate(exception, cause);\n        var errorTacking = $injector.get('avExceptionAnalytics');\n        errorTacking.trackEvent(exception);\n      };\n    });\n\n  });\n\n  availity.core.run(function(avExceptionAnalytics) {\n    avExceptionAnalytics.init();\n  });\n\n})(window);\n","// Issue: https://github.com/angular/angular.js/issues/11165\n// Polyfill: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\n//\n// This polyfill is needed because Angular calls toISOString()\n// when an request parameter is of type Date.  If this polyfill isn't present\n// the ajax call fails.\n//\n(function() {\n\n  'use strict';\n\n  var pad = function(number) {\n    if(number < 10) {\n      return '0' + number;\n    }\n    return number;\n  };\n\n  if(!Date.prototype.toISOString) {\n\n    Date.prototype.toISOString = function() {\n\n      return this.getUTCFullYear() +\n        '-' + pad(this.getUTCMonth() + 1) +\n        '-' + pad(this.getUTCDate()) +\n        'T' + pad(this.getUTCHours()) +\n        ':' + pad(this.getUTCMinutes()) +\n        ':' + pad(this.getUTCSeconds()) +\n        '.' + (this.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) +\n        'Z';\n    };\n  }\n\n})(window);\n"],"sourceRoot":"/source/"}