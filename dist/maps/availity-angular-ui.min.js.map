{"version":3,"sources":["/source/index.js","/source/template.js","/source/modal.js","/source/navbar.js","/source/form.js","/source/field.js","/source/messages.js","/source/adapter-bootstrap.js","/source/adapter.js","/source/dropdown.js","/source/datepicker.js","/source/idle-notifier.js","availity-angular-ui.js"],"names":["root","availity","MODULE_UI","ui","angular","module","constant","NG_OPTIONS","exports","window","factory","$q","$templateCache","$http","get","options","valid","template","templateUrl","Error","when","cache","then","result","data","OPTIONS","scope","id","container","keyboard","backdrop","show","remote","EVENTS","SHOW","SHOWN","HIDE","HIDDEN","BS_EVENTS","TEMPLATES","MODAL","ModalFactory","$rootScope","$timeout","$compile","AV_MODAL","avTemplateCache","Modal","self","this","extend","$new","create","proto","prototype","$element","element","createId","init","appendTo","modalShow","modalToggle","toggle","modalHide","hide","modal","listeners","on","event","$emit","isFunction","onShown","onHidden","call","destroy","$on","remove","attr","uuid","directive","restrict","replace","transclude","NAVBAR","AV_NAVBAR","avSession","controller","$scope","getUser","user","currentUser","ngForm","rulesKey","violations","form","record","count","violocationCount","_","reduce","sum","num","$setValidity","unrecord","$setSubmitted","$submitted","setRulesKey","key","$log","$parse","AV_VAL","avValAdapter","priority","require","compile","pre","iEl","iAttrs","controllers","ruleFn","avValForm","error","$watch","_rulesKey","_oldRulesKey","avForm","info","$broadcast","REVALIDATE","post","fn","ngSubmit","off","ngClick","bind","SUBMITTED","$invalid","FAILED","preventDefault","stopImmediatePropagation","scroll","$setPristine","callback","$event","$apply","avVal","ngModel","rule","avId","setNgModel","setRule","updateModel","results","validationKeys","avResults","forEach","contraintName","push","isValid","avViolations","length","$error","value","indexOf","lastIndexOf","updateView","$dirty","message","validate","debounce","avValDebounce","unbind","cancel","$setViewValue","val","avValOn","link","attrs","parseInt","DEBOUNCE","isNumber","avValField","debounceAllowed","is","type","$modelValue","$parsers","$formatters","unshift","messages","CLASSES","SUCCESS","WARNING","ERROR","FEEDBACK","HELP","CONTROLLER","AV_BOOTSTRAP_ADAPTER","el","$valid","parentNode","removeClass","addClass","selector","join","messageTarget","$","siblings","$el","avValModel","navbarSelector","offset","each","outerHeight","$target","find","animate","scrollTop","top","DEFAULT","provider","that","setAdapter","adapter","$get","AV_VAL_ADAPTER","$injector","Adapter","adapterName","$attrs","AV_UI","AV_DROPDOWN","match","contains","$eval","multiple","isDefined","closeOnResize","getSelected","model","items","collection","index","findIndex","item","equals","setValue","viewValue","$viewValue","selected","select2","setValues","isArray","ngOptions","displayFn","valueName","valueFn","keyName","$watchCollection","newVal","oldVal","$window","avDropdown","parent","prev","toggleClass","$pristine","e","parents","classNames","className","split","i","_$render","$render","win","$observe","ADD_ON_SELECTOR","DEFUALTS","FORMAT","CLOSE","TODAY","AV_DATEPICKER","plugin","setDate","findModel","$input","andSelf","modelToView","datepicker","DPGlobal","formatDate","format","viewToModel","parseFormat","utcDate","parseDate","_utc_to_local","autoclose","todayHighlight","avDatepicker","target","prop","focus","BASE","SESSION","sessionTemplate","warningTemplate","setSessionTemplate","setWarningTemplate","AV_IDLE","AV_UI_IDLE","AvModal","$document","AvIdleNotifier","idle","initListeners","listener","ACTIVE","showWarning","INACTIVE","hideWarning","SESSION_TIMEOUT_ACTIVE","showSession","destroyListeners","disableBackDrop","onSessionInactive","SESSION_TIMEOUT_INACTIVE","run","avIdleNotifier"],"mappings":"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","file":"availity-angular-ui.min.js","sourcesContent":["/*global module*/\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity || {};\n\n  availity.MODULE_UI = 'availity.ui';\n  availity.ui = angular.module(availity.MODULE_UI, ['ng', 'ngSanitize']);\n\n  availity.ui.constant('AV_UI', {\n    NG_OPTIONS: /^\\s*([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?(?:\\s+group\\s+by\\s+([\\s\\S]+?))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+([\\s\\S]+?)(?:\\s+track\\s+by\\s+([\\s\\S]+?))?$/\n  });\n\n  if(typeof module !== 'undefined' && module.exports) {\n    module.exports = availity;\n  }\n\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.factory('avTemplateCache', function($q, $templateCache, $http) {\n    return {\n\n      get: function(options) {\n\n        var valid = !options.template || !options.templateUrl;\n\n        if(!valid) {\n          throw new Error(\"Either options.template or options.templateUrl must be defined\");\n        }\n\n        return options.template ? $q.when($templateCache.get(options.template)) :\n          $http.get(options.templateUrl, {cache: $templateCache})\n            .then(function(result) {\n              return result.data;\n            });\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_MODAL', {\n\n    OPTIONS: {\n      scope: null,\n      templateUrl: null,\n      template: null,\n      id: null,\n      container: null,\n\n      // Bootstrap defaults\n      keyboard: true,\n      backdrop: true,\n      show: false,\n      remote: false\n    },\n\n    EVENTS: {\n      SHOW: 'show.av.modal',\n      SHOWN: 'shown.av.modal',\n      HIDE: 'hide.av.modal',\n      HIDDEN: 'hidden.av.modal'\n    },\n\n    BS_EVENTS:  {\n      SHOW: 'show.bs.modal',\n      SHOWN: 'shown.bs.modal',\n      HIDE: 'hide.bs.modal',\n      HIDDEN: 'hidden.bs.modal'\n    },\n\n    TEMPLATES: {\n      MODAL: 'ui/modal/modal-tpl.html'\n    }\n  });\n\n  var ModalFactory = function($rootScope, $timeout, $compile, AV_MODAL, avTemplateCache) {\n\n    var Modal = function(options) {\n\n      var self = this;\n\n      this.options = angular.extend({}, AV_MODAL.OPTIONS, {scope: $rootScope.$new()}, options);\n\n      avTemplateCache.get(options).then(function(template){\n        self.options.template = template;\n        self.create();\n      });\n\n    };\n\n    var proto = Modal.prototype;\n\n    proto.create = function() {\n\n      var self = this;\n\n      var scope = this.options.scope;\n      this.$element = angular.element(this.options.template);\n\n      this.createId();\n      this.scope();\n\n      $compile(this.$element)(scope);\n      $timeout(function() {\n        self.init();\n      }, 0, true);\n\n      // Append to container or <body>\n      this.options.container ? this.$element.appendTo(this.options.container) : this.$element.appendTo('body');\n\n    };\n\n    proto.scope = function() {\n\n      var self = this;\n      var scope = this.options.scope;\n\n      scope.modalShow = function() {\n        self.show();\n      };\n\n      scope.modalToggle = function() {\n        self.toggle();\n      };\n\n      scope.modalHide = function() {\n        self.hide();\n      };\n\n    };\n\n    proto.init = function() {\n\n      // Initialize Bootstrap jQuery plugin\n      this.$element.modal({\n        'backdrop': this.options.backdrop,\n        'keyboard': this.options.keyboard,\n        'show': this.options.show,\n        'remote': this.options.remote\n      });\n\n      this.listeners();\n    };\n\n    proto.listeners = function() {\n\n      var self = this;\n      var scope = this.options.scope;\n      var $element = this.$element;\n\n      $element.on(AV_MODAL.BS_EVENTS.SHOW, function(event) {\n        scope.$emit(AV_MODAL.EVENTS.SHOW, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.SHOWN, function(event) {\n\n        if(angular.isFunction(self.options.onShown)) {\n          self.options.onShown();\n        }\n\n        scope.$emit(AV_MODAL.EVENTS.SHOWN, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.HIDE, function(event) {\n        scope.$emit(AV_MODAL.EVENTS.HIDE, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.HIDDEN, function(event) {\n\n        if(angular.isFunction(self.options.onHidden)) {\n          self.options.onHidden.call(this);\n        }\n\n        scope.$emit(AV_MODAL.EVENTS.HIDDEN, event, self);\n\n        $timeout(function() {\n          self.destroy();\n        }, 0, true);\n\n      });\n\n      // Garbage collection\n      scope.$on('$destroy', function() {\n        self.destroy();\n      });\n    };\n\n    proto.show = function() {\n      this.$element.modal('show');\n    };\n\n    proto.hide = function() {\n      this.$element.modal('hide');\n    };\n\n    proto.toggle = function() {\n      this.$element.data('modal').toggle();\n    };\n\n    proto.destroy =function() {\n      this.$element.remove();\n    };\n\n    proto.createId = function() {\n      // Create a unique id for the modal if not present or passed in via options\n      var id = this.$element.attr('id');\n      if(!id) {\n        // Get id from options or create a unique id\n        id = this.options.id ? this.options.id : availity.uuid('av-modal-id');\n        this.$element.attr('id', id);\n      }\n    };\n\n    return Modal;\n  };\n\n\n  availity.ui.factory('AvModal', ModalFactory);\n\n  availity.ui.directive('avModal', function(AV_MODAL) {\n    return {\n      restrict: 'A',\n      replace: true,\n      transclude: true,\n      scope: {},\n      templateUrl: AV_MODAL.TEMPLATES.MODAL\n    };\n  });\n\n})(window);\n","\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_NAVBAR', {\n\n    OPTIONS: {},\n\n    TEMPLATES: {\n      NAVBAR: 'ui/navbar/navbar-tpl.html'\n    }\n  });\n\n  availity.ui.directive('avNavbar', function(AV_NAVBAR, avSession) {\n    return {\n      restrict: 'A',\n      replace: true,\n      scope: {},\n      templateUrl: AV_NAVBAR.TEMPLATES.NAVBAR,\n      controller: function($scope) {\n        avSession.getUser().then(function(user) {\n          $scope.currentUser = user;\n        });\n      }\n    };\n  });\n\n})(window);\n","/**\n * 1. All fields should be pristine on first load\n * 2. If field is modified an invalid the field should be marked with an error\n *\n */\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('avValFormController', function() {\n\n    this.ngForm  = null;\n    this.rulesKey = null;\n\n    // Object that stores the unique id (key) and violation count (value) of all the form fields\n    //\n    // EX:\n    //\n    // {\n    //  avVal001: 0\n    //  avVal002: 2\n    //  avVal003: 1\n    // }\n    this.violations = {};\n\n    this.init = function(form) {\n      this.ngForm = form;\n    };\n\n    /**\n     * Records id of the form field and number of violations\n     * @param  {[type]} id    [description]\n     * @param  {[type]} count [description]\n     * @return {[type]}       [description]\n     */\n    this.record = function(id, count) {\n      this.violations[id] = count;\n\n      var violocationCount = _.reduce(this.violations, function(sum, num) {\n        return sum + num;\n      }, 0);\n\n      this.ngForm.$setValidity('av', violocationCount === 0);\n    };\n\n    this.unrecord = function(id) {\n      if(id && this.violations[id]) {\n        delete this.violations[id];\n      }\n    };\n\n    this.$setSubmitted = function() {\n      //$animate.addClass(element, SUBMITTED_CLASS);\n      this.ngForm.$submitted = true;\n      // parentForm.$setSubmitted();\n    };\n\n    this.setRulesKey = function(key) {\n      this.rulesKey = key;\n    };\n\n  });\n\n  // form.$error = {};\n  // form.$$success = {};\n  // form.$pending = undefined;\n  // form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);\n  // form.$dirty = false;\n  // form.$pristine = true;\n  // form.$valid = true;\n  // form.$invalid = false;\n  // form.$submitted = false;\n\n  availity.ui.directive('avValForm', function($log, $timeout, $parse, AV_VAL, avValAdapter, $rootScope) {\n    return {\n      restrict: 'A',\n      priority: 10,\n      require: ['form', 'avValForm', '?ngSubmit'],\n      controller: 'avValFormController',\n      compile: function() {\n        return {\n          pre: function(scope, iEl, iAttrs, controllers) {\n\n            var ruleFn = $parse(iAttrs.avValForm);\n            var rulesKey = ruleFn(scope);\n            rulesKey = rulesKey || iAttrs.avValForm; // interpolated rule from scope || fixed string\n\n            if(!rulesKey) {\n              $log.error('avValForm requires a rules key in order to run the proper validation rules.');\n              return;\n            }\n\n            scope.$watch(ruleFn, function(_rulesKey, _oldRulesKey){\n              if(_rulesKey) {\n                avForm.setRulesKey(_rulesKey);\n\n                if(_rulesKey !== _oldRulesKey) {\n                  $timeout(function() {\n                    $log.info('avValForm revalidate');\n                    $rootScope.$broadcast(AV_VAL.EVENTS.REVALIDATE);\n                  });\n                }\n\n              }\n\n            });\n\n            var ngForm = controllers[0];\n            var avForm = controllers[1];\n            avForm.init(ngForm);\n            avForm.setRulesKey(rulesKey);\n\n\n          },\n          post: function(scope, iEl, iAttrs, controllers) {\n\n            iEl.attr('novalidate', 'novalidate');  // prevent HTML5 validation from kicking in\n\n            // Disable ng-submit or ng-click handlers and store the function to call for submitting\n            var fn;\n            if(iAttrs.ngSubmit) {\n              // Disable ng-submit event\n              iEl.off('submit');\n              fn = $parse(iAttrs.ngSubmit, /* expensiveChecks */ true);\n            }else if(iAttrs.ngClick) {\n              // Disable ng-click event\n              iEl.off('click');\n              fn = $parse(iAttrs.ngClick, /* expensiveChecks */ true);\n            }\n\n            var ngForm = controllers[0];\n            var avForm = controllers[1];\n            iEl.bind('submit', function(event) {\n\n              scope.$broadcast(AV_VAL.EVENTS.SUBMITTED);\n              avForm.$setSubmitted();\n\n              if(ngForm.$invalid) {\n\n                scope.$broadcast(AV_VAL.EVENTS.FAILED);\n\n                $log.info('avValForm invalid.  preventing default submit action');\n\n                event.preventDefault();\n                event.stopImmediatePropagation();\n                scope.$broadcast(event);\n\n                avValAdapter.scroll(iEl);\n                return;\n              }\n\n              ngForm.$setPristine();\n\n              if(!fn) {\n                return;\n              }\n\n              var callback = function() {\n                fn(scope, {$event:event});\n              };\n\n              scope.$apply(callback);\n\n            });\n\n          }\n        };\n      }\n    };\n  });\n\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('AvValFieldController', function($element, avValAdapter, avVal, $log, $timeout, $scope) {\n\n    this.ngModel = null;\n    this.rule = null;\n    this.avValForm = null;\n\n    var self = this;\n\n    this.createId = function() {\n      this.ngModel.avId = availity.uuid('avVal');\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.setRule = function(rule) {\n      this.rule = rule;\n    };\n\n    this.avValForm = function(avValForm) {\n      this.avValForm = avValForm;\n    };\n\n    this.updateModel = function(results) {\n      var self = this;\n      var validationKeys = [];\n\n      this.ngModel.avResults = results;\n\n      // set state for each violation\n      angular.forEach(results.violations, function (result) {\n        var key = 'av-' + result.contraintName;\n        validationKeys.push(key);\n        self.ngModel.$setValidity(key, result.valid);\n      });\n\n      // set overall state for validation state\n      this.ngModel.$setValidity('av', this.ngModel.avResults.isValid);\n\n      // store violations\n      this.ngModel.avViolations = this.ngModel.avResults.violations;\n\n      // record the id and violation count in the av-form controller.  this determines if the form is\n      // valid if sum of violations for all form inputs === zero\n      this.avValForm.record(this.ngModel.avId, this.ngModel.avResults.violations.length);\n\n      // remove violation keys that are no longer falsy\n      angular.forEach(this.ngModel.$error, function(value, key) {\n\n        if(_.indexOf(validationKeys, key) === -1 && key.lastIndexOf('av-', 0) === 0) {\n          self.ngModel.$setValidity(key, true);\n        }\n      });\n    };\n\n    this.updateView = function() {\n      if(this.ngModel.$dirty) {\n        avValAdapter.element($element, this.ngModel, this.ngModel.avResults.isValid);\n        avValAdapter.message($element, this.ngModel);\n      }\n    };\n\n    this.validate = function(value) {\n\n      $log.info('validating value [' + value + ']');\n\n      var rulesKey = self.avValForm.rulesKey;\n      var results = avVal.validate(rulesKey, $element, value, self.rule);\n\n      // validate function is called within the context of angular so fn.call\n      self.updateModel.call(self, results);\n      self.updateView.call(self);\n\n      return value;\n    };\n\n    this.debounce = function(avValDebounce) {\n      var self = this;\n\n      $element.unbind('input');\n\n      var debounce;\n      $element.bind('input', function() {\n        $timeout.cancel(debounce);\n        debounce = $timeout( function() {\n          $scope.$apply(function() {\n            self.ngModel.$setViewValue($element.val());\n          });\n        }, avValDebounce);\n      });\n    };\n\n  });\n\n  availity.ui.directive('avValField', function($log, $timeout, avVal, avValAdapter, AV_VAL) {\n    return {\n      restrict: 'A',\n      controller: 'AvValFieldController',\n      require: ['^avValForm', '?ngModel', 'avValField'],\n      scope: {\n        avValDebounce: '@?',\n        avValOn: '@?'\n      },\n      link: function(scope, element, attrs, controllers) {\n\n        var avValDebounce = parseInt(scope.avValDebounce || AV_VAL.DEBOUNCE, 10);\n        avValDebounce = _.isNumber(avValDebounce) ? avValDebounce : AV_VAL.DEBOUNCE;\n\n        var avValOn = scope.avValOn || null;\n\n        var rule = attrs.avValField; // not always string?\n        var avValForm = controllers[0];\n        var ngModel = controllers[1];\n        var avValField = controllers[2];\n\n        if(!ngModel && !rule) {\n          $log.info('avValField requires ngModel and a validation rule to run.');\n          return;\n        }\n\n        avValField.setNgModel(ngModel);\n        avValField.avValForm(avValForm);\n        avValField.setRule(rule);\n        avValField.createId();\n\n        var debounceAllowed = (element.is(\"input\") && !(attrs.type === 'radio' || attrs.type === 'checkbox'));\n\n        if(debounceAllowed) {\n          avValField.debounce(avValDebounce);\n        }\n\n        if(avValOn === 'blur') {\n          element.on('blur', function () {\n            ngModel.$setViewValue(ngModel.$modelValue);\n          });\n        }\n\n        // (view to model)\n        ngModel.$parsers.push(avValField.validate);\n\n        // (model to view) - potentially allow other formatter to run first\n        ngModel.$formatters.unshift(avValField.validate);\n\n        scope.$on(AV_VAL.EVENTS.REVALIDATE, function() {\n          avValField.validate(ngModel.$modelValue);\n        });\n\n        scope.$on(AV_VAL.EVENTS.SUBMITTED, function() {\n          ngModel.$dirty = true;\n          avValField.validate(ngModel.$modelValue);\n        });\n\n        scope.$on('$destroy', function () {\n          avValForm.unrecord(ngModel.avId);\n        });\n\n      }\n    };\n  });\n\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('avValContainerController', function($scope, $timeout) {\n\n    $scope.messages = {\n      message: null\n    };\n\n    this.message = function(ngModel) {\n\n      var message = null;\n      if(ngModel.avResults.violations.length && ngModel.avResults.violations[0].message) {\n        message = ngModel.avResults.violations[0].message;\n      }else {\n        message = null;\n      }\n\n      // $timeout is needed to update the UI from $broadcast events\n      $timeout(function() {\n        $scope.messages.message = message;\n      });\n\n    };\n\n  });\n\n  availity.ui.directive('avValContainer', function() {\n    return {\n      restrict: 'A',\n      controller: 'avValContainerController',\n      template: '<p class=\"help-block\" data-ng-bind-html=\"messages.message\"></p>',\n      replace: true,\n      scope: {},\n      link: function() {}\n    };\n  });\n\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BOOTSTRAP_ADAPTER', {\n    CLASSES: {\n      SUCCESS: 'has-success',\n      WARNING: 'has-warning',\n      ERROR: 'has-error',\n      FEEDBACK: 'has-feedback',\n      HELP: 'help-block',\n      NAVBAR: 'navbar-fixed-top'\n    },\n    CONTROLLER: '$avValContainerController'\n  });\n\n  availity.ui.factory('avValBootstrapAdapter', function(AV_BOOTSTRAP_ADAPTER, $timeout) {\n\n    return {\n\n      element: function(element, ngModel) {\n        var el = element[0];\n        if(ngModel.$valid) {\n          angular.element(el.parentNode).removeClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n        }else{\n          angular.element(el.parentNode).addClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n        }\n      },\n\n      message: function(element, ngModel) {\n\n        var selector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.HELP\n        ].join('');\n\n        var messageTarget = $(element).siblings(selector);\n\n        if(messageTarget.length === 0) {\n          return;\n        }\n\n        var el = messageTarget[0]; // just target first sibling\n        var $el = angular.element(el);\n        var avValModel = $el.data(AV_BOOTSTRAP_ADAPTER.CONTROLLER); // get the av val message controller\n        if(avValModel) {\n          avValModel.message(ngModel);\n        }\n      },\n\n      scroll: function(form) {\n\n        // Bootstrap fixed navbars causes bad scroll-to offsets so find them all\n        var navbarSelector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.NAVBAR\n        ].join('');\n\n        // Add up all the heights to find the true offset\n        var offset = 0;\n        $(navbarSelector).each(function() {\n          offset += $(this).outerHeight();\n        });\n\n        var selector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR,\n          ':first'\n        ].join('');\n\n        var $target = $(form).find(selector);\n        $timeout(function(){\n          // scroll to offset top of first error minus the offset of the navbars\n          $('body, html').animate({scrollTop: $target.offset().top - offset}, 'fast');\n        });\n      }\n    };\n  });\n\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_VAL_ADAPTER', {\n    DEFAULT: 'avValBootstrapAdapter'\n  });\n\n  availity.ui.provider('avValAdapter', function() {\n\n    var that = this;\n\n    this.setAdapter = function(adapter) {\n      this.adapter = adapter;\n    };\n\n    this.$get = function(AV_VAL_ADAPTER, $injector) {\n\n      var Adapter = function() {\n        var adapterName = that.adapter || AV_VAL_ADAPTER.DEFAULT;\n        this.adapter = $injector.get(adapterName);\n      };\n\n      var proto = Adapter.prototype;\n\n      proto.element = function(element, ngModel) {\n        this.adapter.element(element, ngModel);\n      };\n\n      proto.message = function(element, ngModel) {\n        this.adapter.message(element, ngModel);\n      },\n\n      proto.scroll = function(form) {\n        this.adapter.scroll(form);\n      };\n\n      return new Adapter();\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_DROPDOWN', {\n    OPTIONS: [\n      'width',\n      'minimumInputLength',\n      'maximumInputLength',\n      'minimumResultsForSearch',\n      'maximumSelectionSize',\n      'placeholderOption',\n      'separator',\n      'allowClear',\n      'multiple',\n      'closeOnSelect',\n      'openOnEnter',\n      'id', /* Function used to get the id from the choice object or a string representing the key under which the id is stored. `id(object)`*/\n      'matcher', /* Used to determine whether or not the search term matches an option when a built-in query function is used. The built in query function is used when Select2 is attached to a select, or the local or tags helpers are used. `matcher(term, text, option)`*/\n      'sortResults',\n      'formatSelection', /* Function used to render the current selection. `formatSelection(object, container)` */\n      'formatResult',\n      'formatResultCssClass',\n      'formatNoMatches', /* String containing 'No matches' message, or Function used to render the message */\n      'formatSearching', /* Function used to render a result that the user can select. `formatResult(object, container, query)` */\n      'formatAjaxError',\n      'formatInputTooShort',\n      'formatInputTooLong',\n      'formatSelectionTooBig',\n      'formatLoadMore',\n      'createSearchChoice',\n      'createSearchChoicePosition',\n      'initSelection',\n      'tokenizer',\n      'tokenSeparators',\n      'query',\n      'ajax',\n      'data',\n      'tags',\n      'containerCss',\n      'containerCssClass',\n      'dropdownCss',\n      'dropdownCssClass',\n      'dropdownAutoWidth',\n      'adaptContainerCssClass',\n      'adaptDropdownCssClass',\n      'escapeMarkup',\n      'selectOnBlur',\n      'loadMorePadding',\n      'nextSearchTerm'\n    ]\n  });\n\n\n  availity.ui.controller('AvDropdownController', function($element, $attrs, AV_UI, AV_DROPDOWN, $log, $scope, $timeout, $parse) {\n\n    var self = this;\n\n    this.options = [];\n    this.match = null;\n    this.ngModel = null;\n\n    this.init = function() {\n\n      _.forEach($attrs, function(value, key) {\n        if(_.contains(AV_DROPDOWN.OPTIONS, key.replace('data-', ''))){\n          self.options[key] = $scope.$eval(value);\n        }\n      });\n\n      self.multiple = angular.isDefined($attrs.multiple);\n\n      self.options.closeOnResize = self.options.closeOnResize  || true;\n\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.getSelected = function(model) {\n      var items = this.collection($scope);\n\n      var index = _.findIndex(items, function(item) {\n        return angular.equals(item, model);\n      });\n\n      return index;\n\n    };\n\n    this.setValue = function() {\n\n      var viewValue = self.ngModel.$viewValue;\n      var selected = null;\n\n      if(viewValue) {\n        selected = this.getSelected(viewValue);\n      }\n\n      // var apply = scope.$evalAsync || $timeout;\n      $timeout(function() {\n        $element\n          .select2('val',  (selected === null || selected === 'undefined') ? '' : selected); // null === '' for Select2\n      });\n    };\n\n    this.setValues = function() {\n      var viewValue = self.ngModel.$viewValue;\n\n      if(!angular.isArray(viewValue)) {\n        viewValue = [];\n      }\n\n      // var apply = scope.$evalAsync || $timeout;\n      $timeout(function() {\n        $element\n          .select2('val', viewValue);\n      });\n    };\n\n    this.ngOptions = function() {\n\n      this.match = $attrs.ngOptions.match(AV_UI.NG_OPTIONS);\n      if(!this.match) {\n        throw new Error(\"Invalid ngOptions for avDropdown\");\n      }\n\n      // AV_UI.NG_OPTIONS regex will parse into arrays like below:\n      //\n      // 0: \"state.name for state in states\"\n      // 1: \"state.name\"\n      // 2: undefined\n      // 3: undefined\n      // 4: \"state\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"states\"\n      // 8: undefined\n      //\n      // 0: \"state.id as state.name for state in states\"\n      // 1: \"state.id\"\n      // 2: \"state.name\"\n      // 3: undefined\n      // 4: \"state\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"states\"\n      // 8: undefined\n      //\n      // 0: \"state.name for state in states track by state.id\"\n      // 1: \"state.name\"\n      // 2: undefined\n      // 3: undefined\n      // 4: \"state\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"states\"\n      // 8: \"state.id\"\n      //\n      // 0: \"person.fullName as (person.lastName + ', ' + person.firstName) for person in feeScheduleModel.persons\"\n      // 1: \"person.fullName\"\n      // 2: \"(person.lastName + ', ' + person.firstName)\"\n      // 3: undefined\n      // 4: \"person\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"feeScheduleModel.persons\"\n      // 8: undefined\n\n      this.displayFn = $parse(this.match[2] || this.match[1]); // this is the function to retrieve the text to show as\n      this.collection = $parse(this.match[7]);\n      this.valueName = this.match[4] || this.match[6];\n      this.valueFn = $parse(this.match[2] ? this.match[1] : this.valueName);\n      this.keyName = this.match[5];\n\n      $scope.$watchCollection(this.collection, function(newVal, oldVal) {\n\n        if(angular.equals(newVal, oldVal)) {\n          return;\n        }\n\n        self.setValue();\n\n      }, true);\n    };\n\n  });\n\n  availity.ui.directive('avDropdown', function($timeout, $log, $window) {\n    return {\n      restrict: 'A',\n      require: ['ngModel', 'avDropdown'],\n      controller: 'AvDropdownController',\n      link: function(scope, element, attrs, controllers) {\n\n        var ngModel = controllers[0];\n        var avDropdown = controllers[1];\n\n        avDropdown.setNgModel(ngModel);\n        avDropdown.init();\n\n        if(attrs.ngOptions) {\n          avDropdown.ngOptions();\n        }\n\n        ngModel.$parsers.push(function(value) {\n          var parent = element.prev();\n          parent\n            .toggleClass('ng-invalid', !ngModel.$valid)\n            .toggleClass('ng-valid', ngModel.$valid)\n            .toggleClass('ng-invalid-required', !ngModel.$valid)\n            .toggleClass('ng-valid-required', ngModel.$valid)\n            .toggleClass('ng-dirty', ngModel.$dirty)\n            .toggleClass('ng-pristine', ngModel.$pristine);\n          return value;\n        });\n\n        element.on('change', function(e) {\n          $log.info(e);\n        });\n\n        // https://github.com/t0m/select2-bootstrap-css/issues/37#issuecomment-42714589\n        element.on(\"select2-open\", function () {\n\n          // look for .has-success, .has-warning, .has-error\n          // (really look for .has-* … which is good enough for the demo page, but obviously might interfere with other CSS-classes starting with \"has-\")\n          if(element.parents('[class*=\"has-\"]').length) {\n\n            // get all CSS-classes from the element where we found \"has-*\" and collect them in an array\n            var classNames = $(this).parents('[class*=\"has-\"]')[0].className.split(/\\s+/);\n\n            // go through the class names, find \"has-\"\n            for(var i = 0; i < classNames.length; ++i) {\n              if(classNames[i].match(\"has-\")) {\n                $('#select2-drop').addClass(classNames[i]);\n              }\n            }\n          }\n        });\n\n        var _$render = ngModel.$render;\n        ngModel.$render = function() {\n          _$render();\n\n          if(avDropdown.multiple) {\n            avDropdown.setValues();\n          }else {\n            avDropdown.setValue();\n          }\n\n        };\n\n        var win = angular.element($window);\n\n        win.bind('resize', function() {\n          element.select2('close');\n        });\n\n        win.bind('scroll', function() {\n          element.select2('close');\n        });\n\n        attrs.$observe('disabled', function (value) {\n          element.select2('enable', !value);\n        });\n\n        attrs.$observe('readonly', function (value) {\n          element.select2('readonly', !!value);\n        });\n\n        scope.$on('destroy', function() {\n          element.select2('destroy');\n        });\n\n        $timeout(function() {\n          element.select2(avDropdown.options);\n        });\n      }\n    };\n  });\n\n})(window);\n","/**\n * Inspiration https://github.com/mgcrea/angular-strap/blob/v0.7.8/src/directives/datepicker.js\n */\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // Options: http://bootstrap-datepicker.readthedocs.org/en/latest/options.html\n  availity.ui.constant('AV_DATEPICKER', {\n    CONTROLLER: '$ngModelController',\n    ADD_ON_SELECTOR: '[data-toggle=\"datepicker\"]',\n    OPTIONS: [\n      'autoclose',\n      'beforeShowDay',\n      'beforeShowMonth',\n      'calendarWeeks',\n      'clearBtn',\n      'toggleActive',\n      'container',\n      'daysOfWeekDisabled',\n      'datesDisabled',\n      'defaultViewDate',\n      'endDate',\n      'forceParse',\n      'format',\n      'inputs',\n      'keyboardNavigation',\n      'language',\n      'minViewMode',\n      'multidate',\n      'multidateSeparator',\n      'orientation',\n      'startDate',\n      'startView',\n      'todayBtn',\n      'todayHighlight',\n      'weekStart',\n      'showOnFocus',\n      'disableTouchKeyboard',\n      'enableOnReadonly'\n    ],\n    DEFUALTS: {\n      FORMAT: 'mm/dd/yyyy',\n      CLOSE: true,\n      TODAY: true\n    }\n  });\n\n  availity.ui.controller('AvDatepickerController', function($element, $attrs, AV_DATEPICKER, $scope) {\n\n    var self = this;\n    this.options = {};\n\n    this.setValue = function() {\n\n      var viewValue = self.ngModel.$modelValue;\n      var plugin = this.plugin();\n\n      if(!viewValue || !plugin) {\n        return;\n      }\n\n      plugin.setDate(viewValue);\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.findModel = function() {\n\n      var ngModel = null;\n\n      var $input = $element.find('input:first').andSelf();\n      if($input.length) {\n        ngModel = $input.data(AV_DATEPICKER.CONTROLLER);\n        this.setNgModel(ngModel);\n      }\n\n      return ngModel;\n    };\n\n    this.modelToView = function() {\n      return $.fn.datepicker.DPGlobal.formatDate(self.ngModel.$modelValue, self.options.format, 'en');\n    };\n\n    this.viewToModel = function() {\n\n      var format = $.fn.datepicker.DPGlobal.parseFormat(self.options.format);\n      var utcDate = $.fn.datepicker.DPGlobal.parseDate(self.ngModel.$viewValue, format, 'en');\n\n      var plugin = self.plugin();\n\n      if(!plugin) {\n        return;\n      }\n\n      return plugin._utc_to_local(utcDate);\n    };\n\n    this.init = function() {\n\n      _.forEach($attrs, function(value, key) {\n        if(_.contains(AV_DATEPICKER.OPTIONS, key.replace('data-', ''))){\n          self.options[key] = $scope.$eval(value);\n        }\n      });\n\n      self.options.autoclose = self.options.autoclose ? self.options.autoclose : AV_DATEPICKER.DEFUALTS.CLOSE;\n      self.options.todayHighlight = self.options.todayHighlight ? self.options.todayHighlight : AV_DATEPICKER.DEFUALTS.TODAY;\n      self.options.format = self.options.format ? self.options.format : AV_DATEPICKER.DEFUALTS.FORMAT;\n\n    };\n\n    this.plugin = function() {\n      return $element.data('datepicker');\n    };\n\n    this.destroy = function() {\n      var plugin = this.plugin();\n      if(plugin) {\n        plugin.remove();\n        $element.data('datepicker', null);\n      }\n\n    };\n\n    this.hide = function() {\n      var plugin = this.plugin();\n      if(plugin) {\n        plugin.hide();\n      }\n    };\n\n  });\n\n  availity.ui.directive('avDatepicker', function($timeout, $window, $log, AV_DATEPICKER) {\n    return {\n      restrict: 'A',\n      require: ['?ngModel', 'avDatepicker'],\n      controller: 'AvDatepickerController',\n      link: function(scope, element, attrs, controllers) {\n\n        var ngModel = controllers[0];\n        var avDatepicker = controllers[1];\n\n        if(!ngModel) {\n          ngModel = avDatepicker.findModel();\n          if(!ngModel) {\n            $log.error('avDatepicker requires ngModel');\n            return;\n          }\n        }\n\n\n        avDatepicker.init();\n        avDatepicker.setNgModel(ngModel);\n\n        ngModel.$parsers.push(avDatepicker.viewToModel); // (view to model)\n        ngModel.$formatters.unshift(avDatepicker.modelToView);  // (model to view)\n\n        var _$render = ngModel.$render;\n        ngModel.$render = function() {\n          _$render();\n          avDatepicker.setValue();\n        };\n\n        var win = angular.element($window);\n\n        win.bind('scroll', function() {\n          avDatepicker.hide();\n        });\n\n        var target = element.siblings(AV_DATEPICKER.ADD_ON_SELECTOR);\n        if(target.length) {\n          target.on('click.datepicker', function() {\n            if (!element.prop('disabled')) { // Hack check for IE 8\n              element.focus();\n            }\n          });\n        }\n\n        scope.$on('destroy', function() {\n           avDatepicker.destroy();\n           if(target.length) {\n             target.off('click.datepicker');\n           }\n        });\n\n        $timeout(function() {\n          element.datepicker(avDatepicker.options);\n        });\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_UI_IDLE', {\n    TEMPLATES: {\n      BASE: 'ui/idle/idle-tpl.html',\n      SESSION: 'ui/idle/idle-session-tpl.html',\n      WARNING: 'ui/idle/idle-warning-tpl.html'\n    }\n  });\n\n  availity.ui.provider('avIdleNotifier', function() {\n\n    var sessionTemplate;\n    var warningTemplate;\n    var $scope;\n\n    this.setSessionTemplate = function(template) {\n      sessionTemplate = template;\n    };\n\n    this.setWarningTemplate = function(template) {\n      warningTemplate = template;\n    };\n\n    this.$get = function(AV_IDLE, AV_UI_IDLE, $rootScope, AvModal, $document, $timeout) {\n\n      var AvIdleNotifier = function() {\n        this.listeners = [];\n        this.modal = null;\n      };\n\n      var proto = AvIdleNotifier.prototype;\n\n      proto.init = function() {\n\n        $scope = $rootScope.$new(true);\n        $scope.idle = {};\n\n        this.initListeners();\n      };\n\n      proto.initListeners = function() {\n\n        var self = this;\n        var listener = null;\n\n        // ACTIVATE\n        listener = $rootScope.$on(AV_IDLE.EVENTS.ACTIVE, function() {\n          self.showWarning();\n        });\n        this.listeners.push(listener);\n\n        // INACTIVE\n        listener = $rootScope.$on(AV_IDLE.EVENTS.INACTIVE, function() {\n          self.hideWarning();\n        });\n        this.listeners.push(listener);\n\n        // SESSION TIMEOUT\n        listener = $rootScope.$on(AV_IDLE.EVENTS.SESSION_TIMEOUT_ACTIVE, function() {\n          self.showSession();\n        });\n        this.listeners.push(listener);\n\n      };\n\n      proto.destroyListeners = function() {\n        // turn off each listener => http://stackoverflow.com/a/14898795\n        _.each(this.listeners, function(listener) {\n          listener();\n        });\n      };\n\n\n      proto.showWarning = function() {\n\n        var self = this;\n\n        if(this.modal !== null) {\n          return;\n        }\n\n        $scope = $rootScope.$new(true);\n        $scope.idle = {};\n        $scope.idle.template = AV_UI_IDLE.TEMPLATES.WARNING;\n\n        this.modal = new AvModal({\n          show: true,\n          scope: $scope,\n          backdrop: 'static',\n          template: AV_UI_IDLE.TEMPLATES.BASE\n        });\n\n        $document.on('click', function() {\n          self.hideWarning();\n          $rootScope.$broadcast(AV_IDLE.EVENTS.INACTIVE);\n        });\n\n      };\n\n      proto.hideWarning = function() {\n        this.disableBackDrop();\n\n        if(this.modal) {\n          this.modal.destroy();\n        }\n\n        this.modal = null;\n      };\n\n      proto.disableBackDrop = function() {\n        $document.off('click');\n      };\n\n      proto.showSession = function() {\n        var self = this;\n        this.disableBackDrop();\n\n        $timeout(function() {\n          $scope.idle.template = AV_UI_IDLE.TEMPLATES.SESSION;\n          $scope.idle.onSessionInactive = self.onSessionInactive;\n        }, 0, true);\n\n      };\n\n      proto.onSessionInactive = function() {\n        $rootScope.$broadcast(AV_IDLE.EVENTS.SESSION_TIMEOUT_INACTIVE);\n      };\n\n      return new AvIdleNotifier();\n\n    };\n\n  });\n\n  availity.ui.run(function(avIdleNotifier) {\n    avIdleNotifier.init();\n  });\n\n})(window);\n","/**\n * availity-angular v0.6.0 -- March-30\n * Copyright 2015 Availity, LLC \n */\n\n// Source: /lib/ui/index.js\n\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity || {};\n\n  availity.MODULE_UI = 'availity.ui';\n  availity.ui = angular.module(availity.MODULE_UI, ['ng', 'ngSanitize']);\n\n  availity.ui.constant('AV_UI', {\n    NG_OPTIONS: /^\\s*([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?(?:\\s+group\\s+by\\s+([\\s\\S]+?))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+([\\s\\S]+?)(?:\\s+track\\s+by\\s+([\\s\\S]+?))?$/\n  });\n\n  if(typeof module !== 'undefined' && module.exports) {\n    module.exports = availity;\n  }\n\n\n})(window);\n\n// Source: /lib/ui/templates/template.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.factory('avTemplateCache', function($q, $templateCache, $http) {\n    return {\n\n      get: function(options) {\n\n        var valid = !options.template || !options.templateUrl;\n\n        if(!valid) {\n          throw new Error(\"Either options.template or options.templateUrl must be defined\");\n        }\n\n        return options.template ? $q.when($templateCache.get(options.template)) :\n          $http.get(options.templateUrl, {cache: $templateCache})\n            .then(function(result) {\n              return result.data;\n            });\n      }\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/modal/modal.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_MODAL', {\n\n    OPTIONS: {\n      scope: null,\n      templateUrl: null,\n      template: null,\n      id: null,\n      container: null,\n\n      // Bootstrap defaults\n      keyboard: true,\n      backdrop: true,\n      show: false,\n      remote: false\n    },\n\n    EVENTS: {\n      SHOW: 'show.av.modal',\n      SHOWN: 'shown.av.modal',\n      HIDE: 'hide.av.modal',\n      HIDDEN: 'hidden.av.modal'\n    },\n\n    BS_EVENTS:  {\n      SHOW: 'show.bs.modal',\n      SHOWN: 'shown.bs.modal',\n      HIDE: 'hide.bs.modal',\n      HIDDEN: 'hidden.bs.modal'\n    },\n\n    TEMPLATES: {\n      MODAL: 'ui/modal/modal-tpl.html'\n    }\n  });\n\n  var ModalFactory = function($rootScope, $timeout, $compile, AV_MODAL, avTemplateCache) {\n\n    var Modal = function(options) {\n\n      var self = this;\n\n      this.options = angular.extend({}, AV_MODAL.OPTIONS, {scope: $rootScope.$new()}, options);\n\n      avTemplateCache.get(options).then(function(template){\n        self.options.template = template;\n        self.create();\n      });\n\n    };\n\n    var proto = Modal.prototype;\n\n    proto.create = function() {\n\n      var self = this;\n\n      var scope = this.options.scope;\n      this.$element = angular.element(this.options.template);\n\n      this.createId();\n      this.scope();\n\n      $compile(this.$element)(scope);\n      $timeout(function() {\n        self.init();\n      }, 0, true);\n\n      // Append to container or <body>\n      this.options.container ? this.$element.appendTo(this.options.container) : this.$element.appendTo('body');\n\n    };\n\n    proto.scope = function() {\n\n      var self = this;\n      var scope = this.options.scope;\n\n      scope.modalShow = function() {\n        self.show();\n      };\n\n      scope.modalToggle = function() {\n        self.toggle();\n      };\n\n      scope.modalHide = function() {\n        self.hide();\n      };\n\n    };\n\n    proto.init = function() {\n\n      // Initialize Bootstrap jQuery plugin\n      this.$element.modal({\n        'backdrop': this.options.backdrop,\n        'keyboard': this.options.keyboard,\n        'show': this.options.show,\n        'remote': this.options.remote\n      });\n\n      this.listeners();\n    };\n\n    proto.listeners = function() {\n\n      var self = this;\n      var scope = this.options.scope;\n      var $element = this.$element;\n\n      $element.on(AV_MODAL.BS_EVENTS.SHOW, function(event) {\n        scope.$emit(AV_MODAL.EVENTS.SHOW, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.SHOWN, function(event) {\n\n        if(angular.isFunction(self.options.onShown)) {\n          self.options.onShown();\n        }\n\n        scope.$emit(AV_MODAL.EVENTS.SHOWN, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.HIDE, function(event) {\n        scope.$emit(AV_MODAL.EVENTS.HIDE, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.HIDDEN, function(event) {\n\n        if(angular.isFunction(self.options.onHidden)) {\n          self.options.onHidden.call(this);\n        }\n\n        scope.$emit(AV_MODAL.EVENTS.HIDDEN, event, self);\n\n        $timeout(function() {\n          self.destroy();\n        }, 0, true);\n\n      });\n\n      // Garbage collection\n      scope.$on('$destroy', function() {\n        self.destroy();\n      });\n    };\n\n    proto.show = function() {\n      this.$element.modal('show');\n    };\n\n    proto.hide = function() {\n      this.$element.modal('hide');\n    };\n\n    proto.toggle = function() {\n      this.$element.data('modal').toggle();\n    };\n\n    proto.destroy =function() {\n      this.$element.remove();\n    };\n\n    proto.createId = function() {\n      // Create a unique id for the modal if not present or passed in via options\n      var id = this.$element.attr('id');\n      if(!id) {\n        // Get id from options or create a unique id\n        id = this.options.id ? this.options.id : availity.uuid('av-modal-id');\n        this.$element.attr('id', id);\n      }\n    };\n\n    return Modal;\n  };\n\n\n  availity.ui.factory('AvModal', ModalFactory);\n\n  availity.ui.directive('avModal', function(AV_MODAL) {\n    return {\n      restrict: 'A',\n      replace: true,\n      transclude: true,\n      scope: {},\n      templateUrl: AV_MODAL.TEMPLATES.MODAL\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/navbar/navbar.js\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_NAVBAR', {\n\n    OPTIONS: {},\n\n    TEMPLATES: {\n      NAVBAR: 'ui/navbar/navbar-tpl.html'\n    }\n  });\n\n  availity.ui.directive('avNavbar', function(AV_NAVBAR, avSession) {\n    return {\n      restrict: 'A',\n      replace: true,\n      scope: {},\n      templateUrl: AV_NAVBAR.TEMPLATES.NAVBAR,\n      controller: function($scope) {\n        avSession.getUser().then(function(user) {\n          $scope.currentUser = user;\n        });\n      }\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/validation/form.js\n/**\n * 1. All fields should be pristine on first load\n * 2. If field is modified an invalid the field should be marked with an error\n *\n */\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('avValFormController', function() {\n\n    this.ngForm  = null;\n    this.rulesKey = null;\n\n    // Object that stores the unique id (key) and violation count (value) of all the form fields\n    //\n    // EX:\n    //\n    // {\n    //  avVal001: 0\n    //  avVal002: 2\n    //  avVal003: 1\n    // }\n    this.violations = {};\n\n    this.init = function(form) {\n      this.ngForm = form;\n    };\n\n    /**\n     * Records id of the form field and number of violations\n     * @param  {[type]} id    [description]\n     * @param  {[type]} count [description]\n     * @return {[type]}       [description]\n     */\n    this.record = function(id, count) {\n      this.violations[id] = count;\n\n      var violocationCount = _.reduce(this.violations, function(sum, num) {\n        return sum + num;\n      }, 0);\n\n      this.ngForm.$setValidity('av', violocationCount === 0);\n    };\n\n    this.unrecord = function(id) {\n      if(id && this.violations[id]) {\n        delete this.violations[id];\n      }\n    };\n\n    this.$setSubmitted = function() {\n      //$animate.addClass(element, SUBMITTED_CLASS);\n      this.ngForm.$submitted = true;\n      // parentForm.$setSubmitted();\n    };\n\n    this.setRulesKey = function(key) {\n      this.rulesKey = key;\n    };\n\n  });\n\n  // form.$error = {};\n  // form.$$success = {};\n  // form.$pending = undefined;\n  // form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);\n  // form.$dirty = false;\n  // form.$pristine = true;\n  // form.$valid = true;\n  // form.$invalid = false;\n  // form.$submitted = false;\n\n  availity.ui.directive('avValForm', function($log, $timeout, $parse, AV_VAL, avValAdapter, $rootScope) {\n    return {\n      restrict: 'A',\n      priority: 10,\n      require: ['form', 'avValForm', '?ngSubmit'],\n      controller: 'avValFormController',\n      compile: function() {\n        return {\n          pre: function(scope, iEl, iAttrs, controllers) {\n\n            var ruleFn = $parse(iAttrs.avValForm);\n            var rulesKey = ruleFn(scope);\n            rulesKey = rulesKey || iAttrs.avValForm; // interpolated rule from scope || fixed string\n\n            if(!rulesKey) {\n              $log.error('avValForm requires a rules key in order to run the proper validation rules.');\n              return;\n            }\n\n            scope.$watch(ruleFn, function(_rulesKey, _oldRulesKey){\n              if(_rulesKey) {\n                avForm.setRulesKey(_rulesKey);\n\n                if(_rulesKey !== _oldRulesKey) {\n                  $timeout(function() {\n                    $log.info('avValForm revalidate');\n                    $rootScope.$broadcast(AV_VAL.EVENTS.REVALIDATE);\n                  });\n                }\n\n              }\n\n            });\n\n            var ngForm = controllers[0];\n            var avForm = controllers[1];\n            avForm.init(ngForm);\n            avForm.setRulesKey(rulesKey);\n\n\n          },\n          post: function(scope, iEl, iAttrs, controllers) {\n\n            iEl.attr('novalidate', 'novalidate');  // prevent HTML5 validation from kicking in\n\n            // Disable ng-submit or ng-click handlers and store the function to call for submitting\n            var fn;\n            if(iAttrs.ngSubmit) {\n              // Disable ng-submit event\n              iEl.off('submit');\n              fn = $parse(iAttrs.ngSubmit, /* expensiveChecks */ true);\n            }else if(iAttrs.ngClick) {\n              // Disable ng-click event\n              iEl.off('click');\n              fn = $parse(iAttrs.ngClick, /* expensiveChecks */ true);\n            }\n\n            var ngForm = controllers[0];\n            var avForm = controllers[1];\n            iEl.bind('submit', function(event) {\n\n              scope.$broadcast(AV_VAL.EVENTS.SUBMITTED);\n              avForm.$setSubmitted();\n\n              if(ngForm.$invalid) {\n\n                scope.$broadcast(AV_VAL.EVENTS.FAILED);\n\n                $log.info('avValForm invalid.  preventing default submit action');\n\n                event.preventDefault();\n                event.stopImmediatePropagation();\n                scope.$broadcast(event);\n\n                avValAdapter.scroll(iEl);\n                return;\n              }\n\n              ngForm.$setPristine();\n\n              if(!fn) {\n                return;\n              }\n\n              var callback = function() {\n                fn(scope, {$event:event});\n              };\n\n              scope.$apply(callback);\n\n            });\n\n          }\n        };\n      }\n    };\n  });\n\n\n})(window);\n\n// Source: /lib/ui/validation/field.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('AvValFieldController', function($element, avValAdapter, avVal, $log, $timeout, $scope) {\n\n    this.ngModel = null;\n    this.rule = null;\n    this.avValForm = null;\n\n    var self = this;\n\n    this.createId = function() {\n      this.ngModel.avId = availity.uuid('avVal');\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.setRule = function(rule) {\n      this.rule = rule;\n    };\n\n    this.avValForm = function(avValForm) {\n      this.avValForm = avValForm;\n    };\n\n    this.updateModel = function(results) {\n      var self = this;\n      var validationKeys = [];\n\n      this.ngModel.avResults = results;\n\n      // set state for each violation\n      angular.forEach(results.violations, function (result) {\n        var key = 'av-' + result.contraintName;\n        validationKeys.push(key);\n        self.ngModel.$setValidity(key, result.valid);\n      });\n\n      // set overall state for validation state\n      this.ngModel.$setValidity('av', this.ngModel.avResults.isValid);\n\n      // store violations\n      this.ngModel.avViolations = this.ngModel.avResults.violations;\n\n      // record the id and violation count in the av-form controller.  this determines if the form is\n      // valid if sum of violations for all form inputs === zero\n      this.avValForm.record(this.ngModel.avId, this.ngModel.avResults.violations.length);\n\n      // remove violation keys that are no longer falsy\n      angular.forEach(this.ngModel.$error, function(value, key) {\n\n        if(_.indexOf(validationKeys, key) === -1 && key.lastIndexOf('av-', 0) === 0) {\n          self.ngModel.$setValidity(key, true);\n        }\n      });\n    };\n\n    this.updateView = function() {\n      if(this.ngModel.$dirty) {\n        avValAdapter.element($element, this.ngModel, this.ngModel.avResults.isValid);\n        avValAdapter.message($element, this.ngModel);\n      }\n    };\n\n    this.validate = function(value) {\n\n      $log.info('validating value [' + value + ']');\n\n      var rulesKey = self.avValForm.rulesKey;\n      var results = avVal.validate(rulesKey, $element, value, self.rule);\n\n      // validate function is called within the context of angular so fn.call\n      self.updateModel.call(self, results);\n      self.updateView.call(self);\n\n      return value;\n    };\n\n    this.debounce = function(avValDebounce) {\n      var self = this;\n\n      $element.unbind('input');\n\n      var debounce;\n      $element.bind('input', function() {\n        $timeout.cancel(debounce);\n        debounce = $timeout( function() {\n          $scope.$apply(function() {\n            self.ngModel.$setViewValue($element.val());\n          });\n        }, avValDebounce);\n      });\n    };\n\n  });\n\n  availity.ui.directive('avValField', function($log, $timeout, avVal, avValAdapter, AV_VAL) {\n    return {\n      restrict: 'A',\n      controller: 'AvValFieldController',\n      require: ['^avValForm', '?ngModel', 'avValField'],\n      scope: {\n        avValDebounce: '@?',\n        avValOn: '@?'\n      },\n      link: function(scope, element, attrs, controllers) {\n\n        var avValDebounce = parseInt(scope.avValDebounce || AV_VAL.DEBOUNCE, 10);\n        avValDebounce = _.isNumber(avValDebounce) ? avValDebounce : AV_VAL.DEBOUNCE;\n\n        var avValOn = scope.avValOn || null;\n\n        var rule = attrs.avValField; // not always string?\n        var avValForm = controllers[0];\n        var ngModel = controllers[1];\n        var avValField = controllers[2];\n\n        if(!ngModel && !rule) {\n          $log.info('avValField requires ngModel and a validation rule to run.');\n          return;\n        }\n\n        avValField.setNgModel(ngModel);\n        avValField.avValForm(avValForm);\n        avValField.setRule(rule);\n        avValField.createId();\n\n        var debounceAllowed = (element.is(\"input\") && !(attrs.type === 'radio' || attrs.type === 'checkbox'));\n\n        if(debounceAllowed) {\n          avValField.debounce(avValDebounce);\n        }\n\n        if(avValOn === 'blur') {\n          element.on('blur', function () {\n            ngModel.$setViewValue(ngModel.$modelValue);\n          });\n        }\n\n        // (view to model)\n        ngModel.$parsers.push(avValField.validate);\n\n        // (model to view) - potentially allow other formatter to run first\n        ngModel.$formatters.unshift(avValField.validate);\n\n        scope.$on(AV_VAL.EVENTS.REVALIDATE, function() {\n          avValField.validate(ngModel.$modelValue);\n        });\n\n        scope.$on(AV_VAL.EVENTS.SUBMITTED, function() {\n          ngModel.$dirty = true;\n          avValField.validate(ngModel.$modelValue);\n        });\n\n        scope.$on('$destroy', function () {\n          avValForm.unrecord(ngModel.avId);\n        });\n\n      }\n    };\n  });\n\n\n})(window);\n\n// Source: /lib/ui/validation/messages.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('avValContainerController', function($scope, $timeout) {\n\n    $scope.messages = {\n      message: null\n    };\n\n    this.message = function(ngModel) {\n\n      var message = null;\n      if(ngModel.avResults.violations.length && ngModel.avResults.violations[0].message) {\n        message = ngModel.avResults.violations[0].message;\n      }else {\n        message = null;\n      }\n\n      // $timeout is needed to update the UI from $broadcast events\n      $timeout(function() {\n        $scope.messages.message = message;\n      });\n\n    };\n\n  });\n\n  availity.ui.directive('avValContainer', function() {\n    return {\n      restrict: 'A',\n      controller: 'avValContainerController',\n      template: '<p class=\"help-block\" data-ng-bind-html=\"messages.message\"></p>',\n      replace: true,\n      scope: {},\n      link: function() {}\n    };\n  });\n\n\n})(window);\n\n// Source: /lib/ui/validation/adapter-bootstrap.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BOOTSTRAP_ADAPTER', {\n    CLASSES: {\n      SUCCESS: 'has-success',\n      WARNING: 'has-warning',\n      ERROR: 'has-error',\n      FEEDBACK: 'has-feedback',\n      HELP: 'help-block',\n      NAVBAR: 'navbar-fixed-top'\n    },\n    CONTROLLER: '$avValContainerController'\n  });\n\n  availity.ui.factory('avValBootstrapAdapter', function(AV_BOOTSTRAP_ADAPTER, $timeout) {\n\n    return {\n\n      element: function(element, ngModel) {\n        var el = element[0];\n        if(ngModel.$valid) {\n          angular.element(el.parentNode).removeClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n        }else{\n          angular.element(el.parentNode).addClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n        }\n      },\n\n      message: function(element, ngModel) {\n\n        var selector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.HELP\n        ].join('');\n\n        var messageTarget = $(element).siblings(selector);\n\n        if(messageTarget.length === 0) {\n          return;\n        }\n\n        var el = messageTarget[0]; // just target first sibling\n        var $el = angular.element(el);\n        var avValModel = $el.data(AV_BOOTSTRAP_ADAPTER.CONTROLLER); // get the av val message controller\n        if(avValModel) {\n          avValModel.message(ngModel);\n        }\n      },\n\n      scroll: function(form) {\n\n        // Bootstrap fixed navbars causes bad scroll-to offsets so find them all\n        var navbarSelector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.NAVBAR\n        ].join('');\n\n        // Add up all the heights to find the true offset\n        var offset = 0;\n        $(navbarSelector).each(function() {\n          offset += $(this).outerHeight();\n        });\n\n        var selector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR,\n          ':first'\n        ].join('');\n\n        var $target = $(form).find(selector);\n        $timeout(function(){\n          // scroll to offset top of first error minus the offset of the navbars\n          $('body, html').animate({scrollTop: $target.offset().top - offset}, 'fast');\n        });\n      }\n    };\n  });\n\n\n})(window);\n\n// Source: /lib/ui/validation/adapter.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_VAL_ADAPTER', {\n    DEFAULT: 'avValBootstrapAdapter'\n  });\n\n  availity.ui.provider('avValAdapter', function() {\n\n    var that = this;\n\n    this.setAdapter = function(adapter) {\n      this.adapter = adapter;\n    };\n\n    this.$get = function(AV_VAL_ADAPTER, $injector) {\n\n      var Adapter = function() {\n        var adapterName = that.adapter || AV_VAL_ADAPTER.DEFAULT;\n        this.adapter = $injector.get(adapterName);\n      };\n\n      var proto = Adapter.prototype;\n\n      proto.element = function(element, ngModel) {\n        this.adapter.element(element, ngModel);\n      };\n\n      proto.message = function(element, ngModel) {\n        this.adapter.message(element, ngModel);\n      },\n\n      proto.scroll = function(form) {\n        this.adapter.scroll(form);\n      };\n\n      return new Adapter();\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/dropdown/dropdown.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_DROPDOWN', {\n    OPTIONS: [\n      'width',\n      'minimumInputLength',\n      'maximumInputLength',\n      'minimumResultsForSearch',\n      'maximumSelectionSize',\n      'placeholderOption',\n      'separator',\n      'allowClear',\n      'multiple',\n      'closeOnSelect',\n      'openOnEnter',\n      'id', /* Function used to get the id from the choice object or a string representing the key under which the id is stored. `id(object)`*/\n      'matcher', /* Used to determine whether or not the search term matches an option when a built-in query function is used. The built in query function is used when Select2 is attached to a select, or the local or tags helpers are used. `matcher(term, text, option)`*/\n      'sortResults',\n      'formatSelection', /* Function used to render the current selection. `formatSelection(object, container)` */\n      'formatResult',\n      'formatResultCssClass',\n      'formatNoMatches', /* String containing 'No matches' message, or Function used to render the message */\n      'formatSearching', /* Function used to render a result that the user can select. `formatResult(object, container, query)` */\n      'formatAjaxError',\n      'formatInputTooShort',\n      'formatInputTooLong',\n      'formatSelectionTooBig',\n      'formatLoadMore',\n      'createSearchChoice',\n      'createSearchChoicePosition',\n      'initSelection',\n      'tokenizer',\n      'tokenSeparators',\n      'query',\n      'ajax',\n      'data',\n      'tags',\n      'containerCss',\n      'containerCssClass',\n      'dropdownCss',\n      'dropdownCssClass',\n      'dropdownAutoWidth',\n      'adaptContainerCssClass',\n      'adaptDropdownCssClass',\n      'escapeMarkup',\n      'selectOnBlur',\n      'loadMorePadding',\n      'nextSearchTerm'\n    ]\n  });\n\n\n  availity.ui.controller('AvDropdownController', function($element, $attrs, AV_UI, AV_DROPDOWN, $log, $scope, $timeout, $parse) {\n\n    var self = this;\n\n    this.options = [];\n    this.match = null;\n    this.ngModel = null;\n\n    this.init = function() {\n\n      _.forEach($attrs, function(value, key) {\n        if(_.contains(AV_DROPDOWN.OPTIONS, key.replace('data-', ''))){\n          self.options[key] = $scope.$eval(value);\n        }\n      });\n\n      self.multiple = angular.isDefined($attrs.multiple);\n\n      self.options.closeOnResize = self.options.closeOnResize  || true;\n\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.getSelected = function(model) {\n      var items = this.collection($scope);\n\n      var index = _.findIndex(items, function(item) {\n        return angular.equals(item, model);\n      });\n\n      return index;\n\n    };\n\n    this.setValue = function() {\n\n      var viewValue = self.ngModel.$viewValue;\n      var selected = null;\n\n      if(viewValue) {\n        selected = this.getSelected(viewValue);\n      }\n\n      // var apply = scope.$evalAsync || $timeout;\n      $timeout(function() {\n        $element\n          .select2('val',  (selected === null || selected === 'undefined') ? '' : selected); // null === '' for Select2\n      });\n    };\n\n    this.setValues = function() {\n      var viewValue = self.ngModel.$viewValue;\n\n      if(!angular.isArray(viewValue)) {\n        viewValue = [];\n      }\n\n      // var apply = scope.$evalAsync || $timeout;\n      $timeout(function() {\n        $element\n          .select2('val', viewValue);\n      });\n    };\n\n    this.ngOptions = function() {\n\n      this.match = $attrs.ngOptions.match(AV_UI.NG_OPTIONS);\n      if(!this.match) {\n        throw new Error(\"Invalid ngOptions for avDropdown\");\n      }\n\n      // AV_UI.NG_OPTIONS regex will parse into arrays like below:\n      //\n      // 0: \"state.name for state in states\"\n      // 1: \"state.name\"\n      // 2: undefined\n      // 3: undefined\n      // 4: \"state\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"states\"\n      // 8: undefined\n      //\n      // 0: \"state.id as state.name for state in states\"\n      // 1: \"state.id\"\n      // 2: \"state.name\"\n      // 3: undefined\n      // 4: \"state\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"states\"\n      // 8: undefined\n      //\n      // 0: \"state.name for state in states track by state.id\"\n      // 1: \"state.name\"\n      // 2: undefined\n      // 3: undefined\n      // 4: \"state\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"states\"\n      // 8: \"state.id\"\n      //\n      // 0: \"person.fullName as (person.lastName + ', ' + person.firstName) for person in feeScheduleModel.persons\"\n      // 1: \"person.fullName\"\n      // 2: \"(person.lastName + ', ' + person.firstName)\"\n      // 3: undefined\n      // 4: \"person\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"feeScheduleModel.persons\"\n      // 8: undefined\n\n      this.displayFn = $parse(this.match[2] || this.match[1]); // this is the function to retrieve the text to show as\n      this.collection = $parse(this.match[7]);\n      this.valueName = this.match[4] || this.match[6];\n      this.valueFn = $parse(this.match[2] ? this.match[1] : this.valueName);\n      this.keyName = this.match[5];\n\n      $scope.$watchCollection(this.collection, function(newVal, oldVal) {\n\n        if(angular.equals(newVal, oldVal)) {\n          return;\n        }\n\n        self.setValue();\n\n      }, true);\n    };\n\n  });\n\n  availity.ui.directive('avDropdown', function($timeout, $log, $window) {\n    return {\n      restrict: 'A',\n      require: ['ngModel', 'avDropdown'],\n      controller: 'AvDropdownController',\n      link: function(scope, element, attrs, controllers) {\n\n        var ngModel = controllers[0];\n        var avDropdown = controllers[1];\n\n        avDropdown.setNgModel(ngModel);\n        avDropdown.init();\n\n        if(attrs.ngOptions) {\n          avDropdown.ngOptions();\n        }\n\n        ngModel.$parsers.push(function(value) {\n          var parent = element.prev();\n          parent\n            .toggleClass('ng-invalid', !ngModel.$valid)\n            .toggleClass('ng-valid', ngModel.$valid)\n            .toggleClass('ng-invalid-required', !ngModel.$valid)\n            .toggleClass('ng-valid-required', ngModel.$valid)\n            .toggleClass('ng-dirty', ngModel.$dirty)\n            .toggleClass('ng-pristine', ngModel.$pristine);\n          return value;\n        });\n\n        element.on('change', function(e) {\n          $log.info(e);\n        });\n\n        // https://github.com/t0m/select2-bootstrap-css/issues/37#issuecomment-42714589\n        element.on(\"select2-open\", function () {\n\n          // look for .has-success, .has-warning, .has-error\n          // (really look for .has-* … which is good enough for the demo page, but obviously might interfere with other CSS-classes starting with \"has-\")\n          if(element.parents('[class*=\"has-\"]').length) {\n\n            // get all CSS-classes from the element where we found \"has-*\" and collect them in an array\n            var classNames = $(this).parents('[class*=\"has-\"]')[0].className.split(/\\s+/);\n\n            // go through the class names, find \"has-\"\n            for(var i = 0; i < classNames.length; ++i) {\n              if(classNames[i].match(\"has-\")) {\n                $('#select2-drop').addClass(classNames[i]);\n              }\n            }\n          }\n        });\n\n        var _$render = ngModel.$render;\n        ngModel.$render = function() {\n          _$render();\n\n          if(avDropdown.multiple) {\n            avDropdown.setValues();\n          }else {\n            avDropdown.setValue();\n          }\n\n        };\n\n        var win = angular.element($window);\n\n        win.bind('resize', function() {\n          element.select2('close');\n        });\n\n        win.bind('scroll', function() {\n          element.select2('close');\n        });\n\n        attrs.$observe('disabled', function (value) {\n          element.select2('enable', !value);\n        });\n\n        attrs.$observe('readonly', function (value) {\n          element.select2('readonly', !!value);\n        });\n\n        scope.$on('destroy', function() {\n          element.select2('destroy');\n        });\n\n        $timeout(function() {\n          element.select2(avDropdown.options);\n        });\n      }\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/datepicker/datepicker.js\n/**\n * Inspiration https://github.com/mgcrea/angular-strap/blob/v0.7.8/src/directives/datepicker.js\n */\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // Options: http://bootstrap-datepicker.readthedocs.org/en/latest/options.html\n  availity.ui.constant('AV_DATEPICKER', {\n    CONTROLLER: '$ngModelController',\n    ADD_ON_SELECTOR: '[data-toggle=\"datepicker\"]',\n    OPTIONS: [\n      'autoclose',\n      'beforeShowDay',\n      'beforeShowMonth',\n      'calendarWeeks',\n      'clearBtn',\n      'toggleActive',\n      'container',\n      'daysOfWeekDisabled',\n      'datesDisabled',\n      'defaultViewDate',\n      'endDate',\n      'forceParse',\n      'format',\n      'inputs',\n      'keyboardNavigation',\n      'language',\n      'minViewMode',\n      'multidate',\n      'multidateSeparator',\n      'orientation',\n      'startDate',\n      'startView',\n      'todayBtn',\n      'todayHighlight',\n      'weekStart',\n      'showOnFocus',\n      'disableTouchKeyboard',\n      'enableOnReadonly'\n    ],\n    DEFUALTS: {\n      FORMAT: 'mm/dd/yyyy',\n      CLOSE: true,\n      TODAY: true\n    }\n  });\n\n  availity.ui.controller('AvDatepickerController', function($element, $attrs, AV_DATEPICKER, $scope) {\n\n    var self = this;\n    this.options = {};\n\n    this.setValue = function() {\n\n      var viewValue = self.ngModel.$modelValue;\n      var plugin = this.plugin();\n\n      if(!viewValue || !plugin) {\n        return;\n      }\n\n      plugin.setDate(viewValue);\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.findModel = function() {\n\n      var ngModel = null;\n\n      var $input = $element.find('input:first').andSelf();\n      if($input.length) {\n        ngModel = $input.data(AV_DATEPICKER.CONTROLLER);\n        this.setNgModel(ngModel);\n      }\n\n      return ngModel;\n    };\n\n    this.modelToView = function() {\n      return $.fn.datepicker.DPGlobal.formatDate(self.ngModel.$modelValue, self.options.format, 'en');\n    };\n\n    this.viewToModel = function() {\n\n      var format = $.fn.datepicker.DPGlobal.parseFormat(self.options.format);\n      var utcDate = $.fn.datepicker.DPGlobal.parseDate(self.ngModel.$viewValue, format, 'en');\n\n      var plugin = self.plugin();\n\n      if(!plugin) {\n        return;\n      }\n\n      return plugin._utc_to_local(utcDate);\n    };\n\n    this.init = function() {\n\n      _.forEach($attrs, function(value, key) {\n        if(_.contains(AV_DATEPICKER.OPTIONS, key.replace('data-', ''))){\n          self.options[key] = $scope.$eval(value);\n        }\n      });\n\n      self.options.autoclose = self.options.autoclose ? self.options.autoclose : AV_DATEPICKER.DEFUALTS.CLOSE;\n      self.options.todayHighlight = self.options.todayHighlight ? self.options.todayHighlight : AV_DATEPICKER.DEFUALTS.TODAY;\n      self.options.format = self.options.format ? self.options.format : AV_DATEPICKER.DEFUALTS.FORMAT;\n\n    };\n\n    this.plugin = function() {\n      return $element.data('datepicker');\n    };\n\n    this.destroy = function() {\n      var plugin = this.plugin();\n      if(plugin) {\n        plugin.remove();\n        $element.data('datepicker', null);\n      }\n\n    };\n\n    this.hide = function() {\n      var plugin = this.plugin();\n      if(plugin) {\n        plugin.hide();\n      }\n    };\n\n  });\n\n  availity.ui.directive('avDatepicker', function($timeout, $window, $log, AV_DATEPICKER) {\n    return {\n      restrict: 'A',\n      require: ['?ngModel', 'avDatepicker'],\n      controller: 'AvDatepickerController',\n      link: function(scope, element, attrs, controllers) {\n\n        var ngModel = controllers[0];\n        var avDatepicker = controllers[1];\n\n        if(!ngModel) {\n          ngModel = avDatepicker.findModel();\n          if(!ngModel) {\n            $log.error('avDatepicker requires ngModel');\n            return;\n          }\n        }\n\n\n        avDatepicker.init();\n        avDatepicker.setNgModel(ngModel);\n\n        ngModel.$parsers.push(avDatepicker.viewToModel); // (view to model)\n        ngModel.$formatters.unshift(avDatepicker.modelToView);  // (model to view)\n\n        var _$render = ngModel.$render;\n        ngModel.$render = function() {\n          _$render();\n          avDatepicker.setValue();\n        };\n\n        var win = angular.element($window);\n\n        win.bind('scroll', function() {\n          avDatepicker.hide();\n        });\n\n        var target = element.siblings(AV_DATEPICKER.ADD_ON_SELECTOR);\n        if(target.length) {\n          target.on('click.datepicker', function() {\n            if (!element.prop('disabled')) { // Hack check for IE 8\n              element.focus();\n            }\n          });\n        }\n\n        scope.$on('destroy', function() {\n           avDatepicker.destroy();\n           if(target.length) {\n             target.off('click.datepicker');\n           }\n        });\n\n        $timeout(function() {\n          element.datepicker(avDatepicker.options);\n        });\n      }\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/idle/idle-notifier.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_UI_IDLE', {\n    TEMPLATES: {\n      BASE: 'ui/idle/idle-tpl.html',\n      SESSION: 'ui/idle/idle-session-tpl.html',\n      WARNING: 'ui/idle/idle-warning-tpl.html'\n    }\n  });\n\n  availity.ui.provider('avIdleNotifier', function() {\n\n    var sessionTemplate;\n    var warningTemplate;\n    var $scope;\n\n    this.setSessionTemplate = function(template) {\n      sessionTemplate = template;\n    };\n\n    this.setWarningTemplate = function(template) {\n      warningTemplate = template;\n    };\n\n    this.$get = function(AV_IDLE, AV_UI_IDLE, $rootScope, AvModal, $document, $timeout) {\n\n      var AvIdleNotifier = function() {\n        this.listeners = [];\n        this.modal = null;\n      };\n\n      var proto = AvIdleNotifier.prototype;\n\n      proto.init = function() {\n\n        $scope = $rootScope.$new(true);\n        $scope.idle = {};\n\n        this.initListeners();\n      };\n\n      proto.initListeners = function() {\n\n        var self = this;\n        var listener = null;\n\n        // ACTIVATE\n        listener = $rootScope.$on(AV_IDLE.EVENTS.ACTIVE, function() {\n          self.showWarning();\n        });\n        this.listeners.push(listener);\n\n        // INACTIVE\n        listener = $rootScope.$on(AV_IDLE.EVENTS.INACTIVE, function() {\n          self.hideWarning();\n        });\n        this.listeners.push(listener);\n\n        // SESSION TIMEOUT\n        listener = $rootScope.$on(AV_IDLE.EVENTS.SESSION_TIMEOUT_ACTIVE, function() {\n          self.showSession();\n        });\n        this.listeners.push(listener);\n\n      };\n\n      proto.destroyListeners = function() {\n        // turn off each listener => http://stackoverflow.com/a/14898795\n        _.each(this.listeners, function(listener) {\n          listener();\n        });\n      };\n\n\n      proto.showWarning = function() {\n\n        var self = this;\n\n        if(this.modal !== null) {\n          return;\n        }\n\n        $scope = $rootScope.$new(true);\n        $scope.idle = {};\n        $scope.idle.template = AV_UI_IDLE.TEMPLATES.WARNING;\n\n        this.modal = new AvModal({\n          show: true,\n          scope: $scope,\n          backdrop: 'static',\n          template: AV_UI_IDLE.TEMPLATES.BASE\n        });\n\n        $document.on('click', function() {\n          self.hideWarning();\n          $rootScope.$broadcast(AV_IDLE.EVENTS.INACTIVE);\n        });\n\n      };\n\n      proto.hideWarning = function() {\n        this.disableBackDrop();\n\n        if(this.modal) {\n          this.modal.destroy();\n        }\n\n        this.modal = null;\n      };\n\n      proto.disableBackDrop = function() {\n        $document.off('click');\n      };\n\n      proto.showSession = function() {\n        var self = this;\n        this.disableBackDrop();\n\n        $timeout(function() {\n          $scope.idle.template = AV_UI_IDLE.TEMPLATES.SESSION;\n          $scope.idle.onSessionInactive = self.onSessionInactive;\n        }, 0, true);\n\n      };\n\n      proto.onSessionInactive = function() {\n        $rootScope.$broadcast(AV_IDLE.EVENTS.SESSION_TIMEOUT_INACTIVE);\n      };\n\n      return new AvIdleNotifier();\n\n    };\n\n  });\n\n  availity.ui.run(function(avIdleNotifier) {\n    avIdleNotifier.init();\n  });\n\n})(window);\n\n//# sourceMappingURL=maps/availity-angular-ui.js.map"],"sourceRoot":"/source/"}