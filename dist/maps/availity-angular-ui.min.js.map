{"version":3,"sources":["availity-angular-ui.js","/source/index.js","/source/template.js","/source/modal.js","/source/form.js","/source/field.js","/source/popover.js","/source/container.js","/source/adapter-bootstrap.js","/source/adapter.js","/source/dropdown.js","/source/datepicker.js","/source/idle-notifier.js","/source/mask.js","/source/error-page.js","/source/has-permission.js","/source/analytics.js","/source/placeholder.js","/source/breadcrumbs.js","/source/approximate.js","/source/badge.js","/source/removable-label.js","/source/loader.js","/source/block.js","/source/block-directive.js","/source/tabs.js","/source/scroll-pagination.js","/source/dimmer.js"],"names":["root","availity","MODULE_UI","ui","angular","module","constant","NG_OPTIONS","exports","window","factory","$q","$templateCache","$http","get","options","valid","template","templateUrl","Error","when","cache","then","result","data","OPTIONS","scope","controller","controllerAs","locals","id","container","keyboard","backdrop","show","remote","EVENTS","SHOW","SHOWN","HIDE","HIDDEN","NAMESPACE","MODAL","BS_EVENTS","TEMPLATES","AvModalManager","this","instances","proto","prototype","add","push","remove","_","without","closeAll","forEach","$el","$","bsModal","removeBackdrop","$body","removeClass","resetAdjustments","resetScrollbar","avModal","destroy","ModalFactory","$rootScope","$timeout","$compile","$controller","$log","AV_MODAL","avTemplateCache","avModalManager","Modal","self","templateDefer","defer","templatePromise","promise","_buildOptions","_build","create","userOptions","extend","$new","$scope","warn","$element","element","_createId","_scope","_init","appendTo","resolve","modal","_listeners","modalShow","modalToggle","toggle","modalHide","hide","animationShowDefer","animationHideDefer","on","event","$emit","isFunction","onShown","onHidden","call","$evalAsync","$on","_id","isShown","attr","uuid","directive","restrict","replace","transclude","size","ngForm","rulesKey","avValOn","avValDebounce","avValInvalid","violations","init","form","record","count","violocationCount","reduce","sum","num","$setValidity","unrecord","reset","$setPristine","$submitted","$setSubmitted","setRulesKey","key","$parse","AV_VAL","avValAdapter","priority","require","compile","pre","iEl","iAttrs","controllers","ruleFn","avValForm","error","$watch","_rulesKey","_oldRulesKey","avForm","info","$broadcast","REVALIDATE","post","fn","ngSubmit","off","ngClick","RESET","bind","SUBMITTED","$invalid","FAILED","preventDefault","stopImmediatePropagation","scroll","callback","$event","$apply","$attrs","avVal","$sniffer","ngModel","rule","placeholder","noEvent","createId","avId","setNgModel","setRule","updateModel","results","validationKeys","avResults","contraintName","isValid","avViolations","length","$error","value","indexOf","lastIndexOf","updateView","$dirty","avValShow","message","validate","validateModel","validateView","undefined","onDebounce","val","trim","isCheckbox","$setViewValue","checked","isRadio","is","type","splice","unbind","debounce","msie","cancel","link","attrs","avValField","parseInt","DEBOUNCE","isNumber","debounceAllowed","$parsers","$formatters","unshift","$viewValue","provider","config","showOnLoadHideDelay","set","$get","copy","NAME","AV_POPOVER","avPopoverConfig","listeners","name","ev","plugin","popover","showOnLoad","delay","avPopover","html","messages","CLASSES","SUCCESS","WARNING","ERROR","FEEDBACK","HELP","FORM_GROUP","NAVBAR","SELECTORS","CONTAINER","DATA_CONTAINER","CONTROLLER","AV_BOOTSTRAP_ADAPTER","$valid","parents","addClass","selector","join","target","siblings","el","avValModel","navbarSelector","offset","each","outerHeight","$target","find","animate","scrollTop","top","DEFAULT","that","setAdapter","adapter","AV_VAL_ADAPTER","$injector","Adapter","adapterName","closeOnResize","dropdownAutoWidth","minimumResultsForSearch","AV_UI","AV_DROPDOWN","avDropdownConfig","match","contains","$eval","isRemoteMultiple","multiple","isDefined","query","queryFn","getId","tagName","toLowerCase","setRemoteViewValue","e","values","isArray","isObject","added","index","findIndex","matches","removed","setViewValue","getSelected","model","collection","items","item","valueFn","equals","valueName","response","more","setValue","viewValue","selected","select2","getMultiSelected","indices","savedObject","temp","inputViewValues","$modelValue","isUndefined","correlationId","setValues","isEmpty","ngOptions","displayFn","keyName","$watchCollection","newVal","oldVal","$window","avDropdown","parent","prev","toggleClass","$pristine","ngFocus","ngBlur","classNames","className","split","i","_$render","$render","win","$observe","eventListeners","listener","eventId","autoclose","todayHighlight","format","forceParse","ADD_ON_SELECTOR","DEFAULTS","MODELFORMAT","AV_DATEPICKER","avDatepickerConfig","setDate","findModel","$input","andSelf","modelToView","isoWrap","datepicker","DPGlobal","formatDate","wrapIsoDate","date","m","moment","toDate","viewToModel","parseFormat","utcDate","parseDate","localDate","_utc_to_local","modelFormat","avDatepicker","prop","focus","OK","BASE","SESSION","sessionTemplate","warningTemplate","setSessionTemplate","setWarningTemplate","AV_IDLE","AV_UI_IDLE","AvModal","$document","AvIdleNotifier","idle","initListeners","IDLE_ACTIVE","showWarning","IDLE_INACTIVE","hideWarning","SESSION_TIMEOUT_ACTIVE","showSession","destroyListeners","disableBackDrop","onSessionTimeout","SESSION_TIMEOUT_REDIRECT","run","avIdleNotifier","phone","SSN","AV_MASK","maskType","inputmask","avErrorPageController","startTemplate","endTemplate","notFoundTemplate","unauthorizedTemplate","PAGES","NOT_FOUND","UNAUTHORIZED","sendOtherwiseToNotFound","routes","av-error-not-found","url","av-error-unauthorized","$state","current","goBack","history","back","AvErrorPageProvider","AV_ERROR","configure","overrideOptions","merge","$stateProvider","route","state","$urlRouterProvider","otherwise","avErrorPageService","go","notFound","unauthorized","avErrorPage","showErrorPage","onSuccess","isAuthorized","onError","avUserAuthorizations","$attr","avHasPermissionController","avHasPermission","permissions","words","isAnyAuthorized","getOptions","avAnalyticsUtils","avAnalytics","onEvent","properties","level","label","text","isExternalLink","stopPropagation","trackEvent","document","location","AV_ANALYTICS","childCtrl","parentCtrl","parentOptions","getProperties","eventType","avAnalyticsOn","requires","$provide","decorator","$delegate","originalLink","newLink","keys","apply","arguments","TEMPLATE","AvBreadcrumbsController","getBreadcrumb","breadcrumbs","breadcrumb","parentState","getBreadcrumbs","$inject","avBreadcrumbs","AV_BREADCRUMBS","filter","pow","Math","floor","abs","log","round","number","precision","prec","base","unit","COLOR","DEFAULT_CLASS","SHOW_WHEN_ZERO","badgeDirective","AV_BADGE","color","showWhenZero","classes","AV_REMOVABLE_LABEL","removeValue","onRemove","removeLabel","disabled","LOADER","active","start","velocity","stagger","opacity","duration","complete","setTimeout","endAnimation","removeData","stop","AV_LOADER","avLoader","BLOCK","getLoaderController","blockId","triggerLoaderController","instance","loaderController","triggerInstance","origFn","loaderFn","modifyBlockInstances","origStartFn","origStopFn","startLoader","avModifications","AV_BLOCK","blockUIConfig","blockUI","autoBlock","origGetFn","avBlockUi","blockCount","TABS","TAB","TabsController","tabs","addTab","tab","selectTab","removeTab","newActiveIndex","selectedTab","onDeselect","onSelect","TabsDirective","AV_TABS","justified","tabType","vertical","padContent","TabDirective","heading","tabsController","transcludeFn","select","$parent","disable","TabPaneDirective","avTabPane","append","contents","node","DEFAULT_OPTIONS","limit","maxCached","loadMoreText","entryIdAttribute","apiParams","beforePageLoad","afterPageLoad","AvScrollPaginationService","registerInstance","instanceInterface","unregisterInstance","resetInstance","AV_SCROLL_PAGINATION","avScrollPaginationService","buildOptions","_options","lowOffset","highOffset","originalEntries","entries","updateButtonVisibilityFlags","showNext","totalCount","showPrev","disableVisibilityFlags","loadEntries","prepend","block","avScrollPagination","params","apiResource","responseData","getResponseData","resourceId","addEntries","responseKey","nestedData","noData","oldEntries","diff","trackedElementId","slice","autoscroll","trackedElement","trackedElementTop","newScrollTop","loadPrev","loadNext","animationConfig","showAnimation","showEvent","hideAnimation","hideEvent","overlaySelector","avDimmerConfig","elm"],"mappings":"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","file":"availity-angular-ui.min.js","sourcesContent":["/**\n * availity-angular v1.10.2 -- April-07\n * Copyright 2016 Availity, LLC \n */\n\n// Source: \\lib\\ui\\index.js\n\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity || {};\n\n  availity.MODULE_UI = 'availity.ui';\n  availity.ui = angular.module(availity.MODULE_UI, ['ng', 'ngSanitize']);\n\n  availity.ui.constant('AV_UI', {\n    // jscs: disable\n    NG_OPTIONS: /^\\s*([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?(?:\\s+group\\s+by\\s+([\\s\\S]+?))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+([\\s\\S]+?)(?:\\s+track\\s+by\\s+([\\s\\S]+?))?$/\n    // jscs: enable\n  });\n\n  if(typeof module !== 'undefined' && module.exports) {\n    module.exports = availity;\n  }\n\n\n})(window);\n\n// Source: \\lib\\ui\\templates\\template.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.factory('avTemplateCache', function($q, $templateCache, $http) {\n\n    return {\n\n      get: function(options) {\n\n        var valid = !options.template || !options.templateUrl;\n\n        if(!valid) {\n          throw new Error('Either options.template or options.templateUrl must be defined for avTemplateCache');\n        }\n\n        return options.template ? $q.when(options.template) :\n          $http.get(options.templateUrl, {cache: $templateCache})\n            .then(function(result) {\n              return result.data;\n            });\n      }\n    };\n  });\n\n})(window);\n\n// Source: \\lib\\ui\\modal\\modal.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_MODAL', {\n\n    OPTIONS: {\n      scope: null,\n      controller: null,\n      controllerAs: null,\n      locals: null,\n      templateUrl: null,\n      template: null,\n      id: null,\n      container: null,\n\n      // Bootstrap defaults\n      keyboard: true,\n      backdrop: true,\n      show: false,\n      remote: false\n    },\n\n    EVENTS: {\n      SHOW: 'show.av.modal',\n      SHOWN: 'shown.av.modal',\n      HIDE: 'hide.av.modal',\n      HIDDEN: 'hidden.av.modal'\n    },\n\n    NAMESPACE: {\n      MODAL: 'bs.modal'\n    },\n\n    BS_EVENTS:  {\n      SHOW: 'show.bs.modal',\n      SHOWN: 'shown.bs.modal',\n      HIDE: 'hide.bs.modal',\n      HIDDEN: 'hidden.bs.modal'\n    },\n\n    TEMPLATES: {\n      MODAL: 'ui/modal/modal-tpl.html'\n    }\n  });\n\n  availity.ui.factory('avModalManager', function() {\n\n    var AvModalManager = function() {\n      this.instances = [];\n    };\n\n    var proto = AvModalManager.prototype;\n\n    proto.add = function(id) {\n      this.instances.push(id);\n    };\n\n    proto.remove = function(id) {\n      this.instances = _.without(this.instances, id);\n    };\n\n    proto.closeAll = function() {\n\n      _.forEach(this.instances, function(id) {\n\n        var $el = $('#' + id);\n\n        if(!$el) {\n          return;\n        }\n\n        var bsModal = $el.data('bs.modal');\n        if(bsModal) {\n          bsModal.removeBackdrop();\n          bsModal.$body.removeClass('modal-open');\n          bsModal.resetAdjustments();\n          bsModal.resetScrollbar();\n        }\n\n        var avModal = $el.data('AvModal');\n        if(avModal) {\n          avModal.destroy();\n        }\n\n      });\n    };\n\n    return new AvModalManager();\n\n  });\n\n  var ModalFactory = function($rootScope, $timeout, $compile, $controller, $log, AV_MODAL, avTemplateCache, $q, avModalManager) {\n\n    var Modal = function(options) {\n\n      var self = this;\n\n      this.templateDefer = $q.defer();\n      this.templatePromise = this.templateDefer.promise;\n\n      this.options = this._buildOptions(options);\n\n      avTemplateCache.get(options).then(function(template) {\n        self.options.template = template;\n        self._build();\n      });\n\n    };\n\n    Modal.create = function(options) {\n      return new Modal(options);\n    };\n\n    var proto = Modal.prototype;\n\n    proto._buildOptions = function (userOptions) {\n      var options = angular.extend({}, AV_MODAL.OPTIONS, userOptions);\n\n      if (!options.scope) {\n        options.scope = $rootScope.$new();\n      }\n\n      if (options.controller) {\n        var locals = angular.extend({ $scope: options.scope }, options.locals);\n\n        var controller = $controller(options.controller, locals);\n\n        if (options.controllerAs) {\n          if (options.scope[options.controllerAs]) {\n            $log.warn('Overwriting ' + options.controllerAs + 'on scope with AvModal controllerAs, consider passing in no scope, or specifying a different controllerAs than the existing controller');\n          }\n          options.scope[options.controllerAs] = controller;\n        }\n      }\n\n      return options;\n    };\n\n    proto._build = function() {\n\n      var self = this;\n\n      var scope = this.options.scope;\n      this.$element = angular.element(this.options.template);\n\n      this._createId();\n\n      this._scope();\n\n      $compile(this.$element)(scope);\n\n      $timeout(function() {\n        self._init();\n      }, 0, true);\n\n      // Append to container or <body>\n      this.options.container ? this.$element.appendTo(this.options.container) : this.$element.appendTo('body');\n\n    };\n\n    proto._init = function() {\n\n      this.$element.data('AvModal', this);\n\n      this.templateDefer.resolve(true);\n\n      // Initialize Bootstrap jQuery plugin\n      this.$element.modal({\n        'backdrop': this.options.backdrop,\n        'keyboard': this.options.keyboard,\n        'show': this.options.show,\n        'remote': this.options.remote\n      });\n\n      this._listeners();\n    };\n\n    // Add helpers to scope so clients can call internal methods\n    proto._scope = function() {\n\n      var self = this;\n      var scope = this.options.scope;\n\n      scope.modalShow = function() {\n        return self.show();\n      };\n\n      scope.modalToggle = function() {\n        return self.toggle();\n      };\n\n      scope.modalHide = function() {\n        return self.hide();\n      };\n\n    };\n\n    proto._listeners = function() {\n\n      var self = this;\n      var scope = this.options.scope;\n      var $element = this.$element;\n\n      this.animationShowDefer = $q.defer();\n      this.animationHideDefer = $q.defer();\n\n      $element.on(AV_MODAL.BS_EVENTS.SHOW, function(event) {\n        scope.$emit(AV_MODAL.EVENTS.SHOW, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.SHOWN, function(event) {\n\n        if(angular.isFunction(self.options.onShown)) {\n          self.options.onShown();\n        }\n\n        self.animationShowDefer.resolve(true);\n\n        scope.$emit(AV_MODAL.EVENTS.SHOWN, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.HIDE, function(event) {\n        scope.$emit(AV_MODAL.EVENTS.HIDE, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.HIDDEN, function(event) {\n\n        if(angular.isFunction(self.options.onHidden)) {\n          self.options.onHidden.call(this);\n        }\n\n        self.animationHideDefer.resolve(true);\n        scope.$emit(AV_MODAL.EVENTS.HIDDEN, event, self);\n\n        scope.$evalAsync(function() {\n          self.destroy();\n        });\n\n      });\n\n      // Garbage collection\n      scope.$on('$destroy', function() {\n        avModalManager.remove(self._id);\n        self.destroy();\n      });\n\n    };\n\n    proto.show = function() {\n\n      var self = this;\n      this.animationShowDefer = $q.defer();\n\n      this.templatePromise.then(function() {\n        self.isShown() ? self.animationShowDefer.resolve(true) : self.$element.modal('show');\n      });\n\n      return this.animationShowDefer.promise;\n\n    };\n\n    proto.hide = function() {\n\n      var self = this;\n      this.animationHideDefer = $q.defer();\n\n      this.templatePromise.then(function() {\n        !self.isShown() ? self.animationHideDefer.resolve(true) : self.$element.modal('hide');\n      });\n\n      return this.animationHideDefer.promise;\n    };\n\n    proto.isShown = function() {\n      return this.$element.data(AV_MODAL.NAMESPACE.MODAL).isShown;\n    },\n\n    proto.toggle = function() {\n\n      var self = this;\n\n      return this.templatePromise.then(function() {\n        return self.isShown() ? self.hide() : self.show();\n      });\n\n    };\n\n    proto.destroy = function() {\n\n      var self = this;\n\n      return this.templatePromise.then(function() {\n        self.$element.data('AvModal', null);\n        self.$element.remove();\n      });\n\n    };\n\n    proto._createId = function() {\n      // Create a unique id for the modal if not present or passed in via options\n      var id = this.$element.attr('id');\n      if(!id) {\n        // Get id from options or create a unique id\n        id = this.options.id ? this.options.id : availity.uuid('av-modal-id');\n        this.$element.attr('id', id);\n      }\n\n      this._id = id;\n\n      avModalManager.add(id);\n    };\n\n    return Modal;\n  };\n\n  availity.ui.factory('AvModal', ModalFactory);\n\n  availity.ui.directive('avModal', function(AV_MODAL) {\n    return {\n      restrict: 'A',\n      replace: true,\n      transclude: true,\n      scope: {\n        size: '@'\n      },\n      templateUrl: AV_MODAL.TEMPLATES.MODAL\n    };\n  });\n\n})(window);\n\n// Source: \\lib\\ui\\validation\\form.js\n/**\n * 1. All fields should be pristine on first load\n * 2. If field is modified an invalid the field should be marked with an error\n *\n */\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('avValFormController', function() {\n\n    this.ngForm  = null;\n    this.rulesKey = null;\n    this.avValOn = null;\n    this.avValDebounce = null;\n    this.avValInvalid = false;\n\n    // Object that stores the unique id (key) and violation count (value) of all the form fields\n    //\n    // EX:\n    //\n    // {\n    //  avVal001: 0\n    //  avVal002: 2\n    //  avVal003: 1\n    // }\n    this.violations = {};\n\n    this.init = function(form) {\n      this.ngForm = form;\n    };\n\n    /**\n     * Records id of the form field and number of violations\n     * @param  {[type]} id    [description]\n     * @param  {[type]} count [description]\n     * @return {[type]}       [description]\n     */\n    this.record = function(id, count) {\n      this.violations[id] = count;\n\n      var violocationCount = _.reduce(this.violations, function(sum, num) {\n        return sum + num;\n      }, 0);\n\n      this.ngForm.$setValidity('av', violocationCount === 0);\n    };\n\n    this.unrecord = function(id) {\n      if(id && this.violations[id]) {\n        delete this.violations[id];\n      }\n    };\n\n    this.reset = function() {\n      this.ngForm.$setPristine();\n      this.ngForm.$submitted = false;\n    };\n\n    this.$setSubmitted = function() {\n      this.ngForm.$submitted = true;\n    };\n\n    this.setRulesKey = function(key) {\n      this.rulesKey = key;\n    };\n\n  });\n\n  // form.$error = {};\n  // form.$$success = {};\n  // form.$pending = undefined;\n  // form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);\n  // form.$dirty = false;\n  // form.$pristine = true;\n  // form.$valid = true;\n  // form.$invalid = false;\n  // form.$submitted = false;\n\n  availity.ui.directive('avValForm', function($log, $timeout, $parse, AV_VAL, avValAdapter, $rootScope) {\n    return {\n      restrict: 'A',\n      priority: 10,\n      require: ['form', 'avValForm'],\n      controller: 'avValFormController',\n      compile: function() {\n        return {\n          pre: function(scope, iEl, iAttrs, controllers) {\n\n            var ruleFn = $parse(iAttrs.avValForm);\n            var rulesKey = ruleFn(scope);\n            rulesKey = rulesKey || iAttrs.avValForm; // interpolated rule from scope || fixed string\n\n            if(!rulesKey) {\n              $log.error('avValForm requires a rules key in order to run the proper validation rules.');\n              return;\n            }\n\n            scope.$watch(ruleFn, function(_rulesKey, _oldRulesKey) {\n              if(_rulesKey) {\n                avForm.setRulesKey(_rulesKey);\n\n                if(_rulesKey !== _oldRulesKey) {\n                  $timeout(function() {\n                    $log.info('avValForm revalidate');\n                    $rootScope.$broadcast(AV_VAL.EVENTS.REVALIDATE);\n                  });\n                }\n\n              }\n\n            });\n\n            var ngForm = controllers[0];\n            var avForm = controllers[1];\n\n            // Allow form attributes to define the validation behavior of the form fields\n            // inside it.  If `av-val-on` or `av-val-debounce` are on the form then all form\n            // fields inside the form would inherit this behavior.\n            avForm.avValOn = iAttrs.avValOn || null;\n            avForm.avValDebounce = iAttrs.avValDebounce || null;\n            // Allows fields to update with invalid data for dirty form saving\n            avForm.avValInvalid = iAttrs.avValInvalid || false;\n\n            avForm.init(ngForm);\n            avForm.setRulesKey(rulesKey);\n\n          },\n          post: function(scope, iEl, iAttrs, controllers) {\n\n            iEl.attr('novalidate', 'novalidate');  // prevent HTML5 validation from kicking in\n\n            // Disable ng-submit or ng-click handlers and store the function to call for submitting\n            var fn;\n            if(iAttrs.ngSubmit) {\n              // Disable ng-submit event\n              iEl.off('submit');\n              fn = $parse(iAttrs.ngSubmit, /* expensiveChecks */ true);\n            }else if(iAttrs.ngClick) {\n              // Disable ng-click event\n              iEl.off('click');\n              fn = $parse(iAttrs.ngClick, /* expensiveChecks */ true);\n            }\n\n            var ngForm = controllers[0];\n            var avForm = controllers[1];\n\n            scope.$on(AV_VAL.EVENTS.RESET, function () {\n              avForm.reset();\n            });\n\n            iEl.bind('submit', function(event) {\n\n              scope.$broadcast(AV_VAL.EVENTS.SUBMITTED);\n              avForm.$setSubmitted();\n\n              if(ngForm.$invalid) {\n\n                scope.$broadcast(AV_VAL.EVENTS.FAILED);\n\n                $log.info('avValForm invalid.  preventing default submit action');\n\n                event.preventDefault();\n                event.stopImmediatePropagation();\n                scope.$broadcast(event);\n\n                avValAdapter.scroll(iEl);\n                return;\n              }\n\n              ngForm.$setPristine();\n\n              if(!fn) {\n                return;\n              }\n\n              var callback = function() {\n                fn(scope, {$event:event});\n              };\n\n              scope.$apply(callback);\n\n            });\n\n          }\n        };\n      }\n    };\n  });\n\n\n})(window);\n\n// Source: \\lib\\ui\\validation\\field.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('AvValFieldController', function($element, avValAdapter, $attrs, avVal, $log, $timeout, $scope, $sniffer) {\n\n    this.ngModel = null;\n    this.rule = null;\n    this.avValForm = null;\n    this.avValInvalid = false;\n\n    var self = this;\n\n    var placeholder = $element[0].placeholder;\n    var noEvent = {};\n\n    this.createId = function() {\n      this.ngModel.avId = availity.uuid('avVal');\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.setRule = function(rule) {\n      this.rule = rule;\n    };\n\n    this.avValForm = function(avValForm) {\n      this.avValForm = avValForm;\n    };\n\n    this.updateModel = function(results) {\n\n      var self = this;\n      var validationKeys = [];\n\n      this.ngModel.avResults = results;\n\n      // set state for each violation\n      angular.forEach(results.violations, function (result) {\n        var key = 'av-' + result.contraintName;\n        validationKeys.push(key);\n        self.ngModel.$setValidity(key, result.valid);\n      });\n\n      // set overall state for validation state\n      this.ngModel.$setValidity('av', this.ngModel.avResults.isValid);\n\n      // store violations\n      this.ngModel.avViolations = this.ngModel.avResults.violations;\n\n      // record the id and violation count in the av-form controller.  this determines if the form is\n      // valid if sum of violations for all form inputs === zero\n      this.avValForm.record(this.ngModel.avId, this.ngModel.avResults.violations.length);\n\n      // remove violation keys that are no longer falsy\n      angular.forEach(this.ngModel.$error, function(value, key) {\n\n        if(_.indexOf(validationKeys, key) === -1 && key.lastIndexOf('av-', 0) === 0) {\n          self.ngModel.$setValidity(key, true);\n        }\n      });\n    };\n\n    this.updateView = function() {\n      if(this.ngModel.$dirty || $scope.avValShow) {\n        avValAdapter.element($element, this.ngModel, this.ngModel.avResults.isValid);\n        avValAdapter.message($element, this.ngModel);\n      }\n    };\n\n    this.validate = function(value) {\n\n      $log.info('validating value [' + value + ']');\n\n      var rulesKey = self.avValForm.rulesKey;\n      var results = avVal.validate(rulesKey, $element, value, self.rule);\n\n      // validate function is called within the context of angular so fn.call and set the context\n      // to \"this\"\n      self.updateModel.call(self, results);\n      self.updateView.call(self);\n\n      return results;\n    };\n\n    this.validateModel = function(value) {\n\n      self.validate(value, true);\n      return value;\n\n    };\n\n    this.validateView = function(value) {\n\n      var results = self.validate(value);\n\n      if(self.avValForm.avValInvalid || self.avValInvalid) {\n        // allows invalid data from view to update model for dirty saving\n        return value;\n      }\n\n      // prevent invalid data from view to update model\n      return results.isValid ? value : undefined;\n\n    };\n\n    this.onDebounce = function() {\n\n      var value = $element.val().trim();\n\n      if(this.isCheckbox()) {\n        this.ngModel.$setViewValue($element[0].checked);\n      } else if(this.isRadio()) {\n        this.ngModel.$setViewValue($attrs.value);\n      }else {\n        this.ngModel.$setViewValue(value);\n      }\n\n    };\n\n    this.isRadio = function() {\n      return $element.is('input') && $attrs.type === 'radio';\n    };\n\n    this.isCheckbox = function() {\n      return $element.is('input') && $attrs.type === 'checkbox';\n    };\n\n    this.reset = function() {\n\n      var violations = this.ngModel.avResults.violations;\n      violations.splice(0, violations.length);\n\n      avValAdapter.message($element, this.ngModel);\n      avValAdapter.reset($element);\n\n    };\n\n    this.event = function(event, avValDebounce) {\n\n      var self = this;\n\n      $element.unbind('input');\n\n      var debounce;\n\n      $element.on(event, function() {\n\n        // https://github.com/angular/angular.js/blob/v1.2.27/src/ng/directive/input.js#L508\n        if($sniffer.msie <= 11 && (event || noEvent).type === 'input' && $element[0].placeholder !== placeholder) {\n          placeholder = $element[0].placeholder;\n          return;\n        }\n\n        $timeout.cancel(debounce);\n        debounce = $timeout(function() {\n          $scope.$apply(function() {\n            self.onDebounce();\n          });\n        }, avValDebounce);\n\n      });\n\n    };\n\n  });\n\n  // Events:\n  //\n  //  click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown\n  //  keyup keypress submit focus blur copy cut paste\n  availity.ui.directive('avValField', function($log, $timeout, avVal, avValAdapter, AV_VAL) {\n    return {\n      restrict: 'A',\n      controller: 'AvValFieldController',\n      require: ['^avValForm', 'ngModel', 'avValField'],\n      scope: {\n        avValDebounce: '@?',\n        avValOn: '@?',\n        avValShow: '=?'\n      },\n      link: function(scope, element, attrs, controllers) {\n\n        var rule = attrs.avValField;\n        var avValForm = controllers[0];\n        var ngModel = controllers[1];\n        var avValField = controllers[2];\n\n        var avValOn = scope.avValOn || avValForm.avValOn || 'input';\n\n        if(!ngModel && !rule) {\n          $log.error('avValField requires ngModel and a validation rule to run.');\n          return;\n        }\n\n        // Allows fields to update with invalid data for dirty form saving\n        avValField.avValInvalid = attrs.avValInvalid || false;\n\n        // CACHE THE MODEL\n        avValField.setNgModel(ngModel);\n\n        avValField.avValForm(avValForm);\n\n        avValField.setRule(rule);\n\n        avValField.createId();\n\n        // DEBOUNCE\n        var avValDebounce = parseInt(scope.avValDebounce || (avValForm.avValDebounce || AV_VAL.DEBOUNCE), 10);\n        avValDebounce = _.isNumber(avValDebounce) ? avValDebounce : AV_VAL.DEBOUNCE;\n\n        var debounceAllowed = !avValField.isRadio() && !avValField.isCheckbox() && avValOn !== 'blur';\n\n        if(!debounceAllowed) {\n          avValDebounce = 0;\n        }\n\n        // EVENT LISTENER\n        avValField.event(avValOn, avValDebounce);\n\n        // (view to model)\n        ngModel.$parsers.push(avValField.validateView);\n\n        // (model to view) - added to beginning of array because formatters\n        // are processed in reverse order thus allowing the model to be transformed\n        // before the validation framework check for validity.\n        ngModel.$formatters.unshift(avValField.validateModel);\n\n        scope.$on(AV_VAL.EVENTS.REVALIDATE, function() {\n          avValField.validate(ngModel.$viewValue);\n        });\n\n        // SUBMITTED EVENT\n        scope.$on(AV_VAL.EVENTS.SUBMITTED, function() {\n          ngModel.$dirty = true;\n          avValField.validate(ngModel.$viewValue);\n        });\n\n        // - Removes all errors on page,\n        // - does not reset view or model values.  This is to be handled by the app.\n        scope.$on(AV_VAL.EVENTS.RESET, function () {\n          avValField.reset();\n        });\n\n        scope.$on('$destroy', function () {\n          avValForm.unrecord(ngModel.avId);\n        });\n\n      }\n    };\n  });\n\n\n})(window);\n\n// Source: \\lib\\ui\\popover\\popover.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.provider('avPopoverConfig', function() {\n\n    var config = {\n      showOnLoadHideDelay: 10000\n    };\n\n    this.set = function(options) {\n      angular.extend(config, options);\n    };\n\n    this.$get = function() {\n      return angular.copy(config);\n    };\n  });\n\n  availity.ui.constant('AV_POPOVER', {\n    NAME: 'bs.popover'\n  });\n\n  availity.ui.controller('AvPopoverController', function($element, $scope, AV_POPOVER, $timeout, avPopoverConfig) {\n    this.options = angular.extend({}, avPopoverConfig);\n\n    this.listeners = function() {\n\n      var self = this;\n\n      angular.forEach(['show', 'shown', 'hide', 'hidden'], function(name) {\n        $element.on(name + '.bs.popover', function(ev) {\n          $scope.$emit('av:popover:' + name, ev);\n        });\n      });\n\n      $scope.$on('destroy', function() {\n        self.destroy();\n      });\n    };\n\n    this.plugin = function() {\n      return $element.data(AV_POPOVER.NAME);\n    };\n\n    this.show = function() {\n      $element.popover('show');\n    };\n\n    this.hide = function() {\n      $element.popover('hide');\n    };\n\n    this.toggle = function() {\n      $element.popover('toggle');\n    };\n\n    this.destroy = function() {\n      $element.popover('destroy');\n    };\n\n\n    this.init = function() {\n\n      this.listeners();\n\n      if($scope.showOnLoad) {\n\n        this.show();\n\n        if($scope.delay && $scope.delay.hide) {\n          $timeout(this.hide, $scope.delay.hide, false);\n          return;\n        }\n        // If no delay is found or cannot be parsed, set a default timeout so that the popover doesn't stick around forever\n        $timeout(this.hide, this.options.showOnLoadHideDelay, false);\n      }\n    };\n\n\n  });\n\n  availity.ui.directive('avPopover', function() {\n    return {\n      restrict: 'A',\n      controller: 'AvPopoverController',\n      scope: {\n        showOnLoad: '=',\n        delay: '='\n      },\n      link: function(scope, element, attrs, avPopover) {\n\n        var options = {};\n\n        scope.$evalAsync(function() {\n          element.popover(angular.extend({}, options, {\n            html: true\n          }));\n          avPopover.init();\n        });\n      }\n    };\n  });\n\n})(window);\n\n// Source: \\lib\\ui\\validation\\container.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('avValContainerController', function($scope, $timeout) {\n\n    this.message = function(ngModel) {\n\n      var message = null;\n      if(ngModel.avResults.violations.length && ngModel.avResults.violations[0].message) {\n        message = ngModel.avResults.violations[0].message;\n      }else {\n        message = null;\n      }\n\n      // $timeout is needed to update the UI from $broadcast events\n      $timeout(function() {\n        $scope.messages.message = message;\n      });\n\n    };\n\n  });\n\n  availity.ui.directive('avValContainer', function() {\n    return {\n      restrict: 'A',\n      controller: 'avValContainerController',\n      template: '<p class=\"help-block\" data-ng-bind-html=\"messages.message\"></p>',\n      replace: true,\n      scope: {\n\n      },\n      link: function(scope) {\n        scope.messages = _.extend({}, scope.messages, { message: null, id: null });\n      }\n    };\n  });\n\n\n})(window);\n\n// Source: \\lib\\ui\\validation\\adapter-bootstrap.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BOOTSTRAP_ADAPTER', {\n    CLASSES: {\n      SUCCESS: 'has-success',\n      WARNING: 'has-warning',\n      ERROR: 'has-error',\n      FEEDBACK: 'has-feedback',\n      HELP: 'help-block',\n      FORM_GROUP: '.form-group:first',\n      NAVBAR: 'navbar-fixed-top'\n    },\n    SELECTORS: {\n      CONTAINER: 'container-id',\n      DATA_CONTAINER: 'data-container-id'\n    },\n    CONTROLLER: '$avValContainerController'\n  });\n\n  availity.ui.factory('avValBootstrapAdapter', function(AV_BOOTSTRAP_ADAPTER, $timeout, $log) {\n\n    return {\n\n      element: function(element, ngModel) {\n        if(ngModel.$valid) {\n          element.parents(AV_BOOTSTRAP_ADAPTER.CLASSES.FORM_GROUP).removeClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n        }else {\n          element.parents(AV_BOOTSTRAP_ADAPTER.CLASSES.FORM_GROUP).addClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n        }\n      },\n\n      reset: function(element) {\n        element.parents(AV_BOOTSTRAP_ADAPTER.CLASSES.FORM_GROUP).removeClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n      },\n\n      message: function(element, ngModel) {\n\n        var selector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.HELP\n        ].join('');\n\n        var $el = $(element);\n\n        var target = $el.attr(AV_BOOTSTRAP_ADAPTER.SELECTORS.CONTAINER);\n        target = target || $el.attr(AV_BOOTSTRAP_ADAPTER.SELECTORS.DATA_CONTAINER);\n        // default to siblings\n        target = target ? $('#' + target) : $el.siblings(selector);\n\n        if(target.length === 0) {\n          $log.warn('avValBootstrapAdapter could not find validation container for {0}', [element]);\n          return;\n        }\n\n        var el = target[0];\n        $el = angular.element(el);\n        var avValModel = $el.data(AV_BOOTSTRAP_ADAPTER.CONTROLLER); // get the av val message controller\n        if(avValModel) {\n          avValModel.message(ngModel);\n        }\n      },\n\n      scroll: function(form) {\n\n        // Bootstrap fixed navbars causes bad scroll-to offsets so find them all\n        var navbarSelector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.NAVBAR\n        ].join('');\n\n        // Add up all the heights to find the true offset\n        var offset = 0;\n        $(navbarSelector).each(function() {\n          offset += $(this).outerHeight();\n        });\n\n        var selector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR,\n          ':first'\n        ].join('');\n\n        var $target = $(form).find(selector);\n        $timeout(function() {\n          // scroll to offset top of first error minus the offset of the navbars\n          $('body, html').animate({scrollTop: $target.offset().top - offset}, 'fast');\n        }, 0, false);\n      }\n    };\n  });\n\n\n})(window);\n\n// Source: \\lib\\ui\\validation\\adapter.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_VAL_ADAPTER', {\n    DEFAULT: 'avValBootstrapAdapter'\n  });\n\n  availity.ui.provider('avValAdapter', function() {\n\n    var that = this;\n\n    this.setAdapter = function(adapter) {\n      this.adapter = adapter;\n    };\n\n    this.$get = function(AV_VAL_ADAPTER, $injector) {\n\n      var Adapter = function() {\n        var adapterName = that.adapter || AV_VAL_ADAPTER.DEFAULT;\n        this.adapter = $injector.get(adapterName);\n      };\n\n      var proto = Adapter.prototype;\n\n      proto.element = function(element, ngModel) {\n        this.adapter.element(element, ngModel);\n      };\n\n      proto.reset = function(element) {\n        this.adapter.reset(element);\n      };\n\n      proto.message = function(element, ngModel) {\n        this.adapter.message(element, ngModel);\n      },\n\n      proto.scroll = function(form) {\n        this.adapter.scroll(form);\n      };\n\n      return new Adapter();\n    };\n  });\n\n})(window);\n\n// Source: \\lib\\ui\\dropdown\\dropdown.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.provider('avDropdownConfig', function() {\n\n    var config = {\n      closeOnResize: true,\n      dropdownAutoWidth: true,\n      minimumResultsForSearch: 5\n    };\n\n    this.set = function(options) {\n      angular.extend(config, options);\n    };\n\n    this.$get = function() {\n      return angular.copy(config);\n    };\n  });\n\n  availity.ui.constant('AV_DROPDOWN', {\n    OPTIONS: [\n      'width',\n      'minimumInputLength',\n      'maximumInputLength',\n      'minimumResultsForSearch',\n      'maximumSelectionSize',\n      'placeholderOption',\n      'separator',\n      'allowClear',\n      'multiple',\n      'closeOnSelect',\n      'openOnEnter',\n      'id',\n      'matcher',\n      'sortResults',\n      'formatSelection',\n      'formatResult',\n      'formatResultCssClass',\n      'formatNoMatches',\n      'formatSearching',\n      'formatAjaxError',\n      'formatInputTooShort',\n      'formatInputTooLong',\n      'formatSelectionTooBig',\n      'formatLoadMore',\n      'createSearchChoice',\n      'createSearchChoicePosition',\n      'initSelection',\n      'tokenizer',\n      'tokenSeparators',\n      'query',\n      'ajax',\n      'data',\n      'tags',\n      'containerCss',\n      'containerCssClass',\n      'dropdownCss',\n      'dropdownCssClass',\n      'dropdownAutoWidth',\n      'adaptContainerCssClass',\n      'adaptDropdownCssClass',\n      'escapeMarkup',\n      'selectOnBlur',\n      'loadMorePadding',\n      'nextSearchTerm',\n      'correlationId',\n      'eventListeners'\n    ]\n  });\n\n\n  availity.ui.controller('AvDropdownController', function($element, $attrs, AV_UI, AV_DROPDOWN, avDropdownConfig, $log, $scope, $timeout, $parse) {\n\n    var self = this;\n    this.options = {};\n    this.match = null;\n    this.ngModel = null;\n\n    this.init = function() {\n\n      self.options = angular.extend({}, avDropdownConfig);\n\n      _.forEach($attrs, function(value, key) {\n        if(_.contains(AV_DROPDOWN.OPTIONS, key.replace('data-', ''))) {\n          self.options[key] = $scope.$eval(value);\n        }\n      });\n\n      if(this.isRemoteMultiple()) {\n        self.options.multiple = angular.isDefined($attrs.multiple);\n      }\n\n      self.multiple = angular.isDefined($attrs.multiple);\n\n      if(self.options.query) {\n\n        self.queryFn = self.options.query;\n        // Function used to query results for the search term.\n        self.options.query = self.query;\n        // Function used to get the id from the choice object or a string representing the key under which the id is stored.\n        self.options.id = self.getId;\n      }\n\n    };\n\n    this.isRemoteMultiple = function() {\n      if(angular.isDefined($attrs.multiple) && $element.get(0).tagName.toLowerCase() === 'input') {\n        return true;\n      }\n      return false;\n    };\n\n    this.setRemoteViewValue = function(e) {\n\n      var values = this.ngModel.$viewValue;\n\n      if(!angular.isArray(values) || !angular.isObject(values)) {\n        values = [];\n      }\n\n      if(e.added) {\n        // Adding to collection\n        values.push(e.added);\n      } else {\n        // Removing from collection\n        var index = _.findIndex(values, function(value) {\n          return  _.matches(e.removed)(value);\n        });\n        values.splice(index, 1);\n      }\n\n      this.ngModel.$setViewValue(values);\n\n    };\n\n    this.setViewValue = function(e) {\n      this.ngModel.$setViewValue(e.added);\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.getSelected = function(model) {\n\n      if(self.options.query) {\n        return 0;\n      }\n\n      if (!this.collection) {\n        // If we're not using ng-options, the model value is just the raw value of the option, rather than an index, so return it as is.\n        return model;\n      }\n\n      var items = this.collection($scope);\n\n      var index = _.findIndex(items, function(item) {\n        if (!self.valueFn) {\n          return angular.equals(item, model);\n        } else {\n          var locals = {};\n          locals[self.valueName] = item;\n          var value = self.valueFn($scope, locals);\n          return angular.equals(value, model);\n        }\n      });\n\n      return index;\n\n    };\n\n    // Result:\n    //\n    // {\n    //   \"code\": \"252Y00000X\",\n    //   \"value\": \"AGENCIES,EARLY INTERVENTION PROVIDER AGENCY,NOT APPLICABLE|Agency\",\n    //   \"id\": \"252Y00000X\"\n    // }\n    this.getId = function(result) {\n      return result.id;\n    };\n\n    // Wrapper around the query function for Select2.  When the promise resolves\n    // the callback\n    this.query = function(options) {\n\n      self.queryFn(options).then(function(response) {\n\n        // Callback function that should be called with the result object. The result object:\n        //\n        // result.results (object) - Array of result objects. The default renderers\n        //    expect objects with id and text keys. The id property is required,\n        //    even if custom renderers are used. The object may also contain a children\n        //    key if hierarchical data is displayed. The object may also contain a disabled\n        //    boolean property indicating whether this result can be selected.\n        //\n        // result.more (boolean) - true if more results are available for the current\n        //    search term.\n        //\n        // results.context (object) - A user-defined object that should be made available\n        //    as the context parameter to the query function on subsequent queries to load\n        //    more result pages for the same search term. See the description of\n        //    options.context parameter.\n        options.callback({more: response.more, results: response.results});\n      });\n    };\n\n    this.setValue = function() {\n\n      var viewValue = self.ngModel.$viewValue;\n      var selected = null;\n      if(viewValue !== null && viewValue !== undefined) {\n        selected = this.getSelected(viewValue);\n      }\n\n      // var apply = scope.$evalAsync || $timeout;\n      $timeout(function() {\n        $element\n          .select2('val',  (selected === null || selected === 'undefined') ? '' : selected); // null === '' for Select2\n      });\n    };\n\n    this.getMultiSelected = function(viewValue) {\n\n      var indices = [];\n\n      if($element.get(0).tagName.toLowerCase() !== 'input') {\n        var options = this.collection($scope);\n\n        _.each(viewValue, function(savedObject) {\n          var index = _.findIndex(options, function(value) {\n            var temp = angular.copy(savedObject); // remove hashkeys for comparison\n            return _.matches(temp)(value);\n          });\n          indices.push(index);\n        });\n\n      } else {\n\n        var inputViewValues = this.ngModel.$modelValue;\n\n        _.each(inputViewValues, function(savedObject) {\n\n          if(_.isUndefined(savedObject.id) ) {\n\n            if(savedObject.id || savedObject[self.options.correlationId]) {\n\n              savedObject.id = savedObject[self.options.correlationId];\n\n            } else {\n\n              throw new Error('dropdown list must have a id or a alternative value to use as a id');\n            }\n\n          }\n\n        });\n      }\n\n      if(indices.length > 0) {\n        viewValue = indices;\n      }\n\n      return viewValue;\n\n    };\n\n    this.setValues = function() {\n\n      var viewValue = self.ngModel.$viewValue;\n\n      if(!angular.isArray(viewValue)) {\n        viewValue = [];\n      }\n\n      if(!_.isEmpty(viewValue) && _.isObject(viewValue[0])) {\n        viewValue = this.getMultiSelected(viewValue);\n      }\n\n      $timeout(function() {\n        $element\n          .select2('val', viewValue);\n      });\n    };\n\n    this.ngOptions = function() {\n\n      this.match = $attrs.ngOptions.match(AV_UI.NG_OPTIONS);\n      if(!this.match) {\n        throw new Error('Invalid ngOptions for avDropdown');\n      }\n      // AV_UI.NG_OPTIONS regex will parse into arrays like below:\n      //\n      // 0: \"state.name for state in states\"\n      // 1: \"state.name\"\n      // 2: undefined\n      // 3: undefined\n      // 4: \"state\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"states\"\n      // 8: undefined\n      //\n      // 0: \"state.id as state.name for state in states\"\n      // 1: \"state.id\"\n      // 2: \"state.name\"\n      // 3: undefined\n      // 4: \"state\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"states\"\n      // 8: undefined\n      //\n      // 0: \"state.name for state in states track by state.id\"\n      // 1: \"state.name\"\n      // 2: undefined\n      // 3: undefined\n      // 4: \"state\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"states\"\n      // 8: \"state.id\"\n      //\n      // 0: \"person.fullName as (person.lastName + ', ' + person.firstName) for person in feeScheduleModel.persons\"\n      // 1: \"person.fullName\"\n      // 2: \"(person.lastName + ', ' + person.firstName)\"\n      // 3: undefined\n      // 4: \"person\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"feeScheduleModel.persons\"\n      // 8: undefined\n      //\n      this.displayFn = $parse(this.match[2] || this.match[1]); // this is the function to retrieve the text to show as\n      this.collection = $parse(this.match[7]);\n      this.valueName = this.match[4] || this.match[6];\n      this.valueFn = $parse(this.match[2] ? this.match[1] : this.valueName);\n      this.keyName = this.match[5];\n\n      $scope.$watchCollection(this.collection, function(newVal, oldVal) {\n        if(angular.equals(newVal, oldVal)) {\n          return;\n        }\n\n        self.setValue();\n\n      }, true);\n\n    };\n  });\n\n  availity.ui.directive('avDropdown', function($timeout, $log, $window) {\n\n    return {\n      restrict: 'A',\n      require: ['ngModel', 'avDropdown'],\n      controller: 'AvDropdownController',\n      link: function(scope, element, attrs, controllers) {\n\n        var ngModel = controllers[0];\n        var avDropdown = controllers[1];\n\n        avDropdown.setNgModel(ngModel);\n        avDropdown.init();\n\n        if(attrs.ngOptions ) {\n          avDropdown.ngOptions();\n        }\n\n        ngModel.$parsers.push(function(value) {\n          var parent = element.prev();\n          parent\n            .toggleClass('ng-invalid', !ngModel.$valid)\n            .toggleClass('ng-valid', ngModel.$valid)\n            .toggleClass('ng-invalid-required', !ngModel.$valid)\n            .toggleClass('ng-valid-required', ngModel.$valid)\n            .toggleClass('ng-dirty', ngModel.$dirty)\n            .toggleClass('ng-pristine', ngModel.$pristine);\n          return value;\n        });\n\n        element.on('change', function(e) {\n\n          // special case since the ajax handling doesn't bind to the model correctly\n          // this has to do with select2 (v3.5.2) using a hidden field instead of a select for ajax\n          if(avDropdown.options.query) {\n            $timeout(function() {\n              // look at moving this to the controller\n              if(avDropdown.isRemoteMultiple()) {\n                avDropdown.setRemoteViewValue(e);\n              } else {\n                avDropdown.setViewValue(e);\n              }\n\n            }, false, 0);\n          }\n\n          $log.info(e);\n\n        });\n\n        // fires ng-focus when select2-focus fires.\n        element.on('select2-focus', function() {\n          if(attrs.ngFocus) {\n            scope.$eval(scope.$eval(attrs.ngFocus));\n          }\n        });\n\n        // fires ng-blur when select2-blur occurs.\n        element.on('select2-blur', function() {\n          if(attrs.ngBlur) {\n            scope.$eval(scope.$eval(attrs.ngBlur));\n          }\n        });\n\n        // https://github.com/t0m/select2-bootstrap-css/issues/37#issuecomment-42714589\n        element.on('select2-open', function () {\n          // look for .has-success, .has-warning, .has-error\n          // (really look for .has-* … which is good enough for the demo page, but obviously might interfere with other CSS-classes starting with \"has-\")\n          if(element.parents('[class*=\"has-\"]').length) {\n\n            // get all CSS-classes from the element where we found \"has-*\" and collect them in an array\n            var classNames = $(this).parents('[class*=\"has-\"]')[0].className.split(/\\s+/);\n\n            // go through the class names, find \"has-\"\n            for(var i = 0; i < classNames.length; ++i) {\n              if(classNames[i].match('has-')) {\n                $('#select2-drop').addClass(classNames[i]);\n              }\n            }\n          }\n        });\n\n        var _$render = ngModel.$render;\n        ngModel.$render = function() {\n          _$render();\n\n          if(avDropdown.multiple) {\n            avDropdown.setValues();\n          }else {\n            avDropdown.setValue();\n          }\n\n        };\n\n        if(avDropdown.options.closeOnResize) {\n\n          var win = angular.element($window);\n          win.bind('resize', function() {\n            element.select2('close');\n          });\n\n        }\n\n        attrs.$observe('disabled', function (value) {\n          element.select2('enable', !value);\n        });\n\n        attrs.$observe('readonly', function (value) {\n          element.select2('readonly', !!value);\n        });\n\n        scope.$on('$destroy', function() {\n          element.off();\n          element.select2('destroy');\n        });\n\n        $timeout(function() {\n          element.select2(avDropdown.options);\n        });\n\n        // If event listeners are specified in the options, set them up here\n        if (_.get(avDropdown, 'options.eventListeners')) {\n          _.each(avDropdown.options.eventListeners, function(listener, eventId) {\n            if (_.isFunction(listener)) {\n              element.on(eventId, listener);\n            }\n          });\n        }\n      }\n    };\n  });\n\n})(window);\n\n// Source: \\lib\\ui\\datepicker\\datepicker.js\n/**\n * Inspiration https://github.com/mgcrea/angular-strap/blob/v0.7.8/src/directives/datepicker.js\n */\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.provider('avDatepickerConfig', function() {\n\n    var config = {\n      autoclose: true,\n      todayHighlight: true,\n      format: 'mm/dd/yyyy',\n      forceParse: false\n    };\n\n    this.set = function(options) {\n      angular.extend(config, options);\n    };\n\n    this.$get = function() {\n      return angular.copy(config);\n    };\n\n  });\n\n  // Options: http://bootstrap-datepicker.readthedocs.org/en/latest/options.html\n  availity.ui.constant('AV_DATEPICKER', {\n    CONTROLLER: '$ngModelController',\n    ADD_ON_SELECTOR: '[data-toggle=\"datepicker\"]',\n    OPTIONS: [\n      'autoclose',\n      'beforeShowDay',\n      'beforeShowMonth',\n      'calendarWeeks',\n      'clearBtn',\n      'toggleActive',\n      'container',\n      'daysOfWeekDisabled',\n      'datesDisabled',\n      'defaultViewDate',\n      'endDate',\n      'forceParse',\n      'format',\n      'inputs',\n      'keyboardNavigation',\n      'language',\n      'minViewMode',\n      'multidate',\n      'multidateSeparator',\n      'orientation',\n      'startDate',\n      'startView',\n      'todayBtn',\n      'todayHighlight',\n      'weekStart',\n      'showOnFocus',\n      'disableTouchKeyboard',\n      'enableOnReadonly',\n      'modelFormat'\n    ],\n    DEFAULTS: {\n      MODELFORMAT: 'YYYY-MM-DD'\n    }\n  });\n\n  availity.ui.controller('AvDatepickerController', function($element, $attrs, AV_DATEPICKER, $scope, avDatepickerConfig) {\n\n    var self = this;\n    this.options = {};\n\n    this.setValue = function() {\n\n      var viewValue = self.ngModel.$viewValue;\n      var plugin = this.plugin();\n\n      if(!viewValue || !plugin) {\n        return;\n      }\n\n      plugin.setDate(viewValue);\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.findModel = function() {\n\n      var ngModel = null;\n\n      var $input = $element.find('input:first').andSelf();\n      if($input.length) {\n        ngModel = $input.data(AV_DATEPICKER.CONTROLLER);\n        this.setNgModel(ngModel);\n      }\n\n      return ngModel;\n    };\n\n    this.modelToView = function(isoWrap) {\n      var viewValue = $.fn.datepicker.DPGlobal.formatDate(isoWrap, self.options.format, 'en');\n      return viewValue;\n    };\n\n    this.wrapIsoDate = function() {\n\n      var date = self.ngModel.$modelValue;\n      var isoWrap;\n\n      if(date !== undefined && date !== null) {\n        var m = moment(date);\n        isoWrap = m.isValid() ? m.toDate() : null;\n      }\n\n      return isoWrap;\n    };\n\n    this.viewToModel = function() {\n      var format = $.fn.datepicker.DPGlobal.parseFormat(self.options.format);\n      var utcDate = $.fn.datepicker.DPGlobal.parseDate(self.ngModel.$viewValue, format, 'en');\n\n      var plugin = self.plugin();\n\n      if(!plugin) {\n        return;\n      }\n\n      // jscs: disable\n      var localDate = plugin._utc_to_local(utcDate);\n      // jscs: enable\n\n      if(self.options.modelFormat && localDate) {\n        localDate = moment(localDate).format(self.options.modelFormat);\n      }\n\n      return localDate;\n    };\n\n    this.init = function() {\n\n      self.options = angular.extend({}, avDatepickerConfig);\n\n      _.forEach($attrs, function(value, key) {\n        if(_.contains(AV_DATEPICKER.OPTIONS, key.replace('data-', ''))) {\n          self.options[key] = $scope.$eval(value);\n        }\n      });\n\n      if(self.options.modelFormat && self.options.modelFormat.toLowerCase() === 'default') {\n        self.options.modelFormat = AV_DATEPICKER.DEFAULTS.MODELFORMAT;\n      }\n    };\n\n    this.plugin = function() {\n      return $element.data('datepicker');\n    };\n\n    this.destroy = function() {\n      var plugin = this.plugin();\n      if(plugin) {\n        plugin.remove();\n        $element.data('datepicker', null);\n      }\n    };\n\n    this.hide = function() {\n      var plugin = this.plugin();\n      if(plugin) {\n        plugin.hide();\n      }\n    };\n  });\n\n  availity.ui.directive('avDatepicker', function($window, $log, AV_DATEPICKER) {\n    return {\n      restrict: 'A',\n      require: ['ngModel', 'avDatepicker'],\n      controller: 'AvDatepickerController',\n      link: function(scope, element, attrs, controllers) {\n\n        var ngModel = controllers[0];\n        var avDatepicker = controllers[1];\n\n        if(!ngModel) {\n          ngModel = avDatepicker.findModel();\n          if(!ngModel) {\n            $log.error('avDatepicker requires ngModel');\n            return;\n          }\n        }\n\n        avDatepicker.init();\n        avDatepicker.setNgModel(ngModel);\n\n        element.on('changeDate', function(e) {\n          $log.info('avDatepicker changeDate {0}', [e]);\n        });\n\n        // (view to model)\n        ngModel.$parsers.push(avDatepicker.viewToModel);\n\n        // (model to view) - added to end of formatters array\n        // because they are processed in reverse order.\n        // if the model is in Date format and send to the validation framework\n        // prior to getting converted to the expected $viewValue format,\n        // the validation will fail.\n        ngModel.$formatters.push(avDatepicker.modelToView);\n        ngModel.$formatters.push(avDatepicker.wrapIsoDate);\n\n        var _$render = ngModel.$render;\n        ngModel.$render = function() {\n          _$render();\n          avDatepicker.setValue();\n        };\n\n        var win = angular.element($window);\n\n        win.bind('scroll', function() {\n          avDatepicker.hide();\n        });\n\n        var target = element.siblings(AV_DATEPICKER.ADD_ON_SELECTOR);\n        if(target.length) {\n          target.on('click.datepicker', function() {\n            if(!element.prop('disabled')) { // Hack check for IE 8\n              element.focus();\n            }\n          });\n        }\n\n        scope.$on('destroy', function() {\n          avDatepicker.destroy();\n          if(target.length) {\n            target.off('click.datepicker');\n          }\n        });\n\n        scope.$evalAsync(function() {\n          element.datepicker(avDatepicker.options);\n        });\n      }\n    };\n  });\n})(window);\n\n// Source: \\lib\\ui\\idle\\idle-notifier.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_UI_IDLE', {\n    EVENTS: {\n      OK: 'mousedown.av.idle.notifier'\n    },\n    TEMPLATES: {\n      BASE: 'ui/idle/idle-tpl.html',\n      SESSION: 'ui/idle/idle-session-tpl.html',\n      WARNING: 'ui/idle/idle-warning-tpl.html'\n    }\n  });\n\n  availity.ui.provider('avIdleNotifier', function() {\n\n    var sessionTemplate;\n    var warningTemplate;\n    var $scope;\n\n    this.setSessionTemplate = function(template) {\n      sessionTemplate = template;\n    };\n\n    this.setWarningTemplate = function(template) {\n      warningTemplate = template;\n    };\n\n    this.$get = function(AV_IDLE, AV_UI_IDLE, $rootScope, AvModal, $document, $timeout) {\n\n      var AvIdleNotifier = function() {\n        this.listeners = [];\n        this.modal = null;\n      };\n\n      var proto = AvIdleNotifier.prototype;\n\n      proto.init = function() {\n\n        $scope = $rootScope.$new(true);\n        $scope.idle = {};\n\n        this.initListeners();\n      };\n\n      proto.initListeners = function() {\n\n        var self = this;\n        var listener = null;\n\n        // ACTIVE IDLING\n        listener = $rootScope.$on(AV_IDLE.EVENTS.IDLE_ACTIVE, function() {\n          self.showWarning();\n        });\n        this.listeners.push(listener);\n\n        // INACTIVE IDLING\n        listener = $rootScope.$on(AV_IDLE.EVENTS.IDLE_INACTIVE, function() {\n          self.hideWarning();\n        });\n        this.listeners.push(listener);\n\n        // SESSION TIMEOUT OUT\n        listener = $rootScope.$on(AV_IDLE.EVENTS.SESSION_TIMEOUT_ACTIVE, function() {\n          self.showSession();\n        });\n        this.listeners.push(listener);\n\n      };\n\n      proto.destroyListeners = function() {\n        // turn off each listener @see http://stackoverflow.com/a/14898795\n        _.each(this.listeners, function(listener) {\n          listener();\n        });\n      };\n\n      proto.showWarning = function() {\n\n        var self = this;\n\n        if(this.modal !== null) {\n          return;\n        }\n\n        $scope = $rootScope.$new(true);\n        $scope.idle = {};\n        $scope.idle.template = AV_UI_IDLE.TEMPLATES.WARNING;\n\n        this.modal = new AvModal({\n          show: true,\n          scope: $scope,\n          backdrop: 'static',\n          templateUrl: AV_UI_IDLE.TEMPLATES.BASE\n        });\n\n        $document.find('body').on(AV_UI_IDLE.EVENTS.OK, function() {\n          self.hideWarning();\n        });\n\n      };\n\n      proto.hideWarning = function() {\n        if(this.modal) {\n          this.disableBackDrop();\n          this.modal.hide();\n        }\n\n        this.modal = null;\n      };\n\n      proto.disableBackDrop = function() {\n        $document.find('body').off(AV_UI_IDLE.EVENTS.OK);\n      };\n\n      proto.showSession = function() {\n        var self = this;\n        this.disableBackDrop();\n\n        $timeout(function() {\n          $scope.idle.template = AV_UI_IDLE.TEMPLATES.SESSION;\n          $scope.idle.onSessionTimeout = _.bind(self.onSessionTimeout, self);\n        }, 0, true);\n\n      };\n\n      proto.onSessionTimeout = function() {\n        $rootScope.$broadcast(AV_IDLE.EVENTS.SESSION_TIMEOUT_REDIRECT);\n      };\n\n      return new AvIdleNotifier();\n\n    };\n\n  });\n\n  availity.ui.run(function(avIdleNotifier) {\n    avIdleNotifier.init();\n  });\n\n})(window);\n\n// Source: \\lib\\ui\\mask\\mask.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_MASK', {\n    NAME: 'inputmask',\n    DEFAULTS: {\n      date: '99/99/9999',\n      phone: '(999) 999-9999',\n      SSN:'999-99-9999'\n    }\n  });\n\n  availity.ui.directive('avMask', function($window, $log, AV_MASK) {\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function(scope, element, attrs) {\n\n        var maskType = AV_MASK.DEFAULTS[attrs['avMask']];\n        if(!maskType) {\n          maskType = attrs['avMask'];\n        }\n\n        scope.$evalAsync(function() {\n          element.inputmask(maskType);\n        });\n\n        scope.$on('$destroy', function () {\n          element.inputmask('remove');\n        });\n      }\n    };\n  });\n\n})(window);\n\n// Source: \\lib\\ui\\error-pages\\error-page.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n  var avErrorPageController = 'avErrorPageController';\n\n  var startTemplate = '<div class=\"container\"><div>';\n  var endTemplate = '<button type=\"button\" class=\"btn btn-primary\" data-ng-click=\"goBack()\"><i class=\"icon icon-left-small\"></i> Go Back</button></div></div>';\n\n  var notFoundTemplate = startTemplate + '<h1>Sorry.</h1><p><strong>We can’t seem to find the page you’re looking for.</strong><br/></p>' + endTemplate;\n  var unauthorizedTemplate = startTemplate + '<h1>Oops.</h1><p><strong>Looks like we might have asked you to do something you don’t have access to do.</strong><br/>If this task is integral your job, please contact your Primary Access Administrator (PAA).</p>' + endTemplate;\n\n\n  availity.ui.constant('AV_ERROR', {\n    PAGES: {\n      NOT_FOUND: 'av-error-not-found',\n      UNAUTHORIZED: 'av-error-unauthorized'\n    },\n    OPTIONS: {\n      sendOtherwiseToNotFound: false,\n      routes: {\n        'av-error-not-found': {\n          url: '/av-error-not-found',\n          template: notFoundTemplate,\n          controller: avErrorPageController\n        },\n        'av-error-unauthorized': {\n          url: '/av-error-unauthorized',\n          template: unauthorizedTemplate,\n          controller: avErrorPageController\n        }\n      }\n    }\n  });\n\n  availity.ui.controller(avErrorPageController, function($scope, $state, $window) {\n    $scope.data = $state.current.data;\n    $scope.goBack = function() {\n      $window.history.back();\n    };\n  });\n\n  // Factory that creates ApiResourcess\n  var AvErrorPageProvider = function(AV_ERROR, $injector) {\n\n\n    /**\n     * Configures state provider with given routes\n     * @param overrideOptions - will override any options.\n     */\n    this.configure = function(overrideOptions) {\n      var options = _.merge({}, AV_ERROR.OPTIONS, overrideOptions);\n      var $stateProvider = $injector.get('$stateProvider');\n      angular.forEach(options.routes, function(route, name) {\n        $stateProvider.state(name, route);\n      });\n      if (options.sendOtherwiseToNotFound) {\n        var $urlRouterProvider = $injector.get('$urlRouterProvider');\n        var route = options.routes[AV_ERROR.PAGES.NOT_FOUND];\n        $urlRouterProvider.otherwise(route.url);\n      }\n    };\n\n    /**\n     * Return the service\n     * @param $location\n     * @returns {{show: avErrorPageService.show, notFound: avErrorPageService.notFound, unauthorized: avErrorPageService.unauthorized}}\n     */\n    this.$get = function($state) {\n\n      var avErrorPageService = {\n        /**\n         * Main show page service\n         * @param name\n         */\n        show: function(name) {\n          $state.go(name);\n        },\n        notFound: function() {\n          return this.show(AV_ERROR.PAGES.NOT_FOUND);\n        },\n        unauthorized: function() {\n          return this.show(AV_ERROR.PAGES.UNAUTHORIZED);\n        }\n      };\n      return avErrorPageService;\n    };\n  };\n\n  availity.ui.provider('avErrorPage', AvErrorPageProvider);\n\n})\n(window);\n\n// Source: \\lib\\ui\\permissions\\has-permission.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('AvHasPermissionController', function($element, $attrs, avErrorPage) {\n    var showErrorPage= angular.isDefined($attrs.showErrorPage);\n\n    this.onSuccess = function(isAuthorized) {\n      if(isAuthorized) {\n        $element.removeClass('ng-hide');\n        $element.show();\n      } else {\n        $element.remove();\n        if (showErrorPage) {\n          avErrorPage.unauthorized();\n        }\n      }\n    };\n\n    this.onError = function() {\n      $element.remove();\n    };\n\n  });\n\n  availity.ui.directive('avHasPermission', function(avUserAuthorizations) {\n    return {\n      restrict: 'EA',\n      controller: 'AvHasPermissionController',\n      require: ['avHasPermission'],\n      link: function($scope, $element, $attr, controllers) {\n\n        var avHasPermissionController = controllers[0];\n\n        $element.hide();\n\n        $scope.$watch($attr.avHasPermission, function(permissions) {\n\n          if(!angular.isArray(permissions)) {\n            permissions = _.words('' + permissions);\n          }\n\n          avUserAuthorizations.isAnyAuthorized(permissions).then(avHasPermissionController.onSuccess, avHasPermissionController.onError);\n        });\n      }\n    };\n  });\n\n})(window);\n\n// Source: \\lib\\ui\\analytics\\analytics.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.directive('avAnalytics', function() {\n    return {\n      scope: {\n        options: '=avAnalytics'\n      },\n      controller: function($scope) {\n        this.getOptions = function() {\n          return $scope.options;\n        };\n      }\n    };\n  });\n\n  availity.ui.controller('AvAnalyticsController', function(avAnalyticsUtils, avAnalytics) {\n\n    this.onEvent = function(event, element, options) {\n\n      // convert the directive attributes into object with properties with sane defaults\n      var properties = angular.extend(\n        {\n          level: 'info',\n          label: element.text()\n        },\n        options,\n        {\n          event: event.type\n        }\n      );\n\n      // If an external link is detected\n      if(avAnalyticsUtils.isExternalLink(properties)) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      var promise = avAnalytics.trackEvent(properties);\n      promise['finally'](function() {\n        if(avAnalyticsUtils.isExternalLink(properties)) {\n          document.location = element.attr('href');\n        }\n      });\n    };\n  });\n\n  availity.ui.directive('avAnalyticsOn', function(AV_ANALYTICS, avAnalyticsUtils) {\n    return {\n      restrict: 'A',\n      controller: 'AvAnalyticsController',\n      require: ['avAnalyticsOn','?^avAnalytics'],\n      link: function(scope, element, attrs, controllers) {\n        var childCtrl = controllers[0];\n        var parentCtrl = {};\n        var parentOptions = {};\n\n        if (controllers[1])  {\n          parentCtrl = controllers[1];\n          parentOptions = parentCtrl.getOptions();\n        }\n\n        var options = angular.extend(\n          {},\n          parentOptions,\n          avAnalyticsUtils.getProperties(attrs)\n        );\n\n        var eventType = attrs.avAnalyticsOn || AV_ANALYTICS.EVENTS.DEFAULT;\n\n        element.on(eventType, function(event) {\n          childCtrl.onEvent(event, element, options);\n        });\n      }\n    };\n  });\n})(window);\n\n// Source: \\lib\\ui\\placeholder\\placeholder.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.requires.push('ng.shims.placeholder');\n\n  availity.ui.config(function($provide) {\n\n    $provide.decorator('placeholderDirective', ['$delegate', '$log', function($delegate, $log) {\n\n      var directive = $delegate[0];\n      var originalLink = directive.link;\n\n      var newLink = function(scope, element, attrs) {\n\n        if(originalLink && _.contains(_.keys(attrs), 'avMask')) {\n          $log.info('placeholder shim not running on an element due to avMask on same element');\n          return;\n        }else if(originalLink) {\n          originalLink.apply(this, arguments);\n        }\n        //else originalLink doesn't exist\n      };\n\n      directive.compile = function() {\n        return newLink;\n      };\n\n      return $delegate;\n    }]);\n\n  });\n})(window);\n\n// Source: \\lib\\ui\\breadcrumbs\\breadcrumbs.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BREADCRUMBS', {\n\n    TEMPLATE: 'ui/breadcrumbs/breadcrumbs-tpl.html'\n  });\n\n  function AvBreadcrumbsController($state) {\n\n    this.getBreadcrumb = function(breadcrumbs, state) {\n      if(!state || !state.data) {\n        return;\n      }\n\n      var breadcrumb = state.data.breadcrumb;\n      if(!breadcrumb) {\n        return;\n      }\n\n      if(breadcrumb.parent) {\n        var parentState = $state.get(breadcrumb.parent);\n\n        if(parentState) {\n          this.getBreadcrumb(breadcrumbs, parentState);\n        }\n      }\n      breadcrumb.state = state.name;\n      breadcrumbs.push(breadcrumb);\n    };\n\n    this.getBreadcrumbs = function() {\n      var breadcrumbs = [];\n      this.getBreadcrumb(breadcrumbs, $state.current);\n      return breadcrumbs;\n    };\n\n  }\n\n  AvBreadcrumbsController.$inject = ['$state'];\n  availity.ui.controller('AvBreadcrumbsController', AvBreadcrumbsController);\n\n  function avBreadcrumbs(AV_BREADCRUMBS) {\n    return {\n      restrict: 'EA',\n      replace: true,\n      templateUrl: AV_BREADCRUMBS.TEMPLATE,\n      controller: 'AvBreadcrumbsController',\n      link: function(scope, element, attrs, avBreadcrumbs) {\n        scope.breadcrumbs = avBreadcrumbs.getBreadcrumbs();\n\n        scope.$on('$stateChangeSuccess', function() {\n          scope.breadcrumbs = avBreadcrumbs.getBreadcrumbs();\n        });\n      }\n    };\n  }\n\n  avBreadcrumbs.$inject = ['AV_BREADCRUMBS'];\n  availity.ui.directive('avBreadcrumbs', avBreadcrumbs);\n\n})(window);\n\n// Source: \\lib\\ui\\filters\\approximate.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.filter('avApproximate', function() {\n    var pow = Math.pow;\n    var floor = Math.floor;\n    var abs = Math.abs;\n    var log = Math.log;\n\n    function round(number, precision) {\n      var prec = pow(10, precision);\n      return Math.round(number * prec) / prec;\n    }\n\n    return function (number, precision) {\n      precision = precision || 0;\n      var base = floor(log(abs(number)) / log(1000));\n      var unit = 'kMGTPE'[base - 1];\n      return unit ? round(number / pow(1000, base), precision) + unit : (number || 0);\n    };\n  });\n\n})(window);\n\n// Source: \\lib\\ui\\badge\\badge.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BADGE', {\n    COLOR: null,\n    DEFAULT_CLASS: 'badge',\n    SHOW_WHEN_ZERO: false,\n    TEMPLATE: 'ui/badge/badge-tpl.html'\n  });\n\n  function badgeDirective(AV_BADGE) {\n\n    return {\n      scope: {\n        color: '@',\n        count: '=avBadge',\n        showWhenZero: '@'\n      },\n      templateUrl: AV_BADGE.TEMPLATE,\n      link: function(scope, element) {\n        scope.color = scope.color || AV_BADGE.COLOR;\n        scope.showWhenZero = scope.showWhenZero || AV_BADGE.SHOW_WHEN_ZERO;\n\n        var classes = [];\n        classes.push(AV_BADGE.DEFAULT_CLASS);\n        if(scope.color) {\n          classes.push(scope.color);\n        }\n\n        element.addClass(classes.join(' '));\n      }\n    };\n  }\n\n  badgeDirective.$inject = ['AV_BADGE'];\n  availity.ui.directive('avBadge', badgeDirective);\n\n})(window);\n\n// Source: \\lib\\ui\\labels\\removable-label.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_REMOVABLE_LABEL', {\n    TEMPLATE: 'ui/labels/removable-label-tpl.html'\n  });\n\n  availity.ui.directive('avRemovableLabel', function(AV_REMOVABLE_LABEL) {\n    return {\n      templateUrl: AV_REMOVABLE_LABEL.TEMPLATE,\n      transclude: true,\n      scope: {\n        removeValue: '=',\n        onRemove: '&'\n      },\n      link: function(scope, element, attrs) {\n        element.addClass('label-remove');\n        scope.removeLabel = function() {\n          if(!attrs.disabled) {\n            scope.onRemove()(scope.removeValue);\n          }\n        };\n      }\n    };\n  });\n\n})(window);\n\n// Source: \\lib\\ui\\animation\\loader.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_LOADER', {\n\n    TEMPLATES: {\n      LOADER: 'ui/animation/loader-tpl.html'\n    }\n\n  });\n\n  availity.ui.controller('AvLoaderController', function($element) {\n\n    var self = this;\n    var active;\n\n    this.start = function() {\n      active = true;\n      this.animate();\n    };\n\n    this.animate = function() {\n\n      $element\n        .find('.loading-bullet')\n        .velocity('transition.slideRightIn', { stagger: 250 })\n        .velocity({ opacity: 0 }, {\n          delay: 750,\n          duration: 500,\n          complete: function() {\n            if(active) {\n              setTimeout(function() {self.animate();}, 500);\n            } else {\n              self.endAnimation();\n            }\n          }\n        });\n\n    };\n\n    this.endAnimation = function() {\n      $element.find('.loading-bullet').velocity('stop', true);\n      $element.removeData();\n    };\n\n    this.stop = function() {\n      active = false;\n    };\n\n  });\n\n  availity.ui.directive('avLoader', function(AV_LOADER) {\n    return {\n      restrict: 'A',\n      replace: true,\n      controller: 'AvLoaderController',\n      require: 'avLoader',\n      templateUrl: AV_LOADER.TEMPLATES.LOADER,\n      link: function(scope, element, attr, avLoader) {\n\n        if(!attr.delay) {\n          avLoader.start();\n        }\n\n        scope.$on('$destroy', function() {\n          avLoader.stop();\n        });\n\n      }\n    };\n  });\n\n})(window);\n\n// Source: \\lib\\ui\\block\\block.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BLOCK', {\n    TEMPLATES: {\n      BLOCK: 'ui/block/block-tpl.html'\n    }\n  });\n\n  var getLoaderController = function(blockId) {\n    var el = $('[data-block-ui=\"' + blockId + '\"]') || $('[block-ui=\"' + blockId + '\"]');\n    if(el) {\n      return el.find('[data-av-loader]').controller('avLoader');\n    }\n  };\n\n  var triggerLoaderController = function(id, instance, fn) {\n\n    var controller = instance.loaderController;\n    if(!controller) {\n      controller = getLoaderController(id);\n      instance.loaderController = controller;\n    }\n    if(controller && _.isFunction(controller[fn])) {\n      controller[fn]();\n    }\n\n  };\n\n  var triggerInstance = function(id, instance, origFn, loaderFn) {\n    triggerLoaderController(id, instance, loaderFn);\n    origFn.apply(instance);\n  };\n\n  var modifyBlockInstances = function(id, instance) {\n\n    var origStartFn = instance.start;\n    var origStopFn = instance.stop;\n\n    instance.start = function() {\n      triggerInstance(id, instance, origStartFn, 'start');\n    };\n\n    instance.stop = function() {\n      triggerInstance(id, instance, origStopFn, 'stop');\n    };\n\n    instance.startLoader = function() {\n      triggerLoaderController(id, instance, 'start');\n    };\n\n    instance.avModifications = true;\n  };\n\n  availity.ui.run(function($injector, $log, AV_BLOCK) {\n\n    try {\n\n      var blockUIConfig = $injector.get('blockUIConfig');\n      var blockUI = $injector.get('blockUI');\n      blockUIConfig.autoBlock = false;\n      blockUIConfig.delay = 0;\n      blockUIConfig.templateUrl = AV_BLOCK.TEMPLATES.BLOCK;\n\n      var origGetFn = blockUI.instances.get;\n      blockUI.instances.get = function(id) {\n        var instance = origGetFn(id);\n        if(!instance.avModifications) {\n          modifyBlockInstances(id, instance);\n        }\n        return instance;\n      };\n\n    } catch(e) {\n      $log.warn('blockUI is required to use av block.');\n    }\n  });\n\n})(window);\n\n// Source: \\lib\\ui\\block\\block-directive.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // Helper directive that hooks into block-ui's start-up lifecycle and starts the loader\n  availity.ui.directive('avBlockUi', function(blockUI) {\n\n    return {\n      restrict: 'A',\n      link: function($scope, $element, $attrs) {\n\n        var blockId = $attrs.avBlockUi;\n        var blockCount = $attrs.blockCount;\n        var instance = blockUI.instances.get(blockId);\n        if(blockCount > 0) {\n          instance.startLoader();\n        }\n      }\n    };\n\n  });\n\n})(window);\n\n// Source: \\lib\\ui\\tabs\\tabs.js\n/*\n* Inspired by https://github.com/angular-ui/bootstrap/blob/master/src/tabs/tabs.js\n*/\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_TABS', {\n    TEMPLATES: {\n      TABS: 'ui/tabs/tabs-tpl.html',\n      TAB: 'ui/tabs/tab-tpl.html'\n    }\n  });\n\n  function TabsController($scope) {\n\n    var self = this;\n\n    $scope.tabs = [];\n    self.tabs = $scope.tabs;\n\n    this.addTab = function(tab) {\n      self.tabs.push(tab);\n\n      if(self.tabs.length === 1) {\n        tab.active = true;\n      } else if(tab.active) {\n        self.selectTab(tab);\n      } else {\n        tab.active = false;\n      }\n    };\n\n    this.removeTab = function(tab) {\n      var index = self.tabs.indexOf(tab);\n\n      if(tab.active && self.tabs.length > 1) {\n        //If this is the last tab, select the previous tab. else, the next tab.\n        var newActiveIndex = index === self.tabs.length - 1 ? index - 1 : index + 1;\n        self.selectTab(self.tabs[newActiveIndex]);\n      }\n\n      self.tabs.splice(index, 1);\n    };\n\n    this.selectTab = function(selectedTab) {\n      angular.forEach(self.tabs, function (tab) {\n        if(tab.active && tab !== selectedTab) {\n          tab.active = false;\n          tab.onDeselect();\n        }\n      });\n\n      selectedTab.active = true;\n      selectedTab.onSelect();\n    };\n  }\n\n  TabsController.$inject = ['$scope'];\n  availity.ui.controller('AvTabsController', TabsController);\n\n  function TabsDirective(AV_TABS) {\n    return {\n      restrict: 'AE',\n      templateUrl: AV_TABS.TEMPLATES.TABS,\n      transclude: true,\n      replace: true,\n      controller: 'AvTabsController',\n      scope: true,\n      link: function(scope, element, attrs) {\n        scope.justified = !!attrs.justified;\n        scope.tabType = attrs.tabType;\n        scope.vertical = !!attrs.vertical;\n\n        if(angular.isUndefined(attrs.padContent)) {\n          scope.padContent = true;\n        }\n      }\n    };\n  }\n\n  TabsDirective.$inject = ['AV_TABS'];\n  availity.ui.directive('avTabs', TabsDirective);\n\n  function TabDirective(AV_TABS) {\n    return {\n      restrict: 'AE',\n      templateUrl: AV_TABS.TEMPLATES.TAB,\n      replace: true,\n      require: '^avTabs',\n      transclude: true,\n      scope: {\n        heading: '@',\n        template: '=',\n        templateUrl: '=',\n        onSelect: '&select',\n        onDeselect: '&deselect'\n      },\n      controller: function() {\n        // Allow avTabs to be required by other directives\n      },\n      link: function(scope, element, attrs, tabsController, transclude) {\n        scope.transcludeFn = transclude;\n\n        tabsController.addTab(scope);\n\n        scope.$on('destroy', function() {\n          tabsController.removeTab(scope);\n        });\n\n        scope.select = function() {\n          if(!scope.disabled) {\n            tabsController.selectTab(scope);\n          }\n        };\n\n        scope.$watch('active', function(active) {\n          if(active) {\n            tabsController.selectTab(scope);\n          }\n        });\n\n        if(angular.isDefined(attrs.active)) {\n          scope.active = attrs.active;\n\n          scope.$parent.$watch(attrs.active, function(active) {\n            if(active) {\n              tabsController.selectTab(scope);\n            }\n          });\n        }\n\n        if(angular.isDefined(attrs.disable)) {\n          scope.$parent.$watch(attrs.disable, function(disabled) {\n            scope.disabled = !!disabled;\n          });\n        }\n      }\n    };\n  }\n\n  TabDirective.$inject = ['AV_TABS'];\n  availity.ui.directive('avTab', TabDirective);\n\n  function TabPaneDirective(avTemplateCache, $compile) {\n    return {\n      restrict: 'AE',\n      require: '^avTabs',\n      link: function(scope, element, attrs) {\n\n        var tab = scope.$eval(attrs.avTabPane);\n\n        if(angular.isDefined(tab.template) || angular.isDefined(tab.templateUrl)) {\n          avTemplateCache.get(tab)\n          .then(function(template) {\n            element.append($compile(template)(scope));\n          });\n        } else {\n          tab.transcludeFn(tab.$parent, function(contents) {\n            angular.forEach(contents, function(node) {\n              element.append(node);\n            });\n          });\n        }\n      }\n    };\n  }\n\n  TabPaneDirective.$inject = ['avTemplateCache', '$compile'];\n  availity.ui.directive('avTabPane', TabPaneDirective);\n\n})(window);\n\n// Source: \\lib\\ui\\scroll-pagination\\scroll-pagination.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_SCROLL_PAGINATION', {\n    TEMPLATE: 'ui/scroll-pagination/scroll-pagination-tpl.html',\n    DEFAULT_OPTIONS: {\n      limit: 50,\n      offset: 0,\n      maxCached: 100,\n      loadMoreText: 'Load more items',\n      entryIdAttribute: 'id',\n      apiParams: {},\n      beforePageLoad: undefined,\n      afterPageLoad: undefined\n    }\n  });\n\n\n  availity.ui.factory('avScrollPaginationService', function($log) {\n    function AvScrollPaginationService() {\n      this.instances = {};\n    }\n\n    var proto = AvScrollPaginationService.prototype;\n\n    proto.registerInstance = function(instanceInterface, id) {\n      if (this.instances[id]) {\n        $log.warn('Found existing instance with id ' + id);\n      }\n      this.instances[id] = instanceInterface;\n    };\n\n    proto.unregisterInstance = function(id) {\n      delete this.instances[id];\n    };\n\n    proto.resetInstance = function(id) {\n      if (this.instances[id]) {\n        this.instances[id].reset();\n        return true;\n      }\n      return false;\n    };\n\n    return new AvScrollPaginationService();\n  });\n\n  availity.ui.controller('AvScrollPaginationController', function($scope, $element, $timeout, $log, AV_SCROLL_PAGINATION, blockUI, avScrollPaginationService) {\n\n    var self = this;\n\n    this.buildOptions = function() {\n      $scope._options = {};\n      _.extend($scope._options, AV_SCROLL_PAGINATION.DEFAULT_OPTIONS, $scope.options || {});\n      $scope._options.lowOffset = $scope._options.offset;\n      $scope._options.highOffset = $scope._options.offset;\n    };\n\n    var originalEntries = angular.copy($scope.entries);\n    this.buildOptions();\n\n    this.updateButtonVisibilityFlags = function(data) {\n      $scope.showNext = $scope._options.highOffset + data.count < data.totalCount;\n      $scope.showPrev = $scope._options.lowOffset > 0;\n    };\n\n    this.disableVisibilityFlags = function() {\n      $scope.showNext = false;\n      $scope.showPrev = false;\n    };\n\n    this.loadEntries = function(prepend) {\n      var block = blockUI.instances.get('scroll-pagination-block-' + $scope.avScrollPagination);\n      self.disableVisibilityFlags();\n      block.start();\n      if (_.isFunction($scope._options.beforePageLoad)) {\n        $scope._options.beforePageLoad($scope._options);\n      }\n      var params = {};\n      _.extend(params, $scope._options.apiParams, {limit: $scope._options.limit, offset: $scope._options.offset});\n      $scope.apiResource.query({params: params}).then(function(response) {\n        var responseData = self.getResponseData(response);\n        if ($scope._options.afterPageLoad) {\n          $scope._options.afterPageLoad(responseData);\n        }\n        if (responseData && responseData[$scope._options.resourceId]) {\n          self.addEntries(responseData[$scope._options.resourceId], prepend);\n        }\n        self.updateButtonVisibilityFlags(responseData);\n        block.stop();\n      }, function() {\n        $log.error('API call failed');\n        block.stop();\n      });\n    };\n\n    this.getResponseData = function(data) {\n      if (data) {\n        if ($scope._options.responseKey) {\n          var keys = $scope._options.responseKey.split('.');\n          var nestedData = data;\n          var noData = false;\n          _.each(keys, function(key) {\n            if (!noData) {\n              nestedData = nestedData[key];\n              if (!nestedData) {\n                noData = true;\n              }\n            }\n          });\n          return noData ? [] : nestedData;\n        } else {\n          return data;\n        }\n      }\n      return [];\n    };\n\n    this.addEntries = function(entries, prepend) {\n      var oldEntries = angular.copy($scope.entries);\n      if (prepend) {\n        $scope.entries.unshift.apply($scope.entries, entries);\n      } else {\n        $scope.entries.push.apply($scope.entries, entries);\n      }\n      if ($scope.entries.length > $scope._options.maxCached) {\n        var diff = $scope.entries.length - $scope._options.maxCached;\n        var trackedElementId;\n        if (prepend) {\n          $scope.entries = $scope.entries.slice(0, $scope._options.maxCached);\n          $scope._options.highOffset -= diff;\n          trackedElementId = oldEntries[oldEntries.length-diff-1] ? oldEntries[oldEntries.length-diff-1][$scope._options.entryIdAttribute] : undefined;\n        } else {\n          $scope.entries = $scope.entries.slice(diff, $scope.entries.length);\n          $scope._options.lowOffset += diff;\n          trackedElementId = oldEntries[diff] ? oldEntries[diff][$scope._options.entryIdAttribute] : undefined;\n        }\n        self.autoscroll(trackedElementId, prepend);\n      }\n    };\n\n    this.autoscroll = function(trackedElementId, prepend) {\n      if (trackedElementId) {\n        var trackedElement = $element.find('#'+trackedElementId);\n        var trackedElementTop = trackedElement.offset().top;\n        $timeout(function() {\n          var newScrollTop = $element.scrollTop() + trackedElement.offset().top - trackedElementTop;\n          $element.animate({scrollTop: newScrollTop}, 0);\n        }, 0, false);\n      } else {\n        $timeout(function() {\n          if (prepend) {\n            $element.animate({scrollTop: $element.prop('scrollHeight')}, 0);\n          } else {\n            $element.animate({scrollTop: 0}, 0);\n          }\n        }, 0, false);\n      }\n    };\n\n    this.loadPrev = function() {\n      $scope._options.lowOffset -= $scope._options.limit;\n      $scope._options.offset = $scope._options.lowOffset;\n      self.loadEntries(true);\n    };\n\n    this.loadNext = function() {\n      $scope._options.highOffset += $scope._options.limit;\n      $scope._options.offset = $scope._options.highOffset;\n      self.loadEntries();\n    };\n\n    avScrollPaginationService.registerInstance({\n      reset: function() {\n        $element.animate({scrollTop: 0}, 0);\n        $scope.entries = angular.copy(originalEntries);\n        self.buildOptions();\n        self.loadEntries();\n      }},\n      $scope.avScrollPagination\n    );\n\n    $scope.$on('$destroy', function() {\n      avScrollPaginationService.unregisterInstance($scope.avScrollPagination);\n    });\n\n    $scope.loadPrev = self.loadPrev;\n    $scope.loadNext = self.loadNext;\n\n    this.loadEntries();\n  });\n\n\n\n  availity.ui.directive('avScrollPagination', function($log, AV_SCROLL_PAGINATION) {\n    return {\n      restrict: 'A',\n      controller: 'AvScrollPaginationController',\n      transclude: true,\n      templateUrl: AV_SCROLL_PAGINATION.TEMPLATE,\n      scope: {\n        apiResource: '=',\n        entries: '=',\n        options: '=',\n        avScrollPagination: '@'\n      },\n      link: function($scope) {\n        if (!$scope.avScrollPagination) {\n          $log.error('Directive must include an id');\n        }\n      }\n    };\n  });\n\n})(window);\n\n// Source: \\lib\\ui\\dimmer\\dimmer.js\n// Original => http://bootsnipp.com/snippets/78VV\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.provider('avDimmerConfig', function() {\n\n    var config = {\n      animationConfig: {\n        duration: 250\n      },\n      showAnimation: 'fadeIn',\n      showEvent: 'mouseenter',\n      hideAnimation: 'fadeOut',\n      hideEvent: 'mouseleave',\n      overlaySelector: '.dimmer-content'\n    };\n\n    this.set = function(options) {\n      angular.extend(config, options);\n    };\n\n    this.$get = function() {\n      return angular.copy(config);\n    };\n\n  });\n\n  availity.ui.directive('avDimmer', function(avDimmerConfig) {\n    return {\n      link: function(scope,  elm, attrs) {\n        var config = angular.extend({}, avDimmerConfig, attrs.config);\n\n        elm.on(config.showEvent, function() {\n          elm.find(config.overlaySelector).velocity(config.showAnimation, config.animationConfig);\n        }).on(config.hideEvent, function() {\n          elm.find(config.overlaySelector).velocity(config.hideAnimation, config.animationConfig);\n        });\n\n        scope.$on('$destroy', function() {\n          elm.off();\n        });\n      }\n    };\n  });\n\n})(window);\n\n//# sourceMappingURL=maps/availity-angular-ui.js.map\n","/*global module*/\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity || {};\n\n  availity.MODULE_UI = 'availity.ui';\n  availity.ui = angular.module(availity.MODULE_UI, ['ng', 'ngSanitize']);\n\n  availity.ui.constant('AV_UI', {\n    // jscs: disable\n    NG_OPTIONS: /^\\s*([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?(?:\\s+group\\s+by\\s+([\\s\\S]+?))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+([\\s\\S]+?)(?:\\s+track\\s+by\\s+([\\s\\S]+?))?$/\n    // jscs: enable\n  });\n\n  if(typeof module !== 'undefined' && module.exports) {\n    module.exports = availity;\n  }\n\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.factory('avTemplateCache', function($q, $templateCache, $http) {\n\n    return {\n\n      get: function(options) {\n\n        var valid = !options.template || !options.templateUrl;\n\n        if(!valid) {\n          throw new Error('Either options.template or options.templateUrl must be defined for avTemplateCache');\n        }\n\n        return options.template ? $q.when(options.template) :\n          $http.get(options.templateUrl, {cache: $templateCache})\n            .then(function(result) {\n              return result.data;\n            });\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_MODAL', {\n\n    OPTIONS: {\n      scope: null,\n      controller: null,\n      controllerAs: null,\n      locals: null,\n      templateUrl: null,\n      template: null,\n      id: null,\n      container: null,\n\n      // Bootstrap defaults\n      keyboard: true,\n      backdrop: true,\n      show: false,\n      remote: false\n    },\n\n    EVENTS: {\n      SHOW: 'show.av.modal',\n      SHOWN: 'shown.av.modal',\n      HIDE: 'hide.av.modal',\n      HIDDEN: 'hidden.av.modal'\n    },\n\n    NAMESPACE: {\n      MODAL: 'bs.modal'\n    },\n\n    BS_EVENTS:  {\n      SHOW: 'show.bs.modal',\n      SHOWN: 'shown.bs.modal',\n      HIDE: 'hide.bs.modal',\n      HIDDEN: 'hidden.bs.modal'\n    },\n\n    TEMPLATES: {\n      MODAL: 'ui/modal/modal-tpl.html'\n    }\n  });\n\n  availity.ui.factory('avModalManager', function() {\n\n    var AvModalManager = function() {\n      this.instances = [];\n    };\n\n    var proto = AvModalManager.prototype;\n\n    proto.add = function(id) {\n      this.instances.push(id);\n    };\n\n    proto.remove = function(id) {\n      this.instances = _.without(this.instances, id);\n    };\n\n    proto.closeAll = function() {\n\n      _.forEach(this.instances, function(id) {\n\n        var $el = $('#' + id);\n\n        if(!$el) {\n          return;\n        }\n\n        var bsModal = $el.data('bs.modal');\n        if(bsModal) {\n          bsModal.removeBackdrop();\n          bsModal.$body.removeClass('modal-open');\n          bsModal.resetAdjustments();\n          bsModal.resetScrollbar();\n        }\n\n        var avModal = $el.data('AvModal');\n        if(avModal) {\n          avModal.destroy();\n        }\n\n      });\n    };\n\n    return new AvModalManager();\n\n  });\n\n  var ModalFactory = function($rootScope, $timeout, $compile, $controller, $log, AV_MODAL, avTemplateCache, $q, avModalManager) {\n\n    var Modal = function(options) {\n\n      var self = this;\n\n      this.templateDefer = $q.defer();\n      this.templatePromise = this.templateDefer.promise;\n\n      this.options = this._buildOptions(options);\n\n      avTemplateCache.get(options).then(function(template) {\n        self.options.template = template;\n        self._build();\n      });\n\n    };\n\n    Modal.create = function(options) {\n      return new Modal(options);\n    };\n\n    var proto = Modal.prototype;\n\n    proto._buildOptions = function (userOptions) {\n      var options = angular.extend({}, AV_MODAL.OPTIONS, userOptions);\n\n      if (!options.scope) {\n        options.scope = $rootScope.$new();\n      }\n\n      if (options.controller) {\n        var locals = angular.extend({ $scope: options.scope }, options.locals);\n\n        var controller = $controller(options.controller, locals);\n\n        if (options.controllerAs) {\n          if (options.scope[options.controllerAs]) {\n            $log.warn('Overwriting ' + options.controllerAs + 'on scope with AvModal controllerAs, consider passing in no scope, or specifying a different controllerAs than the existing controller');\n          }\n          options.scope[options.controllerAs] = controller;\n        }\n      }\n\n      return options;\n    };\n\n    proto._build = function() {\n\n      var self = this;\n\n      var scope = this.options.scope;\n      this.$element = angular.element(this.options.template);\n\n      this._createId();\n\n      this._scope();\n\n      $compile(this.$element)(scope);\n\n      $timeout(function() {\n        self._init();\n      }, 0, true);\n\n      // Append to container or <body>\n      this.options.container ? this.$element.appendTo(this.options.container) : this.$element.appendTo('body');\n\n    };\n\n    proto._init = function() {\n\n      this.$element.data('AvModal', this);\n\n      this.templateDefer.resolve(true);\n\n      // Initialize Bootstrap jQuery plugin\n      this.$element.modal({\n        'backdrop': this.options.backdrop,\n        'keyboard': this.options.keyboard,\n        'show': this.options.show,\n        'remote': this.options.remote\n      });\n\n      this._listeners();\n    };\n\n    // Add helpers to scope so clients can call internal methods\n    proto._scope = function() {\n\n      var self = this;\n      var scope = this.options.scope;\n\n      scope.modalShow = function() {\n        return self.show();\n      };\n\n      scope.modalToggle = function() {\n        return self.toggle();\n      };\n\n      scope.modalHide = function() {\n        return self.hide();\n      };\n\n    };\n\n    proto._listeners = function() {\n\n      var self = this;\n      var scope = this.options.scope;\n      var $element = this.$element;\n\n      this.animationShowDefer = $q.defer();\n      this.animationHideDefer = $q.defer();\n\n      $element.on(AV_MODAL.BS_EVENTS.SHOW, function(event) {\n        scope.$emit(AV_MODAL.EVENTS.SHOW, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.SHOWN, function(event) {\n\n        if(angular.isFunction(self.options.onShown)) {\n          self.options.onShown();\n        }\n\n        self.animationShowDefer.resolve(true);\n\n        scope.$emit(AV_MODAL.EVENTS.SHOWN, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.HIDE, function(event) {\n        scope.$emit(AV_MODAL.EVENTS.HIDE, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.HIDDEN, function(event) {\n\n        if(angular.isFunction(self.options.onHidden)) {\n          self.options.onHidden.call(this);\n        }\n\n        self.animationHideDefer.resolve(true);\n        scope.$emit(AV_MODAL.EVENTS.HIDDEN, event, self);\n\n        scope.$evalAsync(function() {\n          self.destroy();\n        });\n\n      });\n\n      // Garbage collection\n      scope.$on('$destroy', function() {\n        avModalManager.remove(self._id);\n        self.destroy();\n      });\n\n    };\n\n    proto.show = function() {\n\n      var self = this;\n      this.animationShowDefer = $q.defer();\n\n      this.templatePromise.then(function() {\n        self.isShown() ? self.animationShowDefer.resolve(true) : self.$element.modal('show');\n      });\n\n      return this.animationShowDefer.promise;\n\n    };\n\n    proto.hide = function() {\n\n      var self = this;\n      this.animationHideDefer = $q.defer();\n\n      this.templatePromise.then(function() {\n        !self.isShown() ? self.animationHideDefer.resolve(true) : self.$element.modal('hide');\n      });\n\n      return this.animationHideDefer.promise;\n    };\n\n    proto.isShown = function() {\n      return this.$element.data(AV_MODAL.NAMESPACE.MODAL).isShown;\n    },\n\n    proto.toggle = function() {\n\n      var self = this;\n\n      return this.templatePromise.then(function() {\n        return self.isShown() ? self.hide() : self.show();\n      });\n\n    };\n\n    proto.destroy = function() {\n\n      var self = this;\n\n      return this.templatePromise.then(function() {\n        self.$element.data('AvModal', null);\n        self.$element.remove();\n      });\n\n    };\n\n    proto._createId = function() {\n      // Create a unique id for the modal if not present or passed in via options\n      var id = this.$element.attr('id');\n      if(!id) {\n        // Get id from options or create a unique id\n        id = this.options.id ? this.options.id : availity.uuid('av-modal-id');\n        this.$element.attr('id', id);\n      }\n\n      this._id = id;\n\n      avModalManager.add(id);\n    };\n\n    return Modal;\n  };\n\n  availity.ui.factory('AvModal', ModalFactory);\n\n  availity.ui.directive('avModal', function(AV_MODAL) {\n    return {\n      restrict: 'A',\n      replace: true,\n      transclude: true,\n      scope: {\n        size: '@'\n      },\n      templateUrl: AV_MODAL.TEMPLATES.MODAL\n    };\n  });\n\n})(window);\n","/**\n * 1. All fields should be pristine on first load\n * 2. If field is modified an invalid the field should be marked with an error\n *\n */\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('avValFormController', function() {\n\n    this.ngForm  = null;\n    this.rulesKey = null;\n    this.avValOn = null;\n    this.avValDebounce = null;\n    this.avValInvalid = false;\n\n    // Object that stores the unique id (key) and violation count (value) of all the form fields\n    //\n    // EX:\n    //\n    // {\n    //  avVal001: 0\n    //  avVal002: 2\n    //  avVal003: 1\n    // }\n    this.violations = {};\n\n    this.init = function(form) {\n      this.ngForm = form;\n    };\n\n    /**\n     * Records id of the form field and number of violations\n     * @param  {[type]} id    [description]\n     * @param  {[type]} count [description]\n     * @return {[type]}       [description]\n     */\n    this.record = function(id, count) {\n      this.violations[id] = count;\n\n      var violocationCount = _.reduce(this.violations, function(sum, num) {\n        return sum + num;\n      }, 0);\n\n      this.ngForm.$setValidity('av', violocationCount === 0);\n    };\n\n    this.unrecord = function(id) {\n      if(id && this.violations[id]) {\n        delete this.violations[id];\n      }\n    };\n\n    this.reset = function() {\n      this.ngForm.$setPristine();\n      this.ngForm.$submitted = false;\n    };\n\n    this.$setSubmitted = function() {\n      this.ngForm.$submitted = true;\n    };\n\n    this.setRulesKey = function(key) {\n      this.rulesKey = key;\n    };\n\n  });\n\n  // form.$error = {};\n  // form.$$success = {};\n  // form.$pending = undefined;\n  // form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);\n  // form.$dirty = false;\n  // form.$pristine = true;\n  // form.$valid = true;\n  // form.$invalid = false;\n  // form.$submitted = false;\n\n  availity.ui.directive('avValForm', function($log, $timeout, $parse, AV_VAL, avValAdapter, $rootScope) {\n    return {\n      restrict: 'A',\n      priority: 10,\n      require: ['form', 'avValForm'],\n      controller: 'avValFormController',\n      compile: function() {\n        return {\n          pre: function(scope, iEl, iAttrs, controllers) {\n\n            var ruleFn = $parse(iAttrs.avValForm);\n            var rulesKey = ruleFn(scope);\n            rulesKey = rulesKey || iAttrs.avValForm; // interpolated rule from scope || fixed string\n\n            if(!rulesKey) {\n              $log.error('avValForm requires a rules key in order to run the proper validation rules.');\n              return;\n            }\n\n            scope.$watch(ruleFn, function(_rulesKey, _oldRulesKey) {\n              if(_rulesKey) {\n                avForm.setRulesKey(_rulesKey);\n\n                if(_rulesKey !== _oldRulesKey) {\n                  $timeout(function() {\n                    $log.info('avValForm revalidate');\n                    $rootScope.$broadcast(AV_VAL.EVENTS.REVALIDATE);\n                  });\n                }\n\n              }\n\n            });\n\n            var ngForm = controllers[0];\n            var avForm = controllers[1];\n\n            // Allow form attributes to define the validation behavior of the form fields\n            // inside it.  If `av-val-on` or `av-val-debounce` are on the form then all form\n            // fields inside the form would inherit this behavior.\n            avForm.avValOn = iAttrs.avValOn || null;\n            avForm.avValDebounce = iAttrs.avValDebounce || null;\n            // Allows fields to update with invalid data for dirty form saving\n            avForm.avValInvalid = iAttrs.avValInvalid || false;\n\n            avForm.init(ngForm);\n            avForm.setRulesKey(rulesKey);\n\n          },\n          post: function(scope, iEl, iAttrs, controllers) {\n\n            iEl.attr('novalidate', 'novalidate');  // prevent HTML5 validation from kicking in\n\n            // Disable ng-submit or ng-click handlers and store the function to call for submitting\n            var fn;\n            if(iAttrs.ngSubmit) {\n              // Disable ng-submit event\n              iEl.off('submit');\n              fn = $parse(iAttrs.ngSubmit, /* expensiveChecks */ true);\n            }else if(iAttrs.ngClick) {\n              // Disable ng-click event\n              iEl.off('click');\n              fn = $parse(iAttrs.ngClick, /* expensiveChecks */ true);\n            }\n\n            var ngForm = controllers[0];\n            var avForm = controllers[1];\n\n            scope.$on(AV_VAL.EVENTS.RESET, function () {\n              avForm.reset();\n            });\n\n            iEl.bind('submit', function(event) {\n\n              scope.$broadcast(AV_VAL.EVENTS.SUBMITTED);\n              avForm.$setSubmitted();\n\n              if(ngForm.$invalid) {\n\n                scope.$broadcast(AV_VAL.EVENTS.FAILED);\n\n                $log.info('avValForm invalid.  preventing default submit action');\n\n                event.preventDefault();\n                event.stopImmediatePropagation();\n                scope.$broadcast(event);\n\n                avValAdapter.scroll(iEl);\n                return;\n              }\n\n              ngForm.$setPristine();\n\n              if(!fn) {\n                return;\n              }\n\n              var callback = function() {\n                fn(scope, {$event:event});\n              };\n\n              scope.$apply(callback);\n\n            });\n\n          }\n        };\n      }\n    };\n  });\n\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('AvValFieldController', function($element, avValAdapter, $attrs, avVal, $log, $timeout, $scope, $sniffer) {\n\n    this.ngModel = null;\n    this.rule = null;\n    this.avValForm = null;\n    this.avValInvalid = false;\n\n    var self = this;\n\n    var placeholder = $element[0].placeholder;\n    var noEvent = {};\n\n    this.createId = function() {\n      this.ngModel.avId = availity.uuid('avVal');\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.setRule = function(rule) {\n      this.rule = rule;\n    };\n\n    this.avValForm = function(avValForm) {\n      this.avValForm = avValForm;\n    };\n\n    this.updateModel = function(results) {\n\n      var self = this;\n      var validationKeys = [];\n\n      this.ngModel.avResults = results;\n\n      // set state for each violation\n      angular.forEach(results.violations, function (result) {\n        var key = 'av-' + result.contraintName;\n        validationKeys.push(key);\n        self.ngModel.$setValidity(key, result.valid);\n      });\n\n      // set overall state for validation state\n      this.ngModel.$setValidity('av', this.ngModel.avResults.isValid);\n\n      // store violations\n      this.ngModel.avViolations = this.ngModel.avResults.violations;\n\n      // record the id and violation count in the av-form controller.  this determines if the form is\n      // valid if sum of violations for all form inputs === zero\n      this.avValForm.record(this.ngModel.avId, this.ngModel.avResults.violations.length);\n\n      // remove violation keys that are no longer falsy\n      angular.forEach(this.ngModel.$error, function(value, key) {\n\n        if(_.indexOf(validationKeys, key) === -1 && key.lastIndexOf('av-', 0) === 0) {\n          self.ngModel.$setValidity(key, true);\n        }\n      });\n    };\n\n    this.updateView = function() {\n      if(this.ngModel.$dirty || $scope.avValShow) {\n        avValAdapter.element($element, this.ngModel, this.ngModel.avResults.isValid);\n        avValAdapter.message($element, this.ngModel);\n      }\n    };\n\n    this.validate = function(value) {\n\n      $log.info('validating value [' + value + ']');\n\n      var rulesKey = self.avValForm.rulesKey;\n      var results = avVal.validate(rulesKey, $element, value, self.rule);\n\n      // validate function is called within the context of angular so fn.call and set the context\n      // to \"this\"\n      self.updateModel.call(self, results);\n      self.updateView.call(self);\n\n      return results;\n    };\n\n    this.validateModel = function(value) {\n\n      self.validate(value, true);\n      return value;\n\n    };\n\n    this.validateView = function(value) {\n\n      var results = self.validate(value);\n\n      if(self.avValForm.avValInvalid || self.avValInvalid) {\n        // allows invalid data from view to update model for dirty saving\n        return value;\n      }\n\n      // prevent invalid data from view to update model\n      return results.isValid ? value : undefined;\n\n    };\n\n    this.onDebounce = function() {\n\n      var value = $element.val().trim();\n\n      if(this.isCheckbox()) {\n        this.ngModel.$setViewValue($element[0].checked);\n      } else if(this.isRadio()) {\n        this.ngModel.$setViewValue($attrs.value);\n      }else {\n        this.ngModel.$setViewValue(value);\n      }\n\n    };\n\n    this.isRadio = function() {\n      return $element.is('input') && $attrs.type === 'radio';\n    };\n\n    this.isCheckbox = function() {\n      return $element.is('input') && $attrs.type === 'checkbox';\n    };\n\n    this.reset = function() {\n\n      var violations = this.ngModel.avResults.violations;\n      violations.splice(0, violations.length);\n\n      avValAdapter.message($element, this.ngModel);\n      avValAdapter.reset($element);\n\n    };\n\n    this.event = function(event, avValDebounce) {\n\n      var self = this;\n\n      $element.unbind('input');\n\n      var debounce;\n\n      $element.on(event, function() {\n\n        // https://github.com/angular/angular.js/blob/v1.2.27/src/ng/directive/input.js#L508\n        if($sniffer.msie <= 11 && (event || noEvent).type === 'input' && $element[0].placeholder !== placeholder) {\n          placeholder = $element[0].placeholder;\n          return;\n        }\n\n        $timeout.cancel(debounce);\n        debounce = $timeout(function() {\n          $scope.$apply(function() {\n            self.onDebounce();\n          });\n        }, avValDebounce);\n\n      });\n\n    };\n\n  });\n\n  // Events:\n  //\n  //  click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown\n  //  keyup keypress submit focus blur copy cut paste\n  availity.ui.directive('avValField', function($log, $timeout, avVal, avValAdapter, AV_VAL) {\n    return {\n      restrict: 'A',\n      controller: 'AvValFieldController',\n      require: ['^avValForm', 'ngModel', 'avValField'],\n      scope: {\n        avValDebounce: '@?',\n        avValOn: '@?',\n        avValShow: '=?'\n      },\n      link: function(scope, element, attrs, controllers) {\n\n        var rule = attrs.avValField;\n        var avValForm = controllers[0];\n        var ngModel = controllers[1];\n        var avValField = controllers[2];\n\n        var avValOn = scope.avValOn || avValForm.avValOn || 'input';\n\n        if(!ngModel && !rule) {\n          $log.error('avValField requires ngModel and a validation rule to run.');\n          return;\n        }\n\n        // Allows fields to update with invalid data for dirty form saving\n        avValField.avValInvalid = attrs.avValInvalid || false;\n\n        // CACHE THE MODEL\n        avValField.setNgModel(ngModel);\n\n        avValField.avValForm(avValForm);\n\n        avValField.setRule(rule);\n\n        avValField.createId();\n\n        // DEBOUNCE\n        var avValDebounce = parseInt(scope.avValDebounce || (avValForm.avValDebounce || AV_VAL.DEBOUNCE), 10);\n        avValDebounce = _.isNumber(avValDebounce) ? avValDebounce : AV_VAL.DEBOUNCE;\n\n        var debounceAllowed = !avValField.isRadio() && !avValField.isCheckbox() && avValOn !== 'blur';\n\n        if(!debounceAllowed) {\n          avValDebounce = 0;\n        }\n\n        // EVENT LISTENER\n        avValField.event(avValOn, avValDebounce);\n\n        // (view to model)\n        ngModel.$parsers.push(avValField.validateView);\n\n        // (model to view) - added to beginning of array because formatters\n        // are processed in reverse order thus allowing the model to be transformed\n        // before the validation framework check for validity.\n        ngModel.$formatters.unshift(avValField.validateModel);\n\n        scope.$on(AV_VAL.EVENTS.REVALIDATE, function() {\n          avValField.validate(ngModel.$viewValue);\n        });\n\n        // SUBMITTED EVENT\n        scope.$on(AV_VAL.EVENTS.SUBMITTED, function() {\n          ngModel.$dirty = true;\n          avValField.validate(ngModel.$viewValue);\n        });\n\n        // - Removes all errors on page,\n        // - does not reset view or model values.  This is to be handled by the app.\n        scope.$on(AV_VAL.EVENTS.RESET, function () {\n          avValField.reset();\n        });\n\n        scope.$on('$destroy', function () {\n          avValForm.unrecord(ngModel.avId);\n        });\n\n      }\n    };\n  });\n\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.provider('avPopoverConfig', function() {\n\n    var config = {\n      showOnLoadHideDelay: 10000\n    };\n\n    this.set = function(options) {\n      angular.extend(config, options);\n    };\n\n    this.$get = function() {\n      return angular.copy(config);\n    };\n  });\n\n  availity.ui.constant('AV_POPOVER', {\n    NAME: 'bs.popover'\n  });\n\n  availity.ui.controller('AvPopoverController', function($element, $scope, AV_POPOVER, $timeout, avPopoverConfig) {\n    this.options = angular.extend({}, avPopoverConfig);\n\n    this.listeners = function() {\n\n      var self = this;\n\n      angular.forEach(['show', 'shown', 'hide', 'hidden'], function(name) {\n        $element.on(name + '.bs.popover', function(ev) {\n          $scope.$emit('av:popover:' + name, ev);\n        });\n      });\n\n      $scope.$on('destroy', function() {\n        self.destroy();\n      });\n    };\n\n    this.plugin = function() {\n      return $element.data(AV_POPOVER.NAME);\n    };\n\n    this.show = function() {\n      $element.popover('show');\n    };\n\n    this.hide = function() {\n      $element.popover('hide');\n    };\n\n    this.toggle = function() {\n      $element.popover('toggle');\n    };\n\n    this.destroy = function() {\n      $element.popover('destroy');\n    };\n\n\n    this.init = function() {\n\n      this.listeners();\n\n      if($scope.showOnLoad) {\n\n        this.show();\n\n        if($scope.delay && $scope.delay.hide) {\n          $timeout(this.hide, $scope.delay.hide, false);\n          return;\n        }\n        // If no delay is found or cannot be parsed, set a default timeout so that the popover doesn't stick around forever\n        $timeout(this.hide, this.options.showOnLoadHideDelay, false);\n      }\n    };\n\n\n  });\n\n  availity.ui.directive('avPopover', function() {\n    return {\n      restrict: 'A',\n      controller: 'AvPopoverController',\n      scope: {\n        showOnLoad: '=',\n        delay: '='\n      },\n      link: function(scope, element, attrs, avPopover) {\n\n        var options = {};\n\n        scope.$evalAsync(function() {\n          element.popover(angular.extend({}, options, {\n            html: true\n          }));\n          avPopover.init();\n        });\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('avValContainerController', function($scope, $timeout) {\n\n    this.message = function(ngModel) {\n\n      var message = null;\n      if(ngModel.avResults.violations.length && ngModel.avResults.violations[0].message) {\n        message = ngModel.avResults.violations[0].message;\n      }else {\n        message = null;\n      }\n\n      // $timeout is needed to update the UI from $broadcast events\n      $timeout(function() {\n        $scope.messages.message = message;\n      });\n\n    };\n\n  });\n\n  availity.ui.directive('avValContainer', function() {\n    return {\n      restrict: 'A',\n      controller: 'avValContainerController',\n      template: '<p class=\"help-block\" data-ng-bind-html=\"messages.message\"></p>',\n      replace: true,\n      scope: {\n\n      },\n      link: function(scope) {\n        scope.messages = _.extend({}, scope.messages, { message: null, id: null });\n      }\n    };\n  });\n\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BOOTSTRAP_ADAPTER', {\n    CLASSES: {\n      SUCCESS: 'has-success',\n      WARNING: 'has-warning',\n      ERROR: 'has-error',\n      FEEDBACK: 'has-feedback',\n      HELP: 'help-block',\n      FORM_GROUP: '.form-group:first',\n      NAVBAR: 'navbar-fixed-top'\n    },\n    SELECTORS: {\n      CONTAINER: 'container-id',\n      DATA_CONTAINER: 'data-container-id'\n    },\n    CONTROLLER: '$avValContainerController'\n  });\n\n  availity.ui.factory('avValBootstrapAdapter', function(AV_BOOTSTRAP_ADAPTER, $timeout, $log) {\n\n    return {\n\n      element: function(element, ngModel) {\n        if(ngModel.$valid) {\n          element.parents(AV_BOOTSTRAP_ADAPTER.CLASSES.FORM_GROUP).removeClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n        }else {\n          element.parents(AV_BOOTSTRAP_ADAPTER.CLASSES.FORM_GROUP).addClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n        }\n      },\n\n      reset: function(element) {\n        element.parents(AV_BOOTSTRAP_ADAPTER.CLASSES.FORM_GROUP).removeClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n      },\n\n      message: function(element, ngModel) {\n\n        var selector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.HELP\n        ].join('');\n\n        var $el = $(element);\n\n        var target = $el.attr(AV_BOOTSTRAP_ADAPTER.SELECTORS.CONTAINER);\n        target = target || $el.attr(AV_BOOTSTRAP_ADAPTER.SELECTORS.DATA_CONTAINER);\n        // default to siblings\n        target = target ? $('#' + target) : $el.siblings(selector);\n\n        if(target.length === 0) {\n          $log.warn('avValBootstrapAdapter could not find validation container for {0}', [element]);\n          return;\n        }\n\n        var el = target[0];\n        $el = angular.element(el);\n        var avValModel = $el.data(AV_BOOTSTRAP_ADAPTER.CONTROLLER); // get the av val message controller\n        if(avValModel) {\n          avValModel.message(ngModel);\n        }\n      },\n\n      scroll: function(form) {\n\n        // Bootstrap fixed navbars causes bad scroll-to offsets so find them all\n        var navbarSelector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.NAVBAR\n        ].join('');\n\n        // Add up all the heights to find the true offset\n        var offset = 0;\n        $(navbarSelector).each(function() {\n          offset += $(this).outerHeight();\n        });\n\n        var selector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR,\n          ':first'\n        ].join('');\n\n        var $target = $(form).find(selector);\n        $timeout(function() {\n          // scroll to offset top of first error minus the offset of the navbars\n          $('body, html').animate({scrollTop: $target.offset().top - offset}, 'fast');\n        }, 0, false);\n      }\n    };\n  });\n\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_VAL_ADAPTER', {\n    DEFAULT: 'avValBootstrapAdapter'\n  });\n\n  availity.ui.provider('avValAdapter', function() {\n\n    var that = this;\n\n    this.setAdapter = function(adapter) {\n      this.adapter = adapter;\n    };\n\n    this.$get = function(AV_VAL_ADAPTER, $injector) {\n\n      var Adapter = function() {\n        var adapterName = that.adapter || AV_VAL_ADAPTER.DEFAULT;\n        this.adapter = $injector.get(adapterName);\n      };\n\n      var proto = Adapter.prototype;\n\n      proto.element = function(element, ngModel) {\n        this.adapter.element(element, ngModel);\n      };\n\n      proto.reset = function(element) {\n        this.adapter.reset(element);\n      };\n\n      proto.message = function(element, ngModel) {\n        this.adapter.message(element, ngModel);\n      },\n\n      proto.scroll = function(form) {\n        this.adapter.scroll(form);\n      };\n\n      return new Adapter();\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.provider('avDropdownConfig', function() {\n\n    var config = {\n      closeOnResize: true,\n      dropdownAutoWidth: true,\n      minimumResultsForSearch: 5\n    };\n\n    this.set = function(options) {\n      angular.extend(config, options);\n    };\n\n    this.$get = function() {\n      return angular.copy(config);\n    };\n  });\n\n  availity.ui.constant('AV_DROPDOWN', {\n    OPTIONS: [\n      'width',\n      'minimumInputLength',\n      'maximumInputLength',\n      'minimumResultsForSearch',\n      'maximumSelectionSize',\n      'placeholderOption',\n      'separator',\n      'allowClear',\n      'multiple',\n      'closeOnSelect',\n      'openOnEnter',\n      'id',\n      'matcher',\n      'sortResults',\n      'formatSelection',\n      'formatResult',\n      'formatResultCssClass',\n      'formatNoMatches',\n      'formatSearching',\n      'formatAjaxError',\n      'formatInputTooShort',\n      'formatInputTooLong',\n      'formatSelectionTooBig',\n      'formatLoadMore',\n      'createSearchChoice',\n      'createSearchChoicePosition',\n      'initSelection',\n      'tokenizer',\n      'tokenSeparators',\n      'query',\n      'ajax',\n      'data',\n      'tags',\n      'containerCss',\n      'containerCssClass',\n      'dropdownCss',\n      'dropdownCssClass',\n      'dropdownAutoWidth',\n      'adaptContainerCssClass',\n      'adaptDropdownCssClass',\n      'escapeMarkup',\n      'selectOnBlur',\n      'loadMorePadding',\n      'nextSearchTerm',\n      'correlationId',\n      'eventListeners'\n    ]\n  });\n\n\n  availity.ui.controller('AvDropdownController', function($element, $attrs, AV_UI, AV_DROPDOWN, avDropdownConfig, $log, $scope, $timeout, $parse) {\n\n    var self = this;\n    this.options = {};\n    this.match = null;\n    this.ngModel = null;\n\n    this.init = function() {\n\n      self.options = angular.extend({}, avDropdownConfig);\n\n      _.forEach($attrs, function(value, key) {\n        if(_.contains(AV_DROPDOWN.OPTIONS, key.replace('data-', ''))) {\n          self.options[key] = $scope.$eval(value);\n        }\n      });\n\n      if(this.isRemoteMultiple()) {\n        self.options.multiple = angular.isDefined($attrs.multiple);\n      }\n\n      self.multiple = angular.isDefined($attrs.multiple);\n\n      if(self.options.query) {\n\n        self.queryFn = self.options.query;\n        // Function used to query results for the search term.\n        self.options.query = self.query;\n        // Function used to get the id from the choice object or a string representing the key under which the id is stored.\n        self.options.id = self.getId;\n      }\n\n    };\n\n    this.isRemoteMultiple = function() {\n      if(angular.isDefined($attrs.multiple) && $element.get(0).tagName.toLowerCase() === 'input') {\n        return true;\n      }\n      return false;\n    };\n\n    this.setRemoteViewValue = function(e) {\n\n      var values = this.ngModel.$viewValue;\n\n      if(!angular.isArray(values) || !angular.isObject(values)) {\n        values = [];\n      }\n\n      if(e.added) {\n        // Adding to collection\n        values.push(e.added);\n      } else {\n        // Removing from collection\n        var index = _.findIndex(values, function(value) {\n          return  _.matches(e.removed)(value);\n        });\n        values.splice(index, 1);\n      }\n\n      this.ngModel.$setViewValue(values);\n\n    };\n\n    this.setViewValue = function(e) {\n      this.ngModel.$setViewValue(e.added);\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.getSelected = function(model) {\n\n      if(self.options.query) {\n        return 0;\n      }\n\n      if (!this.collection) {\n        // If we're not using ng-options, the model value is just the raw value of the option, rather than an index, so return it as is.\n        return model;\n      }\n\n      var items = this.collection($scope);\n\n      var index = _.findIndex(items, function(item) {\n        if (!self.valueFn) {\n          return angular.equals(item, model);\n        } else {\n          var locals = {};\n          locals[self.valueName] = item;\n          var value = self.valueFn($scope, locals);\n          return angular.equals(value, model);\n        }\n      });\n\n      return index;\n\n    };\n\n    // Result:\n    //\n    // {\n    //   \"code\": \"252Y00000X\",\n    //   \"value\": \"AGENCIES,EARLY INTERVENTION PROVIDER AGENCY,NOT APPLICABLE|Agency\",\n    //   \"id\": \"252Y00000X\"\n    // }\n    this.getId = function(result) {\n      return result.id;\n    };\n\n    // Wrapper around the query function for Select2.  When the promise resolves\n    // the callback\n    this.query = function(options) {\n\n      self.queryFn(options).then(function(response) {\n\n        // Callback function that should be called with the result object. The result object:\n        //\n        // result.results (object) - Array of result objects. The default renderers\n        //    expect objects with id and text keys. The id property is required,\n        //    even if custom renderers are used. The object may also contain a children\n        //    key if hierarchical data is displayed. The object may also contain a disabled\n        //    boolean property indicating whether this result can be selected.\n        //\n        // result.more (boolean) - true if more results are available for the current\n        //    search term.\n        //\n        // results.context (object) - A user-defined object that should be made available\n        //    as the context parameter to the query function on subsequent queries to load\n        //    more result pages for the same search term. See the description of\n        //    options.context parameter.\n        options.callback({more: response.more, results: response.results});\n      });\n    };\n\n    this.setValue = function() {\n\n      var viewValue = self.ngModel.$viewValue;\n      var selected = null;\n      if(viewValue !== null && viewValue !== undefined) {\n        selected = this.getSelected(viewValue);\n      }\n\n      // var apply = scope.$evalAsync || $timeout;\n      $timeout(function() {\n        $element\n          .select2('val',  (selected === null || selected === 'undefined') ? '' : selected); // null === '' for Select2\n      });\n    };\n\n    this.getMultiSelected = function(viewValue) {\n\n      var indices = [];\n\n      if($element.get(0).tagName.toLowerCase() !== 'input') {\n        var options = this.collection($scope);\n\n        _.each(viewValue, function(savedObject) {\n          var index = _.findIndex(options, function(value) {\n            var temp = angular.copy(savedObject); // remove hashkeys for comparison\n            return _.matches(temp)(value);\n          });\n          indices.push(index);\n        });\n\n      } else {\n\n        var inputViewValues = this.ngModel.$modelValue;\n\n        _.each(inputViewValues, function(savedObject) {\n\n          if(_.isUndefined(savedObject.id) ) {\n\n            if(savedObject.id || savedObject[self.options.correlationId]) {\n\n              savedObject.id = savedObject[self.options.correlationId];\n\n            } else {\n\n              throw new Error('dropdown list must have a id or a alternative value to use as a id');\n            }\n\n          }\n\n        });\n      }\n\n      if(indices.length > 0) {\n        viewValue = indices;\n      }\n\n      return viewValue;\n\n    };\n\n    this.setValues = function() {\n\n      var viewValue = self.ngModel.$viewValue;\n\n      if(!angular.isArray(viewValue)) {\n        viewValue = [];\n      }\n\n      if(!_.isEmpty(viewValue) && _.isObject(viewValue[0])) {\n        viewValue = this.getMultiSelected(viewValue);\n      }\n\n      $timeout(function() {\n        $element\n          .select2('val', viewValue);\n      });\n    };\n\n    this.ngOptions = function() {\n\n      this.match = $attrs.ngOptions.match(AV_UI.NG_OPTIONS);\n      if(!this.match) {\n        throw new Error('Invalid ngOptions for avDropdown');\n      }\n      // AV_UI.NG_OPTIONS regex will parse into arrays like below:\n      //\n      // 0: \"state.name for state in states\"\n      // 1: \"state.name\"\n      // 2: undefined\n      // 3: undefined\n      // 4: \"state\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"states\"\n      // 8: undefined\n      //\n      // 0: \"state.id as state.name for state in states\"\n      // 1: \"state.id\"\n      // 2: \"state.name\"\n      // 3: undefined\n      // 4: \"state\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"states\"\n      // 8: undefined\n      //\n      // 0: \"state.name for state in states track by state.id\"\n      // 1: \"state.name\"\n      // 2: undefined\n      // 3: undefined\n      // 4: \"state\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"states\"\n      // 8: \"state.id\"\n      //\n      // 0: \"person.fullName as (person.lastName + ', ' + person.firstName) for person in feeScheduleModel.persons\"\n      // 1: \"person.fullName\"\n      // 2: \"(person.lastName + ', ' + person.firstName)\"\n      // 3: undefined\n      // 4: \"person\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"feeScheduleModel.persons\"\n      // 8: undefined\n      //\n      this.displayFn = $parse(this.match[2] || this.match[1]); // this is the function to retrieve the text to show as\n      this.collection = $parse(this.match[7]);\n      this.valueName = this.match[4] || this.match[6];\n      this.valueFn = $parse(this.match[2] ? this.match[1] : this.valueName);\n      this.keyName = this.match[5];\n\n      $scope.$watchCollection(this.collection, function(newVal, oldVal) {\n        if(angular.equals(newVal, oldVal)) {\n          return;\n        }\n\n        self.setValue();\n\n      }, true);\n\n    };\n  });\n\n  availity.ui.directive('avDropdown', function($timeout, $log, $window) {\n\n    return {\n      restrict: 'A',\n      require: ['ngModel', 'avDropdown'],\n      controller: 'AvDropdownController',\n      link: function(scope, element, attrs, controllers) {\n\n        var ngModel = controllers[0];\n        var avDropdown = controllers[1];\n\n        avDropdown.setNgModel(ngModel);\n        avDropdown.init();\n\n        if(attrs.ngOptions ) {\n          avDropdown.ngOptions();\n        }\n\n        ngModel.$parsers.push(function(value) {\n          var parent = element.prev();\n          parent\n            .toggleClass('ng-invalid', !ngModel.$valid)\n            .toggleClass('ng-valid', ngModel.$valid)\n            .toggleClass('ng-invalid-required', !ngModel.$valid)\n            .toggleClass('ng-valid-required', ngModel.$valid)\n            .toggleClass('ng-dirty', ngModel.$dirty)\n            .toggleClass('ng-pristine', ngModel.$pristine);\n          return value;\n        });\n\n        element.on('change', function(e) {\n\n          // special case since the ajax handling doesn't bind to the model correctly\n          // this has to do with select2 (v3.5.2) using a hidden field instead of a select for ajax\n          if(avDropdown.options.query) {\n            $timeout(function() {\n              // look at moving this to the controller\n              if(avDropdown.isRemoteMultiple()) {\n                avDropdown.setRemoteViewValue(e);\n              } else {\n                avDropdown.setViewValue(e);\n              }\n\n            }, false, 0);\n          }\n\n          $log.info(e);\n\n        });\n\n        // fires ng-focus when select2-focus fires.\n        element.on('select2-focus', function() {\n          if(attrs.ngFocus) {\n            scope.$eval(scope.$eval(attrs.ngFocus));\n          }\n        });\n\n        // fires ng-blur when select2-blur occurs.\n        element.on('select2-blur', function() {\n          if(attrs.ngBlur) {\n            scope.$eval(scope.$eval(attrs.ngBlur));\n          }\n        });\n\n        // https://github.com/t0m/select2-bootstrap-css/issues/37#issuecomment-42714589\n        element.on('select2-open', function () {\n          // look for .has-success, .has-warning, .has-error\n          // (really look for .has-* … which is good enough for the demo page, but obviously might interfere with other CSS-classes starting with \"has-\")\n          if(element.parents('[class*=\"has-\"]').length) {\n\n            // get all CSS-classes from the element where we found \"has-*\" and collect them in an array\n            var classNames = $(this).parents('[class*=\"has-\"]')[0].className.split(/\\s+/);\n\n            // go through the class names, find \"has-\"\n            for(var i = 0; i < classNames.length; ++i) {\n              if(classNames[i].match('has-')) {\n                $('#select2-drop').addClass(classNames[i]);\n              }\n            }\n          }\n        });\n\n        var _$render = ngModel.$render;\n        ngModel.$render = function() {\n          _$render();\n\n          if(avDropdown.multiple) {\n            avDropdown.setValues();\n          }else {\n            avDropdown.setValue();\n          }\n\n        };\n\n        if(avDropdown.options.closeOnResize) {\n\n          var win = angular.element($window);\n          win.bind('resize', function() {\n            element.select2('close');\n          });\n\n        }\n\n        attrs.$observe('disabled', function (value) {\n          element.select2('enable', !value);\n        });\n\n        attrs.$observe('readonly', function (value) {\n          element.select2('readonly', !!value);\n        });\n\n        scope.$on('$destroy', function() {\n          element.off();\n          element.select2('destroy');\n        });\n\n        $timeout(function() {\n          element.select2(avDropdown.options);\n        });\n\n        // If event listeners are specified in the options, set them up here\n        if (_.get(avDropdown, 'options.eventListeners')) {\n          _.each(avDropdown.options.eventListeners, function(listener, eventId) {\n            if (_.isFunction(listener)) {\n              element.on(eventId, listener);\n            }\n          });\n        }\n      }\n    };\n  });\n\n})(window);\n","/**\n * Inspiration https://github.com/mgcrea/angular-strap/blob/v0.7.8/src/directives/datepicker.js\n */\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.provider('avDatepickerConfig', function() {\n\n    var config = {\n      autoclose: true,\n      todayHighlight: true,\n      format: 'mm/dd/yyyy',\n      forceParse: false\n    };\n\n    this.set = function(options) {\n      angular.extend(config, options);\n    };\n\n    this.$get = function() {\n      return angular.copy(config);\n    };\n\n  });\n\n  // Options: http://bootstrap-datepicker.readthedocs.org/en/latest/options.html\n  availity.ui.constant('AV_DATEPICKER', {\n    CONTROLLER: '$ngModelController',\n    ADD_ON_SELECTOR: '[data-toggle=\"datepicker\"]',\n    OPTIONS: [\n      'autoclose',\n      'beforeShowDay',\n      'beforeShowMonth',\n      'calendarWeeks',\n      'clearBtn',\n      'toggleActive',\n      'container',\n      'daysOfWeekDisabled',\n      'datesDisabled',\n      'defaultViewDate',\n      'endDate',\n      'forceParse',\n      'format',\n      'inputs',\n      'keyboardNavigation',\n      'language',\n      'minViewMode',\n      'multidate',\n      'multidateSeparator',\n      'orientation',\n      'startDate',\n      'startView',\n      'todayBtn',\n      'todayHighlight',\n      'weekStart',\n      'showOnFocus',\n      'disableTouchKeyboard',\n      'enableOnReadonly',\n      'modelFormat'\n    ],\n    DEFAULTS: {\n      MODELFORMAT: 'YYYY-MM-DD'\n    }\n  });\n\n  availity.ui.controller('AvDatepickerController', function($element, $attrs, AV_DATEPICKER, $scope, avDatepickerConfig) {\n\n    var self = this;\n    this.options = {};\n\n    this.setValue = function() {\n\n      var viewValue = self.ngModel.$viewValue;\n      var plugin = this.plugin();\n\n      if(!viewValue || !plugin) {\n        return;\n      }\n\n      plugin.setDate(viewValue);\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.findModel = function() {\n\n      var ngModel = null;\n\n      var $input = $element.find('input:first').andSelf();\n      if($input.length) {\n        ngModel = $input.data(AV_DATEPICKER.CONTROLLER);\n        this.setNgModel(ngModel);\n      }\n\n      return ngModel;\n    };\n\n    this.modelToView = function(isoWrap) {\n      var viewValue = $.fn.datepicker.DPGlobal.formatDate(isoWrap, self.options.format, 'en');\n      return viewValue;\n    };\n\n    this.wrapIsoDate = function() {\n\n      var date = self.ngModel.$modelValue;\n      var isoWrap;\n\n      if(date !== undefined && date !== null) {\n        var m = moment(date);\n        isoWrap = m.isValid() ? m.toDate() : null;\n      }\n\n      return isoWrap;\n    };\n\n    this.viewToModel = function() {\n      var format = $.fn.datepicker.DPGlobal.parseFormat(self.options.format);\n      var utcDate = $.fn.datepicker.DPGlobal.parseDate(self.ngModel.$viewValue, format, 'en');\n\n      var plugin = self.plugin();\n\n      if(!plugin) {\n        return;\n      }\n\n      // jscs: disable\n      var localDate = plugin._utc_to_local(utcDate);\n      // jscs: enable\n\n      if(self.options.modelFormat && localDate) {\n        localDate = moment(localDate).format(self.options.modelFormat);\n      }\n\n      return localDate;\n    };\n\n    this.init = function() {\n\n      self.options = angular.extend({}, avDatepickerConfig);\n\n      _.forEach($attrs, function(value, key) {\n        if(_.contains(AV_DATEPICKER.OPTIONS, key.replace('data-', ''))) {\n          self.options[key] = $scope.$eval(value);\n        }\n      });\n\n      if(self.options.modelFormat && self.options.modelFormat.toLowerCase() === 'default') {\n        self.options.modelFormat = AV_DATEPICKER.DEFAULTS.MODELFORMAT;\n      }\n    };\n\n    this.plugin = function() {\n      return $element.data('datepicker');\n    };\n\n    this.destroy = function() {\n      var plugin = this.plugin();\n      if(plugin) {\n        plugin.remove();\n        $element.data('datepicker', null);\n      }\n    };\n\n    this.hide = function() {\n      var plugin = this.plugin();\n      if(plugin) {\n        plugin.hide();\n      }\n    };\n  });\n\n  availity.ui.directive('avDatepicker', function($window, $log, AV_DATEPICKER) {\n    return {\n      restrict: 'A',\n      require: ['ngModel', 'avDatepicker'],\n      controller: 'AvDatepickerController',\n      link: function(scope, element, attrs, controllers) {\n\n        var ngModel = controllers[0];\n        var avDatepicker = controllers[1];\n\n        if(!ngModel) {\n          ngModel = avDatepicker.findModel();\n          if(!ngModel) {\n            $log.error('avDatepicker requires ngModel');\n            return;\n          }\n        }\n\n        avDatepicker.init();\n        avDatepicker.setNgModel(ngModel);\n\n        element.on('changeDate', function(e) {\n          $log.info('avDatepicker changeDate {0}', [e]);\n        });\n\n        // (view to model)\n        ngModel.$parsers.push(avDatepicker.viewToModel);\n\n        // (model to view) - added to end of formatters array\n        // because they are processed in reverse order.\n        // if the model is in Date format and send to the validation framework\n        // prior to getting converted to the expected $viewValue format,\n        // the validation will fail.\n        ngModel.$formatters.push(avDatepicker.modelToView);\n        ngModel.$formatters.push(avDatepicker.wrapIsoDate);\n\n        var _$render = ngModel.$render;\n        ngModel.$render = function() {\n          _$render();\n          avDatepicker.setValue();\n        };\n\n        var win = angular.element($window);\n\n        win.bind('scroll', function() {\n          avDatepicker.hide();\n        });\n\n        var target = element.siblings(AV_DATEPICKER.ADD_ON_SELECTOR);\n        if(target.length) {\n          target.on('click.datepicker', function() {\n            if(!element.prop('disabled')) { // Hack check for IE 8\n              element.focus();\n            }\n          });\n        }\n\n        scope.$on('destroy', function() {\n          avDatepicker.destroy();\n          if(target.length) {\n            target.off('click.datepicker');\n          }\n        });\n\n        scope.$evalAsync(function() {\n          element.datepicker(avDatepicker.options);\n        });\n      }\n    };\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_UI_IDLE', {\n    EVENTS: {\n      OK: 'mousedown.av.idle.notifier'\n    },\n    TEMPLATES: {\n      BASE: 'ui/idle/idle-tpl.html',\n      SESSION: 'ui/idle/idle-session-tpl.html',\n      WARNING: 'ui/idle/idle-warning-tpl.html'\n    }\n  });\n\n  availity.ui.provider('avIdleNotifier', function() {\n\n    var sessionTemplate;\n    var warningTemplate;\n    var $scope;\n\n    this.setSessionTemplate = function(template) {\n      sessionTemplate = template;\n    };\n\n    this.setWarningTemplate = function(template) {\n      warningTemplate = template;\n    };\n\n    this.$get = function(AV_IDLE, AV_UI_IDLE, $rootScope, AvModal, $document, $timeout) {\n\n      var AvIdleNotifier = function() {\n        this.listeners = [];\n        this.modal = null;\n      };\n\n      var proto = AvIdleNotifier.prototype;\n\n      proto.init = function() {\n\n        $scope = $rootScope.$new(true);\n        $scope.idle = {};\n\n        this.initListeners();\n      };\n\n      proto.initListeners = function() {\n\n        var self = this;\n        var listener = null;\n\n        // ACTIVE IDLING\n        listener = $rootScope.$on(AV_IDLE.EVENTS.IDLE_ACTIVE, function() {\n          self.showWarning();\n        });\n        this.listeners.push(listener);\n\n        // INACTIVE IDLING\n        listener = $rootScope.$on(AV_IDLE.EVENTS.IDLE_INACTIVE, function() {\n          self.hideWarning();\n        });\n        this.listeners.push(listener);\n\n        // SESSION TIMEOUT OUT\n        listener = $rootScope.$on(AV_IDLE.EVENTS.SESSION_TIMEOUT_ACTIVE, function() {\n          self.showSession();\n        });\n        this.listeners.push(listener);\n\n      };\n\n      proto.destroyListeners = function() {\n        // turn off each listener @see http://stackoverflow.com/a/14898795\n        _.each(this.listeners, function(listener) {\n          listener();\n        });\n      };\n\n      proto.showWarning = function() {\n\n        var self = this;\n\n        if(this.modal !== null) {\n          return;\n        }\n\n        $scope = $rootScope.$new(true);\n        $scope.idle = {};\n        $scope.idle.template = AV_UI_IDLE.TEMPLATES.WARNING;\n\n        this.modal = new AvModal({\n          show: true,\n          scope: $scope,\n          backdrop: 'static',\n          templateUrl: AV_UI_IDLE.TEMPLATES.BASE\n        });\n\n        $document.find('body').on(AV_UI_IDLE.EVENTS.OK, function() {\n          self.hideWarning();\n        });\n\n      };\n\n      proto.hideWarning = function() {\n        if(this.modal) {\n          this.disableBackDrop();\n          this.modal.hide();\n        }\n\n        this.modal = null;\n      };\n\n      proto.disableBackDrop = function() {\n        $document.find('body').off(AV_UI_IDLE.EVENTS.OK);\n      };\n\n      proto.showSession = function() {\n        var self = this;\n        this.disableBackDrop();\n\n        $timeout(function() {\n          $scope.idle.template = AV_UI_IDLE.TEMPLATES.SESSION;\n          $scope.idle.onSessionTimeout = _.bind(self.onSessionTimeout, self);\n        }, 0, true);\n\n      };\n\n      proto.onSessionTimeout = function() {\n        $rootScope.$broadcast(AV_IDLE.EVENTS.SESSION_TIMEOUT_REDIRECT);\n      };\n\n      return new AvIdleNotifier();\n\n    };\n\n  });\n\n  availity.ui.run(function(avIdleNotifier) {\n    avIdleNotifier.init();\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_MASK', {\n    NAME: 'inputmask',\n    DEFAULTS: {\n      date: '99/99/9999',\n      phone: '(999) 999-9999',\n      SSN:'999-99-9999'\n    }\n  });\n\n  availity.ui.directive('avMask', function($window, $log, AV_MASK) {\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function(scope, element, attrs) {\n\n        var maskType = AV_MASK.DEFAULTS[attrs['avMask']];\n        if(!maskType) {\n          maskType = attrs['avMask'];\n        }\n\n        scope.$evalAsync(function() {\n          element.inputmask(maskType);\n        });\n\n        scope.$on('$destroy', function () {\n          element.inputmask('remove');\n        });\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n  var avErrorPageController = 'avErrorPageController';\n\n  var startTemplate = '<div class=\"container\"><div>';\n  var endTemplate = '<button type=\"button\" class=\"btn btn-primary\" data-ng-click=\"goBack()\"><i class=\"icon icon-left-small\"></i> Go Back</button></div></div>';\n\n  var notFoundTemplate = startTemplate + '<h1>Sorry.</h1><p><strong>We can’t seem to find the page you’re looking for.</strong><br/></p>' + endTemplate;\n  var unauthorizedTemplate = startTemplate + '<h1>Oops.</h1><p><strong>Looks like we might have asked you to do something you don’t have access to do.</strong><br/>If this task is integral your job, please contact your Primary Access Administrator (PAA).</p>' + endTemplate;\n\n\n  availity.ui.constant('AV_ERROR', {\n    PAGES: {\n      NOT_FOUND: 'av-error-not-found',\n      UNAUTHORIZED: 'av-error-unauthorized'\n    },\n    OPTIONS: {\n      sendOtherwiseToNotFound: false,\n      routes: {\n        'av-error-not-found': {\n          url: '/av-error-not-found',\n          template: notFoundTemplate,\n          controller: avErrorPageController\n        },\n        'av-error-unauthorized': {\n          url: '/av-error-unauthorized',\n          template: unauthorizedTemplate,\n          controller: avErrorPageController\n        }\n      }\n    }\n  });\n\n  availity.ui.controller(avErrorPageController, function($scope, $state, $window) {\n    $scope.data = $state.current.data;\n    $scope.goBack = function() {\n      $window.history.back();\n    };\n  });\n\n  // Factory that creates ApiResourcess\n  var AvErrorPageProvider = function(AV_ERROR, $injector) {\n\n\n    /**\n     * Configures state provider with given routes\n     * @param overrideOptions - will override any options.\n     */\n    this.configure = function(overrideOptions) {\n      var options = _.merge({}, AV_ERROR.OPTIONS, overrideOptions);\n      var $stateProvider = $injector.get('$stateProvider');\n      angular.forEach(options.routes, function(route, name) {\n        $stateProvider.state(name, route);\n      });\n      if (options.sendOtherwiseToNotFound) {\n        var $urlRouterProvider = $injector.get('$urlRouterProvider');\n        var route = options.routes[AV_ERROR.PAGES.NOT_FOUND];\n        $urlRouterProvider.otherwise(route.url);\n      }\n    };\n\n    /**\n     * Return the service\n     * @param $location\n     * @returns {{show: avErrorPageService.show, notFound: avErrorPageService.notFound, unauthorized: avErrorPageService.unauthorized}}\n     */\n    this.$get = function($state) {\n\n      var avErrorPageService = {\n        /**\n         * Main show page service\n         * @param name\n         */\n        show: function(name) {\n          $state.go(name);\n        },\n        notFound: function() {\n          return this.show(AV_ERROR.PAGES.NOT_FOUND);\n        },\n        unauthorized: function() {\n          return this.show(AV_ERROR.PAGES.UNAUTHORIZED);\n        }\n      };\n      return avErrorPageService;\n    };\n  };\n\n  availity.ui.provider('avErrorPage', AvErrorPageProvider);\n\n})\n(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('AvHasPermissionController', function($element, $attrs, avErrorPage) {\n    var showErrorPage= angular.isDefined($attrs.showErrorPage);\n\n    this.onSuccess = function(isAuthorized) {\n      if(isAuthorized) {\n        $element.removeClass('ng-hide');\n        $element.show();\n      } else {\n        $element.remove();\n        if (showErrorPage) {\n          avErrorPage.unauthorized();\n        }\n      }\n    };\n\n    this.onError = function() {\n      $element.remove();\n    };\n\n  });\n\n  availity.ui.directive('avHasPermission', function(avUserAuthorizations) {\n    return {\n      restrict: 'EA',\n      controller: 'AvHasPermissionController',\n      require: ['avHasPermission'],\n      link: function($scope, $element, $attr, controllers) {\n\n        var avHasPermissionController = controllers[0];\n\n        $element.hide();\n\n        $scope.$watch($attr.avHasPermission, function(permissions) {\n\n          if(!angular.isArray(permissions)) {\n            permissions = _.words('' + permissions);\n          }\n\n          avUserAuthorizations.isAnyAuthorized(permissions).then(avHasPermissionController.onSuccess, avHasPermissionController.onError);\n        });\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.directive('avAnalytics', function() {\n    return {\n      scope: {\n        options: '=avAnalytics'\n      },\n      controller: function($scope) {\n        this.getOptions = function() {\n          return $scope.options;\n        };\n      }\n    };\n  });\n\n  availity.ui.controller('AvAnalyticsController', function(avAnalyticsUtils, avAnalytics) {\n\n    this.onEvent = function(event, element, options) {\n\n      // convert the directive attributes into object with properties with sane defaults\n      var properties = angular.extend(\n        {\n          level: 'info',\n          label: element.text()\n        },\n        options,\n        {\n          event: event.type\n        }\n      );\n\n      // If an external link is detected\n      if(avAnalyticsUtils.isExternalLink(properties)) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      var promise = avAnalytics.trackEvent(properties);\n      promise['finally'](function() {\n        if(avAnalyticsUtils.isExternalLink(properties)) {\n          document.location = element.attr('href');\n        }\n      });\n    };\n  });\n\n  availity.ui.directive('avAnalyticsOn', function(AV_ANALYTICS, avAnalyticsUtils) {\n    return {\n      restrict: 'A',\n      controller: 'AvAnalyticsController',\n      require: ['avAnalyticsOn','?^avAnalytics'],\n      link: function(scope, element, attrs, controllers) {\n        var childCtrl = controllers[0];\n        var parentCtrl = {};\n        var parentOptions = {};\n\n        if (controllers[1])  {\n          parentCtrl = controllers[1];\n          parentOptions = parentCtrl.getOptions();\n        }\n\n        var options = angular.extend(\n          {},\n          parentOptions,\n          avAnalyticsUtils.getProperties(attrs)\n        );\n\n        var eventType = attrs.avAnalyticsOn || AV_ANALYTICS.EVENTS.DEFAULT;\n\n        element.on(eventType, function(event) {\n          childCtrl.onEvent(event, element, options);\n        });\n      }\n    };\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.requires.push('ng.shims.placeholder');\n\n  availity.ui.config(function($provide) {\n\n    $provide.decorator('placeholderDirective', ['$delegate', '$log', function($delegate, $log) {\n\n      var directive = $delegate[0];\n      var originalLink = directive.link;\n\n      var newLink = function(scope, element, attrs) {\n\n        if(originalLink && _.contains(_.keys(attrs), 'avMask')) {\n          $log.info('placeholder shim not running on an element due to avMask on same element');\n          return;\n        }else if(originalLink) {\n          originalLink.apply(this, arguments);\n        }\n        //else originalLink doesn't exist\n      };\n\n      directive.compile = function() {\n        return newLink;\n      };\n\n      return $delegate;\n    }]);\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BREADCRUMBS', {\n\n    TEMPLATE: 'ui/breadcrumbs/breadcrumbs-tpl.html'\n  });\n\n  function AvBreadcrumbsController($state) {\n\n    this.getBreadcrumb = function(breadcrumbs, state) {\n      if(!state || !state.data) {\n        return;\n      }\n\n      var breadcrumb = state.data.breadcrumb;\n      if(!breadcrumb) {\n        return;\n      }\n\n      if(breadcrumb.parent) {\n        var parentState = $state.get(breadcrumb.parent);\n\n        if(parentState) {\n          this.getBreadcrumb(breadcrumbs, parentState);\n        }\n      }\n      breadcrumb.state = state.name;\n      breadcrumbs.push(breadcrumb);\n    };\n\n    this.getBreadcrumbs = function() {\n      var breadcrumbs = [];\n      this.getBreadcrumb(breadcrumbs, $state.current);\n      return breadcrumbs;\n    };\n\n  }\n\n  AvBreadcrumbsController.$inject = ['$state'];\n  availity.ui.controller('AvBreadcrumbsController', AvBreadcrumbsController);\n\n  function avBreadcrumbs(AV_BREADCRUMBS) {\n    return {\n      restrict: 'EA',\n      replace: true,\n      templateUrl: AV_BREADCRUMBS.TEMPLATE,\n      controller: 'AvBreadcrumbsController',\n      link: function(scope, element, attrs, avBreadcrumbs) {\n        scope.breadcrumbs = avBreadcrumbs.getBreadcrumbs();\n\n        scope.$on('$stateChangeSuccess', function() {\n          scope.breadcrumbs = avBreadcrumbs.getBreadcrumbs();\n        });\n      }\n    };\n  }\n\n  avBreadcrumbs.$inject = ['AV_BREADCRUMBS'];\n  availity.ui.directive('avBreadcrumbs', avBreadcrumbs);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.filter('avApproximate', function() {\n    var pow = Math.pow;\n    var floor = Math.floor;\n    var abs = Math.abs;\n    var log = Math.log;\n\n    function round(number, precision) {\n      var prec = pow(10, precision);\n      return Math.round(number * prec) / prec;\n    }\n\n    return function (number, precision) {\n      precision = precision || 0;\n      var base = floor(log(abs(number)) / log(1000));\n      var unit = 'kMGTPE'[base - 1];\n      return unit ? round(number / pow(1000, base), precision) + unit : (number || 0);\n    };\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BADGE', {\n    COLOR: null,\n    DEFAULT_CLASS: 'badge',\n    SHOW_WHEN_ZERO: false,\n    TEMPLATE: 'ui/badge/badge-tpl.html'\n  });\n\n  function badgeDirective(AV_BADGE) {\n\n    return {\n      scope: {\n        color: '@',\n        count: '=avBadge',\n        showWhenZero: '@'\n      },\n      templateUrl: AV_BADGE.TEMPLATE,\n      link: function(scope, element) {\n        scope.color = scope.color || AV_BADGE.COLOR;\n        scope.showWhenZero = scope.showWhenZero || AV_BADGE.SHOW_WHEN_ZERO;\n\n        var classes = [];\n        classes.push(AV_BADGE.DEFAULT_CLASS);\n        if(scope.color) {\n          classes.push(scope.color);\n        }\n\n        element.addClass(classes.join(' '));\n      }\n    };\n  }\n\n  badgeDirective.$inject = ['AV_BADGE'];\n  availity.ui.directive('avBadge', badgeDirective);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_REMOVABLE_LABEL', {\n    TEMPLATE: 'ui/labels/removable-label-tpl.html'\n  });\n\n  availity.ui.directive('avRemovableLabel', function(AV_REMOVABLE_LABEL) {\n    return {\n      templateUrl: AV_REMOVABLE_LABEL.TEMPLATE,\n      transclude: true,\n      scope: {\n        removeValue: '=',\n        onRemove: '&'\n      },\n      link: function(scope, element, attrs) {\n        element.addClass('label-remove');\n        scope.removeLabel = function() {\n          if(!attrs.disabled) {\n            scope.onRemove()(scope.removeValue);\n          }\n        };\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_LOADER', {\n\n    TEMPLATES: {\n      LOADER: 'ui/animation/loader-tpl.html'\n    }\n\n  });\n\n  availity.ui.controller('AvLoaderController', function($element) {\n\n    var self = this;\n    var active;\n\n    this.start = function() {\n      active = true;\n      this.animate();\n    };\n\n    this.animate = function() {\n\n      $element\n        .find('.loading-bullet')\n        .velocity('transition.slideRightIn', { stagger: 250 })\n        .velocity({ opacity: 0 }, {\n          delay: 750,\n          duration: 500,\n          complete: function() {\n            if(active) {\n              setTimeout(function() {self.animate();}, 500);\n            } else {\n              self.endAnimation();\n            }\n          }\n        });\n\n    };\n\n    this.endAnimation = function() {\n      $element.find('.loading-bullet').velocity('stop', true);\n      $element.removeData();\n    };\n\n    this.stop = function() {\n      active = false;\n    };\n\n  });\n\n  availity.ui.directive('avLoader', function(AV_LOADER) {\n    return {\n      restrict: 'A',\n      replace: true,\n      controller: 'AvLoaderController',\n      require: 'avLoader',\n      templateUrl: AV_LOADER.TEMPLATES.LOADER,\n      link: function(scope, element, attr, avLoader) {\n\n        if(!attr.delay) {\n          avLoader.start();\n        }\n\n        scope.$on('$destroy', function() {\n          avLoader.stop();\n        });\n\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BLOCK', {\n    TEMPLATES: {\n      BLOCK: 'ui/block/block-tpl.html'\n    }\n  });\n\n  var getLoaderController = function(blockId) {\n    var el = $('[data-block-ui=\"' + blockId + '\"]') || $('[block-ui=\"' + blockId + '\"]');\n    if(el) {\n      return el.find('[data-av-loader]').controller('avLoader');\n    }\n  };\n\n  var triggerLoaderController = function(id, instance, fn) {\n\n    var controller = instance.loaderController;\n    if(!controller) {\n      controller = getLoaderController(id);\n      instance.loaderController = controller;\n    }\n    if(controller && _.isFunction(controller[fn])) {\n      controller[fn]();\n    }\n\n  };\n\n  var triggerInstance = function(id, instance, origFn, loaderFn) {\n    triggerLoaderController(id, instance, loaderFn);\n    origFn.apply(instance);\n  };\n\n  var modifyBlockInstances = function(id, instance) {\n\n    var origStartFn = instance.start;\n    var origStopFn = instance.stop;\n\n    instance.start = function() {\n      triggerInstance(id, instance, origStartFn, 'start');\n    };\n\n    instance.stop = function() {\n      triggerInstance(id, instance, origStopFn, 'stop');\n    };\n\n    instance.startLoader = function() {\n      triggerLoaderController(id, instance, 'start');\n    };\n\n    instance.avModifications = true;\n  };\n\n  availity.ui.run(function($injector, $log, AV_BLOCK) {\n\n    try {\n\n      var blockUIConfig = $injector.get('blockUIConfig');\n      var blockUI = $injector.get('blockUI');\n      blockUIConfig.autoBlock = false;\n      blockUIConfig.delay = 0;\n      blockUIConfig.templateUrl = AV_BLOCK.TEMPLATES.BLOCK;\n\n      var origGetFn = blockUI.instances.get;\n      blockUI.instances.get = function(id) {\n        var instance = origGetFn(id);\n        if(!instance.avModifications) {\n          modifyBlockInstances(id, instance);\n        }\n        return instance;\n      };\n\n    } catch(e) {\n      $log.warn('blockUI is required to use av block.');\n    }\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // Helper directive that hooks into block-ui's start-up lifecycle and starts the loader\n  availity.ui.directive('avBlockUi', function(blockUI) {\n\n    return {\n      restrict: 'A',\n      link: function($scope, $element, $attrs) {\n\n        var blockId = $attrs.avBlockUi;\n        var blockCount = $attrs.blockCount;\n        var instance = blockUI.instances.get(blockId);\n        if(blockCount > 0) {\n          instance.startLoader();\n        }\n      }\n    };\n\n  });\n\n})(window);\n","/*\n* Inspired by https://github.com/angular-ui/bootstrap/blob/master/src/tabs/tabs.js\n*/\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_TABS', {\n    TEMPLATES: {\n      TABS: 'ui/tabs/tabs-tpl.html',\n      TAB: 'ui/tabs/tab-tpl.html'\n    }\n  });\n\n  function TabsController($scope) {\n\n    var self = this;\n\n    $scope.tabs = [];\n    self.tabs = $scope.tabs;\n\n    this.addTab = function(tab) {\n      self.tabs.push(tab);\n\n      if(self.tabs.length === 1) {\n        tab.active = true;\n      } else if(tab.active) {\n        self.selectTab(tab);\n      } else {\n        tab.active = false;\n      }\n    };\n\n    this.removeTab = function(tab) {\n      var index = self.tabs.indexOf(tab);\n\n      if(tab.active && self.tabs.length > 1) {\n        //If this is the last tab, select the previous tab. else, the next tab.\n        var newActiveIndex = index === self.tabs.length - 1 ? index - 1 : index + 1;\n        self.selectTab(self.tabs[newActiveIndex]);\n      }\n\n      self.tabs.splice(index, 1);\n    };\n\n    this.selectTab = function(selectedTab) {\n      angular.forEach(self.tabs, function (tab) {\n        if(tab.active && tab !== selectedTab) {\n          tab.active = false;\n          tab.onDeselect();\n        }\n      });\n\n      selectedTab.active = true;\n      selectedTab.onSelect();\n    };\n  }\n\n  TabsController.$inject = ['$scope'];\n  availity.ui.controller('AvTabsController', TabsController);\n\n  function TabsDirective(AV_TABS) {\n    return {\n      restrict: 'AE',\n      templateUrl: AV_TABS.TEMPLATES.TABS,\n      transclude: true,\n      replace: true,\n      controller: 'AvTabsController',\n      scope: true,\n      link: function(scope, element, attrs) {\n        scope.justified = !!attrs.justified;\n        scope.tabType = attrs.tabType;\n        scope.vertical = !!attrs.vertical;\n\n        if(angular.isUndefined(attrs.padContent)) {\n          scope.padContent = true;\n        }\n      }\n    };\n  }\n\n  TabsDirective.$inject = ['AV_TABS'];\n  availity.ui.directive('avTabs', TabsDirective);\n\n  function TabDirective(AV_TABS) {\n    return {\n      restrict: 'AE',\n      templateUrl: AV_TABS.TEMPLATES.TAB,\n      replace: true,\n      require: '^avTabs',\n      transclude: true,\n      scope: {\n        heading: '@',\n        template: '=',\n        templateUrl: '=',\n        onSelect: '&select',\n        onDeselect: '&deselect'\n      },\n      controller: function() {\n        // Allow avTabs to be required by other directives\n      },\n      link: function(scope, element, attrs, tabsController, transclude) {\n        scope.transcludeFn = transclude;\n\n        tabsController.addTab(scope);\n\n        scope.$on('destroy', function() {\n          tabsController.removeTab(scope);\n        });\n\n        scope.select = function() {\n          if(!scope.disabled) {\n            tabsController.selectTab(scope);\n          }\n        };\n\n        scope.$watch('active', function(active) {\n          if(active) {\n            tabsController.selectTab(scope);\n          }\n        });\n\n        if(angular.isDefined(attrs.active)) {\n          scope.active = attrs.active;\n\n          scope.$parent.$watch(attrs.active, function(active) {\n            if(active) {\n              tabsController.selectTab(scope);\n            }\n          });\n        }\n\n        if(angular.isDefined(attrs.disable)) {\n          scope.$parent.$watch(attrs.disable, function(disabled) {\n            scope.disabled = !!disabled;\n          });\n        }\n      }\n    };\n  }\n\n  TabDirective.$inject = ['AV_TABS'];\n  availity.ui.directive('avTab', TabDirective);\n\n  function TabPaneDirective(avTemplateCache, $compile) {\n    return {\n      restrict: 'AE',\n      require: '^avTabs',\n      link: function(scope, element, attrs) {\n\n        var tab = scope.$eval(attrs.avTabPane);\n\n        if(angular.isDefined(tab.template) || angular.isDefined(tab.templateUrl)) {\n          avTemplateCache.get(tab)\n          .then(function(template) {\n            element.append($compile(template)(scope));\n          });\n        } else {\n          tab.transcludeFn(tab.$parent, function(contents) {\n            angular.forEach(contents, function(node) {\n              element.append(node);\n            });\n          });\n        }\n      }\n    };\n  }\n\n  TabPaneDirective.$inject = ['avTemplateCache', '$compile'];\n  availity.ui.directive('avTabPane', TabPaneDirective);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_SCROLL_PAGINATION', {\n    TEMPLATE: 'ui/scroll-pagination/scroll-pagination-tpl.html',\n    DEFAULT_OPTIONS: {\n      limit: 50,\n      offset: 0,\n      maxCached: 100,\n      loadMoreText: 'Load more items',\n      entryIdAttribute: 'id',\n      apiParams: {},\n      beforePageLoad: undefined,\n      afterPageLoad: undefined\n    }\n  });\n\n\n  availity.ui.factory('avScrollPaginationService', function($log) {\n    function AvScrollPaginationService() {\n      this.instances = {};\n    }\n\n    var proto = AvScrollPaginationService.prototype;\n\n    proto.registerInstance = function(instanceInterface, id) {\n      if (this.instances[id]) {\n        $log.warn('Found existing instance with id ' + id);\n      }\n      this.instances[id] = instanceInterface;\n    };\n\n    proto.unregisterInstance = function(id) {\n      delete this.instances[id];\n    };\n\n    proto.resetInstance = function(id) {\n      if (this.instances[id]) {\n        this.instances[id].reset();\n        return true;\n      }\n      return false;\n    };\n\n    return new AvScrollPaginationService();\n  });\n\n  availity.ui.controller('AvScrollPaginationController', function($scope, $element, $timeout, $log, AV_SCROLL_PAGINATION, blockUI, avScrollPaginationService) {\n\n    var self = this;\n\n    this.buildOptions = function() {\n      $scope._options = {};\n      _.extend($scope._options, AV_SCROLL_PAGINATION.DEFAULT_OPTIONS, $scope.options || {});\n      $scope._options.lowOffset = $scope._options.offset;\n      $scope._options.highOffset = $scope._options.offset;\n    };\n\n    var originalEntries = angular.copy($scope.entries);\n    this.buildOptions();\n\n    this.updateButtonVisibilityFlags = function(data) {\n      $scope.showNext = $scope._options.highOffset + data.count < data.totalCount;\n      $scope.showPrev = $scope._options.lowOffset > 0;\n    };\n\n    this.disableVisibilityFlags = function() {\n      $scope.showNext = false;\n      $scope.showPrev = false;\n    };\n\n    this.loadEntries = function(prepend) {\n      var block = blockUI.instances.get('scroll-pagination-block-' + $scope.avScrollPagination);\n      self.disableVisibilityFlags();\n      block.start();\n      if (_.isFunction($scope._options.beforePageLoad)) {\n        $scope._options.beforePageLoad($scope._options);\n      }\n      var params = {};\n      _.extend(params, $scope._options.apiParams, {limit: $scope._options.limit, offset: $scope._options.offset});\n      $scope.apiResource.query({params: params}).then(function(response) {\n        var responseData = self.getResponseData(response);\n        if ($scope._options.afterPageLoad) {\n          $scope._options.afterPageLoad(responseData);\n        }\n        if (responseData && responseData[$scope._options.resourceId]) {\n          self.addEntries(responseData[$scope._options.resourceId], prepend);\n        }\n        self.updateButtonVisibilityFlags(responseData);\n        block.stop();\n      }, function() {\n        $log.error('API call failed');\n        block.stop();\n      });\n    };\n\n    this.getResponseData = function(data) {\n      if (data) {\n        if ($scope._options.responseKey) {\n          var keys = $scope._options.responseKey.split('.');\n          var nestedData = data;\n          var noData = false;\n          _.each(keys, function(key) {\n            if (!noData) {\n              nestedData = nestedData[key];\n              if (!nestedData) {\n                noData = true;\n              }\n            }\n          });\n          return noData ? [] : nestedData;\n        } else {\n          return data;\n        }\n      }\n      return [];\n    };\n\n    this.addEntries = function(entries, prepend) {\n      var oldEntries = angular.copy($scope.entries);\n      if (prepend) {\n        $scope.entries.unshift.apply($scope.entries, entries);\n      } else {\n        $scope.entries.push.apply($scope.entries, entries);\n      }\n      if ($scope.entries.length > $scope._options.maxCached) {\n        var diff = $scope.entries.length - $scope._options.maxCached;\n        var trackedElementId;\n        if (prepend) {\n          $scope.entries = $scope.entries.slice(0, $scope._options.maxCached);\n          $scope._options.highOffset -= diff;\n          trackedElementId = oldEntries[oldEntries.length-diff-1] ? oldEntries[oldEntries.length-diff-1][$scope._options.entryIdAttribute] : undefined;\n        } else {\n          $scope.entries = $scope.entries.slice(diff, $scope.entries.length);\n          $scope._options.lowOffset += diff;\n          trackedElementId = oldEntries[diff] ? oldEntries[diff][$scope._options.entryIdAttribute] : undefined;\n        }\n        self.autoscroll(trackedElementId, prepend);\n      }\n    };\n\n    this.autoscroll = function(trackedElementId, prepend) {\n      if (trackedElementId) {\n        var trackedElement = $element.find('#'+trackedElementId);\n        var trackedElementTop = trackedElement.offset().top;\n        $timeout(function() {\n          var newScrollTop = $element.scrollTop() + trackedElement.offset().top - trackedElementTop;\n          $element.animate({scrollTop: newScrollTop}, 0);\n        }, 0, false);\n      } else {\n        $timeout(function() {\n          if (prepend) {\n            $element.animate({scrollTop: $element.prop('scrollHeight')}, 0);\n          } else {\n            $element.animate({scrollTop: 0}, 0);\n          }\n        }, 0, false);\n      }\n    };\n\n    this.loadPrev = function() {\n      $scope._options.lowOffset -= $scope._options.limit;\n      $scope._options.offset = $scope._options.lowOffset;\n      self.loadEntries(true);\n    };\n\n    this.loadNext = function() {\n      $scope._options.highOffset += $scope._options.limit;\n      $scope._options.offset = $scope._options.highOffset;\n      self.loadEntries();\n    };\n\n    avScrollPaginationService.registerInstance({\n      reset: function() {\n        $element.animate({scrollTop: 0}, 0);\n        $scope.entries = angular.copy(originalEntries);\n        self.buildOptions();\n        self.loadEntries();\n      }},\n      $scope.avScrollPagination\n    );\n\n    $scope.$on('$destroy', function() {\n      avScrollPaginationService.unregisterInstance($scope.avScrollPagination);\n    });\n\n    $scope.loadPrev = self.loadPrev;\n    $scope.loadNext = self.loadNext;\n\n    this.loadEntries();\n  });\n\n\n\n  availity.ui.directive('avScrollPagination', function($log, AV_SCROLL_PAGINATION) {\n    return {\n      restrict: 'A',\n      controller: 'AvScrollPaginationController',\n      transclude: true,\n      templateUrl: AV_SCROLL_PAGINATION.TEMPLATE,\n      scope: {\n        apiResource: '=',\n        entries: '=',\n        options: '=',\n        avScrollPagination: '@'\n      },\n      link: function($scope) {\n        if (!$scope.avScrollPagination) {\n          $log.error('Directive must include an id');\n        }\n      }\n    };\n  });\n\n})(window);\n","// Original => http://bootsnipp.com/snippets/78VV\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.provider('avDimmerConfig', function() {\n\n    var config = {\n      animationConfig: {\n        duration: 250\n      },\n      showAnimation: 'fadeIn',\n      showEvent: 'mouseenter',\n      hideAnimation: 'fadeOut',\n      hideEvent: 'mouseleave',\n      overlaySelector: '.dimmer-content'\n    };\n\n    this.set = function(options) {\n      angular.extend(config, options);\n    };\n\n    this.$get = function() {\n      return angular.copy(config);\n    };\n\n  });\n\n  availity.ui.directive('avDimmer', function(avDimmerConfig) {\n    return {\n      link: function(scope,  elm, attrs) {\n        var config = angular.extend({}, avDimmerConfig, attrs.config);\n\n        elm.on(config.showEvent, function() {\n          elm.find(config.overlaySelector).velocity(config.showAnimation, config.animationConfig);\n        }).on(config.hideEvent, function() {\n          elm.find(config.overlaySelector).velocity(config.hideAnimation, config.animationConfig);\n        });\n\n        scope.$on('$destroy', function() {\n          elm.off();\n        });\n      }\n    };\n  });\n\n})(window);\n"],"sourceRoot":"/source/"}