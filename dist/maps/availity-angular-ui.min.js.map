{"version":3,"sources":["availity-angular-ui.js","/source/index.js","/source/template.js","/source/modal.js","/source/form.js","/source/field.js","/source/popover.js","/source/messages.js","/source/adapter-bootstrap.js","/source/adapter.js","/source/dropdown.js","/source/datepicker.js","/source/idle-notifier.js","/source/mask.js","/source/has-permission.js","/source/analytics.js","/source/placeholder.js","/source/breadcrumbs.js","/source/approximate.js","/source/badge.js","/source/removable-label.js","/source/loader.js","/source/block.js","/source/block-directive.js","/source/tabs.js"],"names":["root","availity","MODULE_UI","ui","angular","module","constant","NG_OPTIONS","exports","window","factory","$q","$templateCache","$http","get","options","valid","template","templateUrl","Error","when","cache","then","result","data","OPTIONS","scope","id","container","keyboard","backdrop","show","remote","EVENTS","SHOW","SHOWN","HIDE","HIDDEN","BS_EVENTS","TEMPLATES","MODAL","AvModalManager","this","instances","proto","prototype","add","push","remove","_","without","closeAll","forEach","$el","$","bsModal","removeBackdrop","$body","removeClass","resetAdjustments","resetScrollbar","avModal","destroy","ModalFactory","$rootScope","$timeout","$compile","AV_MODAL","avTemplateCache","avModalManager","Modal","self","templateDefer","defer","templatePromise","promise","extend","$new","_build","create","$element","element","_createId","_scope","_init","appendTo","resolve","modal","_listeners","modalShow","modalToggle","toggle","modalHide","hide","animationDefer","animationPromise","on","event","$emit","isFunction","onShown","onHidden","call","$evalAsync","$on","_id","deferred","one","attr","uuid","directive","restrict","replace","transclude","size","controller","ngForm","rulesKey","avValOn","avValDebounce","avValInvalid","violations","init","form","record","count","violocationCount","reduce","sum","num","$setValidity","unrecord","reset","$setPristine","$submitted","$setSubmitted","setRulesKey","key","$log","$parse","AV_VAL","avValAdapter","priority","require","compile","pre","iEl","iAttrs","controllers","ruleFn","avValForm","error","$watch","_rulesKey","_oldRulesKey","avForm","info","$broadcast","REVALIDATE","post","fn","ngSubmit","off","ngClick","RESET","bind","SUBMITTED","$invalid","FAILED","preventDefault","stopImmediatePropagation","scroll","callback","$event","$apply","$attrs","avVal","$scope","$sniffer","ngModel","rule","placeholder","noEvent","createId","avId","setNgModel","setRule","updateModel","results","validationKeys","avResults","contraintName","isValid","avViolations","length","$error","value","indexOf","lastIndexOf","updateView","$dirty","message","validate","validateModel","validateView","undefined","onDebounce","val","trim","isCheckbox","$setViewValue","checked","isRadio","is","type","splice","unbind","debounce","msie","cancel","link","attrs","avValField","parseInt","DEBOUNCE","isNumber","debounceAllowed","$parsers","$formatters","unshift","$viewValue","NAME","AV_POPOVER","listeners","name","ev","plugin","popover","html","messages","CLASSES","SUCCESS","WARNING","ERROR","FEEDBACK","HELP","FORM_GROUP","NAVBAR","SELECTORS","CONTAINER","DATA_CONTAINER","CONTROLLER","AV_BOOTSTRAP_ADAPTER","$valid","parents","addClass","selector","join","target","siblings","warn","el","avValModel","navbarSelector","offset","each","outerHeight","$target","find","animate","scrollTop","top","DEFAULT","provider","that","setAdapter","adapter","$get","AV_VAL_ADAPTER","$injector","Adapter","adapterName","config","closeOnResize","dropdownAutoWidth","minimumResultsForSearch","set","copy","AV_UI","AV_DROPDOWN","avDropdownConfig","match","contains","$eval","multiple","isDefined","query","queryFn","getId","getSelected","model","items","collection","index","findIndex","item","equals","response","more","setValue","viewValue","selected","select2","getMultiSelected","indices","savedObject","temp","matches","setValues","isArray","isEmpty","isObject","ngOptions","displayFn","valueName","valueFn","keyName","$watchCollection","newVal","oldVal","$window","avDropdown","parent","prev","toggleClass","$pristine","e","added","ngFocus","ngBlur","classNames","className","split","i","_$render","$render","win","$observe","ADD_ON_SELECTOR","DEFAULTS","FORMAT","CLOSE","TODAY","FORCEPARSE","MODELFORMAT","AV_DATEPICKER","$modelValue","setDate","findModel","$input","andSelf","modelToView","datepicker","DPGlobal","formatDate","format","wrapIsoDate","date","moment","isDate","m","toDate","viewToModel","parseFormat","utcDate","parseDate","localDate","_utc_to_local","modelFormat","autoclose","todayHighlight","forceParse","toLowerCase","avDatepicker","prop","focus","OK","BASE","SESSION","sessionTemplate","warningTemplate","setSessionTemplate","setWarningTemplate","AV_IDLE","AV_UI_IDLE","AvModal","$document","AvIdleNotifier","idle","initListeners","listener","IDLE_ACTIVE","showWarning","IDLE_INACTIVE","hideWarning","SESSION_TIMEOUT_ACTIVE","showSession","destroyListeners","disableBackDrop","onSessionTimeout","SESSION_TIMEOUT_REDIRECT","run","avIdleNotifier","phone","SSN","AV_MASK","maskType","inputmask","onSuccess","isAuthorized","onError","avUserAuthorizations","$attr","avHasPermission","permissions","words","isAnyAuthorized","core","avAnalyticsUtils","avAnalytics","onEvent","isExternalLink","stopPropagation","properties","level","getProperties","trackEvent","document","location","required","avAnalyticsOn","eventType","requires","$provide","decorator","$delegate","originalLink","newLink","keys","apply","arguments","TEMPLATE","AvBreadcrumbsController","$state","getBreadcrumb","breadcrumbs","state","breadcrumb","parentState","getBreadcrumbs","current","$inject","avBreadcrumbs","AV_BREADCRUMBS","filter","pow","Math","floor","abs","log","round","number","precision","prec","base","unit","COLOR","DEFAULT_CLASS","SHOW_WHEN_ZERO","badgeDirective","AV_BADGE","color","showWhenZero","classes","AV_REMOVABLE_LABEL","removeValue","onRemove","removeLabel","disabled","LOADER","active","start","velocity","stagger","opacity","delay","duration","complete","setTimeout","endAnimation","removeData","stop","AV_LOADER","avLoader","BLOCK","getLoaderController","blockId","triggerLoaderController","instance","loaderController","triggerInstance","origFn","loaderFn","modifyBlockInstances","origStartFn","origStopFn","startLoader","avModifications","AV_BLOCK","blockUIConfig","blockUI","autoBlock","origGetFn","avBlockUi","blockCount","TABS","TAB","TabsController","tabs","addTab","tab","selectTab","removeTab","newActiveIndex","selectedTab","onDeselect","onSelect","TabsDirective","AV_TABS","justified","tabType","vertical","isUndefined","padContent","TabDirective","heading","tabsController","transcludeFn","select","$parent","disable","TabPaneDirective","avTabPane","append","contents","node"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,CCHA,SAAAA,MAEA,YAEA,IAAAC,UAAAD,KAAAC,YAEAA,UAAAC,UAAA,aACAD,UAAAE,GAAAC,QAAAC,OAAAJ,SAAAC,WAAA,KAAA,cAEAD,UAAAE,GAAAG,SAAA,SAEAC,WAAA,0MAIA,UAAAF,UAAA,aAAAA,OAAAG,QAAA,CACAH,OAAAG,QAAAP,YAIAQ,SCrBA,SAAAT,MACA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAO,QAAA,kBAAA,SAAAC,GAAAC,eAAAC,OAEA,OAEAC,IAAA,SAAAC,SAEA,GAAAC,QAAAD,QAAAE,WAAAF,QAAAG,WAEA,KAAAF,MAAA,CACA,KAAA,IAAAG,OAAA,sFAGA,MAAAJ,SAAAE,SAAAN,GAAAS,KAAAL,QAAAE,UACAJ,MAAAC,IAAAC,QAAAG,aAAAG,MAAAT,iBACAU,KAAA,SAAAC,QACA,MAAAA,QAAAC,aAMAf,SC3BA,SACAT,MACA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAG,SAAA,YAEAmB,SACAC,MAAA,KACAR,YAAA,KACAD,SAAA,KACAU,GAAA,KACAC,UAAA,KAGAC,SAAA,KACAC,SAAA,KACAC,KAAA,MACAC,OAAA,OAGAC,QACAC,KAAA,gBACAC,MAAA,iBACAC,KAAA,gBACAC,OAAA,mBAGAC,WACAJ,KAAA,gBACAC,MAAA,iBACAC,KAAA,gBACAC,OAAA,mBAGAE,WACAC,MAAA,4BAIAvC,UAAAE,GAAAO,QAAA,iBAAA,WAEA,GAAA+B,gBAAA,WACAC,KAAAC,aAGA,IAAAC,OAAAH,eAAAI,SAGAD,OAAAE,IAAA,SAAAnB,IACAe,KAAAC,UAAAI,KAAApB,IAGAiB,OAAAI,OAAA,SAAArB,IACAe,KAAAC,UAAAM,EAAAC,QAAAR,KAAAC,UAAAhB,IAGAiB,OAAAO,SAAA,WAEAF,EAAAG,QAAAV,KAAAC,UAAA,SAAAhB,IAEA,GAAA0B,KAAAC,EAAA,IAAA3B,GAEA,KAAA0B,IAAA,CACA,OAGA,GAAAE,SAAAF,IAAA7B,KAAA,WACA,IAAA+B,QAAA,CACAA,QAAAC,gBACAD,SAAAE,MAAAC,YAAA,aACAH,SAAAI,kBACAJ,SAAAK,iBAGA,GAAAC,SAAAR,IAAA7B,KAAA,UACA,IAAAqC,QAAA,CACAA,QAAAC,aAOA,OAAA,IAAArB,iBAIA,IAAAsB,cAAA,SAAAC,WAAAC,SAAAC,SAAAC,SAAAC,gBAAAzD,GAAA0D,gBAEA,GAAAC,OAAA,SAAAvD,SAEA,GAAAwD,MAAA7B,IAEAA,MAAA8B,cAAA7D,GAAA8D,OACA/B,MAAAgC,gBAAAhC,KAAA8B,cAAAG,OAEAjC,MAAA3B,QAAAX,QAAAwE,UAAAT,SAAA1C,SAAAC,MAAAsC,WAAAa,QAAA9D,QAEAqD,iBAAAtD,IAAAC,SAAAO,KAAA,SAAAL,UACAsD,KAAAxD,QAAAE,SAAAA,QACAsD,MAAAO,WAKAR,OAAAS,OAAA,SAAAhE,SACA,MAAA,IAAAuD,OAAAvD,SAGA,IAAA6B,OAAA0B,MAAAzB,SAEAD,OAAAkC,OAAA,WAEA,GAAAP,MAAA7B,IAEA,IAAAhB,OAAAgB,KAAA3B,QAAAW,KACAgB,MAAAsC,SAAA5E,QAAA6E,QAAAvC,KAAA3B,QAAAE,SAEAyB,MAAAwC,WAEAxC,MAAAyC,QAGAjB,UAAAxB,KAAAsC,UAAAtD,MAEAuC,UAAA,WACAM,KAAAa,SACA,EAAA,KAGA1C,MAAA3B,QAAAa,UAAAc,KAAAsC,SAAAK,SAAA3C,KAAA3B,QAAAa,WAAAc,KAAAsC,SAAAK,SAAA,QAIAzC,OAAAwC,MAAA,WAEA1C,KAAAsC,SAAAxD,KAAA,UAAAkB,KAEAA,MAAA8B,cAAAc,QAAA,KAGA5C,MAAAsC,SAAAO,OACAzD,SAAAY,KAAA3B,QAAAe,SACAD,SAAAa,KAAA3B,QAAAc,SACAE,KAAAW,KAAA3B,QAAAgB,KACAC,OAAAU,KAAA3B,QAAAiB,QAGAU,MAAA8C,aAGA5C,OAAAuC,OAAA,WAEA,GAAAZ,MAAA7B,IACA,IAAAhB,OAAAgB,KAAA3B,QAAAW,KAEAA,OAAA+D,UAAA,WACAlB,KAAAxC,OAGAL,OAAAgE,YAAA,WACAnB,KAAAoB,SAGAjE,OAAAkE,UAAA,WACArB,KAAAsB,QAKAjD,OAAA4C,WAAA,WAEA,GAAAjB,MAAA7B,IACA,IAAAhB,OAAAgB,KAAA3B,QAAAW,KACA,IAAAsD,UAAAtC,KAAAsC,QAEAtC,MAAAoD,eAAAnF,GAAA8D,OACA/B,MAAAqD,iBAAArD,KAAAoD,eAAAnB,OAEAK,UAAAgB,GAAA7B,SAAA7B,UAAAJ,KAAA,SAAA+D,OACAvE,MAAAwE,MAAA/B,SAAAlC,OAAAC,KAAA+D,MAAA1B,OAGAS,UAAAgB,GAAA7B,SAAA7B,UAAAH,MAAA,SAAA8D,OAEA,GAAA7F,QAAA+F,WAAA5B,KAAAxD,QAAAqF,SAAA,CACA7B,KAAAxD,QAAAqF,UAGA7B,KAAAuB,eAAAR,QAAA,KAEA5D,OAAAwE,MAAA/B,SAAAlC,OAAAE,MAAA8D,MAAA1B,OAGAS,UAAAgB,GAAA7B,SAAA7B,UAAAF,KAAA,SAAA6D,OACAvE,MAAAwE,MAAA/B,SAAAlC,OAAAG,KAAA6D,MAAA1B,OAGAS,UAAAgB,GAAA7B,SAAA7B,UAAAD,OAAA,SAAA4D,OAEA,GAAA7F,QAAA+F,WAAA5B,KAAAxD,QAAAsF,UAAA,CACA9B,KAAAxD,QAAAsF,SAAAC,KAAA5D,MAGAhB,MAAAwE,MAAA/B,SAAAlC,OAAAI,OAAA4D,MAAA1B,KAEA7C,OAAA6E,WAAA,WACAhC,KAAAT,aAMApC,OAAA8E,IAAA,WAAA,WACAnC,eAAArB,OAAAuB,KAAAkC,IACAlC,MAAAT,YAKAlB,OAAAb,KAAA,WAEA,GAAAwC,MAAA7B,IAEAA,MAAAoD,eAAAnF,GAAA8D,OACA/B,MAAAqD,iBAAArD,KAAAoD,eAAAnB,OAEA,OAAAjC,MAAAgC,gBAAApD,KAAA,WACAiD,KAAAS,SAAAO,MAAA,UACAjE,KAAA,WACA,MAAAiD,MAAAwB,mBAKAnD,OAAAiD,KAAA,WAEA,GAAAtB,MAAA7B,IAEA,IAAAgE,UAAA/F,GAAA8D,OAEA/B,MAAAgC,gBAAApD,KAAA,WAEAiD,KAAAS,SAAA2B,IAAA,kBAAA,WACAD,SAAApB,QAAA,OAGAf,MAAAS,SAAAO,MAAA,SAIA,OAAAmB,UAAA/B,QAGA/B,OAAA+C,OAAA,WAEA,GAAApB,MAAA7B,IAEA,IAAAgE,UAAA/F,GAAA8D,OAEA/B,MAAAgC,gBAAApD,KAAA,WAEAiD,KAAAS,SAAA2B,IAAA,kBAAA,WACAD,SAAApB,QAAA,OAGAf,MAAAS,SAAAxD,KAAA,SAAAmE,UAIA,OAAAe,UAAA/B,QAIA/B,OAAAkB,QAAA,WAEA,GAAAS,MAAA7B,IAEA,OAAAA,MAAAgC,gBAAApD,KAAA,WACAiD,KAAAS,SAAAxD,KAAA,UAAA,KACA+C,MAAAS,SAAAhC,WAKAJ,OAAAsC,UAAA,WAEA,GAAAvD,IAAAe,KAAAsC,SAAA4B,KAAA,KACA,KAAAjF,GAAA,CAEAA,GAAAe,KAAA3B,QAAAY,GAAAe,KAAA3B,QAAAY,GAAA1B,SAAA4G,KAAA,cACAnE,MAAAsC,SAAA4B,KAAA,KAAAjF,IAGAe,KAAA+D,IAAA9E,EAEA0C,gBAAAvB,IAAAnB,IAGA,OAAA2C,OAIArE,UAAAE,GAAAO,QAAA,UAAAqD,aAEA9D,UAAAE,GAAA2G,UAAA,UAAA,SAAA3C,UACA,OACA4C,SAAA,IACAC,QAAA,KACAC,WAAA,KACAvF,OACAwF,KAAA,KAEAhG,YAAAiD,SAAA5B,UAAAC,WAIA/B,SC1TA,SAAAT,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAgH,WAAA,sBAAA,WAEAzE,KAAA0E,OAAA,IACA1E,MAAA2E,SAAA,IACA3E,MAAA4E,QAAA,IACA5E,MAAA6E,cAAA,IACA7E,MAAA8E,aAAA,KAWA9E,MAAA+E,aAEA/E,MAAAgF,KAAA,SAAAC,MACAjF,KAAA0E,OAAAO,KASAjF,MAAAkF,OAAA,SAAAjG,GAAAkG,OACAnF,KAAA+E,WAAA9F,IAAAkG,KAEA,IAAAC,kBAAA7E,EAAA8E,OAAArF,KAAA+E,WAAA,SAAAO,IAAAC,KACA,MAAAD,KAAAC,KACA,EAEAvF,MAAA0E,OAAAc,aAAA,KAAAJ,mBAAA,GAGApF,MAAAyF,SAAA,SAAAxG,IACA,GAAAA,IAAAe,KAAA+E,WAAA9F,IAAA,OACAe,MAAA+E,WAAA9F,KAIAe,MAAA0F,MAAA,WACA1F,KAAA0E,OAAAiB,cACA3F,MAAA0E,OAAAkB,WAAA,MAGA5F,MAAA6F,cAAA,WACA7F,KAAA0E,OAAAkB,WAAA,KAGA5F,MAAA8F,YAAA,SAAAC,KACA/F,KAAA2E,SAAAoB,MAeAxI,UAAAE,GAAA2G,UAAA,YAAA,SAAA4B,KAAAzE,SAAA0E,OAAAC,OAAAC,aAAA7E,YACA,OACA+C,SAAA,IACA+B,SAAA,GACAC,SAAA,OAAA,YAAA,aACA5B,WAAA,sBACA6B,QAAA,WACA,OACAC,IAAA,SAAAvH,MAAAwH,IAAAC,OAAAC,aAEA,GAAAC,QAAAV,OAAAQ,OAAAG,UACA,IAAAjC,UAAAgC,OAAA3H,MACA2F,UAAAA,UAAA8B,OAAAG,SAEA,KAAAjC,SAAA,CACAqB,KAAAa,MAAA,8EACA,QAGA7H,MAAA8H,OAAAH,OAAA,SAAAI,UAAAC,cACA,GAAAD,UAAA,CACAE,OAAAnB,YAAAiB,UAEA,IAAAA,YAAAC,aAAA,CACAzF,SAAA,WACAyE,KAAAkB,KAAA,uBACA5F,YAAA6F,WAAAjB,OAAA3G,OAAA6H,iBAQA,IAAA1C,QAAAgC,YAAA,EACA,IAAAO,QAAAP,YAAA,EAKAO,QAAArC,QAAA6B,OAAA7B,SAAA,IACAqC,QAAApC,cAAA4B,OAAA5B,eAAA,IAEAoC,QAAAnC,aAAA2B,OAAA3B,cAAA,KAEAmC,QAAAjC,KAAAN,OACAuC,QAAAnB,YAAAnB,WAGA0C,KAAA,SAAArI,MAAAwH,IAAAC,OAAAC,aAEAF,IAAAtC,KAAA,aAAA,aAGA,IAAAoD,GACA,IAAAb,OAAAc,SAAA,CAEAf,IAAAgB,IAAA,SACAF,IAAArB,OAAAQ,OAAAc,SAAA,UACA,IAAAd,OAAAgB,QAAA,CAEAjB,IAAAgB,IAAA,QACAF,IAAArB,OAAAQ,OAAAgB,QAAA,MAGA,GAAA/C,QAAAgC,YAAA,EACA,IAAAO,QAAAP,YAAA,EAEA1H,OAAA8E,IAAAoC,OAAA3G,OAAAmI,MAAA,WACAT,OAAAvB,SAGAc,KAAAmB,KAAA,SAAA,SAAApE,OAEAvE,MAAAmI,WAAAjB,OAAA3G,OAAAqI,UACAX,QAAApB,eAEA,IAAAnB,OAAAmD,SAAA,CAEA7I,MAAAmI,WAAAjB,OAAA3G,OAAAuI,OAEA9B,MAAAkB,KAAA,uDAEA3D,OAAAwE,gBACAxE,OAAAyE,0BACAhJ,OAAAmI,WAAA5D,MAEA4C,cAAA8B,OAAAzB,IACA,QAGA9B,OAAAiB,cAEA,KAAA2B,GAAA,CACA,OAGA,GAAAY,UAAA,WACAZ,GAAAtI,OAAAmJ,OAAA5E,QAGAvE,OAAAoJ,OAAAF,oBAWAnK,SCjMA,SACAT,MACA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAgH,WAAA,uBAAA,SAAAnC,SAAA6D,aAAAkC,OAAAC,MAAAtC,KAAAzE,SAAAgH,OAAAC,UAEAxI,KAAAyI,QAAA,IACAzI,MAAA0I,KAAA,IACA1I,MAAA4G,UAAA,IACA5G,MAAA8E,aAAA,KAEA,IAAAjD,MAAA7B,IAEA,IAAA2I,aAAArG,SAAA,GAAAqG,WACA,IAAAC,WAEA5I,MAAA6I,SAAA,WACA7I,KAAAyI,QAAAK,KAAAvL,SAAA4G,KAAA,SAGAnE,MAAA+I,WAAA,SAAAN,SACAzI,KAAAyI,QAAAA,QAGAzI,MAAAgJ,QAAA,SAAAN,MACA1I,KAAA0I,KAAAA,KAGA1I,MAAA4G,UAAA,SAAAA,WACA5G,KAAA4G,UAAAA,UAGA5G,MAAAiJ,YAAA,SAAAC,SAEA,GAAArH,MAAA7B,IACA,IAAAmJ,kBAEAnJ,MAAAyI,QAAAW,UAAAF,OAGAxL,SAAAgD,QAAAwI,QAAAnE,WAAA,SAAAlG,QACA,GAAAkH,KAAA,MAAAlH,OAAAwK,aACAF,gBAAA9I,KAAA0F,IACAlE,MAAA4G,QAAAjD,aAAAO,IAAAlH,OAAAP,QAIA0B,MAAAyI,QAAAjD,aAAA,KAAAxF,KAAAyI,QAAAW,UAAAE,QAGAtJ,MAAAyI,QAAAc,aAAAvJ,KAAAyI,QAAAW,UAAArE,UAIA/E,MAAA4G,UAAA1B,OAAAlF,KAAAyI,QAAAK,KAAA9I,KAAAyI,QAAAW,UAAArE,WAAAyE,OAGA9L,SAAAgD,QAAAV,KAAAyI,QAAAgB,OAAA,SAAAC,MAAA3D,KAEA,GAAAxF,EAAAoJ,QAAAR,eAAApD,QAAA,GAAAA,IAAA6D,YAAA,MAAA,KAAA,EAAA,CACA/H,KAAA4G,QAAAjD,aAAAO,IAAA,SAKA/F,MAAA6J,WAAA,WACA,GAAA7J,KAAAyI,QAAAqB,OAAA,CACA3D,aAAA5D,QAAAD,SAAAtC,KAAAyI,QAAAzI,KAAAyI,QAAAW,UAAAE,QACAnD,cAAA4D,QAAAzH,SAAAtC,KAAAyI,UAIAzI,MAAAgK,SAAA,SAAAN,OAEA1D,KAAAkB,KAAA,qBAAAwC,MAAA,IAEA,IAAA/E,UAAA9C,KAAA+E,UAAAjC,QACA,IAAAuE,SAAAZ,MAAA0B,SAAArF,SAAArC,SAAAoH,MAAA7H,KAAA6G,KAIA7G,MAAAoH,YAAArF,KAAA/B,KAAAqH,QACArH,MAAAgI,WAAAjG,KAAA/B,KAEA,OAAAqH,SAGAlJ,MAAAiK,cAAA,SAAAP,OAEA7H,KAAAmI,SAAAN,MAAA,KACA,OAAAA,OAIA1J,MAAAkK,aAAA,SAAAR,OAEA,GAAAR,SAAArH,KAAAmI,SAAAN,MAEA,IAAA7H,KAAA+E,UAAA9B,cAAAjD,KAAAiD,aAAA,CAEA,MAAA4E,OAIA,MAAAR,SAAAI,QAAAI,MAAAS,UAIAnK,MAAAoK,WAAA,WAEA,GAAAV,OAAApH,SAAA+H,MAAAC,MAEA,IAAAtK,KAAAuK,aAAA,CACAvK,KAAAyI,QAAA+B,cAAAlI,SAAA,GAAAmI,aACA,IAAAzK,KAAA0K,UAAA,CACA1K,KAAAyI,QAAA+B,cAAAnC,OAAAqB,WACA,CACA1J,KAAAyI,QAAA+B,cAAAd,QAKA1J,MAAA0K,QAAA,WACA,MAAApI,UAAAqI,GAAA,UAAAtC,OAAAuC,OAAA,QAGA5K,MAAAuK,WAAA,WACA,MAAAjI,UAAAqI,GAAA,UAAAtC,OAAAuC,OAAA,WAGA5K,MAAA0F,MAAA,WAEA,GAAAX,YAAA/E,KAAAyI,QAAAW,UAAArE,UACAA,YAAA8F,OAAA,EAAA9F,WAAAyE,OAEArD,cAAA4D,QAAAzH,SAAAtC,KAAAyI,QACAtC,cAAAT,MAAApD,UAIAtC,MAAAuD,MAAA,SAAAA,MAAAsB,eAEA,GAAAhD,MAAA7B,IAEAsC,UAAAwI,OAAA,QAEA,IAAAC,SAEAzI,UAAAgB,GAAAC,MAAA,WAGA,GAAAiF,SAAAwC,MAAA,KAAAzH,OAAAqF,SAAAgC,OAAA,SAAAtI,SAAA,GAAAqG,cAAAA,YAAA,CACAA,YAAArG,SAAA,GAAAqG,WACA,QAGApH,SAAA0J,OAAAF,SACAA,UAAAxJ,SAAA,WACAgH,OAAAH,OAAA,WACAvG,KAAAuI,gBAEAvF,mBAYAtH,UAAAE,GAAA2G,UAAA,aAAA,SAAA4B,KAAAzE,SAAA+G,MAAAnC,aAAAD,QACA,OACA7B,SAAA,IACAI,WAAA,uBACA4B,SAAA,aAAA,UAAA,cACArH,OACA6F,cAAA,KACAD,QAAA,MAEAsG,KAAA,SAAAlM,MAAAuD,QAAA4I,MAAAzE,aAEA,GAAAgC,MAAAyC,MAAAC,UACA,IAAAxE,WAAAF,YAAA,EACA,IAAA+B,SAAA/B,YAAA,EACA,IAAA0E,YAAA1E,YAAA,EAEA,IAAA9B,SAAA5F,MAAA4F,SAAAgC,UAAAhC,SAAA,OAEA,KAAA6D,UAAAC,KAAA,CACA1C,KAAAa,MAAA,4DACA,QAIAuE,WAAAtG,aAAAqG,MAAArG,cAAA,KAGAsG,YAAArC,WAAAN,QAEA2C,YAAAxE,UAAAA,UAEAwE,YAAApC,QAAAN,KAEA0C,YAAAvC,UAGA,IAAAhE,eAAAwG,SAAArM,MAAA6F,gBAAA+B,UAAA/B,eAAAqB,OAAAoF,UAAA,GACAzG,eAAAtE,EAAAgL,SAAA1G,eAAAA,cAAAqB,OAAAoF,QAEA,IAAAE,kBAAAJ,WAAAV,YAAAU,WAAAb,cAAA3F,UAAA,MAEA,KAAA4G,gBAAA,CACA3G,cAAA,EAIAuG,WAAA7H,MAAAqB,QAAAC,cAGA4D,SAAAgD,SAAApL,KAAA+K,WAAAlB,aAKAzB,SAAAiD,YAAAC,QAAAP,WAAAnB,cAEAjL,OAAA8E,IAAAoC,OAAA3G,OAAA6H,WAAA,WACAgE,WAAApB,SAAAvB,QAAAmD,aAIA5M,OAAA8E,IAAAoC,OAAA3G,OAAAqI,UAAA,WACAa,QAAAqB,OAAA,IACAsB,YAAApB,SAAAvB,QAAAmD,aAKA5M,OAAA8E,IAAAoC,OAAA3G,OAAAmI,MAAA,WACA0D,WAAA1F,SAGA1G,OAAA8E,IAAA,WAAA,WACA8C,UAAAnB,SAAAgD,QAAAK,cAQA/K,SChQA,SACAT,MACA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAG,SAAA,cACAiO,KAAA,cAGAtO,UAAAE,GAAAgH,WAAA,sBAAA,SAAAnC,SAAAiG,OAAAuD,YAEA9L,KAAA+L,UAAA,WAEA,GAAAlK,MAAA7B,IAEAtC,SAAAgD,SAAA,OAAA,QAAA,OAAA,UAAA,SAAAsL,MACA1J,SAAAgB,GAAA0I,KAAA,cAAA,SAAAC,IACA1D,OAAA/E,MAAA,cAAAwI,KAAAC,OAIA1D,QAAAzE,IAAA,UAAA,WACAjC,KAAAT,YAIApB,MAAAkM,OAAA,WACA,MAAA5J,UAAAxD,KAAAgN,WAAAD,MAGA7L,MAAAX,KAAA,WACAiD,SAAA6J,QAAA,QAGAnM,MAAAmD,KAAA,WACAb,SAAA6J,QAAA,QAGAnM,MAAAiD,OAAA,WACAX,SAAA6J,QAAA,UAGAnM,MAAAoB,QAAA,WACAkB,SAAA6J,QAAA,aAIA5O,UAAAE,GAAA2G,UAAA,YAAA,WACA,OACAC,SAAA,IACAI,WAAA,sBACAyG,KAAA,SAAAlM,MAAAuD,SAEA,GAAAlE,WAEAW,OAAA6E,WAAA,WACAtB,QAAA4J,QAAAzO,QAAAwE,UAAA7D,SACA+N,KAAA,gBAOArO,SCjEA,SACAT,MACA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAgH,WAAA,2BAAA,SAAA8D,OAAAhH,UAEAvB,KAAA+J,QAAA,SAAAtB,SAEA,GAAAsB,SAAA,IACA,IAAAtB,QAAAW,UAAArE,WAAAyE,QAAAf,QAAAW,UAAArE,WAAA,GAAAgF,QAAA,CACAA,QAAAtB,QAAAW,UAAArE,WAAA,GAAAgF,YACA,CACAA,QAAA,KAIAxI,SAAA,WACAgH,OAAA8D,SAAAtC,QAAAA,YAOAxM,UAAAE,GAAA2G,UAAA,iBAAA,WACA,OACAC,SAAA,IACAI,WAAA,2BACAlG,SAAA,kEACA+F,QAAA,KACAtF,SAGAkM,KAAA,SAAAlM,OACAA,MAAAqN,SAAA9L,EAAA2B,UAAAlD,MAAAqN,UAAAtC,QAAA,KAAA9K,GAAA,aAMAlB,SC1CA,SACAT,MAAA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAG,SAAA,wBACA0O,SACAC,QAAA,cACAC,QAAA,cACAC,MAAA,YACAC,SAAA,eACAC,KAAA,aACAC,WAAA,oBACAC,OAAA,oBAEAC,WACAC,UAAA,eACAC,eAAA,qBAEAC,WAAA,6BAGA1P,UAAAE,GAAAO,QAAA,wBAAA,SAAAkP,qBAAA3L,SAAAyE,MAEA,OAEAzD,QAAA,SAAAA,QAAAkG,SACA,GAAAA,QAAA0E,OAAA,CACA5K,QAAA6K,QAAAF,qBAAAZ,QAAAM,YAAA5L,YAAAkM,qBAAAZ,QAAAG,WACA,CACAlK,QAAA6K,QAAAF,qBAAAZ,QAAAM,YAAAS,SAAAH,qBAAAZ,QAAAG,SAIA/G,MAAA,SAAAnD,SACAA,QAAA6K,QAAAF,qBAAAZ,QAAAM,YAAA5L,YAAAkM,qBAAAZ,QAAAG,QAGA1C,QAAA,SAAAxH,QAAAkG,SAEA,GAAA6E,WACA,IACAJ,qBAAAZ,QAAAK,MACAY,KAAA,GAEA,IAAA5M,KAAAC,EAAA2B,QAEA,IAAAiL,QAAA7M,IAAAuD,KAAAgJ,qBAAAJ,UAAAC,UACAS,QAAAA,QAAA7M,IAAAuD,KAAAgJ,qBAAAJ,UAAAE,eAEAQ,QAAAA,OAAA5M,EAAA,IAAA4M,QAAA7M,IAAA8M,SAAAH,SAEA,IAAAE,OAAAhE,SAAA,EAAA,CACAxD,KAAA0H,KAAA,qEAAAnL,SACA,QAGA,GAAAoL,IAAAH,OAAA,EACA7M,KAAAjD,QAAA6E,QAAAoL,GACA,IAAAC,YAAAjN,IAAA7B,KAAAoO,qBAAAD,WACA,IAAAW,WAAA,CACAA,WAAA7D,QAAAtB,WAIAR,OAAA,SAAAhD,MAGA,GAAA4I,iBACA,IACAX,qBAAAZ,QAAAO,QACAU,KAAA,GAGA,IAAAO,QAAA,CACAlN,GAAAiN,gBAAAE,KAAA,WACAD,QAAAlN,EAAAZ,MAAAgO,eAGA,IAAAV,WACA,IACAJ,qBAAAZ,QAAAG,MACA,UACAc,KAAA,GAEA,IAAAU,SAAArN,EAAAqE,MAAAiJ,KAAAZ,SACA/L,UAAA,WAEAX,EAAA,cAAAuN,SAAAC,UAAAH,QAAAH,SAAAO,IAAAP,QAAA,SACA,EAAA,aAMA/P,SC/FA,SACAT,MACA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAG,SAAA,kBACA0Q,QAAA,yBAGA/Q,UAAAE,GAAA8Q,SAAA,eAAA,WAEA,GAAAC,MAAAxO,IAEAA,MAAAyO,WAAA,SAAAC,SACA1O,KAAA0O,QAAAA,QAGA1O,MAAA2O,KAAA,SAAAC,eAAAC,WAEA,GAAAC,SAAA,WACA,GAAAC,aAAAP,KAAAE,SAAAE,eAAAN,OACAtO,MAAA0O,QAAAG,UAAAzQ,IAAA2Q,aAGA,IAAA7O,OAAA4O,QAAA3O,SAEAD,OAAAqC,QAAA,SAAAA,QAAAkG,SACAzI,KAAA0O,QAAAnM,QAAAA,QAAAkG,SAGAvI,OAAAwF,MAAA,SAAAnD,SACAvC,KAAA0O,QAAAhJ,MAAAnD,SAGArC,OAAA6J,QAAA,SAAAxH,QAAAkG,SACAzI,KAAA0O,QAAA3E,QAAAxH,QAAAkG,UAGAvI,MAAA+H,OAAA,SAAAhD,MACAjF,KAAA0O,QAAAzG,OAAAhD,MAGA,OAAA,IAAA6J,cAIA/Q,SC/CA,SACAT,MACA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAA8Q,SAAA,mBAAA,WACA,GAAAS,SACAC,cAAA,KACAC,kBAAA,KACAC,wBAAA,EAGAnP,MAAAoP,IAAA,SAAA/Q,SACAX,QAAAwE,OAAA8M,OAAA3Q,SAGA2B,MAAA2O,KAAA,WACA,MAAAjR,SAAA2R,KAAAL,UAIAzR,UAAAE,GAAAG,SAAA,eACAmB,SACA,QACA,qBACA,qBACA,0BACA,uBACA,oBACA,YACA,aACA,WACA,gBACA,cACA,KACA,UACA,cACA,kBACA,eACA,uBACA,kBACA,kBACA,kBACA,sBACA,qBACA,wBACA,iBACA,qBACA,6BACA,gBACA,YACA,kBACA,QACA,OACA,OACA,OACA,eACA,oBACA,cACA,mBACA,oBACA,yBACA,wBACA,eACA,eACA,kBACA,mBAKAxB,UAAAE,GAAAgH,WAAA,uBAAA,SAAAnC,SAAA+F,OAAAiH,MAAAC,YAAAC,iBAAAxJ,KAAAuC,OAAAhH,SAAA0E,QAEA,GAAApE,MAAA7B,IACAA,MAAA3B,UACA2B,MAAAyP,MAAA,IACAzP,MAAAyI,QAAA,IAEAzI,MAAAgF,KAAA,WAEAnD,KAAAxD,QAAAX,QAAAwE,UAAAsN,iBAEAjP,GAAAG,QAAA2H,OAAA,SAAAqB,MAAA3D,KACA,GAAAxF,EAAAmP,SAAAH,YAAAxQ,QAAAgH,IAAAzB,QAAA,QAAA,KAAA,CACAzC,KAAAxD,QAAA0H,KAAAwC,OAAAoH,MAAAjG,SAIA7H,MAAA+N,SAAAlS,QAAAmS,UAAAxH,OAAAuH,SAEA,IAAA/N,KAAAxD,QAAAyR,MAAA,CAEAjO,KAAAkO,QAAAlO,KAAAxD,QAAAyR,KAEAjO,MAAAxD,QAAAyR,MAAAjO,KAAAiO,KAEAjO,MAAAxD,QAAAY,GAAA4C,KAAAmO,OAKAhQ,MAAA+I,WAAA,SAAAN,SACAzI,KAAAyI,QAAAA,QAGAzI,MAAAiQ,YAAA,SAAAC,OAEA,GAAArO,KAAAxD,QAAAyR,MAAA,CACA,MAAA,GAEA,GAAAK,OAAAnQ,KAAAoQ,WAAA7H,OAEA,IAAA8H,OAAA9P,EAAA+P,UAAAH,MAAA,SAAAI,MACA,MAAA7S,SAAA8S,OAAAD,KAAAL,QAGA,OAAAG,OAWArQ,MAAAgQ,MAAA,SAAAnR,QACA,MAAAA,QAAAI,GAKAe,MAAA8P,MAAA,SAAAzR,SAEAwD,KAAAkO,QAAA1R,SAAAO,KAAA,SAAA6R,UAiBApS,QAAA6J,UAAAwI,KAAAD,SAAAC,KAAAxH,QAAAuH,SAAAvH,YAIAlJ,MAAA2Q,SAAA,WAEA,GAAAC,WAAA/O,KAAA4G,QAAAmD,UACA,IAAAiF,UAAA,IACA,IAAAD,UAAA,CACAC,SAAA7Q,KAAAiQ,YAAAW,WAIArP,SAAA,WACAe,SACAwO,QAAA,MAAAD,WAAA,MAAAA,WAAA,YAAA,GAAAA,YAIA7Q,MAAA+Q,iBAAA,SAAAH,WAEA,GAAAvS,SAAA2B,KAAAoQ,WAAA7H,OACA,IAAAyI,WAEAzQ,GAAAwN,KAAA6C,UAAA,SAAAK,aACA,GAAAZ,OAAA9P,EAAA+P,UAAAjS,QAAA,SAAAqL,OACA,GAAAwH,MAAAxT,QAAA2R,KAAA4B,YACA,OAAA1Q,GAAA4Q,QAAAD,MAAAxH,QAEAsH,SAAA3Q,KAAAgQ,QAGA,IAAAW,QAAAxH,OAAA,EAAA,CACAoH,UAAAI,QAGA,MAAAJ,WAIA5Q,MAAAoR,UAAA,WAEA,GAAAR,WAAA/O,KAAA4G,QAAAmD,UAEA,KAAAlO,QAAA2T,QAAAT,WAAA,CACAA,aAGA,IAAArQ,EAAA+Q,QAAAV,YAAArQ,EAAAgR,SAAAX,UAAA,IAAA,CACAA,UAAA5Q,KAAA+Q,iBAAAH,WAGArP,SAAA,WACAe,SACAwO,QAAA,MAAAF,aAIA5Q,MAAAwR,UAAA,WAEAxR,KAAAyP,MAAApH,OAAAmJ,UAAA/B,MAAAH,MAAAzR,WACA,KAAAmC,KAAAyP,MAAA,CACA,KAAA,IAAAhR,OAAA,oCA4CAuB,KAAAyR,UAAAxL,OAAAjG,KAAAyP,MAAA,IAAAzP,KAAAyP,MAAA,GACAzP,MAAAoQ,WAAAnK,OAAAjG,KAAAyP,MAAA,GACAzP,MAAA0R,UAAA1R,KAAAyP,MAAA,IAAAzP,KAAAyP,MAAA,EACAzP,MAAA2R,QAAA1L,OAAAjG,KAAAyP,MAAA,GAAAzP,KAAAyP,MAAA,GAAAzP,KAAA0R,UACA1R,MAAA4R,QAAA5R,KAAAyP,MAAA,EAEAlH,QAAAsJ,iBAAA7R,KAAAoQ,WAAA,SAAA0B,OAAAC,QACA,GAAArU,QAAA8S,OAAAsB,OAAAC,QAAA,CACA,OAGAlQ,KAAA8O,YAEA,QAKApT,UAAAE,GAAA2G,UAAA,aAAA,SAAA7C,SAAAyE,KAAAgM,SAEA,OACA3N,SAAA,IACAgC,SAAA,UAAA,cACA5B,WAAA,uBACAyG,KAAA,SAAAlM,MAAAuD,QAAA4I,MAAAzE,aACA,GAAA+B,SAAA/B,YAAA,EACA,IAAAuL,YAAAvL,YAAA,EAEAuL,YAAAlJ,WAAAN,QACAwJ,YAAAjN,MAEA,IAAAmG,MAAAqG,UAAA,CACAS,WAAAT,YAGA/I,QAAAgD,SAAApL,KAAA,SAAAqJ,OACA,GAAAwI,QAAA3P,QAAA4P,MACAD,QACAE,YAAA,cAAA3J,QAAA0E,QACAiF,YAAA,WAAA3J,QAAA0E,QACAiF,YAAA,uBAAA3J,QAAA0E,QACAiF,YAAA,oBAAA3J,QAAA0E,QACAiF,YAAA,WAAA3J,QAAAqB,QACAsI,YAAA,cAAA3J,QAAA4J,UACA,OAAA3I,QAGAnH,SAAAe,GAAA,SAAA,SAAAgP,GAIA,GAAAL,WAAA5T,QAAAyR,MAAA,CACAvO,SAAA,WACAkH,QAAA+B,cAAA8H,EAAAC,SAIAvM,KAAAkB,KAAAoL,IAKA/P,SAAAe,GAAA,gBAAA,WACA,GAAA6H,MAAAqH,QAAA,CACAxT,MAAA2Q,MAAA3Q,MAAA2Q,MAAAxE,MAAAqH,YAKAjQ,SAAAe,GAAA,eAAA,WACA,GAAA6H,MAAAsH,OAAA,CACAzT,MAAA2Q,MAAA3Q,MAAA2Q,MAAAxE,MAAAsH,WAKAlQ,SAAAe,GAAA,eAAA,WAGA,GAAAf,QAAA6K,QAAA,mBAAA5D,OAAA,CAGA,GAAAkJ,YAAA9R,EAAAZ,MAAAoN,QAAA,mBAAA,GAAAuF,UAAAC,MAAA,MAGA,KAAA,GAAAC,GAAA,EAAAA,EAAAH,WAAAlJ,SAAAqJ,EAAA,CACA,GAAAH,WAAAG,GAAApD,MAAA,QAAA,CACA7O,EAAA,iBAAAyM,SAAAqF,WAAAG,QAOA,IAAAC,UAAArK,QAAAsK,OACAtK,SAAAsK,QAAA,WACAD,UAEA,IAAAb,WAAArC,SAAA,CACAqC,WAAAb,gBACA,CACAa,WAAAtB,YAKA,IAAAqC,KAAAtV,QAAA6E,QAAAyP,QAEAgB,KAAArL,KAAA,SAAA,WACApF,QAAAuO,QAAA,UAGA3F,OAAA8H,SAAA,WAAA,SAAAvJ,OACAnH,QAAAuO,QAAA,UAAApH,QAGAyB,OAAA8H,SAAA,WAAA,SAAAvJ,OACAnH,QAAAuO,QAAA,aAAApH,QAGA1K,OAAA8E,IAAA,UAAA,WACAvB,QAAAuO,QAAA,YAGAvP,UAAA,WACAgB,QAAAuO,QAAAmB,WAAA5T,iBAMAN,SCnYA,SAAAT,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAGAA,UAAAE,GAAAG,SAAA,iBACAqP,WAAA,qBACAiG,gBAAA,6BACAnU,SACA,YACA,gBACA,kBACA,gBACA,WACA,eACA,YACA,qBACA,gBACA,kBACA,UACA,aACA,SACA,SACA,qBACA,WACA,cACA,YACA,qBACA,cACA,YACA,YACA,WACA,iBACA,YACA,cACA,uBACA,mBACA,eAEAoU,UACAC,OAAA,aACAC,MAAA,KACAC,MAAA,KACAC,WAAA,MACAC,YAAA,eAIAjW,UAAAE,GAAAgH,WAAA,yBAAA,SAAAnC,SAAA+F,OAAAoL,cAAAlL,QAEA,GAAA1G,MAAA7B,IACAA,MAAA3B,UAEA2B,MAAA2Q,SAAA,WAEA,GAAAC,WAAA/O,KAAA4G,QAAAiL,WACA,IAAAxH,QAAAlM,KAAAkM,QAEA,KAAA0E,YAAA1E,OAAA,CACA,OAGAA,OAAAyH,QAAA/C,WAGA5Q,MAAA+I,WAAA,SAAAN,SACAzI,KAAAyI,QAAAA,QAGAzI,MAAA4T,UAAA,WAEA,GAAAnL,SAAA,IAEA,IAAAoL,QAAAvR,SAAA4L,KAAA,eAAA4F,SACA,IAAAD,OAAArK,OAAA,CACAf,QAAAoL,OAAA/U,KAAA2U,cAAAxG,WACAjN,MAAA+I,WAAAN,SAGA,MAAAA,SAGAzI,MAAA+T,YAAA,WACA,GAAAnD,WAAAhQ,EAAA0G,GAAA0M,WAAAC,SAAAC,WAAArS,KAAA4G,QAAAiL,YAAA7R,KAAAxD,QAAA8V,OAAA,KACA,OAAAvD,WAGA5Q,MAAAoU,YAAA,WACA,GAAAC,MAAAxS,KAAA4G,QAAAiL,WAEA,IAAAW,OAAAlK,WAAAkK,OAAA,OAAAC,OAAAC,OAAAF,MAAA,CACA,GAAAG,GAAAF,OAAAD,KACAxS,MAAA4G,QAAAiL,YAAAc,EAAAlL,UAAAkL,EAAAC,SAAA,KAGA,MAAA5S,MAAA4G,QAAAiL,YAGA1T,MAAA0U,YAAA,WACA,GAAAP,QAAAvT,EAAA0G,GAAA0M,WAAAC,SAAAU,YAAA9S,KAAAxD,QAAA8V,OACA,IAAAS,SAAAhU,EAAA0G,GAAA0M,WAAAC,SAAAY,UAAAhT,KAAA4G,QAAAmD,WAAAuI,OAAA,KAEA,IAAAjI,QAAArK,KAAAqK,QAEA,KAAAA,OAAA,CACA,OAIA,GAAA4I,WAAA5I,OAAA6I,cAAAH,QAGA,IAAA/S,KAAAxD,QAAA2W,aAAAF,UAAA,CACAA,UAAAR,OAAAQ,WAAAX,OAAAtS,KAAAxD,QAAA2W,aAGA,MAAAF,WAGA9U,MAAAgF,KAAA,WAEAzE,EAAAG,QAAA2H,OAAA,SAAAqB,MAAA3D,KACA,GAAAxF,EAAAmP,SAAA+D,cAAA1U,QAAAgH,IAAAzB,QAAA,QAAA,KAAA,CACAzC,KAAAxD,QAAA0H,KAAAwC,OAAAoH,MAAAjG,SAMA7H,MAAAxD,QAAA4W,UAAApT,KAAAxD,QAAA4W,UAAApT,KAAAxD,QAAA4W,UAAAxB,cAAAN,SAAAE,KACAxR,MAAAxD,QAAA6W,eAAArT,KAAAxD,QAAA6W,eAAArT,KAAAxD,QAAA6W,eAAAzB,cAAAN,SAAAG,KACAzR,MAAAxD,QAAA8V,OAAAtS,KAAAxD,QAAA8V,OAAAtS,KAAAxD,QAAA8V,OAAAV,cAAAN,SAAAC,MACAvR,MAAAxD,QAAA8W,WAAAtT,KAAAxD,QAAA8W,WAAAtT,KAAAxD,QAAA8W,WAAA1B,cAAAN,SAAAI,UAEA,IAAA1R,KAAAxD,QAAA2W,aAAAnT,KAAAxD,QAAA2W,YAAAI,gBAAA,UAAA,CACAvT,KAAAxD,QAAA2W,YAAAvB,cAAAN,SAAAK,aAIAxT,MAAAkM,OAAA,WACA,MAAA5J,UAAAxD,KAAA,cAGAkB,MAAAoB,QAAA,WACA,GAAA8K,QAAAlM,KAAAkM,QACA,IAAAA,OAAA,CACAA,OAAA5L,QACAgC,UAAAxD,KAAA,aAAA,OAIAkB,MAAAmD,KAAA,WACA,GAAA+I,QAAAlM,KAAAkM,QACA,IAAAA,OAAA,CACAA,OAAA/I,UAKA5F,UAAAE,GAAA2G,UAAA,eAAA,SAAA4N,QAAAhM,KAAAyN,eACA,OACApP,SAAA,IACAgC,SAAA,UAAA,gBACA5B,WAAA,yBACAyG,KAAA,SAAAlM,MAAAuD,QAAA4I,MAAAzE,aAEA,GAAA+B,SAAA/B,YAAA,EACA,IAAA2O,cAAA3O,YAAA,EAEA,KAAA+B,QAAA,CACAA,QAAA4M,aAAAzB,WACA,KAAAnL,QAAA,CACAzC,KAAAa,MAAA,gCACA,SAIAwO,aAAArQ,MACAqQ,cAAAtM,WAAAN,QAEAlG,SAAAe,GAAA,aAAA,SAAAgP,GACAtM,KAAAkB,KAAA,+BAAAoL,KAIA7J,SAAAgD,SAAApL,KAAAgV,aAAAX,YAOAjM,SAAAiD,YAAArL,KAAAgV,aAAAtB,YACAtL,SAAAiD,YAAArL,KAAAgV,aAAAjB,YAEA,IAAAtB,UAAArK,QAAAsK,OACAtK,SAAAsK,QAAA,WACAD,UACAuC,cAAA1E,WAGA,IAAAqC,KAAAtV,QAAA6E,QAAAyP,QAEAgB,KAAArL,KAAA,SAAA,WACA0N,aAAAlS,QAGA,IAAAqK,QAAAjL,QAAAkL,SAAAgG,cAAAP,gBACA,IAAA1F,OAAAhE,OAAA,CACAgE,OAAAlK,GAAA,mBAAA,WACA,IAAAf,QAAA+S,KAAA,YAAA,CACA/S,QAAAgT,WAKAvW,MAAA8E,IAAA,UAAA,WACAuR,aAAAjU,SACA,IAAAoM,OAAAhE,OAAA,CACAgE,OAAAhG,IAAA,sBAIAxI,OAAA6E,WAAA,WACAtB,QAAAyR,WAAAqB,aAAAhX,iBAKAN,SC1OA,SACAT,MACA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAG,SAAA,cACA2B,QACAiW,GAAA,8BAEA3V,WACA4V,KAAA,wBACAC,QAAA,gCACAlJ,QAAA,kCAIAjP,UAAAE,GAAA8Q,SAAA,iBAAA,WAEA,GAAAoH,gBACA,IAAAC,gBACA,IAAArN,OAEAvI,MAAA6V,mBAAA,SAAAtX,UACAoX,gBAAApX,SAGAyB,MAAA8V,mBAAA,SAAAvX,UACAqX,gBAAArX,SAGAyB,MAAA2O,KAAA,SAAAoH,QAAAC,WAAA1U,WAAA2U,QAAAC,UAAA3U,UAEA,GAAA4U,gBAAA,WACAnW,KAAA+L,YACA/L,MAAA6C,MAAA,KAGA,IAAA3C,OAAAiW,eAAAhW,SAEAD,OAAA8E,KAAA,WAEAuD,OAAAjH,WAAAa,KAAA,KACAoG,QAAA6N,OAEApW,MAAAqW,gBAGAnW,OAAAmW,cAAA,WAEA,GAAAxU,MAAA7B,IACA,IAAAsW,UAAA,IAGAA,UAAAhV,WAAAwC,IAAAiS,QAAAxW,OAAAgX,YAAA,WACA1U,KAAA2U,eAEAxW,MAAA+L,UAAA1L,KAAAiW,SAGAA,UAAAhV,WAAAwC,IAAAiS,QAAAxW,OAAAkX,cAAA,WACA5U,KAAA6U,eAEA1W,MAAA+L,UAAA1L,KAAAiW,SAGAA,UAAAhV,WAAAwC,IAAAiS,QAAAxW,OAAAoX,uBAAA,WACA9U,KAAA+U,eAEA5W,MAAA+L,UAAA1L,KAAAiW,UAIApW,OAAA2W,iBAAA,WAEAtW,EAAAwN,KAAA/N,KAAA+L,UAAA,SAAAuK,UACAA,aAIApW,OAAAsW,YAAA,WAEA,GAAA3U,MAAA7B,IAEA,IAAAA,KAAA6C,QAAA,KAAA,CACA,OAGA0F,OAAAjH,WAAAa,KAAA,KACAoG,QAAA6N,OACA7N,QAAA6N,KAAA7X,SAAAyX,WAAAnW,UAAA2M,OAEAxM,MAAA6C,MAAA,GAAAoT,UACA5W,KAAA,KACAL,MAAAuJ,OACAnJ,SAAA,SACAZ,YAAAwX,WAAAnW,UAAA4V,MAGAS,WAAAhI,KAAA,QAAA5K,GAAA0S,WAAAzW,OAAAiW,GAAA,WACA3T,KAAA6U,gBAKAxW,OAAAwW,YAAA,WACA,GAAA1W,KAAA6C,MAAA,CACA7C,KAAA8W,iBACA9W,MAAA6C,MAAAM,OAGAnD,KAAA6C,MAAA,KAGA3C,OAAA4W,gBAAA,WACAZ,UAAAhI,KAAA,QAAA1G,IAAAwO,WAAAzW,OAAAiW,IAGAtV,OAAA0W,YAAA,WACA,GAAA/U,MAAA7B,IACAA,MAAA8W,iBAEAvV,UAAA,WACAgH,OAAA6N,KAAA7X,SAAAyX,WAAAnW,UAAA6V,OACAnN,QAAA6N,KAAAW,iBAAAxW,EAAAoH,KAAA9F,KAAAkV,iBAAAlV,OACA,EAAA,MAIA3B,OAAA6W,iBAAA,WACAzV,WAAA6F,WAAA4O,QAAAxW,OAAAyX,0BAGA,OAAA,IAAAb,kBAMA5Y,UAAAE,GAAAwZ,IAAA,SAAAC,gBACAA,eAAAlS,WAGAjH,SC/IA,SACAT,MACA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAG,SAAA,WACAiO,KAAA,YACAsH,UACAkB,KAAA,aACA8C,MAAA,iBACAC,IAAA,gBAIA7Z,UAAAE,GAAA2G,UAAA,SAAA,SAAA4N,QAAAhM,KAAAqR,SACA,OACAhT,SAAA,IACAgC,QAAA,UACA6E,KAAA,SAAAlM,MAAAuD,QAAA4I,OAEA,GAAAmM,UAAAD,QAAAlE,SAAAhI,MAAA,UACA,KAAAmM,SAAA,CACAA,SAAAnM,MAAA,UAGAnM,MAAA6E,WAAA,WACAtB,QAAAgV,UAAAD,WAGAtY,OAAA8E,IAAA,WAAA,WACAvB,QAAAgV,UAAA,kBAMAxZ,SCrCA,SACAT,MACA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAgH,WAAA,4BAAA,SAAAnC,UAEAtC,KAAAwX,UAAA,SAAAC,cACA,GAAAA,aAAA,CACAnV,SAAAtB,YAAA,UACAsB,UAAAjD,WACA,CACAiD,SAAAhC,UAIAN,MAAA0X,QAAA,WACApV,SAAAhC,WAKA/C,UAAAE,GAAA2G,UAAA,kBAAA,SAAAuT,sBACA,OACAtT,SAAA,KACAI,WAAA,4BACA4B,SAAA,mBACA6E,KAAA,SAAA3C,OAAAjG,SAAAsV,MAAAlR,aAEA,GAAAmR,iBAAAnR,YAAA,EAEApE,UAAAa,MAEAoF,QAAAzB,OAAA8Q,MAAAC,gBAAA,SAAAC,aAEA,IAAApa,QAAA2T,QAAAyG,aAAA,CACAA,YAAAvX,EAAAwX,MAAA,GAAAD,aAGAH,qBAAAK,gBAAAF,aAAAlZ,KAAAiZ,gBAAAL,UAAAK,gBAAAH,iBAMA3Z,SC9CA,SACAT,MAAA,YAEA,IAAAC,UAAAD,KAAAC,QAGAA,UAAA0a,KAAAxT,WAAA,wBAAA,SAAAyT,iBAAA5V,SAAA+F,OAAA8P,aAEAnY,KAAAoY,QAAA,SAAA7U,OAGA,GAAA2U,iBAAAG,eAAAhQ,QAAA,CACA9E,MAAAwE,gBACAxE,OAAA+U,kBAIA,GAAAC,YAAAhY,EAAA2B,QACAsW,MAAA,QACAN,iBAAAO,cAAApQ,SACA9E,MAAAA,MAAAqH,MAGA,IAAA3I,SAAAkW,YAAAO,WAAAH,WACAtW,SAAA,WAAA,WACA,GAAAiW,iBAAAG,eAAAhQ,QAAA,CACAsQ,SAAAC,SAAAtW,SAAA4B,KAAA,aAOA3G,UAAA0a,KAAA7T,UAAA,gBAAA,WAEA,OACAC,SAAA,IACAI,WAAA,wBACAoU,SAAA,gBACA3N,KAAA,SAAA3C,OAAAjG,SAAA+F,OAAAyQ,eAEA,GAAAC,WAAA1Q,OAAAyQ,eAAA,OAGAxW,UAAAgB,GAAAyV,UAAA,SAAAxV,OACAuV,cAAAV,QAAA7U,eAMAxF,SClDA,SAAAT,MACA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAub,SAAA3Y,KAAA,uBAEA9C,UAAAE,GAAAuR,OAAA,SAAAiK,UAEAA,SAAAC,UAAA,wBAAA,YAAA,OAAA,SAAAC,UAAAnT,MAEA,GAAA5B,WAAA+U,UAAA,EACA,IAAAC,cAAAhV,UAAA8G,IAEA,IAAAmO,SAAA,SAAAra,MAAAuD,QAAA4I,OAEA,GAAAiO,cAAA7Y,EAAAmP,SAAAnP,EAAA+Y,KAAAnO,OAAA,UAAA,CACAnF,KAAAkB,KAAA,2EACA,YACA,IAAAkS,aAAA,CACAA,aAAAG,MAAAvZ,KAAAwZ,YAKApV,WAAAkC,QAAA,WACA,MAAA+S,SAGA,OAAAF,kBAIApb,SCjCA,SAAAT,MACA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAG,SAAA,kBAEA6b,SAAA,uCAGA,SAAAC,yBAAAC,QAEA3Z,KAAA4Z,cAAA,SAAAC,YAAAC,OACA,IAAAA,QAAAA,MAAAhb,KAAA,CACA,OAGA,GAAAib,YAAAD,MAAAhb,KAAAib,UACA,KAAAA,WAAA,CACA,OAGA,GAAAA,WAAA7H,OAAA,CACA,GAAA8H,aAAAL,OAAAvb,IAAA2b,WAAA7H,OAEA,IAAA8H,YAAA,CACAha,KAAA4Z,cAAAC,YAAAG,cAGAD,WAAAD,MAAAA,MAAA9N,IACA6N,aAAAxZ,KAAA0Z,YAGA/Z,MAAAia,eAAA,WACA,GAAAJ,eACA7Z,MAAA4Z,cAAAC,YAAAF,OAAAO,QACA,OAAAL,cAKAH,wBAAAS,SAAA,SACA5c,UAAAE,GAAAgH,WAAA,0BAAAiV,wBAEA,SAAAU,eAAAC,gBACA,OACAhW,SAAA,KACAC,QAAA,KACA9F,YAAA6b,eAAAZ,SACAhV,WAAA,0BACAyG,KAAA,SAAAlM,MAAAuD,QAAA4I,MAAAiP,eACApb,MAAA6a,YAAAO,cAAAH,gBAEAjb,OAAA8E,IAAA,sBAAA,WACA9E,MAAA6a,YAAAO,cAAAH,qBAMAG,cAAAD,SAAA,iBACA5c,UAAAE,GAAA2G,UAAA,gBAAAgW,iBAEArc,SChEA,SACAT,MAAA;AAEA,GAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAA6c,OAAA,gBAAA,WACA,GAAAC,KAAAC,KAAAD,GACA,IAAAE,OAAAD,KAAAC,KACA,IAAAC,KAAAF,KAAAE,GACA,IAAAC,KAAAH,KAAAG,GAEA,SAAAC,OAAAC,OAAAC,WACA,GAAAC,MAAAR,IAAA,GAAAO,UACA,OAAAN,MAAAI,MAAAC,OAAAE,MAAAA,KAGA,MAAA,UAAAF,OAAAC,WACAA,UAAAA,WAAA,CACA,IAAAE,MAAAP,MAAAE,IAAAD,IAAAG,SAAAF,IAAA,KACA,IAAAM,MAAA,SAAAD,KAAA,EACA,OAAAC,MAAAL,MAAAC,OAAAN,IAAA,IAAAS,MAAAF,WAAAG,KAAAJ,QAAA,OAIA9c,SCxBA,SACAT,MAAA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAG,SAAA,YACAsd,MAAA,KACAC,cAAA,QACAC,eAAA,MACA3B,SAAA,2BAGA,SAAA4B,gBAAAC,UAEA,OACAtc,OACAuc,MAAA,IACApW,MAAA,WACAqW,aAAA,KAEAhd,YAAA8c,SAAA7B,SACAvO,KAAA,SAAAlM,MAAAuD,SACAvD,MAAAuc,MAAAvc,MAAAuc,OAAAD,SAAAJ,KACAlc,OAAAwc,aAAAxc,MAAAwc,cAAAF,SAAAF,cAEA,IAAAK,WACAA,SAAApb,KAAAib,SAAAH,cACA,IAAAnc,MAAAuc,MAAA,CACAE,QAAApb,KAAArB,MAAAuc,OAGAhZ,QAAA8K,SAAAoO,QAAAlO,KAAA,QAKA8N,eAAAlB,SAAA,WACA5c,UAAAE,GAAA2G,UAAA,UAAAiX,kBAEAtd,SCvCA,SACAT,MAAA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAG,SAAA,sBACA6b,SAAA,sCAGAlc,UAAAE,GAAA2G,UAAA,mBAAA,SAAAsX,oBACA,OACAld,YAAAkd,mBAAAjC,SACAlV,WAAA,KACAvF,OACA2c,YAAA,IACAC,SAAA,KAEA1Q,KAAA,SAAAlM,MAAAuD,QAAA4I,OACA5I,QAAA8K,SAAA,eACArO,OAAA6c,YAAA,WACA,IAAA1Q,MAAA2Q,SAAA,CACA9c,MAAA4c,WAAA5c,MAAA2c,qBAOA5d,SC3BA,SAAAT,MACA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAG,SAAA,aAEAiC,WACAkc,OAAA,iCAKAxe,UAAAE,GAAAgH,WAAA,qBAAA,SAAAnC,UAEA,GAAAT,MAAA7B,IACA,IAAAgc,OAEAhc,MAAAic,MAAA,WACAD,OAAA,IACAhc,MAAAmO,UAGAnO,MAAAmO,QAAA,WAEA7L,SACA4L,KAAA,mBACAgO,SAAA,2BAAAC,QAAA,MACAD,UAAAE,QAAA,IACAC,MAAA,IACAC,SAAA,IACAC,SAAA,WACA,GAAAP,OAAA,CACAQ,WAAA,WAAA3a,KAAAsM,WAAA,SACA,CACAtM,KAAA4a,mBAOAzc,MAAAyc,aAAA,WACAna,SAAA4L,KAAA,mBAAAgO,SAAA,OAAA,KACA5Z,UAAAoa,aAGA1c,MAAA2c,KAAA,WACAX,OAAA,QAKAze,UAAAE,GAAA2G,UAAA,WAAA,SAAAwY,WACA,OACAvY,SAAA,IACAC,QAAA,KACAG,WAAA,qBACA4B,QAAA,WACA7H,YAAAoe,UAAA/c,UAAAkc,OACA7Q,KAAA,SAAAlM,MAAAuD,QAAA2B,KAAA2Y,UAEA,IAAA3Y,KAAAmY,MAAA,CACAQ,SAAAZ,QAGAjd,MAAA8E,IAAA,WAAA,WACA+Y,SAAAF,eAOA5e,SC1EA,SAAAT,MACA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAG,SAAA,YACAiC,WACAid,MAAA,4BAIA,IAAAC,qBAAA,SAAAC,SACA,GAAArP,IAAA/M,EAAA,mBAAAoc,QAAA,OAAApc,EAAA,cAAAoc,QAAA,KACA,IAAArP,GAAA,CACA,MAAAA,IAAAO,KAAA,oBAAAzJ,WAAA,aAIA,IAAAwY,yBAAA,SAAAhe,GAAAie,SAAA5V,IAEA,GAAA7C,YAAAyY,SAAAC,gBACA,KAAA1Y,WAAA,CACAA,WAAAsY,oBAAA9d,GACAie,UAAAC,iBAAA1Y,WAEA,GAAAA,YAAAlE,EAAAkD,WAAAgB,WAAA6C,KAAA,CACA7C,WAAA6C,OAKA,IAAA8V,iBAAA,SAAAne,GAAAie,SAAAG,OAAAC,UACAL,wBAAAhe,GAAAie,SAAAI,SACAD,QAAA9D,MAAA2D,UAGA,IAAAK,sBAAA,SAAAte,GAAAie,UAEA,GAAAM,aAAAN,SAAAjB,KACA,IAAAwB,YAAAP,SAAAP,IAEAO,UAAAjB,MAAA,WACAmB,gBAAAne,GAAAie,SAAAM,YAAA,SAGAN,UAAAP,KAAA,WACAS,gBAAAne,GAAAie,SAAAO,WAAA,QAGAP,UAAAQ,YAAA,WACAT,wBAAAhe,GAAAie,SAAA,SAGAA,UAAAS,gBAAA,KAGApgB,UAAAE,GAAAwZ,IAAA,SAAApI,UAAA7I,KAAA4X,UAEA,IAEA,GAAAC,eAAAhP,UAAAzQ,IAAA,gBACA,IAAA0f,SAAAjP,UAAAzQ,IAAA,UACAyf,eAAAE,UAAA,KACAF,eAAAxB,MAAA,CACAwB,eAAArf,YAAAof,SAAA/d,UAAAid,KAEA,IAAAkB,WAAAF,QAAA7d,UAAA7B,GACA0f,SAAA7d,UAAA7B,IAAA,SAAAa,IACA,GAAAie,UAAAc,UAAA/e,GACA,KAAAie,SAAAS,gBAAA,CACAJ,qBAAAte,GAAAie,UAEA,MAAAA,WAGA,MAAA5K,GACAtM,KAAA0H,KAAA,6CAIA3P,SCjFA,SACAT,MACA,YAEA,IAAAC,UAAAD,KAAAC,QAGAA,UAAAE,GAAA2G,UAAA,YAAA,SAAA0Z,SAEA,OACAzZ,SAAA,IACA6G,KAAA,SAAA3C,OAAAjG,SAAA+F,QAEA,GAAA2U,SAAA3U,OAAA4V,SACA,IAAAC,YAAA7V,OAAA6V,UACA,IAAAhB,UAAAY,QAAA7d,UAAA7B,IAAA4e,QACA,IAAAkB,WAAA,EAAA,CACAhB,SAAAQ,qBAOA3f,SCrBA,SAAAT,MACA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAG,SAAA,WACAiC,WACAse,KAAA,wBACAC,IAAA,yBAIA,SAAAC,gBAAA9V,QAEA,GAAA1G,MAAA7B,IAEAuI,QAAA+V,OACAzc,MAAAyc,KAAA/V,OAAA+V,IAEAte,MAAAue,OAAA,SAAAC,KACA3c,KAAAyc,KAAAje,KAAAme,IAEA,IAAA3c,KAAAyc,KAAA9U,SAAA,EAAA,CACAgV,IAAAxC,OAAA,SACA,IAAAwC,IAAAxC,OAAA,CACAna,KAAA4c,UAAAD,SACA,CACAA,IAAAxC,OAAA,OAIAhc,MAAA0e,UAAA,SAAAF,KACA,GAAAnO,OAAAxO,KAAAyc,KAAA3U,QAAA6U,IAEA,IAAAA,IAAAxC,QAAAna,KAAAyc,KAAA9U,OAAA,EAAA,CAEA,GAAAmV,gBAAAtO,QAAAxO,KAAAyc,KAAA9U,OAAA,EAAA6G,MAAA,EAAAA,MAAA,CACAxO,MAAA4c,UAAA5c,KAAAyc,KAAAK,iBAGA9c,KAAAyc,KAAAzT,OAAAwF,MAAA,GAGArQ,MAAAye,UAAA,SAAAG,aACAlhB,QAAAgD,QAAAmB,KAAAyc,KAAA,SAAAE,KACA,GAAAA,IAAAxC,QAAAwC,MAAAI,YAAA,CACAJ,IAAAxC,OAAA,KACAwC,KAAAK,eAIAD,aAAA5C,OAAA,IACA4C,aAAAE,YAIAT,eAAAlE,SAAA,SACA5c,UAAAE,GAAAgH,WAAA,mBAAA4Z,eAEA,SAAAU,eAAAC,SACA,OACA3a,SAAA,KACA7F,YAAAwgB,QAAAnf,UAAAse,KACA5Z,WAAA,KACAD,QAAA,KACAG,WAAA,mBACAzF,MAAA,KACAkM,KAAA,SAAAlM,MAAAuD,QAAA4I,OACAnM,MAAAigB,YAAA9T,MAAA8T,SACAjgB,OAAAkgB,QAAA/T,MAAA+T,OACAlgB,OAAAmgB,WAAAhU,MAAAgU,QAEA,IAAAzhB,QAAA0hB,YAAAjU,MAAAkU,YAAA,CACArgB,MAAAqgB,WAAA,QAMAN,cAAA5E,SAAA,UACA5c,UAAAE,GAAA2G,UAAA,SAAA2a,cAEA,SAAAO,cAAAN,SACA,OACA3a,SAAA,KACA7F,YAAAwgB,QAAAnf,UAAAue,IACA9Z,QAAA,KACA+B,QAAA,UACA9B,WAAA,KACAvF,OACAugB,QAAA,IACAhhB,SAAA,IACAC,YAAA,IACAsgB,SAAA,UACAD,WAAA,aAEApa,WAAA,aAGAyG,KAAA,SAAAlM,MAAAuD,QAAA4I,MAAAqU,eAAAjb,YACAvF,MAAAygB,aAAAlb,UAEAib,gBAAAjB,OAAAvf,MAEAA,OAAA8E,IAAA,UAAA,WACA0b,eAAAd,UAAA1f,QAGAA,OAAA0gB,OAAA,WACA,IAAA1gB,MAAA8c,SAAA,CACA0D,eAAAf,UAAAzf,QAIAA,OAAA8H,OAAA,SAAA,SAAAkV,QACA,GAAAA,OAAA,CACAwD,eAAAf,UAAAzf,SAIA,IAAAtB,QAAAmS,UAAA1E,MAAA6Q,QAAA,CACAhd,MAAAgd,OAAA7Q,MAAA6Q,MAEAhd,OAAA2gB,QAAA7Y,OAAAqE,MAAA6Q,OAAA,SAAAA,QACA,GAAAA,OAAA,CACAwD,eAAAf,UAAAzf,UAKA,GAAAtB,QAAAmS,UAAA1E,MAAAyU,SAAA,CACA5gB,MAAA2gB,QAAA7Y,OAAAqE,MAAAyU,QAAA,SAAA9D,UACA9c,MAAA8c,WAAAA,cAOAwD,aAAAnF,SAAA,UACA5c,UAAAE,GAAA2G,UAAA,QAAAkb,aAEA,SAAAO,kBAAAne,gBAAAF,UACA,OACA6C,SAAA,KACAgC,QAAA,UACA6E,KAAA,SAAAlM,MAAAuD,QAAA4I,OAEA,GAAAqT,KAAAxf,MAAA2Q,MAAAxE,MAAA2U,UAEA,IAAApiB,QAAAmS,UAAA2O,IAAAjgB,WAAAb,QAAAmS,UAAA2O,IAAAhgB,aAAA,CACAkD,gBAAAtD,IAAAogB,KACA5f,KAAA,SAAAL,UACAgE,QAAAwd,OAAAve,SAAAjD,UAAAS,cAEA,CACAwf,IAAAiB,aAAAjB,IAAAmB,QAAA,SAAAK,UACAtiB,QAAAgD,QAAAsf,SAAA,SAAAC,MACA1d,QAAAwd,OAAAE,aAQAJ,iBAAA1F,SAAA,kBAAA,WACA5c,UAAAE,GAAA2G,UAAA,YAAAyb,oBAEA9hB","file":"availity-angular-ui.min.js","sourcesContent":["/**\n * availity-angular v1.1.0 -- October-12\n * Copyright 2015 Availity, LLC \n */\n\n// Source: \\lib\\ui\\index.js\n\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity || {};\n\n  availity.MODULE_UI = 'availity.ui';\n  availity.ui = angular.module(availity.MODULE_UI, ['ng', 'ngSanitize']);\n\n  availity.ui.constant('AV_UI', {\n    // jscs: disable\n    NG_OPTIONS: /^\\s*([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?(?:\\s+group\\s+by\\s+([\\s\\S]+?))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+([\\s\\S]+?)(?:\\s+track\\s+by\\s+([\\s\\S]+?))?$/\n    // jscs: enable\n  });\n\n  if(typeof module !== 'undefined' && module.exports) {\n    module.exports = availity;\n  }\n\n\n})(window);\n\n// Source: \\lib\\ui\\templates\\template.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.factory('avTemplateCache', function($q, $templateCache, $http) {\n\n    return {\n\n      get: function(options) {\n\n        var valid = !options.template || !options.templateUrl;\n\n        if(!valid) {\n          throw new Error('Either options.template or options.templateUrl must be defined for avTemplateCache');\n        }\n\n        return options.template ? $q.when(options.template) :\n          $http.get(options.templateUrl, {cache: $templateCache})\n            .then(function(result) {\n              return result.data;\n            });\n      }\n    };\n  });\n\n})(window);\n\n// Source: \\lib\\ui\\modal\\modal.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_MODAL', {\n\n    OPTIONS: {\n      scope: null,\n      templateUrl: null,\n      template: null,\n      id: null,\n      container: null,\n\n      // Bootstrap defaults\n      keyboard: true,\n      backdrop: true,\n      show: false,\n      remote: false\n    },\n\n    EVENTS: {\n      SHOW: 'show.av.modal',\n      SHOWN: 'shown.av.modal',\n      HIDE: 'hide.av.modal',\n      HIDDEN: 'hidden.av.modal'\n    },\n\n    BS_EVENTS:  {\n      SHOW: 'show.bs.modal',\n      SHOWN: 'shown.bs.modal',\n      HIDE: 'hide.bs.modal',\n      HIDDEN: 'hidden.bs.modal'\n    },\n\n    TEMPLATES: {\n      MODAL: 'ui/modal/modal-tpl.html'\n    }\n  });\n\n  availity.ui.factory('avModalManager', function() {\n\n    var AvModalManager = function() {\n      this.instances = [];\n    };\n\n    var proto = AvModalManager.prototype;\n\n\n    proto.add = function(id) {\n      this.instances.push(id);\n    };\n\n    proto.remove = function(id) {\n      this.instances = _.without(this.instances, id);\n    };\n\n    proto.closeAll = function() {\n\n      _.forEach(this.instances, function(id) {\n\n        var $el = $('#' + id);\n\n        if(!$el) {\n          return;\n        }\n\n        var bsModal = $el.data('bs.modal');\n        if(bsModal) {\n          bsModal.removeBackdrop();\n          bsModal.$body.removeClass('modal-open');\n          bsModal.resetAdjustments();\n          bsModal.resetScrollbar();\n        }\n\n        var avModal = $el.data('AvModal');\n        if(avModal) {\n          avModal.destroy();\n        }\n\n      });\n    };\n\n\n    return new AvModalManager();\n\n  });\n\n  var ModalFactory = function($rootScope, $timeout, $compile, AV_MODAL, avTemplateCache, $q, avModalManager) {\n\n    var Modal = function(options) {\n\n      var self = this;\n\n      this.templateDefer = $q.defer();\n      this.templatePromise = this.templateDefer.promise;\n\n      this.options = angular.extend({}, AV_MODAL.OPTIONS, {scope: $rootScope.$new()}, options);\n\n      avTemplateCache.get(options).then(function(template) {\n        self.options.template = template;\n        self._build();\n      });\n\n    };\n\n    Modal.create = function(options) {\n      return new Modal(options);\n    };\n\n    var proto = Modal.prototype;\n\n    proto._build = function() {\n\n      var self = this;\n\n      var scope = this.options.scope;\n      this.$element = angular.element(this.options.template);\n\n      this._createId();\n\n      this._scope();\n\n\n      $compile(this.$element)(scope);\n\n      $timeout(function() {\n        self._init();\n      }, 0, true);\n\n      // Append to container or <body>\n      this.options.container ? this.$element.appendTo(this.options.container) : this.$element.appendTo('body');\n\n    };\n\n    proto._init = function() {\n\n      this.$element.data('AvModal', this);\n\n      this.templateDefer.resolve(true);\n\n      // Initialize Bootstrap jQuery plugin\n      this.$element.modal({\n        'backdrop': this.options.backdrop,\n        'keyboard': this.options.keyboard,\n        'show': this.options.show,\n        'remote': this.options.remote\n      });\n\n      this._listeners();\n    };\n\n    proto._scope = function() {\n\n      var self = this;\n      var scope = this.options.scope;\n\n      scope.modalShow = function() {\n        self.show();\n      };\n\n      scope.modalToggle = function() {\n        self.toggle();\n      };\n\n      scope.modalHide = function() {\n        self.hide();\n      };\n\n    };\n\n    proto._listeners = function() {\n\n      var self = this;\n      var scope = this.options.scope;\n      var $element = this.$element;\n\n      this.animationDefer = $q.defer();\n      this.animationPromise = this.animationDefer.promise;\n\n      $element.on(AV_MODAL.BS_EVENTS.SHOW, function(event) {\n        scope.$emit(AV_MODAL.EVENTS.SHOW, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.SHOWN, function(event) {\n\n        if(angular.isFunction(self.options.onShown)) {\n          self.options.onShown();\n        }\n\n        self.animationDefer.resolve(true);\n\n        scope.$emit(AV_MODAL.EVENTS.SHOWN, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.HIDE, function(event) {\n        scope.$emit(AV_MODAL.EVENTS.HIDE, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.HIDDEN, function(event) {\n\n        if(angular.isFunction(self.options.onHidden)) {\n          self.options.onHidden.call(this);\n        }\n\n        scope.$emit(AV_MODAL.EVENTS.HIDDEN, event, self);\n\n        scope.$evalAsync(function() {\n          self.destroy();\n        });\n\n      });\n\n      // Garbage collection\n      scope.$on('$destroy', function() {\n        avModalManager.remove(self._id);\n        self.destroy();\n      });\n\n    };\n\n    proto.show = function() {\n\n      var self = this;\n\n      this.animationDefer = $q.defer();\n      this.animationPromise = this.animationDefer.promise;\n\n      return this.templatePromise.then(function() {\n        self.$element.modal('show');\n      }).then(function() {\n        return self.animationPromise;\n      });\n\n    };\n\n    proto.hide = function() {\n\n      var self = this;\n\n      var deferred = $q.defer();\n\n      this.templatePromise.then(function() {\n\n        self.$element.one('hidden.bs.modal', function() {\n          deferred.resolve(true);\n        });\n\n        self.$element.modal('hide');\n\n      });\n\n      return deferred.promise;\n    };\n\n    proto.toggle = function() {\n\n      var self = this;\n\n      var deferred = $q.defer();\n\n      this.templatePromise.then(function() {\n\n        self.$element.one('hidden.bs.modal', function() {\n          deferred.resolve(true);\n        });\n\n        self.$element.data('modal').toggle();\n\n      });\n\n      return deferred.promise;\n\n    };\n\n    proto.destroy = function() {\n\n      var self = this;\n\n      return this.templatePromise.then(function() {\n        self.$element.data('AvModal', null);\n        self.$element.remove();\n      });\n\n    };\n\n    proto._createId = function() {\n      // Create a unique id for the modal if not present or passed in via options\n      var id = this.$element.attr('id');\n      if(!id) {\n        // Get id from options or create a unique id\n        id = this.options.id ? this.options.id : availity.uuid('av-modal-id');\n        this.$element.attr('id', id);\n      }\n\n      this._id = id;\n\n      avModalManager.add(id);\n    };\n\n    return Modal;\n  };\n\n\n  availity.ui.factory('AvModal', ModalFactory);\n\n  availity.ui.directive('avModal', function(AV_MODAL) {\n    return {\n      restrict: 'A',\n      replace: true,\n      transclude: true,\n      scope: {\n        size: '@'\n      },\n      templateUrl: AV_MODAL.TEMPLATES.MODAL\n    };\n  });\n\n})(window);\n\n// Source: \\lib\\ui\\validation\\form.js\n/**\n * 1. All fields should be pristine on first load\n * 2. If field is modified an invalid the field should be marked with an error\n *\n */\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('avValFormController', function() {\n\n    this.ngForm  = null;\n    this.rulesKey = null;\n    this.avValOn = null;\n    this.avValDebounce = null;\n    this.avValInvalid = false;\n\n    // Object that stores the unique id (key) and violation count (value) of all the form fields\n    //\n    // EX:\n    //\n    // {\n    //  avVal001: 0\n    //  avVal002: 2\n    //  avVal003: 1\n    // }\n    this.violations = {};\n\n    this.init = function(form) {\n      this.ngForm = form;\n    };\n\n    /**\n     * Records id of the form field and number of violations\n     * @param  {[type]} id    [description]\n     * @param  {[type]} count [description]\n     * @return {[type]}       [description]\n     */\n    this.record = function(id, count) {\n      this.violations[id] = count;\n\n      var violocationCount = _.reduce(this.violations, function(sum, num) {\n        return sum + num;\n      }, 0);\n\n      this.ngForm.$setValidity('av', violocationCount === 0);\n    };\n\n    this.unrecord = function(id) {\n      if(id && this.violations[id]) {\n        delete this.violations[id];\n      }\n    };\n\n    this.reset = function() {\n      this.ngForm.$setPristine();\n      this.ngForm.$submitted = false;\n    };\n\n    this.$setSubmitted = function() {\n      this.ngForm.$submitted = true;\n    };\n\n    this.setRulesKey = function(key) {\n      this.rulesKey = key;\n    };\n\n  });\n\n  // form.$error = {};\n  // form.$$success = {};\n  // form.$pending = undefined;\n  // form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);\n  // form.$dirty = false;\n  // form.$pristine = true;\n  // form.$valid = true;\n  // form.$invalid = false;\n  // form.$submitted = false;\n\n  availity.ui.directive('avValForm', function($log, $timeout, $parse, AV_VAL, avValAdapter, $rootScope) {\n    return {\n      restrict: 'A',\n      priority: 10,\n      require: ['form', 'avValForm', '?ngSubmit'],\n      controller: 'avValFormController',\n      compile: function() {\n        return {\n          pre: function(scope, iEl, iAttrs, controllers) {\n\n            var ruleFn = $parse(iAttrs.avValForm);\n            var rulesKey = ruleFn(scope);\n            rulesKey = rulesKey || iAttrs.avValForm; // interpolated rule from scope || fixed string\n\n            if(!rulesKey) {\n              $log.error('avValForm requires a rules key in order to run the proper validation rules.');\n              return;\n            }\n\n            scope.$watch(ruleFn, function(_rulesKey, _oldRulesKey) {\n              if(_rulesKey) {\n                avForm.setRulesKey(_rulesKey);\n\n                if(_rulesKey !== _oldRulesKey) {\n                  $timeout(function() {\n                    $log.info('avValForm revalidate');\n                    $rootScope.$broadcast(AV_VAL.EVENTS.REVALIDATE);\n                  });\n                }\n\n              }\n\n            });\n\n            var ngForm = controllers[0];\n            var avForm = controllers[1];\n\n            // Allow form attributes to define the validation behavior of the form fields\n            // inside it.  If `av-val-on` or `av-val-debounce` are on the form then all form\n            // fields inside the form would inherit this behavior.\n            avForm.avValOn = iAttrs.avValOn || null;\n            avForm.avValDebounce = iAttrs.avValDebounce || null;\n            // Allows fields to update with invalid data for dirty form saving\n            avForm.avValInvalid = iAttrs.avValInvalid || false;\n\n            avForm.init(ngForm);\n            avForm.setRulesKey(rulesKey);\n\n          },\n          post: function(scope, iEl, iAttrs, controllers) {\n\n            iEl.attr('novalidate', 'novalidate');  // prevent HTML5 validation from kicking in\n\n            // Disable ng-submit or ng-click handlers and store the function to call for submitting\n            var fn;\n            if(iAttrs.ngSubmit) {\n              // Disable ng-submit event\n              iEl.off('submit');\n              fn = $parse(iAttrs.ngSubmit, /* expensiveChecks */ true);\n            }else if(iAttrs.ngClick) {\n              // Disable ng-click event\n              iEl.off('click');\n              fn = $parse(iAttrs.ngClick, /* expensiveChecks */ true);\n            }\n\n            var ngForm = controllers[0];\n            var avForm = controllers[1];\n\n            scope.$on(AV_VAL.EVENTS.RESET, function () {\n              avForm.reset();\n            });\n\n            iEl.bind('submit', function(event) {\n\n              scope.$broadcast(AV_VAL.EVENTS.SUBMITTED);\n              avForm.$setSubmitted();\n\n              if(ngForm.$invalid) {\n\n                scope.$broadcast(AV_VAL.EVENTS.FAILED);\n\n                $log.info('avValForm invalid.  preventing default submit action');\n\n                event.preventDefault();\n                event.stopImmediatePropagation();\n                scope.$broadcast(event);\n\n                avValAdapter.scroll(iEl);\n                return;\n              }\n\n              ngForm.$setPristine();\n\n              if(!fn) {\n                return;\n              }\n\n              var callback = function() {\n                fn(scope, {$event:event});\n              };\n\n              scope.$apply(callback);\n\n            });\n\n          }\n        };\n      }\n    };\n  });\n\n\n})(window);\n\n// Source: \\lib\\ui\\validation\\field.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('AvValFieldController', function($element, avValAdapter, $attrs, avVal, $log, $timeout, $scope, $sniffer) {\n\n    this.ngModel = null;\n    this.rule = null;\n    this.avValForm = null;\n    this.avValInvalid = false;\n\n    var self = this;\n\n    var placeholder = $element[0].placeholder;\n    var noEvent = {};\n\n    this.createId = function() {\n      this.ngModel.avId = availity.uuid('avVal');\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.setRule = function(rule) {\n      this.rule = rule;\n    };\n\n    this.avValForm = function(avValForm) {\n      this.avValForm = avValForm;\n    };\n\n    this.updateModel = function(results) {\n\n      var self = this;\n      var validationKeys = [];\n\n      this.ngModel.avResults = results;\n\n      // set state for each violation\n      angular.forEach(results.violations, function (result) {\n        var key = 'av-' + result.contraintName;\n        validationKeys.push(key);\n        self.ngModel.$setValidity(key, result.valid);\n      });\n\n      // set overall state for validation state\n      this.ngModel.$setValidity('av', this.ngModel.avResults.isValid);\n\n      // store violations\n      this.ngModel.avViolations = this.ngModel.avResults.violations;\n\n      // record the id and violation count in the av-form controller.  this determines if the form is\n      // valid if sum of violations for all form inputs === zero\n      this.avValForm.record(this.ngModel.avId, this.ngModel.avResults.violations.length);\n\n      // remove violation keys that are no longer falsy\n      angular.forEach(this.ngModel.$error, function(value, key) {\n\n        if(_.indexOf(validationKeys, key) === -1 && key.lastIndexOf('av-', 0) === 0) {\n          self.ngModel.$setValidity(key, true);\n        }\n      });\n    };\n\n    this.updateView = function() {\n      if(this.ngModel.$dirty) {\n        avValAdapter.element($element, this.ngModel, this.ngModel.avResults.isValid);\n        avValAdapter.message($element, this.ngModel);\n      }\n    };\n\n    this.validate = function(value) {\n\n      $log.info('validating value [' + value + ']');\n\n      var rulesKey = self.avValForm.rulesKey;\n      var results = avVal.validate(rulesKey, $element, value, self.rule);\n\n      // validate function is called within the context of angular so fn.call and set the context\n      // to \"this\"\n      self.updateModel.call(self, results);\n      self.updateView.call(self);\n\n      return results;\n    };\n\n    this.validateModel = function(value) {\n\n      self.validate(value, true);\n      return value;\n\n    };\n\n    this.validateView = function(value) {\n\n      var results = self.validate(value);\n\n      if(self.avValForm.avValInvalid || self.avValInvalid) {\n        // allows invalid data from view to update model for dirty saving\n        return value;\n      }\n\n      // prevent invalid data from view to update model\n      return results.isValid ? value : undefined;\n\n    };\n\n    this.onDebounce = function() {\n\n      var value = $element.val().trim();\n\n      if(this.isCheckbox()) {\n        this.ngModel.$setViewValue($element[0].checked);\n      } else if(this.isRadio()) {\n        this.ngModel.$setViewValue($attrs.value);\n      }else {\n        this.ngModel.$setViewValue(value);\n      }\n\n    };\n\n    this.isRadio = function() {\n      return $element.is('input') && $attrs.type === 'radio';\n    };\n\n    this.isCheckbox = function() {\n      return $element.is('input') && $attrs.type === 'checkbox';\n    };\n\n    this.reset = function() {\n\n      var violations = this.ngModel.avResults.violations;\n      violations.splice(0, violations.length);\n\n      avValAdapter.message($element, this.ngModel);\n      avValAdapter.reset($element);\n\n    };\n\n    this.event = function(event, avValDebounce) {\n\n      var self = this;\n\n      $element.unbind('input');\n\n      var debounce;\n\n      $element.on(event, function() {\n\n        // https://github.com/angular/angular.js/blob/v1.2.27/src/ng/directive/input.js#L508\n        if($sniffer.msie <= 11 && (event || noEvent).type === 'input' && $element[0].placeholder !== placeholder) {\n          placeholder = $element[0].placeholder;\n          return;\n        }\n\n        $timeout.cancel(debounce);\n        debounce = $timeout(function() {\n          $scope.$apply(function() {\n            self.onDebounce();\n          });\n        }, avValDebounce);\n\n      });\n\n    };\n\n  });\n\n  // Events:\n  //\n  //  click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown\n  //  keyup keypress submit focus blur copy cut paste\n  availity.ui.directive('avValField', function($log, $timeout, avVal, avValAdapter, AV_VAL) {\n    return {\n      restrict: 'A',\n      controller: 'AvValFieldController',\n      require: ['^avValForm', 'ngModel', 'avValField'],\n      scope: {\n        avValDebounce: '@?',\n        avValOn: '@?'\n      },\n      link: function(scope, element, attrs, controllers) {\n\n        var rule = attrs.avValField;\n        var avValForm = controllers[0];\n        var ngModel = controllers[1];\n        var avValField = controllers[2];\n\n        var avValOn = scope.avValOn || avValForm.avValOn || 'input';\n\n        if(!ngModel && !rule) {\n          $log.error('avValField requires ngModel and a validation rule to run.');\n          return;\n        }\n\n        // Allows fields to update with invalid data for dirty form saving\n        avValField.avValInvalid = attrs.avValInvalid || false;\n\n        // CACHE THE MODEL\n        avValField.setNgModel(ngModel);\n\n        avValField.avValForm(avValForm);\n\n        avValField.setRule(rule);\n\n        avValField.createId();\n\n        // DEBOUNCE\n        var avValDebounce = parseInt(scope.avValDebounce || (avValForm.avValDebounce || AV_VAL.DEBOUNCE), 10);\n        avValDebounce = _.isNumber(avValDebounce) ? avValDebounce : AV_VAL.DEBOUNCE;\n\n        var debounceAllowed = !avValField.isRadio() && !avValField.isCheckbox() && avValOn !== 'blur';\n\n        if(!debounceAllowed) {\n          avValDebounce = 0;\n        }\n\n        // EVENT LISTENER\n        avValField.event(avValOn, avValDebounce);\n\n        // (view to model)\n        ngModel.$parsers.push(avValField.validateView);\n\n        // (model to view) - added to beginning of array because formatters\n        // are processed in reverse order thus allowing the model to be transformed\n        // before the validation framework check for validity.\n        ngModel.$formatters.unshift(avValField.validateModel);\n\n        scope.$on(AV_VAL.EVENTS.REVALIDATE, function() {\n          avValField.validate(ngModel.$viewValue);\n        });\n\n        // SUBMITTED EVENT\n        scope.$on(AV_VAL.EVENTS.SUBMITTED, function() {\n          ngModel.$dirty = true;\n          avValField.validate(ngModel.$viewValue);\n        });\n\n        // - Removes all errors on page,\n        // - does not reset view or model values.  This is to be handled by the app.\n        scope.$on(AV_VAL.EVENTS.RESET, function () {\n          avValField.reset();\n        });\n\n        scope.$on('$destroy', function () {\n          avValForm.unrecord(ngModel.avId);\n        });\n\n      }\n    };\n  });\n\n\n})(window);\n\n// Source: \\lib\\ui\\popover\\popover.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_POPOVER', {\n    NAME: 'bs.popover'\n  });\n\n  availity.ui.controller('AvPopoverController', function($element, $scope, AV_POPOVER) {\n\n    this.listeners = function() {\n\n      var self = this;\n\n      angular.forEach(['show', 'shown', 'hide', 'hidden'], function(name) {\n        $element.on(name + '.bs.popover', function(ev) {\n          $scope.$emit('av:popover:' + name, ev);\n        });\n      });\n\n      $scope.$on('destroy', function() {\n        self.destroy();\n      });\n    };\n\n    this.plugin = function() {\n      return $element.data(AV_POPOVER.NAME);\n    };\n\n    this.show = function() {\n      $element.popover('show');\n    };\n\n    this.hide = function() {\n      $element.popover('hide');\n    };\n\n    this.toggle = function() {\n      $element.popover('toggle');\n    };\n\n    this.destroy = function() {\n      $element.popover('destroy');\n    };\n  });\n\n  availity.ui.directive('avPopover', function() {\n    return {\n      restrict: 'A',\n      controller: 'AvPopoverController',\n      link: function(scope, element) {\n\n        var options = {};\n\n        scope.$evalAsync(function() {\n          element.popover(angular.extend({}, options, {\n            html: true\n          }));\n        });\n      }\n    };\n  });\n\n})(window);\n\n// Source: \\lib\\ui\\validation\\messages.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('avValContainerController', function($scope, $timeout) {\n\n    this.message = function(ngModel) {\n\n      var message = null;\n      if(ngModel.avResults.violations.length && ngModel.avResults.violations[0].message) {\n        message = ngModel.avResults.violations[0].message;\n      }else {\n        message = null;\n      }\n\n      // $timeout is needed to update the UI from $broadcast events\n      $timeout(function() {\n        $scope.messages.message = message;\n      });\n\n    };\n\n  });\n\n  availity.ui.directive('avValContainer', function() {\n    return {\n      restrict: 'A',\n      controller: 'avValContainerController',\n      template: '<p class=\"help-block\" data-ng-bind-html=\"messages.message\"></p>',\n      replace: true,\n      scope: {\n\n      },\n      link: function(scope) {\n        scope.messages = _.extend({}, scope.messages, { message: null, id: null });\n      }\n    };\n  });\n\n\n})(window);\n\n// Source: \\lib\\ui\\validation\\adapter-bootstrap.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BOOTSTRAP_ADAPTER', {\n    CLASSES: {\n      SUCCESS: 'has-success',\n      WARNING: 'has-warning',\n      ERROR: 'has-error',\n      FEEDBACK: 'has-feedback',\n      HELP: 'help-block',\n      FORM_GROUP: '.form-group:first',\n      NAVBAR: 'navbar-fixed-top'\n    },\n    SELECTORS: {\n      CONTAINER: 'container-id',\n      DATA_CONTAINER: 'data-container-id'\n    },\n    CONTROLLER: '$avValContainerController'\n  });\n\n  availity.ui.factory('avValBootstrapAdapter', function(AV_BOOTSTRAP_ADAPTER, $timeout, $log) {\n\n    return {\n\n      element: function(element, ngModel) {\n        if(ngModel.$valid) {\n          element.parents(AV_BOOTSTRAP_ADAPTER.CLASSES.FORM_GROUP).removeClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n        }else {\n          element.parents(AV_BOOTSTRAP_ADAPTER.CLASSES.FORM_GROUP).addClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n        }\n      },\n\n      reset: function(element) {\n        element.parents(AV_BOOTSTRAP_ADAPTER.CLASSES.FORM_GROUP).removeClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n      },\n\n      message: function(element, ngModel) {\n\n        var selector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.HELP\n        ].join('');\n\n        var $el = $(element);\n\n        var target = $el.attr(AV_BOOTSTRAP_ADAPTER.SELECTORS.CONTAINER);\n        target = target || $el.attr(AV_BOOTSTRAP_ADAPTER.SELECTORS.DATA_CONTAINER);\n        // default to siblings\n        target = target ? $('#' + target) : $el.siblings(selector);\n\n        if(target.length === 0) {\n          $log.warn('avValBootstrapAdapter could not find validation container for {0}', [element]);\n          return;\n        }\n\n        var el = target[0];\n        $el = angular.element(el);\n        var avValModel = $el.data(AV_BOOTSTRAP_ADAPTER.CONTROLLER); // get the av val message controller\n        if(avValModel) {\n          avValModel.message(ngModel);\n        }\n      },\n\n      scroll: function(form) {\n\n        // Bootstrap fixed navbars causes bad scroll-to offsets so find them all\n        var navbarSelector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.NAVBAR\n        ].join('');\n\n        // Add up all the heights to find the true offset\n        var offset = 0;\n        $(navbarSelector).each(function() {\n          offset += $(this).outerHeight();\n        });\n\n        var selector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR,\n          ':first'\n        ].join('');\n\n        var $target = $(form).find(selector);\n        $timeout(function() {\n          // scroll to offset top of first error minus the offset of the navbars\n          $('body, html').animate({scrollTop: $target.offset().top - offset}, 'fast');\n        }, 0, false);\n      }\n    };\n  });\n\n\n})(window);\n\n// Source: \\lib\\ui\\validation\\adapter.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_VAL_ADAPTER', {\n    DEFAULT: 'avValBootstrapAdapter'\n  });\n\n  availity.ui.provider('avValAdapter', function() {\n\n    var that = this;\n\n    this.setAdapter = function(adapter) {\n      this.adapter = adapter;\n    };\n\n    this.$get = function(AV_VAL_ADAPTER, $injector) {\n\n      var Adapter = function() {\n        var adapterName = that.adapter || AV_VAL_ADAPTER.DEFAULT;\n        this.adapter = $injector.get(adapterName);\n      };\n\n      var proto = Adapter.prototype;\n\n      proto.element = function(element, ngModel) {\n        this.adapter.element(element, ngModel);\n      };\n\n      proto.reset = function(element) {\n        this.adapter.reset(element);\n      };\n\n      proto.message = function(element, ngModel) {\n        this.adapter.message(element, ngModel);\n      },\n\n      proto.scroll = function(form) {\n        this.adapter.scroll(form);\n      };\n\n      return new Adapter();\n    };\n  });\n\n})(window);\n\n// Source: \\lib\\ui\\dropdown\\dropdown.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.provider('avDropdownConfig', function() {\n    var config = {\n      closeOnResize: true,\n      dropdownAutoWidth: true,\n      minimumResultsForSearch: 5\n    };\n\n    this.set = function(options) {\n      angular.extend(config, options);\n    };\n\n    this.$get = function() {\n      return angular.copy(config);\n    };\n  });\n\n  availity.ui.constant('AV_DROPDOWN', {\n    OPTIONS: [\n      'width',\n      'minimumInputLength',\n      'maximumInputLength',\n      'minimumResultsForSearch',\n      'maximumSelectionSize',\n      'placeholderOption',\n      'separator',\n      'allowClear',\n      'multiple',\n      'closeOnSelect',\n      'openOnEnter',\n      'id',\n      'matcher',\n      'sortResults',\n      'formatSelection',\n      'formatResult',\n      'formatResultCssClass',\n      'formatNoMatches',\n      'formatSearching',\n      'formatAjaxError',\n      'formatInputTooShort',\n      'formatInputTooLong',\n      'formatSelectionTooBig',\n      'formatLoadMore',\n      'createSearchChoice',\n      'createSearchChoicePosition',\n      'initSelection',\n      'tokenizer',\n      'tokenSeparators',\n      'query',\n      'ajax',\n      'data',\n      'tags',\n      'containerCss',\n      'containerCssClass',\n      'dropdownCss',\n      'dropdownCssClass',\n      'dropdownAutoWidth',\n      'adaptContainerCssClass',\n      'adaptDropdownCssClass',\n      'escapeMarkup',\n      'selectOnBlur',\n      'loadMorePadding',\n      'nextSearchTerm'\n    ]\n  });\n\n\n  availity.ui.controller('AvDropdownController', function($element, $attrs, AV_UI, AV_DROPDOWN, avDropdownConfig, $log, $scope, $timeout, $parse) {\n\n    var self = this;\n    this.options = {};\n    this.match = null;\n    this.ngModel = null;\n\n    this.init = function() {\n\n      self.options = angular.extend({}, avDropdownConfig);\n\n      _.forEach($attrs, function(value, key) {\n        if(_.contains(AV_DROPDOWN.OPTIONS, key.replace('data-', ''))) {\n          self.options[key] = $scope.$eval(value);\n        }\n      });\n\n      self.multiple = angular.isDefined($attrs.multiple);\n\n      if(self.options.query) {\n\n        self.queryFn = self.options.query;\n        // Function used to query results for the search term.\n        self.options.query = self.query;\n        // Function used to get the id from the choice object or a string representing the key under which the id is stored.\n        self.options.id = self.getId;\n      }\n\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.getSelected = function(model) {\n\n      if(self.options.query) {\n        return 0;\n      }\n      var items = this.collection($scope);\n\n      var index = _.findIndex(items, function(item) {\n        return angular.equals(item, model);\n      });\n\n      return index;\n\n    };\n\n    // Result:\n    //\n    // {\n    //   \"code\": \"252Y00000X\",\n    //   \"value\": \"AGENCIES,EARLY INTERVENTION PROVIDER AGENCY,NOT APPLICABLE|Agency\",\n    //   \"id\": \"252Y00000X\"\n    // }\n    this.getId = function(result) {\n      return result.id;\n    };\n\n    // Wrapper around the query function for Select2.  When the promise resolves\n    // the callback\n    this.query = function(options) {\n\n      self.queryFn(options).then(function(response) {\n\n        // Callback function that should be called with the result object. The result object:\n        //\n        // result.results (object) - Array of result objects. The default renderers\n        //    expect objects with id and text keys. The id property is required,\n        //    even if custom renderers are used. The object may also contain a children\n        //    key if hierarchical data is displayed. The object may also contain a disabled\n        //    boolean property indicating whether this result can be selected.\n        //\n        // result.more (boolean) - true if more results are available for the current\n        //    search term.\n        //\n        // results.context (object) - A user-defined object that should be made available\n        //    as the context parameter to the query function on subsequent queries to load\n        //    more result pages for the same search term. See the description of\n        //    options.context parameter.\n        options.callback({more: response.more, results: response.results});\n      });\n    };\n\n    this.setValue = function() {\n\n      var viewValue = self.ngModel.$viewValue;\n      var selected = null;\n      if(viewValue) {\n        selected = this.getSelected(viewValue);\n      }\n\n      // var apply = scope.$evalAsync || $timeout;\n      $timeout(function() {\n        $element\n          .select2('val',  (selected === null || selected === 'undefined') ? '' : selected); // null === '' for Select2\n      });\n    };\n\n    this.getMultiSelected = function(viewValue) {\n\n      var options = this.collection($scope);\n      var indices = [];\n\n      _.each(viewValue, function(savedObject) {\n        var index = _.findIndex(options, function(value) {\n          var temp = angular.copy(savedObject); // remove hashkeys for comparison\n          return _.matches(temp)(value);\n        });\n        indices.push(index);\n      });\n\n      if(indices.length > 0) {\n        viewValue = indices;\n      }\n\n      return viewValue;\n\n    };\n\n    this.setValues = function() {\n\n      var viewValue = self.ngModel.$viewValue;\n\n      if(!angular.isArray(viewValue)) {\n        viewValue = [];\n      }\n\n      if(!_.isEmpty(viewValue) && _.isObject(viewValue[0])) {\n        viewValue = this.getMultiSelected(viewValue);\n      }\n\n      $timeout(function() {\n        $element\n          .select2('val', viewValue);\n      });\n    };\n\n    this.ngOptions = function() {\n\n      this.match = $attrs.ngOptions.match(AV_UI.NG_OPTIONS);\n      if(!this.match) {\n        throw new Error('Invalid ngOptions for avDropdown');\n      }\n      // AV_UI.NG_OPTIONS regex will parse into arrays like below:\n      //\n      // 0: \"state.name for state in states\"\n      // 1: \"state.name\"\n      // 2: undefined\n      // 3: undefined\n      // 4: \"state\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"states\"\n      // 8: undefined\n      //\n      // 0: \"state.id as state.name for state in states\"\n      // 1: \"state.id\"\n      // 2: \"state.name\"\n      // 3: undefined\n      // 4: \"state\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"states\"\n      // 8: undefined\n      //\n      // 0: \"state.name for state in states track by state.id\"\n      // 1: \"state.name\"\n      // 2: undefined\n      // 3: undefined\n      // 4: \"state\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"states\"\n      // 8: \"state.id\"\n      //\n      // 0: \"person.fullName as (person.lastName + ', ' + person.firstName) for person in feeScheduleModel.persons\"\n      // 1: \"person.fullName\"\n      // 2: \"(person.lastName + ', ' + person.firstName)\"\n      // 3: undefined\n      // 4: \"person\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"feeScheduleModel.persons\"\n      // 8: undefined\n      //\n      this.displayFn = $parse(this.match[2] || this.match[1]); // this is the function to retrieve the text to show as\n      this.collection = $parse(this.match[7]);\n      this.valueName = this.match[4] || this.match[6];\n      this.valueFn = $parse(this.match[2] ? this.match[1] : this.valueName);\n      this.keyName = this.match[5];\n\n      $scope.$watchCollection(this.collection, function(newVal, oldVal) {\n        if(angular.equals(newVal, oldVal)) {\n          return;\n        }\n\n        self.setValue();\n\n      }, true);\n\n    };\n  });\n\n  availity.ui.directive('avDropdown', function($timeout, $log, $window) {\n\n    return {\n      restrict: 'A',\n      require: ['ngModel', 'avDropdown'],\n      controller: 'AvDropdownController',\n      link: function(scope, element, attrs, controllers) {\n        var ngModel = controllers[0];\n        var avDropdown = controllers[1];\n\n        avDropdown.setNgModel(ngModel);\n        avDropdown.init();\n\n        if(attrs.ngOptions) {\n          avDropdown.ngOptions();\n        }\n\n        ngModel.$parsers.push(function(value) {\n          var parent = element.prev();\n          parent\n            .toggleClass('ng-invalid', !ngModel.$valid)\n            .toggleClass('ng-valid', ngModel.$valid)\n            .toggleClass('ng-invalid-required', !ngModel.$valid)\n            .toggleClass('ng-valid-required', ngModel.$valid)\n            .toggleClass('ng-dirty', ngModel.$dirty)\n            .toggleClass('ng-pristine', ngModel.$pristine);\n          return value;\n        });\n\n        element.on('change', function(e) {\n\n          // special case since the ajax handling doesn't bind to the model correctly\n          // this has to do with select2 (v3.5.2) using a hidden field instead of a select for ajax\n          if(avDropdown.options.query) {\n            $timeout(function() {\n              ngModel.$setViewValue(e.added);\n            });\n          }\n\n          $log.info(e);\n\n        });\n\n        // fires ng-focus when select2-focus fires.\n        element.on('select2-focus', function() {\n          if(attrs.ngFocus) {\n            scope.$eval(scope.$eval(attrs.ngFocus));\n          }\n        });\n\n        // fires ng-blur when select2-blur occurs.\n        element.on('select2-blur', function() {\n          if(attrs.ngBlur) {\n            scope.$eval(scope.$eval(attrs.ngBlur));\n          }\n        });\n\n        // https://github.com/t0m/select2-bootstrap-css/issues/37#issuecomment-42714589\n        element.on('select2-open', function () {\n          // look for .has-success, .has-warning, .has-error\n          // (really look for .has-* … which is good enough for the demo page, but obviously might interfere with other CSS-classes starting with \"has-\")\n          if(element.parents('[class*=\"has-\"]').length) {\n\n            // get all CSS-classes from the element where we found \"has-*\" and collect them in an array\n            var classNames = $(this).parents('[class*=\"has-\"]')[0].className.split(/\\s+/);\n\n            // go through the class names, find \"has-\"\n            for(var i = 0; i < classNames.length; ++i) {\n              if(classNames[i].match('has-')) {\n                $('#select2-drop').addClass(classNames[i]);\n              }\n            }\n          }\n        });\n\n\n        var _$render = ngModel.$render;\n        ngModel.$render = function() {\n          _$render();\n\n          if(avDropdown.multiple) {\n            avDropdown.setValues();\n          }else {\n            avDropdown.setValue();\n          }\n\n        };\n\n        var win = angular.element($window);\n\n        win.bind('resize', function() {\n          element.select2('close');\n        });\n\n        attrs.$observe('disabled', function (value) {\n          element.select2('enable', !value);\n        });\n\n        attrs.$observe('readonly', function (value) {\n          element.select2('readonly', !!value);\n        });\n\n        scope.$on('destroy', function() {\n          element.select2('destroy');\n        });\n\n        $timeout(function() {\n          element.select2(avDropdown.options);\n        });\n      }\n    };\n  });\n\n})(window);\n\n// Source: \\lib\\ui\\datepicker\\datepicker.js\n/**\n * Inspiration https://github.com/mgcrea/angular-strap/blob/v0.7.8/src/directives/datepicker.js\n */\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // Options: http://bootstrap-datepicker.readthedocs.org/en/latest/options.html\n  availity.ui.constant('AV_DATEPICKER', {\n    CONTROLLER: '$ngModelController',\n    ADD_ON_SELECTOR: '[data-toggle=\"datepicker\"]',\n    OPTIONS: [\n      'autoclose',\n      'beforeShowDay',\n      'beforeShowMonth',\n      'calendarWeeks',\n      'clearBtn',\n      'toggleActive',\n      'container',\n      'daysOfWeekDisabled',\n      'datesDisabled',\n      'defaultViewDate',\n      'endDate',\n      'forceParse',\n      'format',\n      'inputs',\n      'keyboardNavigation',\n      'language',\n      'minViewMode',\n      'multidate',\n      'multidateSeparator',\n      'orientation',\n      'startDate',\n      'startView',\n      'todayBtn',\n      'todayHighlight',\n      'weekStart',\n      'showOnFocus',\n      'disableTouchKeyboard',\n      'enableOnReadonly',\n      'modelFormat'\n    ],\n    DEFAULTS: {\n      FORMAT: 'mm/dd/yyyy',\n      CLOSE: true,\n      TODAY: true,\n      FORCEPARSE: false,\n      MODELFORMAT: 'YYYY-MM-DD'\n    }\n  });\n\n  availity.ui.controller('AvDatepickerController', function($element, $attrs, AV_DATEPICKER, $scope) {\n\n    var self = this;\n    this.options = {};\n\n    this.setValue = function() {\n\n      var viewValue = self.ngModel.$modelValue;\n      var plugin = this.plugin();\n\n      if(!viewValue || !plugin) {\n        return;\n      }\n\n      plugin.setDate(viewValue);\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.findModel = function() {\n\n      var ngModel = null;\n\n      var $input = $element.find('input:first').andSelf();\n      if($input.length) {\n        ngModel = $input.data(AV_DATEPICKER.CONTROLLER);\n        this.setNgModel(ngModel);\n      }\n\n      return ngModel;\n    };\n\n    this.modelToView = function() {\n      var viewValue = $.fn.datepicker.DPGlobal.formatDate(self.ngModel.$modelValue, self.options.format, 'en');\n      return viewValue;\n    };\n\n    this.wrapIsoDate = function() {\n      var date = self.ngModel.$modelValue;\n\n      if(date !== undefined && date !== null && !moment.isDate(date)) {\n        var m = moment(date);\n        self.ngModel.$modelValue = m.isValid() ? m.toDate() : null;\n      }\n\n      return self.ngModel.$modelValue;\n    };\n\n    this.viewToModel = function() {\n      var format = $.fn.datepicker.DPGlobal.parseFormat(self.options.format);\n      var utcDate = $.fn.datepicker.DPGlobal.parseDate(self.ngModel.$viewValue, format, 'en');\n\n      var plugin = self.plugin();\n\n      if(!plugin) {\n        return;\n      }\n\n      // jscs: disable\n      var localDate = plugin._utc_to_local(utcDate);\n      // jscs: enable\n\n      if(self.options.modelFormat && localDate) {\n        localDate = moment(localDate).format(self.options.modelFormat);\n      }\n\n      return localDate;\n    };\n\n    this.init = function() {\n\n      _.forEach($attrs, function(value, key) {\n        if(_.contains(AV_DATEPICKER.OPTIONS, key.replace('data-', ''))) {\n          self.options[key] = $scope.$eval(value);\n        }\n      });\n\n      // self.options = _.extend{}, optionsDefault, userOptions);\n\n      self.options.autoclose = self.options.autoclose ? self.options.autoclose : AV_DATEPICKER.DEFAULTS.CLOSE;\n      self.options.todayHighlight = self.options.todayHighlight ? self.options.todayHighlight : AV_DATEPICKER.DEFAULTS.TODAY;\n      self.options.format = self.options.format ? self.options.format : AV_DATEPICKER.DEFAULTS.FORMAT;\n      self.options.forceParse = self.options.forceParse ? self.options.forceParse : AV_DATEPICKER.DEFAULTS.FORCEPARSE;\n\n      if(self.options.modelFormat && self.options.modelFormat.toLowerCase() === 'default') {\n        self.options.modelFormat = AV_DATEPICKER.DEFAULTS.MODELFORMAT;\n      }\n    };\n\n    this.plugin = function() {\n      return $element.data('datepicker');\n    };\n\n    this.destroy = function() {\n      var plugin = this.plugin();\n      if(plugin) {\n        plugin.remove();\n        $element.data('datepicker', null);\n      }\n    };\n\n    this.hide = function() {\n      var plugin = this.plugin();\n      if(plugin) {\n        plugin.hide();\n      }\n    };\n  });\n\n  availity.ui.directive('avDatepicker', function($window, $log, AV_DATEPICKER) {\n    return {\n      restrict: 'A',\n      require: ['ngModel', 'avDatepicker'],\n      controller: 'AvDatepickerController',\n      link: function(scope, element, attrs, controllers) {\n\n        var ngModel = controllers[0];\n        var avDatepicker = controllers[1];\n\n        if(!ngModel) {\n          ngModel = avDatepicker.findModel();\n          if(!ngModel) {\n            $log.error('avDatepicker requires ngModel');\n            return;\n          }\n        }\n\n        avDatepicker.init();\n        avDatepicker.setNgModel(ngModel);\n\n        element.on('changeDate', function(e) {\n          $log.info('avDatepicker changeDate {0}', [e]);\n        });\n\n        // (view to model)\n        ngModel.$parsers.push(avDatepicker.viewToModel);\n\n        // (model to view) - added to end of formatters array\n        // because they are processed in reverse order.\n        // if the model is in Date format and send to the validation framework\n        // prior to getting converted to the expected $viewValue format,\n        // the validation will fail.\n        ngModel.$formatters.push(avDatepicker.modelToView);\n        ngModel.$formatters.push(avDatepicker.wrapIsoDate);\n\n        var _$render = ngModel.$render;\n        ngModel.$render = function() {\n          _$render();\n          avDatepicker.setValue();\n        };\n\n        var win = angular.element($window);\n\n        win.bind('scroll', function() {\n          avDatepicker.hide();\n        });\n\n        var target = element.siblings(AV_DATEPICKER.ADD_ON_SELECTOR);\n        if(target.length) {\n          target.on('click.datepicker', function() {\n            if(!element.prop('disabled')) { // Hack check for IE 8\n              element.focus();\n            }\n          });\n        }\n\n        scope.$on('destroy', function() {\n          avDatepicker.destroy();\n          if(target.length) {\n            target.off('click.datepicker');\n          }\n        });\n\n        scope.$evalAsync(function() {\n          element.datepicker(avDatepicker.options);\n        });\n      }\n    };\n  });\n})(window);\n\n// Source: \\lib\\ui\\idle\\idle-notifier.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_UI_IDLE', {\n    EVENTS: {\n      OK: 'mousedown.av.idle.notifier'\n    },\n    TEMPLATES: {\n      BASE: 'ui/idle/idle-tpl.html',\n      SESSION: 'ui/idle/idle-session-tpl.html',\n      WARNING: 'ui/idle/idle-warning-tpl.html'\n    }\n  });\n\n  availity.ui.provider('avIdleNotifier', function() {\n\n    var sessionTemplate;\n    var warningTemplate;\n    var $scope;\n\n    this.setSessionTemplate = function(template) {\n      sessionTemplate = template;\n    };\n\n    this.setWarningTemplate = function(template) {\n      warningTemplate = template;\n    };\n\n    this.$get = function(AV_IDLE, AV_UI_IDLE, $rootScope, AvModal, $document, $timeout) {\n\n      var AvIdleNotifier = function() {\n        this.listeners = [];\n        this.modal = null;\n      };\n\n      var proto = AvIdleNotifier.prototype;\n\n      proto.init = function() {\n\n        $scope = $rootScope.$new(true);\n        $scope.idle = {};\n\n        this.initListeners();\n      };\n\n      proto.initListeners = function() {\n\n        var self = this;\n        var listener = null;\n\n        // ACTIVE IDLING\n        listener = $rootScope.$on(AV_IDLE.EVENTS.IDLE_ACTIVE, function() {\n          self.showWarning();\n        });\n        this.listeners.push(listener);\n\n        // INACTIVE IDLING\n        listener = $rootScope.$on(AV_IDLE.EVENTS.IDLE_INACTIVE, function() {\n          self.hideWarning();\n        });\n        this.listeners.push(listener);\n\n        // SESSION TIMEOUT OUT\n        listener = $rootScope.$on(AV_IDLE.EVENTS.SESSION_TIMEOUT_ACTIVE, function() {\n          self.showSession();\n        });\n        this.listeners.push(listener);\n\n      };\n\n      proto.destroyListeners = function() {\n        // turn off each listener @see http://stackoverflow.com/a/14898795\n        _.each(this.listeners, function(listener) {\n          listener();\n        });\n      };\n\n      proto.showWarning = function() {\n\n        var self = this;\n\n        if(this.modal !== null) {\n          return;\n        }\n\n        $scope = $rootScope.$new(true);\n        $scope.idle = {};\n        $scope.idle.template = AV_UI_IDLE.TEMPLATES.WARNING;\n\n        this.modal = new AvModal({\n          show: true,\n          scope: $scope,\n          backdrop: 'static',\n          templateUrl: AV_UI_IDLE.TEMPLATES.BASE\n        });\n\n        $document.find('body').on(AV_UI_IDLE.EVENTS.OK, function() {\n          self.hideWarning();\n        });\n\n      };\n\n      proto.hideWarning = function() {\n        if(this.modal) {\n          this.disableBackDrop();\n          this.modal.hide();\n        }\n\n        this.modal = null;\n      };\n\n      proto.disableBackDrop = function() {\n        $document.find('body').off(AV_UI_IDLE.EVENTS.OK);\n      };\n\n      proto.showSession = function() {\n        var self = this;\n        this.disableBackDrop();\n\n        $timeout(function() {\n          $scope.idle.template = AV_UI_IDLE.TEMPLATES.SESSION;\n          $scope.idle.onSessionTimeout = _.bind(self.onSessionTimeout, self);\n        }, 0, true);\n\n      };\n\n      proto.onSessionTimeout = function() {\n        $rootScope.$broadcast(AV_IDLE.EVENTS.SESSION_TIMEOUT_REDIRECT);\n      };\n\n      return new AvIdleNotifier();\n\n    };\n\n  });\n\n  availity.ui.run(function(avIdleNotifier) {\n    avIdleNotifier.init();\n  });\n\n})(window);\n\n// Source: \\lib\\ui\\mask\\mask.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_MASK', {\n    NAME: 'inputmask',\n    DEFAULTS: {\n      date: '99/99/9999',\n      phone: '(999) 999-9999',\n      SSN:'999-99-9999'\n    }\n  });\n\n  availity.ui.directive('avMask', function($window, $log, AV_MASK) {\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function(scope, element, attrs) {\n\n        var maskType = AV_MASK.DEFAULTS[attrs['avMask']];\n        if(!maskType) {\n          maskType = attrs['avMask'];\n        }\n\n        scope.$evalAsync(function() {\n          element.inputmask(maskType);\n        });\n\n        scope.$on('$destroy', function () {\n          element.inputmask('remove');\n        });\n      }\n    };\n  });\n\n})(window);\n\n// Source: \\lib\\ui\\permissions\\has-permission.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('AvHasPermissionController', function($element) {\n\n    this.onSuccess = function(isAuthorized) {\n      if(isAuthorized) {\n        $element.removeClass('ng-hide');\n        $element.show();\n      } else {\n        $element.remove();\n      }\n    };\n\n    this.onError = function() {\n      $element.remove();\n    };\n\n  });\n\n  availity.ui.directive('avHasPermission', function(avUserAuthorizations) {\n    return {\n      restrict: 'EA',\n      controller: 'AvHasPermissionController',\n      require: ['avHasPermission'],\n      link: function($scope, $element, $attr, controllers) {\n\n        var avHasPermission = controllers[0];\n\n        $element.hide();\n\n        $scope.$watch($attr.avHasPermission, function(permissions) {\n\n          if(!angular.isArray(permissions)) {\n            permissions = _.words('' + permissions);\n          }\n\n          avUserAuthorizations.isAnyAuthorized(permissions).then(avHasPermission.onSuccess, avHasPermission.onError);\n        });\n      }\n    };\n  });\n\n})(window);\n\n// Source: \\lib\\ui\\analytics\\analytics.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n\n  availity.core.controller('AvAnalyticsController', function(avAnalyticsUtils, $element, $attrs, avAnalytics) {\n\n    this.onEvent = function(event) {\n\n      // If an external link is detected\n      if(avAnalyticsUtils.isExternalLink($attrs)) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      // convert the directive attributes into object with properties with sane defaults\n      var properties = _.extend({\n        level: 'info'\n      }, avAnalyticsUtils.getProperties($attrs), {\n        event: event.type\n      });\n\n      var promise = avAnalytics.trackEvent(properties);\n      promise['finally'](function() {\n        if(avAnalyticsUtils.isExternalLink($attrs)) {\n          document.location = $element.attr('href');\n        }\n      });\n    };\n\n  });\n\n  availity.core.directive('avAnalyticsOn', function() {\n\n    return {\n      restrict: 'A',\n      controller: 'AvAnalyticsController',\n      required: 'avAnalyticsOn',\n      link: function($scope, $element, $attrs, avAnalyticsOn) {\n\n        var eventType = $attrs.avAnalyticsOn || 'click';\n\n        // bind the element to the `av-analytic-on` event like `click`\n        $element.on(eventType, function (event) {\n          avAnalyticsOn.onEvent(event);\n        });\n      }\n    };\n  });\n\n})(window);\n\n// Source: \\lib\\ui\\placeholder\\placeholder.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.requires.push('ng.shims.placeholder');\n\n  availity.ui.config(function($provide) {\n\n    $provide.decorator('placeholderDirective', ['$delegate', '$log', function($delegate, $log) {\n\n      var directive = $delegate[0];\n      var originalLink = directive.link;\n\n      var newLink = function(scope, element, attrs) {\n\n        if(originalLink && _.contains(_.keys(attrs), 'avMask')) {\n          $log.info('placeholder shim not running on an element due to avMask on same element');\n          return;\n        }else if(originalLink) {\n          originalLink.apply(this, arguments);\n        }\n        //else originalLink doesn't exist\n      };\n\n      directive.compile = function() {\n        return newLink;\n      };\n\n      return $delegate;\n    }]);\n\n  });\n})(window);\n\n// Source: \\lib\\ui\\breadcrumbs\\breadcrumbs.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BREADCRUMBS', {\n\n    TEMPLATE: 'ui/breadcrumbs/breadcrumbs-tpl.html'\n  });\n\n  function AvBreadcrumbsController($state) {\n\n    this.getBreadcrumb = function(breadcrumbs, state) {\n      if(!state || !state.data) {\n        return;\n      }\n\n      var breadcrumb = state.data.breadcrumb;\n      if(!breadcrumb) {\n        return;\n      }\n\n      if(breadcrumb.parent) {\n        var parentState = $state.get(breadcrumb.parent);\n\n        if(parentState) {\n          this.getBreadcrumb(breadcrumbs, parentState);\n        }\n      }\n      breadcrumb.state = state.name;\n      breadcrumbs.push(breadcrumb);\n    };\n\n    this.getBreadcrumbs = function() {\n      var breadcrumbs = [];\n      this.getBreadcrumb(breadcrumbs, $state.current);\n      return breadcrumbs;\n    };\n\n  }\n\n  AvBreadcrumbsController.$inject = ['$state'];\n  availity.ui.controller('AvBreadcrumbsController', AvBreadcrumbsController);\n\n  function avBreadcrumbs(AV_BREADCRUMBS) {\n    return {\n      restrict: 'EA',\n      replace: true,\n      templateUrl: AV_BREADCRUMBS.TEMPLATE,\n      controller: 'AvBreadcrumbsController',\n      link: function(scope, element, attrs, avBreadcrumbs) {\n        scope.breadcrumbs = avBreadcrumbs.getBreadcrumbs();\n\n        scope.$on('$stateChangeSuccess', function() {\n          scope.breadcrumbs = avBreadcrumbs.getBreadcrumbs();\n        });\n      }\n    };\n  }\n\n  avBreadcrumbs.$inject = ['AV_BREADCRUMBS'];\n  availity.ui.directive('avBreadcrumbs', avBreadcrumbs);\n\n})(window);\n\n// Source: \\lib\\ui\\filters\\approximate.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.filter('avApproximate', function() {\n    var pow = Math.pow;\n    var floor = Math.floor;\n    var abs = Math.abs;\n    var log = Math.log;\n\n    function round(number, precision) {\n      var prec = pow(10, precision);\n      return Math.round(number * prec) / prec;\n    }\n\n    return function (number, precision) {\n      precision = precision || 0;\n      var base = floor(log(abs(number)) / log(1000));\n      var unit = 'kMGTPE'[base - 1];\n      return unit ? round(number / pow(1000, base), precision) + unit : (number || 0);\n    };\n  });\n\n})(window);\n\n// Source: \\lib\\ui\\badge\\badge.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BADGE', {\n    COLOR: null,\n    DEFAULT_CLASS: 'badge',\n    SHOW_WHEN_ZERO: false,\n    TEMPLATE: 'ui/badge/badge-tpl.html'\n  });\n\n  function badgeDirective(AV_BADGE) {\n\n    return {\n      scope: {\n        color: '@',\n        count: '=avBadge',\n        showWhenZero: '@'\n      },\n      templateUrl: AV_BADGE.TEMPLATE,\n      link: function(scope, element) {\n        scope.color = scope.color || AV_BADGE.COLOR;\n        scope.showWhenZero = scope.showWhenZero || AV_BADGE.SHOW_WHEN_ZERO;\n\n        var classes = [];\n        classes.push(AV_BADGE.DEFAULT_CLASS);\n        if(scope.color) {\n          classes.push(scope.color);\n        }\n\n        element.addClass(classes.join(' '));\n      }\n    };\n  }\n\n  badgeDirective.$inject = ['AV_BADGE'];\n  availity.ui.directive('avBadge', badgeDirective);\n\n})(window);\n\n// Source: \\lib\\ui\\labels\\removable-label.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_REMOVABLE_LABEL', {\n    TEMPLATE: 'ui/labels/removable-label-tpl.html'\n  });\n\n  availity.ui.directive('avRemovableLabel', function(AV_REMOVABLE_LABEL) {\n    return {\n      templateUrl: AV_REMOVABLE_LABEL.TEMPLATE,\n      transclude: true,\n      scope: {\n        removeValue: '=',\n        onRemove: '&'\n      },\n      link: function(scope, element, attrs) {\n        element.addClass('label-remove');\n        scope.removeLabel = function() {\n          if(!attrs.disabled) {\n            scope.onRemove()(scope.removeValue);\n          }\n        };\n      }\n    };\n  });\n\n})(window);\n\n// Source: \\lib\\ui\\animation\\loader.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_LOADER', {\n\n    TEMPLATES: {\n      LOADER: 'ui/animation/loader-tpl.html'\n    }\n\n  });\n\n  availity.ui.controller('AvLoaderController', function($element) {\n\n    var self = this;\n    var active;\n\n    this.start = function() {\n      active = true;\n      this.animate();\n    };\n\n    this.animate = function() {\n\n      $element\n        .find('.loading-bullet')\n        .velocity('transition.slideRightIn', { stagger: 250 })\n        .velocity({ opacity: 0 }, {\n          delay: 750,\n          duration: 500,\n          complete: function() {\n            if(active) {\n              setTimeout(function() {self.animate();}, 500);\n            } else {\n              self.endAnimation();\n            }\n          }\n        });\n\n    };\n\n    this.endAnimation = function() {\n      $element.find('.loading-bullet').velocity('stop', true);\n      $element.removeData();\n    };\n\n    this.stop = function() {\n      active = false;\n    };\n\n  });\n\n  availity.ui.directive('avLoader', function(AV_LOADER) {\n    return {\n      restrict: 'A',\n      replace: true,\n      controller: 'AvLoaderController',\n      require: 'avLoader',\n      templateUrl: AV_LOADER.TEMPLATES.LOADER,\n      link: function(scope, element, attr, avLoader) {\n\n        if(!attr.delay) {\n          avLoader.start();\n        }\n\n        scope.$on('$destroy', function() {\n          avLoader.stop();\n        });\n\n      }\n    };\n  });\n\n})(window);\n\n// Source: \\lib\\ui\\block\\block.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BLOCK', {\n    TEMPLATES: {\n      BLOCK: 'ui/block/block-tpl.html'\n    }\n  });\n\n  var getLoaderController = function(blockId) {\n    var el = $('[data-block-ui=\"' + blockId + '\"]') || $('[block-ui=\"' + blockId + '\"]');\n    if(el) {\n      return el.find('[data-av-loader]').controller('avLoader');\n    }\n  };\n\n  var triggerLoaderController = function(id, instance, fn) {\n\n    var controller = instance.loaderController;\n    if(!controller) {\n      controller = getLoaderController(id);\n      instance.loaderController = controller;\n    }\n    if(controller && _.isFunction(controller[fn])) {\n      controller[fn]();\n    }\n\n  };\n\n  var triggerInstance = function(id, instance, origFn, loaderFn) {\n    triggerLoaderController(id, instance, loaderFn);\n    origFn.apply(instance);\n  };\n\n  var modifyBlockInstances = function(id, instance) {\n\n    var origStartFn = instance.start;\n    var origStopFn = instance.stop;\n\n    instance.start = function() {\n      triggerInstance(id, instance, origStartFn, 'start');\n    };\n\n    instance.stop = function() {\n      triggerInstance(id, instance, origStopFn, 'stop');\n    };\n\n    instance.startLoader = function() {\n      triggerLoaderController(id, instance, 'start');\n    };\n\n    instance.avModifications = true;\n  };\n\n  availity.ui.run(function($injector, $log, AV_BLOCK) {\n\n    try {\n\n      var blockUIConfig = $injector.get('blockUIConfig');\n      var blockUI = $injector.get('blockUI');\n      blockUIConfig.autoBlock = false;\n      blockUIConfig.delay = 0;\n      blockUIConfig.templateUrl = AV_BLOCK.TEMPLATES.BLOCK;\n\n      var origGetFn = blockUI.instances.get;\n      blockUI.instances.get = function(id) {\n        var instance = origGetFn(id);\n        if(!instance.avModifications) {\n          modifyBlockInstances(id, instance);\n        }\n        return instance;\n      };\n\n    } catch(e) {\n      $log.warn('blockUI is required to use av block.');\n    }\n  });\n\n})(window);\n\n// Source: \\lib\\ui\\block\\block-directive.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // Helper directive that hooks into block-ui's start-up lifecycle and starts the loader\n  availity.ui.directive('avBlockUi', function(blockUI) {\n\n    return {\n      restrict: 'A',\n      link: function($scope, $element, $attrs) {\n\n        var blockId = $attrs.avBlockUi;\n        var blockCount = $attrs.blockCount;\n        var instance = blockUI.instances.get(blockId);\n        if(blockCount > 0) {\n          instance.startLoader();\n        }\n      }\n    };\n\n  });\n\n})(window);\n\n// Source: \\lib\\ui\\tabs\\tabs.js\n/*\n* Inspired by https://github.com/angular-ui/bootstrap/blob/master/src/tabs/tabs.js\n*/\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_TABS', {\n    TEMPLATES: {\n      TABS: 'ui/tabs/tabs-tpl.html',\n      TAB: 'ui/tabs/tab-tpl.html'\n    }\n  });\n\n  function TabsController($scope) {\n\n    var self = this;\n\n    $scope.tabs = [];\n    self.tabs = $scope.tabs;\n\n    this.addTab = function(tab) {\n      self.tabs.push(tab);\n\n      if(self.tabs.length === 1) {\n        tab.active = true;\n      } else if(tab.active) {\n        self.selectTab(tab);\n      } else {\n        tab.active = false;\n      }\n    };\n\n    this.removeTab = function(tab) {\n      var index = self.tabs.indexOf(tab);\n\n      if(tab.active && self.tabs.length > 1) {\n        //If this is the last tab, select the previous tab. else, the next tab.\n        var newActiveIndex = index === self.tabs.length - 1 ? index - 1 : index + 1;\n        self.selectTab(self.tabs[newActiveIndex]);\n      }\n\n      self.tabs.splice(index, 1);\n    };\n\n    this.selectTab = function(selectedTab) {\n      angular.forEach(self.tabs, function (tab) {\n        if(tab.active && tab !== selectedTab) {\n          tab.active = false;\n          tab.onDeselect();\n        }\n      });\n\n      selectedTab.active = true;\n      selectedTab.onSelect();\n    };\n  }\n\n  TabsController.$inject = ['$scope'];\n  availity.ui.controller('AvTabsController', TabsController);\n\n  function TabsDirective(AV_TABS) {\n    return {\n      restrict: 'AE',\n      templateUrl: AV_TABS.TEMPLATES.TABS,\n      transclude: true,\n      replace: true,\n      controller: 'AvTabsController',\n      scope: true,\n      link: function(scope, element, attrs) {\n        scope.justified = !!attrs.justified;\n        scope.tabType = attrs.tabType;\n        scope.vertical = !!attrs.vertical;\n\n        if(angular.isUndefined(attrs.padContent)) {\n          scope.padContent = true;\n        }\n      }\n    };\n  }\n\n  TabsDirective.$inject = ['AV_TABS'];\n  availity.ui.directive('avTabs', TabsDirective);\n\n  function TabDirective(AV_TABS) {\n    return {\n      restrict: 'AE',\n      templateUrl: AV_TABS.TEMPLATES.TAB,\n      replace: true,\n      require: '^avTabs',\n      transclude: true,\n      scope: {\n        heading: '@',\n        template: '=',\n        templateUrl: '=',\n        onSelect: '&select',\n        onDeselect: '&deselect'\n      },\n      controller: function() {\n        // Allow avTabs to be required by other directives\n      },\n      link: function(scope, element, attrs, tabsController, transclude) {\n        scope.transcludeFn = transclude;\n\n        tabsController.addTab(scope);\n\n        scope.$on('destroy', function() {\n          tabsController.removeTab(scope);\n        });\n\n        scope.select = function() {\n          if(!scope.disabled) {\n            tabsController.selectTab(scope);\n          }\n        };\n\n        scope.$watch('active', function(active) {\n          if(active) {\n            tabsController.selectTab(scope);\n          }\n        });\n\n        if(angular.isDefined(attrs.active)) {\n          scope.active = attrs.active;\n\n          scope.$parent.$watch(attrs.active, function(active) {\n            if(active) {\n              tabsController.selectTab(scope);\n            }\n          });\n        }\n\n        if(angular.isDefined(attrs.disable)) {\n          scope.$parent.$watch(attrs.disable, function(disabled) {\n            scope.disabled = !!disabled;\n          });\n        }\n      }\n    };\n  }\n\n  TabDirective.$inject = ['AV_TABS'];\n  availity.ui.directive('avTab', TabDirective);\n\n  function TabPaneDirective(avTemplateCache, $compile) {\n    return {\n      restrict: 'AE',\n      require: '^avTabs',\n      link: function(scope, element, attrs) {\n\n        var tab = scope.$eval(attrs.avTabPane);\n\n        if(angular.isDefined(tab.template) || angular.isDefined(tab.templateUrl)) {\n          avTemplateCache.get(tab)\n          .then(function(template) {\n            element.append($compile(template)(scope));\n          });\n        } else {\n          tab.transcludeFn(tab.$parent, function(contents) {\n            angular.forEach(contents, function(node) {\n              element.append(node);\n            });\n          });\n        }\n      }\n    };\n  }\n\n  TabPaneDirective.$inject = ['avTemplateCache', '$compile'];\n  availity.ui.directive('avTabPane', TabPaneDirective);\n\n})(window);\n\n//# sourceMappingURL=maps/availity-angular-ui.js.map","/*global module*/\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity || {};\n\n  availity.MODULE_UI = 'availity.ui';\n  availity.ui = angular.module(availity.MODULE_UI, ['ng', 'ngSanitize']);\n\n  availity.ui.constant('AV_UI', {\n    // jscs: disable\n    NG_OPTIONS: /^\\s*([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?(?:\\s+group\\s+by\\s+([\\s\\S]+?))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+([\\s\\S]+?)(?:\\s+track\\s+by\\s+([\\s\\S]+?))?$/\n    // jscs: enable\n  });\n\n  if(typeof module !== 'undefined' && module.exports) {\n    module.exports = availity;\n  }\n\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.factory('avTemplateCache', function($q, $templateCache, $http) {\n\n    return {\n\n      get: function(options) {\n\n        var valid = !options.template || !options.templateUrl;\n\n        if(!valid) {\n          throw new Error('Either options.template or options.templateUrl must be defined for avTemplateCache');\n        }\n\n        return options.template ? $q.when(options.template) :\n          $http.get(options.templateUrl, {cache: $templateCache})\n            .then(function(result) {\n              return result.data;\n            });\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_MODAL', {\n\n    OPTIONS: {\n      scope: null,\n      templateUrl: null,\n      template: null,\n      id: null,\n      container: null,\n\n      // Bootstrap defaults\n      keyboard: true,\n      backdrop: true,\n      show: false,\n      remote: false\n    },\n\n    EVENTS: {\n      SHOW: 'show.av.modal',\n      SHOWN: 'shown.av.modal',\n      HIDE: 'hide.av.modal',\n      HIDDEN: 'hidden.av.modal'\n    },\n\n    BS_EVENTS:  {\n      SHOW: 'show.bs.modal',\n      SHOWN: 'shown.bs.modal',\n      HIDE: 'hide.bs.modal',\n      HIDDEN: 'hidden.bs.modal'\n    },\n\n    TEMPLATES: {\n      MODAL: 'ui/modal/modal-tpl.html'\n    }\n  });\n\n  availity.ui.factory('avModalManager', function() {\n\n    var AvModalManager = function() {\n      this.instances = [];\n    };\n\n    var proto = AvModalManager.prototype;\n\n\n    proto.add = function(id) {\n      this.instances.push(id);\n    };\n\n    proto.remove = function(id) {\n      this.instances = _.without(this.instances, id);\n    };\n\n    proto.closeAll = function() {\n\n      _.forEach(this.instances, function(id) {\n\n        var $el = $('#' + id);\n\n        if(!$el) {\n          return;\n        }\n\n        var bsModal = $el.data('bs.modal');\n        if(bsModal) {\n          bsModal.removeBackdrop();\n          bsModal.$body.removeClass('modal-open');\n          bsModal.resetAdjustments();\n          bsModal.resetScrollbar();\n        }\n\n        var avModal = $el.data('AvModal');\n        if(avModal) {\n          avModal.destroy();\n        }\n\n      });\n    };\n\n\n    return new AvModalManager();\n\n  });\n\n  var ModalFactory = function($rootScope, $timeout, $compile, AV_MODAL, avTemplateCache, $q, avModalManager) {\n\n    var Modal = function(options) {\n\n      var self = this;\n\n      this.templateDefer = $q.defer();\n      this.templatePromise = this.templateDefer.promise;\n\n      this.options = angular.extend({}, AV_MODAL.OPTIONS, {scope: $rootScope.$new()}, options);\n\n      avTemplateCache.get(options).then(function(template) {\n        self.options.template = template;\n        self._build();\n      });\n\n    };\n\n    Modal.create = function(options) {\n      return new Modal(options);\n    };\n\n    var proto = Modal.prototype;\n\n    proto._build = function() {\n\n      var self = this;\n\n      var scope = this.options.scope;\n      this.$element = angular.element(this.options.template);\n\n      this._createId();\n\n      this._scope();\n\n\n      $compile(this.$element)(scope);\n\n      $timeout(function() {\n        self._init();\n      }, 0, true);\n\n      // Append to container or <body>\n      this.options.container ? this.$element.appendTo(this.options.container) : this.$element.appendTo('body');\n\n    };\n\n    proto._init = function() {\n\n      this.$element.data('AvModal', this);\n\n      this.templateDefer.resolve(true);\n\n      // Initialize Bootstrap jQuery plugin\n      this.$element.modal({\n        'backdrop': this.options.backdrop,\n        'keyboard': this.options.keyboard,\n        'show': this.options.show,\n        'remote': this.options.remote\n      });\n\n      this._listeners();\n    };\n\n    proto._scope = function() {\n\n      var self = this;\n      var scope = this.options.scope;\n\n      scope.modalShow = function() {\n        self.show();\n      };\n\n      scope.modalToggle = function() {\n        self.toggle();\n      };\n\n      scope.modalHide = function() {\n        self.hide();\n      };\n\n    };\n\n    proto._listeners = function() {\n\n      var self = this;\n      var scope = this.options.scope;\n      var $element = this.$element;\n\n      this.animationDefer = $q.defer();\n      this.animationPromise = this.animationDefer.promise;\n\n      $element.on(AV_MODAL.BS_EVENTS.SHOW, function(event) {\n        scope.$emit(AV_MODAL.EVENTS.SHOW, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.SHOWN, function(event) {\n\n        if(angular.isFunction(self.options.onShown)) {\n          self.options.onShown();\n        }\n\n        self.animationDefer.resolve(true);\n\n        scope.$emit(AV_MODAL.EVENTS.SHOWN, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.HIDE, function(event) {\n        scope.$emit(AV_MODAL.EVENTS.HIDE, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.HIDDEN, function(event) {\n\n        if(angular.isFunction(self.options.onHidden)) {\n          self.options.onHidden.call(this);\n        }\n\n        scope.$emit(AV_MODAL.EVENTS.HIDDEN, event, self);\n\n        scope.$evalAsync(function() {\n          self.destroy();\n        });\n\n      });\n\n      // Garbage collection\n      scope.$on('$destroy', function() {\n        avModalManager.remove(self._id);\n        self.destroy();\n      });\n\n    };\n\n    proto.show = function() {\n\n      var self = this;\n\n      this.animationDefer = $q.defer();\n      this.animationPromise = this.animationDefer.promise;\n\n      return this.templatePromise.then(function() {\n        self.$element.modal('show');\n      }).then(function() {\n        return self.animationPromise;\n      });\n\n    };\n\n    proto.hide = function() {\n\n      var self = this;\n\n      var deferred = $q.defer();\n\n      this.templatePromise.then(function() {\n\n        self.$element.one('hidden.bs.modal', function() {\n          deferred.resolve(true);\n        });\n\n        self.$element.modal('hide');\n\n      });\n\n      return deferred.promise;\n    };\n\n    proto.toggle = function() {\n\n      var self = this;\n\n      var deferred = $q.defer();\n\n      this.templatePromise.then(function() {\n\n        self.$element.one('hidden.bs.modal', function() {\n          deferred.resolve(true);\n        });\n\n        self.$element.data('modal').toggle();\n\n      });\n\n      return deferred.promise;\n\n    };\n\n    proto.destroy = function() {\n\n      var self = this;\n\n      return this.templatePromise.then(function() {\n        self.$element.data('AvModal', null);\n        self.$element.remove();\n      });\n\n    };\n\n    proto._createId = function() {\n      // Create a unique id for the modal if not present or passed in via options\n      var id = this.$element.attr('id');\n      if(!id) {\n        // Get id from options or create a unique id\n        id = this.options.id ? this.options.id : availity.uuid('av-modal-id');\n        this.$element.attr('id', id);\n      }\n\n      this._id = id;\n\n      avModalManager.add(id);\n    };\n\n    return Modal;\n  };\n\n\n  availity.ui.factory('AvModal', ModalFactory);\n\n  availity.ui.directive('avModal', function(AV_MODAL) {\n    return {\n      restrict: 'A',\n      replace: true,\n      transclude: true,\n      scope: {\n        size: '@'\n      },\n      templateUrl: AV_MODAL.TEMPLATES.MODAL\n    };\n  });\n\n})(window);\n","/**\n * 1. All fields should be pristine on first load\n * 2. If field is modified an invalid the field should be marked with an error\n *\n */\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('avValFormController', function() {\n\n    this.ngForm  = null;\n    this.rulesKey = null;\n    this.avValOn = null;\n    this.avValDebounce = null;\n    this.avValInvalid = false;\n\n    // Object that stores the unique id (key) and violation count (value) of all the form fields\n    //\n    // EX:\n    //\n    // {\n    //  avVal001: 0\n    //  avVal002: 2\n    //  avVal003: 1\n    // }\n    this.violations = {};\n\n    this.init = function(form) {\n      this.ngForm = form;\n    };\n\n    /**\n     * Records id of the form field and number of violations\n     * @param  {[type]} id    [description]\n     * @param  {[type]} count [description]\n     * @return {[type]}       [description]\n     */\n    this.record = function(id, count) {\n      this.violations[id] = count;\n\n      var violocationCount = _.reduce(this.violations, function(sum, num) {\n        return sum + num;\n      }, 0);\n\n      this.ngForm.$setValidity('av', violocationCount === 0);\n    };\n\n    this.unrecord = function(id) {\n      if(id && this.violations[id]) {\n        delete this.violations[id];\n      }\n    };\n\n    this.reset = function() {\n      this.ngForm.$setPristine();\n      this.ngForm.$submitted = false;\n    };\n\n    this.$setSubmitted = function() {\n      this.ngForm.$submitted = true;\n    };\n\n    this.setRulesKey = function(key) {\n      this.rulesKey = key;\n    };\n\n  });\n\n  // form.$error = {};\n  // form.$$success = {};\n  // form.$pending = undefined;\n  // form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);\n  // form.$dirty = false;\n  // form.$pristine = true;\n  // form.$valid = true;\n  // form.$invalid = false;\n  // form.$submitted = false;\n\n  availity.ui.directive('avValForm', function($log, $timeout, $parse, AV_VAL, avValAdapter, $rootScope) {\n    return {\n      restrict: 'A',\n      priority: 10,\n      require: ['form', 'avValForm', '?ngSubmit'],\n      controller: 'avValFormController',\n      compile: function() {\n        return {\n          pre: function(scope, iEl, iAttrs, controllers) {\n\n            var ruleFn = $parse(iAttrs.avValForm);\n            var rulesKey = ruleFn(scope);\n            rulesKey = rulesKey || iAttrs.avValForm; // interpolated rule from scope || fixed string\n\n            if(!rulesKey) {\n              $log.error('avValForm requires a rules key in order to run the proper validation rules.');\n              return;\n            }\n\n            scope.$watch(ruleFn, function(_rulesKey, _oldRulesKey) {\n              if(_rulesKey) {\n                avForm.setRulesKey(_rulesKey);\n\n                if(_rulesKey !== _oldRulesKey) {\n                  $timeout(function() {\n                    $log.info('avValForm revalidate');\n                    $rootScope.$broadcast(AV_VAL.EVENTS.REVALIDATE);\n                  });\n                }\n\n              }\n\n            });\n\n            var ngForm = controllers[0];\n            var avForm = controllers[1];\n\n            // Allow form attributes to define the validation behavior of the form fields\n            // inside it.  If `av-val-on` or `av-val-debounce` are on the form then all form\n            // fields inside the form would inherit this behavior.\n            avForm.avValOn = iAttrs.avValOn || null;\n            avForm.avValDebounce = iAttrs.avValDebounce || null;\n            // Allows fields to update with invalid data for dirty form saving\n            avForm.avValInvalid = iAttrs.avValInvalid || false;\n\n            avForm.init(ngForm);\n            avForm.setRulesKey(rulesKey);\n\n          },\n          post: function(scope, iEl, iAttrs, controllers) {\n\n            iEl.attr('novalidate', 'novalidate');  // prevent HTML5 validation from kicking in\n\n            // Disable ng-submit or ng-click handlers and store the function to call for submitting\n            var fn;\n            if(iAttrs.ngSubmit) {\n              // Disable ng-submit event\n              iEl.off('submit');\n              fn = $parse(iAttrs.ngSubmit, /* expensiveChecks */ true);\n            }else if(iAttrs.ngClick) {\n              // Disable ng-click event\n              iEl.off('click');\n              fn = $parse(iAttrs.ngClick, /* expensiveChecks */ true);\n            }\n\n            var ngForm = controllers[0];\n            var avForm = controllers[1];\n\n            scope.$on(AV_VAL.EVENTS.RESET, function () {\n              avForm.reset();\n            });\n\n            iEl.bind('submit', function(event) {\n\n              scope.$broadcast(AV_VAL.EVENTS.SUBMITTED);\n              avForm.$setSubmitted();\n\n              if(ngForm.$invalid) {\n\n                scope.$broadcast(AV_VAL.EVENTS.FAILED);\n\n                $log.info('avValForm invalid.  preventing default submit action');\n\n                event.preventDefault();\n                event.stopImmediatePropagation();\n                scope.$broadcast(event);\n\n                avValAdapter.scroll(iEl);\n                return;\n              }\n\n              ngForm.$setPristine();\n\n              if(!fn) {\n                return;\n              }\n\n              var callback = function() {\n                fn(scope, {$event:event});\n              };\n\n              scope.$apply(callback);\n\n            });\n\n          }\n        };\n      }\n    };\n  });\n\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('AvValFieldController', function($element, avValAdapter, $attrs, avVal, $log, $timeout, $scope, $sniffer) {\n\n    this.ngModel = null;\n    this.rule = null;\n    this.avValForm = null;\n    this.avValInvalid = false;\n\n    var self = this;\n\n    var placeholder = $element[0].placeholder;\n    var noEvent = {};\n\n    this.createId = function() {\n      this.ngModel.avId = availity.uuid('avVal');\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.setRule = function(rule) {\n      this.rule = rule;\n    };\n\n    this.avValForm = function(avValForm) {\n      this.avValForm = avValForm;\n    };\n\n    this.updateModel = function(results) {\n\n      var self = this;\n      var validationKeys = [];\n\n      this.ngModel.avResults = results;\n\n      // set state for each violation\n      angular.forEach(results.violations, function (result) {\n        var key = 'av-' + result.contraintName;\n        validationKeys.push(key);\n        self.ngModel.$setValidity(key, result.valid);\n      });\n\n      // set overall state for validation state\n      this.ngModel.$setValidity('av', this.ngModel.avResults.isValid);\n\n      // store violations\n      this.ngModel.avViolations = this.ngModel.avResults.violations;\n\n      // record the id and violation count in the av-form controller.  this determines if the form is\n      // valid if sum of violations for all form inputs === zero\n      this.avValForm.record(this.ngModel.avId, this.ngModel.avResults.violations.length);\n\n      // remove violation keys that are no longer falsy\n      angular.forEach(this.ngModel.$error, function(value, key) {\n\n        if(_.indexOf(validationKeys, key) === -1 && key.lastIndexOf('av-', 0) === 0) {\n          self.ngModel.$setValidity(key, true);\n        }\n      });\n    };\n\n    this.updateView = function() {\n      if(this.ngModel.$dirty) {\n        avValAdapter.element($element, this.ngModel, this.ngModel.avResults.isValid);\n        avValAdapter.message($element, this.ngModel);\n      }\n    };\n\n    this.validate = function(value) {\n\n      $log.info('validating value [' + value + ']');\n\n      var rulesKey = self.avValForm.rulesKey;\n      var results = avVal.validate(rulesKey, $element, value, self.rule);\n\n      // validate function is called within the context of angular so fn.call and set the context\n      // to \"this\"\n      self.updateModel.call(self, results);\n      self.updateView.call(self);\n\n      return results;\n    };\n\n    this.validateModel = function(value) {\n\n      self.validate(value, true);\n      return value;\n\n    };\n\n    this.validateView = function(value) {\n\n      var results = self.validate(value);\n\n      if(self.avValForm.avValInvalid || self.avValInvalid) {\n        // allows invalid data from view to update model for dirty saving\n        return value;\n      }\n\n      // prevent invalid data from view to update model\n      return results.isValid ? value : undefined;\n\n    };\n\n    this.onDebounce = function() {\n\n      var value = $element.val().trim();\n\n      if(this.isCheckbox()) {\n        this.ngModel.$setViewValue($element[0].checked);\n      } else if(this.isRadio()) {\n        this.ngModel.$setViewValue($attrs.value);\n      }else {\n        this.ngModel.$setViewValue(value);\n      }\n\n    };\n\n    this.isRadio = function() {\n      return $element.is('input') && $attrs.type === 'radio';\n    };\n\n    this.isCheckbox = function() {\n      return $element.is('input') && $attrs.type === 'checkbox';\n    };\n\n    this.reset = function() {\n\n      var violations = this.ngModel.avResults.violations;\n      violations.splice(0, violations.length);\n\n      avValAdapter.message($element, this.ngModel);\n      avValAdapter.reset($element);\n\n    };\n\n    this.event = function(event, avValDebounce) {\n\n      var self = this;\n\n      $element.unbind('input');\n\n      var debounce;\n\n      $element.on(event, function() {\n\n        // https://github.com/angular/angular.js/blob/v1.2.27/src/ng/directive/input.js#L508\n        if($sniffer.msie <= 11 && (event || noEvent).type === 'input' && $element[0].placeholder !== placeholder) {\n          placeholder = $element[0].placeholder;\n          return;\n        }\n\n        $timeout.cancel(debounce);\n        debounce = $timeout(function() {\n          $scope.$apply(function() {\n            self.onDebounce();\n          });\n        }, avValDebounce);\n\n      });\n\n    };\n\n  });\n\n  // Events:\n  //\n  //  click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown\n  //  keyup keypress submit focus blur copy cut paste\n  availity.ui.directive('avValField', function($log, $timeout, avVal, avValAdapter, AV_VAL) {\n    return {\n      restrict: 'A',\n      controller: 'AvValFieldController',\n      require: ['^avValForm', 'ngModel', 'avValField'],\n      scope: {\n        avValDebounce: '@?',\n        avValOn: '@?'\n      },\n      link: function(scope, element, attrs, controllers) {\n\n        var rule = attrs.avValField;\n        var avValForm = controllers[0];\n        var ngModel = controllers[1];\n        var avValField = controllers[2];\n\n        var avValOn = scope.avValOn || avValForm.avValOn || 'input';\n\n        if(!ngModel && !rule) {\n          $log.error('avValField requires ngModel and a validation rule to run.');\n          return;\n        }\n\n        // Allows fields to update with invalid data for dirty form saving\n        avValField.avValInvalid = attrs.avValInvalid || false;\n\n        // CACHE THE MODEL\n        avValField.setNgModel(ngModel);\n\n        avValField.avValForm(avValForm);\n\n        avValField.setRule(rule);\n\n        avValField.createId();\n\n        // DEBOUNCE\n        var avValDebounce = parseInt(scope.avValDebounce || (avValForm.avValDebounce || AV_VAL.DEBOUNCE), 10);\n        avValDebounce = _.isNumber(avValDebounce) ? avValDebounce : AV_VAL.DEBOUNCE;\n\n        var debounceAllowed = !avValField.isRadio() && !avValField.isCheckbox() && avValOn !== 'blur';\n\n        if(!debounceAllowed) {\n          avValDebounce = 0;\n        }\n\n        // EVENT LISTENER\n        avValField.event(avValOn, avValDebounce);\n\n        // (view to model)\n        ngModel.$parsers.push(avValField.validateView);\n\n        // (model to view) - added to beginning of array because formatters\n        // are processed in reverse order thus allowing the model to be transformed\n        // before the validation framework check for validity.\n        ngModel.$formatters.unshift(avValField.validateModel);\n\n        scope.$on(AV_VAL.EVENTS.REVALIDATE, function() {\n          avValField.validate(ngModel.$viewValue);\n        });\n\n        // SUBMITTED EVENT\n        scope.$on(AV_VAL.EVENTS.SUBMITTED, function() {\n          ngModel.$dirty = true;\n          avValField.validate(ngModel.$viewValue);\n        });\n\n        // - Removes all errors on page,\n        // - does not reset view or model values.  This is to be handled by the app.\n        scope.$on(AV_VAL.EVENTS.RESET, function () {\n          avValField.reset();\n        });\n\n        scope.$on('$destroy', function () {\n          avValForm.unrecord(ngModel.avId);\n        });\n\n      }\n    };\n  });\n\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_POPOVER', {\n    NAME: 'bs.popover'\n  });\n\n  availity.ui.controller('AvPopoverController', function($element, $scope, AV_POPOVER) {\n\n    this.listeners = function() {\n\n      var self = this;\n\n      angular.forEach(['show', 'shown', 'hide', 'hidden'], function(name) {\n        $element.on(name + '.bs.popover', function(ev) {\n          $scope.$emit('av:popover:' + name, ev);\n        });\n      });\n\n      $scope.$on('destroy', function() {\n        self.destroy();\n      });\n    };\n\n    this.plugin = function() {\n      return $element.data(AV_POPOVER.NAME);\n    };\n\n    this.show = function() {\n      $element.popover('show');\n    };\n\n    this.hide = function() {\n      $element.popover('hide');\n    };\n\n    this.toggle = function() {\n      $element.popover('toggle');\n    };\n\n    this.destroy = function() {\n      $element.popover('destroy');\n    };\n  });\n\n  availity.ui.directive('avPopover', function() {\n    return {\n      restrict: 'A',\n      controller: 'AvPopoverController',\n      link: function(scope, element) {\n\n        var options = {};\n\n        scope.$evalAsync(function() {\n          element.popover(angular.extend({}, options, {\n            html: true\n          }));\n        });\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('avValContainerController', function($scope, $timeout) {\n\n    this.message = function(ngModel) {\n\n      var message = null;\n      if(ngModel.avResults.violations.length && ngModel.avResults.violations[0].message) {\n        message = ngModel.avResults.violations[0].message;\n      }else {\n        message = null;\n      }\n\n      // $timeout is needed to update the UI from $broadcast events\n      $timeout(function() {\n        $scope.messages.message = message;\n      });\n\n    };\n\n  });\n\n  availity.ui.directive('avValContainer', function() {\n    return {\n      restrict: 'A',\n      controller: 'avValContainerController',\n      template: '<p class=\"help-block\" data-ng-bind-html=\"messages.message\"></p>',\n      replace: true,\n      scope: {\n\n      },\n      link: function(scope) {\n        scope.messages = _.extend({}, scope.messages, { message: null, id: null });\n      }\n    };\n  });\n\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BOOTSTRAP_ADAPTER', {\n    CLASSES: {\n      SUCCESS: 'has-success',\n      WARNING: 'has-warning',\n      ERROR: 'has-error',\n      FEEDBACK: 'has-feedback',\n      HELP: 'help-block',\n      FORM_GROUP: '.form-group:first',\n      NAVBAR: 'navbar-fixed-top'\n    },\n    SELECTORS: {\n      CONTAINER: 'container-id',\n      DATA_CONTAINER: 'data-container-id'\n    },\n    CONTROLLER: '$avValContainerController'\n  });\n\n  availity.ui.factory('avValBootstrapAdapter', function(AV_BOOTSTRAP_ADAPTER, $timeout, $log) {\n\n    return {\n\n      element: function(element, ngModel) {\n        if(ngModel.$valid) {\n          element.parents(AV_BOOTSTRAP_ADAPTER.CLASSES.FORM_GROUP).removeClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n        }else {\n          element.parents(AV_BOOTSTRAP_ADAPTER.CLASSES.FORM_GROUP).addClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n        }\n      },\n\n      reset: function(element) {\n        element.parents(AV_BOOTSTRAP_ADAPTER.CLASSES.FORM_GROUP).removeClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n      },\n\n      message: function(element, ngModel) {\n\n        var selector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.HELP\n        ].join('');\n\n        var $el = $(element);\n\n        var target = $el.attr(AV_BOOTSTRAP_ADAPTER.SELECTORS.CONTAINER);\n        target = target || $el.attr(AV_BOOTSTRAP_ADAPTER.SELECTORS.DATA_CONTAINER);\n        // default to siblings\n        target = target ? $('#' + target) : $el.siblings(selector);\n\n        if(target.length === 0) {\n          $log.warn('avValBootstrapAdapter could not find validation container for {0}', [element]);\n          return;\n        }\n\n        var el = target[0];\n        $el = angular.element(el);\n        var avValModel = $el.data(AV_BOOTSTRAP_ADAPTER.CONTROLLER); // get the av val message controller\n        if(avValModel) {\n          avValModel.message(ngModel);\n        }\n      },\n\n      scroll: function(form) {\n\n        // Bootstrap fixed navbars causes bad scroll-to offsets so find them all\n        var navbarSelector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.NAVBAR\n        ].join('');\n\n        // Add up all the heights to find the true offset\n        var offset = 0;\n        $(navbarSelector).each(function() {\n          offset += $(this).outerHeight();\n        });\n\n        var selector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR,\n          ':first'\n        ].join('');\n\n        var $target = $(form).find(selector);\n        $timeout(function() {\n          // scroll to offset top of first error minus the offset of the navbars\n          $('body, html').animate({scrollTop: $target.offset().top - offset}, 'fast');\n        }, 0, false);\n      }\n    };\n  });\n\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_VAL_ADAPTER', {\n    DEFAULT: 'avValBootstrapAdapter'\n  });\n\n  availity.ui.provider('avValAdapter', function() {\n\n    var that = this;\n\n    this.setAdapter = function(adapter) {\n      this.adapter = adapter;\n    };\n\n    this.$get = function(AV_VAL_ADAPTER, $injector) {\n\n      var Adapter = function() {\n        var adapterName = that.adapter || AV_VAL_ADAPTER.DEFAULT;\n        this.adapter = $injector.get(adapterName);\n      };\n\n      var proto = Adapter.prototype;\n\n      proto.element = function(element, ngModel) {\n        this.adapter.element(element, ngModel);\n      };\n\n      proto.reset = function(element) {\n        this.adapter.reset(element);\n      };\n\n      proto.message = function(element, ngModel) {\n        this.adapter.message(element, ngModel);\n      },\n\n      proto.scroll = function(form) {\n        this.adapter.scroll(form);\n      };\n\n      return new Adapter();\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.provider('avDropdownConfig', function() {\n    var config = {\n      closeOnResize: true,\n      dropdownAutoWidth: true,\n      minimumResultsForSearch: 5\n    };\n\n    this.set = function(options) {\n      angular.extend(config, options);\n    };\n\n    this.$get = function() {\n      return angular.copy(config);\n    };\n  });\n\n  availity.ui.constant('AV_DROPDOWN', {\n    OPTIONS: [\n      'width',\n      'minimumInputLength',\n      'maximumInputLength',\n      'minimumResultsForSearch',\n      'maximumSelectionSize',\n      'placeholderOption',\n      'separator',\n      'allowClear',\n      'multiple',\n      'closeOnSelect',\n      'openOnEnter',\n      'id',\n      'matcher',\n      'sortResults',\n      'formatSelection',\n      'formatResult',\n      'formatResultCssClass',\n      'formatNoMatches',\n      'formatSearching',\n      'formatAjaxError',\n      'formatInputTooShort',\n      'formatInputTooLong',\n      'formatSelectionTooBig',\n      'formatLoadMore',\n      'createSearchChoice',\n      'createSearchChoicePosition',\n      'initSelection',\n      'tokenizer',\n      'tokenSeparators',\n      'query',\n      'ajax',\n      'data',\n      'tags',\n      'containerCss',\n      'containerCssClass',\n      'dropdownCss',\n      'dropdownCssClass',\n      'dropdownAutoWidth',\n      'adaptContainerCssClass',\n      'adaptDropdownCssClass',\n      'escapeMarkup',\n      'selectOnBlur',\n      'loadMorePadding',\n      'nextSearchTerm'\n    ]\n  });\n\n\n  availity.ui.controller('AvDropdownController', function($element, $attrs, AV_UI, AV_DROPDOWN, avDropdownConfig, $log, $scope, $timeout, $parse) {\n\n    var self = this;\n    this.options = {};\n    this.match = null;\n    this.ngModel = null;\n\n    this.init = function() {\n\n      self.options = angular.extend({}, avDropdownConfig);\n\n      _.forEach($attrs, function(value, key) {\n        if(_.contains(AV_DROPDOWN.OPTIONS, key.replace('data-', ''))) {\n          self.options[key] = $scope.$eval(value);\n        }\n      });\n\n      self.multiple = angular.isDefined($attrs.multiple);\n\n      if(self.options.query) {\n\n        self.queryFn = self.options.query;\n        // Function used to query results for the search term.\n        self.options.query = self.query;\n        // Function used to get the id from the choice object or a string representing the key under which the id is stored.\n        self.options.id = self.getId;\n      }\n\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.getSelected = function(model) {\n\n      if(self.options.query) {\n        return 0;\n      }\n      var items = this.collection($scope);\n\n      var index = _.findIndex(items, function(item) {\n        return angular.equals(item, model);\n      });\n\n      return index;\n\n    };\n\n    // Result:\n    //\n    // {\n    //   \"code\": \"252Y00000X\",\n    //   \"value\": \"AGENCIES,EARLY INTERVENTION PROVIDER AGENCY,NOT APPLICABLE|Agency\",\n    //   \"id\": \"252Y00000X\"\n    // }\n    this.getId = function(result) {\n      return result.id;\n    };\n\n    // Wrapper around the query function for Select2.  When the promise resolves\n    // the callback\n    this.query = function(options) {\n\n      self.queryFn(options).then(function(response) {\n\n        // Callback function that should be called with the result object. The result object:\n        //\n        // result.results (object) - Array of result objects. The default renderers\n        //    expect objects with id and text keys. The id property is required,\n        //    even if custom renderers are used. The object may also contain a children\n        //    key if hierarchical data is displayed. The object may also contain a disabled\n        //    boolean property indicating whether this result can be selected.\n        //\n        // result.more (boolean) - true if more results are available for the current\n        //    search term.\n        //\n        // results.context (object) - A user-defined object that should be made available\n        //    as the context parameter to the query function on subsequent queries to load\n        //    more result pages for the same search term. See the description of\n        //    options.context parameter.\n        options.callback({more: response.more, results: response.results});\n      });\n    };\n\n    this.setValue = function() {\n\n      var viewValue = self.ngModel.$viewValue;\n      var selected = null;\n      if(viewValue) {\n        selected = this.getSelected(viewValue);\n      }\n\n      // var apply = scope.$evalAsync || $timeout;\n      $timeout(function() {\n        $element\n          .select2('val',  (selected === null || selected === 'undefined') ? '' : selected); // null === '' for Select2\n      });\n    };\n\n    this.getMultiSelected = function(viewValue) {\n\n      var options = this.collection($scope);\n      var indices = [];\n\n      _.each(viewValue, function(savedObject) {\n        var index = _.findIndex(options, function(value) {\n          var temp = angular.copy(savedObject); // remove hashkeys for comparison\n          return _.matches(temp)(value);\n        });\n        indices.push(index);\n      });\n\n      if(indices.length > 0) {\n        viewValue = indices;\n      }\n\n      return viewValue;\n\n    };\n\n    this.setValues = function() {\n\n      var viewValue = self.ngModel.$viewValue;\n\n      if(!angular.isArray(viewValue)) {\n        viewValue = [];\n      }\n\n      if(!_.isEmpty(viewValue) && _.isObject(viewValue[0])) {\n        viewValue = this.getMultiSelected(viewValue);\n      }\n\n      $timeout(function() {\n        $element\n          .select2('val', viewValue);\n      });\n    };\n\n    this.ngOptions = function() {\n\n      this.match = $attrs.ngOptions.match(AV_UI.NG_OPTIONS);\n      if(!this.match) {\n        throw new Error('Invalid ngOptions for avDropdown');\n      }\n      // AV_UI.NG_OPTIONS regex will parse into arrays like below:\n      //\n      // 0: \"state.name for state in states\"\n      // 1: \"state.name\"\n      // 2: undefined\n      // 3: undefined\n      // 4: \"state\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"states\"\n      // 8: undefined\n      //\n      // 0: \"state.id as state.name for state in states\"\n      // 1: \"state.id\"\n      // 2: \"state.name\"\n      // 3: undefined\n      // 4: \"state\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"states\"\n      // 8: undefined\n      //\n      // 0: \"state.name for state in states track by state.id\"\n      // 1: \"state.name\"\n      // 2: undefined\n      // 3: undefined\n      // 4: \"state\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"states\"\n      // 8: \"state.id\"\n      //\n      // 0: \"person.fullName as (person.lastName + ', ' + person.firstName) for person in feeScheduleModel.persons\"\n      // 1: \"person.fullName\"\n      // 2: \"(person.lastName + ', ' + person.firstName)\"\n      // 3: undefined\n      // 4: \"person\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"feeScheduleModel.persons\"\n      // 8: undefined\n      //\n      this.displayFn = $parse(this.match[2] || this.match[1]); // this is the function to retrieve the text to show as\n      this.collection = $parse(this.match[7]);\n      this.valueName = this.match[4] || this.match[6];\n      this.valueFn = $parse(this.match[2] ? this.match[1] : this.valueName);\n      this.keyName = this.match[5];\n\n      $scope.$watchCollection(this.collection, function(newVal, oldVal) {\n        if(angular.equals(newVal, oldVal)) {\n          return;\n        }\n\n        self.setValue();\n\n      }, true);\n\n    };\n  });\n\n  availity.ui.directive('avDropdown', function($timeout, $log, $window) {\n\n    return {\n      restrict: 'A',\n      require: ['ngModel', 'avDropdown'],\n      controller: 'AvDropdownController',\n      link: function(scope, element, attrs, controllers) {\n        var ngModel = controllers[0];\n        var avDropdown = controllers[1];\n\n        avDropdown.setNgModel(ngModel);\n        avDropdown.init();\n\n        if(attrs.ngOptions) {\n          avDropdown.ngOptions();\n        }\n\n        ngModel.$parsers.push(function(value) {\n          var parent = element.prev();\n          parent\n            .toggleClass('ng-invalid', !ngModel.$valid)\n            .toggleClass('ng-valid', ngModel.$valid)\n            .toggleClass('ng-invalid-required', !ngModel.$valid)\n            .toggleClass('ng-valid-required', ngModel.$valid)\n            .toggleClass('ng-dirty', ngModel.$dirty)\n            .toggleClass('ng-pristine', ngModel.$pristine);\n          return value;\n        });\n\n        element.on('change', function(e) {\n\n          // special case since the ajax handling doesn't bind to the model correctly\n          // this has to do with select2 (v3.5.2) using a hidden field instead of a select for ajax\n          if(avDropdown.options.query) {\n            $timeout(function() {\n              ngModel.$setViewValue(e.added);\n            });\n          }\n\n          $log.info(e);\n\n        });\n\n        // fires ng-focus when select2-focus fires.\n        element.on('select2-focus', function() {\n          if(attrs.ngFocus) {\n            scope.$eval(scope.$eval(attrs.ngFocus));\n          }\n        });\n\n        // fires ng-blur when select2-blur occurs.\n        element.on('select2-blur', function() {\n          if(attrs.ngBlur) {\n            scope.$eval(scope.$eval(attrs.ngBlur));\n          }\n        });\n\n        // https://github.com/t0m/select2-bootstrap-css/issues/37#issuecomment-42714589\n        element.on('select2-open', function () {\n          // look for .has-success, .has-warning, .has-error\n          // (really look for .has-* … which is good enough for the demo page, but obviously might interfere with other CSS-classes starting with \"has-\")\n          if(element.parents('[class*=\"has-\"]').length) {\n\n            // get all CSS-classes from the element where we found \"has-*\" and collect them in an array\n            var classNames = $(this).parents('[class*=\"has-\"]')[0].className.split(/\\s+/);\n\n            // go through the class names, find \"has-\"\n            for(var i = 0; i < classNames.length; ++i) {\n              if(classNames[i].match('has-')) {\n                $('#select2-drop').addClass(classNames[i]);\n              }\n            }\n          }\n        });\n\n\n        var _$render = ngModel.$render;\n        ngModel.$render = function() {\n          _$render();\n\n          if(avDropdown.multiple) {\n            avDropdown.setValues();\n          }else {\n            avDropdown.setValue();\n          }\n\n        };\n\n        var win = angular.element($window);\n\n        win.bind('resize', function() {\n          element.select2('close');\n        });\n\n        attrs.$observe('disabled', function (value) {\n          element.select2('enable', !value);\n        });\n\n        attrs.$observe('readonly', function (value) {\n          element.select2('readonly', !!value);\n        });\n\n        scope.$on('destroy', function() {\n          element.select2('destroy');\n        });\n\n        $timeout(function() {\n          element.select2(avDropdown.options);\n        });\n      }\n    };\n  });\n\n})(window);\n","/**\n * Inspiration https://github.com/mgcrea/angular-strap/blob/v0.7.8/src/directives/datepicker.js\n */\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // Options: http://bootstrap-datepicker.readthedocs.org/en/latest/options.html\n  availity.ui.constant('AV_DATEPICKER', {\n    CONTROLLER: '$ngModelController',\n    ADD_ON_SELECTOR: '[data-toggle=\"datepicker\"]',\n    OPTIONS: [\n      'autoclose',\n      'beforeShowDay',\n      'beforeShowMonth',\n      'calendarWeeks',\n      'clearBtn',\n      'toggleActive',\n      'container',\n      'daysOfWeekDisabled',\n      'datesDisabled',\n      'defaultViewDate',\n      'endDate',\n      'forceParse',\n      'format',\n      'inputs',\n      'keyboardNavigation',\n      'language',\n      'minViewMode',\n      'multidate',\n      'multidateSeparator',\n      'orientation',\n      'startDate',\n      'startView',\n      'todayBtn',\n      'todayHighlight',\n      'weekStart',\n      'showOnFocus',\n      'disableTouchKeyboard',\n      'enableOnReadonly',\n      'modelFormat'\n    ],\n    DEFAULTS: {\n      FORMAT: 'mm/dd/yyyy',\n      CLOSE: true,\n      TODAY: true,\n      FORCEPARSE: false,\n      MODELFORMAT: 'YYYY-MM-DD'\n    }\n  });\n\n  availity.ui.controller('AvDatepickerController', function($element, $attrs, AV_DATEPICKER, $scope) {\n\n    var self = this;\n    this.options = {};\n\n    this.setValue = function() {\n\n      var viewValue = self.ngModel.$modelValue;\n      var plugin = this.plugin();\n\n      if(!viewValue || !plugin) {\n        return;\n      }\n\n      plugin.setDate(viewValue);\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.findModel = function() {\n\n      var ngModel = null;\n\n      var $input = $element.find('input:first').andSelf();\n      if($input.length) {\n        ngModel = $input.data(AV_DATEPICKER.CONTROLLER);\n        this.setNgModel(ngModel);\n      }\n\n      return ngModel;\n    };\n\n    this.modelToView = function() {\n      var viewValue = $.fn.datepicker.DPGlobal.formatDate(self.ngModel.$modelValue, self.options.format, 'en');\n      return viewValue;\n    };\n\n    this.wrapIsoDate = function() {\n      var date = self.ngModel.$modelValue;\n\n      if(date !== undefined && date !== null && !moment.isDate(date)) {\n        var m = moment(date);\n        self.ngModel.$modelValue = m.isValid() ? m.toDate() : null;\n      }\n\n      return self.ngModel.$modelValue;\n    };\n\n    this.viewToModel = function() {\n      var format = $.fn.datepicker.DPGlobal.parseFormat(self.options.format);\n      var utcDate = $.fn.datepicker.DPGlobal.parseDate(self.ngModel.$viewValue, format, 'en');\n\n      var plugin = self.plugin();\n\n      if(!plugin) {\n        return;\n      }\n\n      // jscs: disable\n      var localDate = plugin._utc_to_local(utcDate);\n      // jscs: enable\n\n      if(self.options.modelFormat && localDate) {\n        localDate = moment(localDate).format(self.options.modelFormat);\n      }\n\n      return localDate;\n    };\n\n    this.init = function() {\n\n      _.forEach($attrs, function(value, key) {\n        if(_.contains(AV_DATEPICKER.OPTIONS, key.replace('data-', ''))) {\n          self.options[key] = $scope.$eval(value);\n        }\n      });\n\n      // self.options = _.extend{}, optionsDefault, userOptions);\n\n      self.options.autoclose = self.options.autoclose ? self.options.autoclose : AV_DATEPICKER.DEFAULTS.CLOSE;\n      self.options.todayHighlight = self.options.todayHighlight ? self.options.todayHighlight : AV_DATEPICKER.DEFAULTS.TODAY;\n      self.options.format = self.options.format ? self.options.format : AV_DATEPICKER.DEFAULTS.FORMAT;\n      self.options.forceParse = self.options.forceParse ? self.options.forceParse : AV_DATEPICKER.DEFAULTS.FORCEPARSE;\n\n      if(self.options.modelFormat && self.options.modelFormat.toLowerCase() === 'default') {\n        self.options.modelFormat = AV_DATEPICKER.DEFAULTS.MODELFORMAT;\n      }\n    };\n\n    this.plugin = function() {\n      return $element.data('datepicker');\n    };\n\n    this.destroy = function() {\n      var plugin = this.plugin();\n      if(plugin) {\n        plugin.remove();\n        $element.data('datepicker', null);\n      }\n    };\n\n    this.hide = function() {\n      var plugin = this.plugin();\n      if(plugin) {\n        plugin.hide();\n      }\n    };\n  });\n\n  availity.ui.directive('avDatepicker', function($window, $log, AV_DATEPICKER) {\n    return {\n      restrict: 'A',\n      require: ['ngModel', 'avDatepicker'],\n      controller: 'AvDatepickerController',\n      link: function(scope, element, attrs, controllers) {\n\n        var ngModel = controllers[0];\n        var avDatepicker = controllers[1];\n\n        if(!ngModel) {\n          ngModel = avDatepicker.findModel();\n          if(!ngModel) {\n            $log.error('avDatepicker requires ngModel');\n            return;\n          }\n        }\n\n        avDatepicker.init();\n        avDatepicker.setNgModel(ngModel);\n\n        element.on('changeDate', function(e) {\n          $log.info('avDatepicker changeDate {0}', [e]);\n        });\n\n        // (view to model)\n        ngModel.$parsers.push(avDatepicker.viewToModel);\n\n        // (model to view) - added to end of formatters array\n        // because they are processed in reverse order.\n        // if the model is in Date format and send to the validation framework\n        // prior to getting converted to the expected $viewValue format,\n        // the validation will fail.\n        ngModel.$formatters.push(avDatepicker.modelToView);\n        ngModel.$formatters.push(avDatepicker.wrapIsoDate);\n\n        var _$render = ngModel.$render;\n        ngModel.$render = function() {\n          _$render();\n          avDatepicker.setValue();\n        };\n\n        var win = angular.element($window);\n\n        win.bind('scroll', function() {\n          avDatepicker.hide();\n        });\n\n        var target = element.siblings(AV_DATEPICKER.ADD_ON_SELECTOR);\n        if(target.length) {\n          target.on('click.datepicker', function() {\n            if(!element.prop('disabled')) { // Hack check for IE 8\n              element.focus();\n            }\n          });\n        }\n\n        scope.$on('destroy', function() {\n          avDatepicker.destroy();\n          if(target.length) {\n            target.off('click.datepicker');\n          }\n        });\n\n        scope.$evalAsync(function() {\n          element.datepicker(avDatepicker.options);\n        });\n      }\n    };\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_UI_IDLE', {\n    EVENTS: {\n      OK: 'mousedown.av.idle.notifier'\n    },\n    TEMPLATES: {\n      BASE: 'ui/idle/idle-tpl.html',\n      SESSION: 'ui/idle/idle-session-tpl.html',\n      WARNING: 'ui/idle/idle-warning-tpl.html'\n    }\n  });\n\n  availity.ui.provider('avIdleNotifier', function() {\n\n    var sessionTemplate;\n    var warningTemplate;\n    var $scope;\n\n    this.setSessionTemplate = function(template) {\n      sessionTemplate = template;\n    };\n\n    this.setWarningTemplate = function(template) {\n      warningTemplate = template;\n    };\n\n    this.$get = function(AV_IDLE, AV_UI_IDLE, $rootScope, AvModal, $document, $timeout) {\n\n      var AvIdleNotifier = function() {\n        this.listeners = [];\n        this.modal = null;\n      };\n\n      var proto = AvIdleNotifier.prototype;\n\n      proto.init = function() {\n\n        $scope = $rootScope.$new(true);\n        $scope.idle = {};\n\n        this.initListeners();\n      };\n\n      proto.initListeners = function() {\n\n        var self = this;\n        var listener = null;\n\n        // ACTIVE IDLING\n        listener = $rootScope.$on(AV_IDLE.EVENTS.IDLE_ACTIVE, function() {\n          self.showWarning();\n        });\n        this.listeners.push(listener);\n\n        // INACTIVE IDLING\n        listener = $rootScope.$on(AV_IDLE.EVENTS.IDLE_INACTIVE, function() {\n          self.hideWarning();\n        });\n        this.listeners.push(listener);\n\n        // SESSION TIMEOUT OUT\n        listener = $rootScope.$on(AV_IDLE.EVENTS.SESSION_TIMEOUT_ACTIVE, function() {\n          self.showSession();\n        });\n        this.listeners.push(listener);\n\n      };\n\n      proto.destroyListeners = function() {\n        // turn off each listener @see http://stackoverflow.com/a/14898795\n        _.each(this.listeners, function(listener) {\n          listener();\n        });\n      };\n\n      proto.showWarning = function() {\n\n        var self = this;\n\n        if(this.modal !== null) {\n          return;\n        }\n\n        $scope = $rootScope.$new(true);\n        $scope.idle = {};\n        $scope.idle.template = AV_UI_IDLE.TEMPLATES.WARNING;\n\n        this.modal = new AvModal({\n          show: true,\n          scope: $scope,\n          backdrop: 'static',\n          templateUrl: AV_UI_IDLE.TEMPLATES.BASE\n        });\n\n        $document.find('body').on(AV_UI_IDLE.EVENTS.OK, function() {\n          self.hideWarning();\n        });\n\n      };\n\n      proto.hideWarning = function() {\n        if(this.modal) {\n          this.disableBackDrop();\n          this.modal.hide();\n        }\n\n        this.modal = null;\n      };\n\n      proto.disableBackDrop = function() {\n        $document.find('body').off(AV_UI_IDLE.EVENTS.OK);\n      };\n\n      proto.showSession = function() {\n        var self = this;\n        this.disableBackDrop();\n\n        $timeout(function() {\n          $scope.idle.template = AV_UI_IDLE.TEMPLATES.SESSION;\n          $scope.idle.onSessionTimeout = _.bind(self.onSessionTimeout, self);\n        }, 0, true);\n\n      };\n\n      proto.onSessionTimeout = function() {\n        $rootScope.$broadcast(AV_IDLE.EVENTS.SESSION_TIMEOUT_REDIRECT);\n      };\n\n      return new AvIdleNotifier();\n\n    };\n\n  });\n\n  availity.ui.run(function(avIdleNotifier) {\n    avIdleNotifier.init();\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_MASK', {\n    NAME: 'inputmask',\n    DEFAULTS: {\n      date: '99/99/9999',\n      phone: '(999) 999-9999',\n      SSN:'999-99-9999'\n    }\n  });\n\n  availity.ui.directive('avMask', function($window, $log, AV_MASK) {\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function(scope, element, attrs) {\n\n        var maskType = AV_MASK.DEFAULTS[attrs['avMask']];\n        if(!maskType) {\n          maskType = attrs['avMask'];\n        }\n\n        scope.$evalAsync(function() {\n          element.inputmask(maskType);\n        });\n\n        scope.$on('$destroy', function () {\n          element.inputmask('remove');\n        });\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('AvHasPermissionController', function($element) {\n\n    this.onSuccess = function(isAuthorized) {\n      if(isAuthorized) {\n        $element.removeClass('ng-hide');\n        $element.show();\n      } else {\n        $element.remove();\n      }\n    };\n\n    this.onError = function() {\n      $element.remove();\n    };\n\n  });\n\n  availity.ui.directive('avHasPermission', function(avUserAuthorizations) {\n    return {\n      restrict: 'EA',\n      controller: 'AvHasPermissionController',\n      require: ['avHasPermission'],\n      link: function($scope, $element, $attr, controllers) {\n\n        var avHasPermission = controllers[0];\n\n        $element.hide();\n\n        $scope.$watch($attr.avHasPermission, function(permissions) {\n\n          if(!angular.isArray(permissions)) {\n            permissions = _.words('' + permissions);\n          }\n\n          avUserAuthorizations.isAnyAuthorized(permissions).then(avHasPermission.onSuccess, avHasPermission.onError);\n        });\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n\n  availity.core.controller('AvAnalyticsController', function(avAnalyticsUtils, $element, $attrs, avAnalytics) {\n\n    this.onEvent = function(event) {\n\n      // If an external link is detected\n      if(avAnalyticsUtils.isExternalLink($attrs)) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      // convert the directive attributes into object with properties with sane defaults\n      var properties = _.extend({\n        level: 'info'\n      }, avAnalyticsUtils.getProperties($attrs), {\n        event: event.type\n      });\n\n      var promise = avAnalytics.trackEvent(properties);\n      promise['finally'](function() {\n        if(avAnalyticsUtils.isExternalLink($attrs)) {\n          document.location = $element.attr('href');\n        }\n      });\n    };\n\n  });\n\n  availity.core.directive('avAnalyticsOn', function() {\n\n    return {\n      restrict: 'A',\n      controller: 'AvAnalyticsController',\n      required: 'avAnalyticsOn',\n      link: function($scope, $element, $attrs, avAnalyticsOn) {\n\n        var eventType = $attrs.avAnalyticsOn || 'click';\n\n        // bind the element to the `av-analytic-on` event like `click`\n        $element.on(eventType, function (event) {\n          avAnalyticsOn.onEvent(event);\n        });\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.requires.push('ng.shims.placeholder');\n\n  availity.ui.config(function($provide) {\n\n    $provide.decorator('placeholderDirective', ['$delegate', '$log', function($delegate, $log) {\n\n      var directive = $delegate[0];\n      var originalLink = directive.link;\n\n      var newLink = function(scope, element, attrs) {\n\n        if(originalLink && _.contains(_.keys(attrs), 'avMask')) {\n          $log.info('placeholder shim not running on an element due to avMask on same element');\n          return;\n        }else if(originalLink) {\n          originalLink.apply(this, arguments);\n        }\n        //else originalLink doesn't exist\n      };\n\n      directive.compile = function() {\n        return newLink;\n      };\n\n      return $delegate;\n    }]);\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BREADCRUMBS', {\n\n    TEMPLATE: 'ui/breadcrumbs/breadcrumbs-tpl.html'\n  });\n\n  function AvBreadcrumbsController($state) {\n\n    this.getBreadcrumb = function(breadcrumbs, state) {\n      if(!state || !state.data) {\n        return;\n      }\n\n      var breadcrumb = state.data.breadcrumb;\n      if(!breadcrumb) {\n        return;\n      }\n\n      if(breadcrumb.parent) {\n        var parentState = $state.get(breadcrumb.parent);\n\n        if(parentState) {\n          this.getBreadcrumb(breadcrumbs, parentState);\n        }\n      }\n      breadcrumb.state = state.name;\n      breadcrumbs.push(breadcrumb);\n    };\n\n    this.getBreadcrumbs = function() {\n      var breadcrumbs = [];\n      this.getBreadcrumb(breadcrumbs, $state.current);\n      return breadcrumbs;\n    };\n\n  }\n\n  AvBreadcrumbsController.$inject = ['$state'];\n  availity.ui.controller('AvBreadcrumbsController', AvBreadcrumbsController);\n\n  function avBreadcrumbs(AV_BREADCRUMBS) {\n    return {\n      restrict: 'EA',\n      replace: true,\n      templateUrl: AV_BREADCRUMBS.TEMPLATE,\n      controller: 'AvBreadcrumbsController',\n      link: function(scope, element, attrs, avBreadcrumbs) {\n        scope.breadcrumbs = avBreadcrumbs.getBreadcrumbs();\n\n        scope.$on('$stateChangeSuccess', function() {\n          scope.breadcrumbs = avBreadcrumbs.getBreadcrumbs();\n        });\n      }\n    };\n  }\n\n  avBreadcrumbs.$inject = ['AV_BREADCRUMBS'];\n  availity.ui.directive('avBreadcrumbs', avBreadcrumbs);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.filter('avApproximate', function() {\n    var pow = Math.pow;\n    var floor = Math.floor;\n    var abs = Math.abs;\n    var log = Math.log;\n\n    function round(number, precision) {\n      var prec = pow(10, precision);\n      return Math.round(number * prec) / prec;\n    }\n\n    return function (number, precision) {\n      precision = precision || 0;\n      var base = floor(log(abs(number)) / log(1000));\n      var unit = 'kMGTPE'[base - 1];\n      return unit ? round(number / pow(1000, base), precision) + unit : (number || 0);\n    };\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BADGE', {\n    COLOR: null,\n    DEFAULT_CLASS: 'badge',\n    SHOW_WHEN_ZERO: false,\n    TEMPLATE: 'ui/badge/badge-tpl.html'\n  });\n\n  function badgeDirective(AV_BADGE) {\n\n    return {\n      scope: {\n        color: '@',\n        count: '=avBadge',\n        showWhenZero: '@'\n      },\n      templateUrl: AV_BADGE.TEMPLATE,\n      link: function(scope, element) {\n        scope.color = scope.color || AV_BADGE.COLOR;\n        scope.showWhenZero = scope.showWhenZero || AV_BADGE.SHOW_WHEN_ZERO;\n\n        var classes = [];\n        classes.push(AV_BADGE.DEFAULT_CLASS);\n        if(scope.color) {\n          classes.push(scope.color);\n        }\n\n        element.addClass(classes.join(' '));\n      }\n    };\n  }\n\n  badgeDirective.$inject = ['AV_BADGE'];\n  availity.ui.directive('avBadge', badgeDirective);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_REMOVABLE_LABEL', {\n    TEMPLATE: 'ui/labels/removable-label-tpl.html'\n  });\n\n  availity.ui.directive('avRemovableLabel', function(AV_REMOVABLE_LABEL) {\n    return {\n      templateUrl: AV_REMOVABLE_LABEL.TEMPLATE,\n      transclude: true,\n      scope: {\n        removeValue: '=',\n        onRemove: '&'\n      },\n      link: function(scope, element, attrs) {\n        element.addClass('label-remove');\n        scope.removeLabel = function() {\n          if(!attrs.disabled) {\n            scope.onRemove()(scope.removeValue);\n          }\n        };\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_LOADER', {\n\n    TEMPLATES: {\n      LOADER: 'ui/animation/loader-tpl.html'\n    }\n\n  });\n\n  availity.ui.controller('AvLoaderController', function($element) {\n\n    var self = this;\n    var active;\n\n    this.start = function() {\n      active = true;\n      this.animate();\n    };\n\n    this.animate = function() {\n\n      $element\n        .find('.loading-bullet')\n        .velocity('transition.slideRightIn', { stagger: 250 })\n        .velocity({ opacity: 0 }, {\n          delay: 750,\n          duration: 500,\n          complete: function() {\n            if(active) {\n              setTimeout(function() {self.animate();}, 500);\n            } else {\n              self.endAnimation();\n            }\n          }\n        });\n\n    };\n\n    this.endAnimation = function() {\n      $element.find('.loading-bullet').velocity('stop', true);\n      $element.removeData();\n    };\n\n    this.stop = function() {\n      active = false;\n    };\n\n  });\n\n  availity.ui.directive('avLoader', function(AV_LOADER) {\n    return {\n      restrict: 'A',\n      replace: true,\n      controller: 'AvLoaderController',\n      require: 'avLoader',\n      templateUrl: AV_LOADER.TEMPLATES.LOADER,\n      link: function(scope, element, attr, avLoader) {\n\n        if(!attr.delay) {\n          avLoader.start();\n        }\n\n        scope.$on('$destroy', function() {\n          avLoader.stop();\n        });\n\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BLOCK', {\n    TEMPLATES: {\n      BLOCK: 'ui/block/block-tpl.html'\n    }\n  });\n\n  var getLoaderController = function(blockId) {\n    var el = $('[data-block-ui=\"' + blockId + '\"]') || $('[block-ui=\"' + blockId + '\"]');\n    if(el) {\n      return el.find('[data-av-loader]').controller('avLoader');\n    }\n  };\n\n  var triggerLoaderController = function(id, instance, fn) {\n\n    var controller = instance.loaderController;\n    if(!controller) {\n      controller = getLoaderController(id);\n      instance.loaderController = controller;\n    }\n    if(controller && _.isFunction(controller[fn])) {\n      controller[fn]();\n    }\n\n  };\n\n  var triggerInstance = function(id, instance, origFn, loaderFn) {\n    triggerLoaderController(id, instance, loaderFn);\n    origFn.apply(instance);\n  };\n\n  var modifyBlockInstances = function(id, instance) {\n\n    var origStartFn = instance.start;\n    var origStopFn = instance.stop;\n\n    instance.start = function() {\n      triggerInstance(id, instance, origStartFn, 'start');\n    };\n\n    instance.stop = function() {\n      triggerInstance(id, instance, origStopFn, 'stop');\n    };\n\n    instance.startLoader = function() {\n      triggerLoaderController(id, instance, 'start');\n    };\n\n    instance.avModifications = true;\n  };\n\n  availity.ui.run(function($injector, $log, AV_BLOCK) {\n\n    try {\n\n      var blockUIConfig = $injector.get('blockUIConfig');\n      var blockUI = $injector.get('blockUI');\n      blockUIConfig.autoBlock = false;\n      blockUIConfig.delay = 0;\n      blockUIConfig.templateUrl = AV_BLOCK.TEMPLATES.BLOCK;\n\n      var origGetFn = blockUI.instances.get;\n      blockUI.instances.get = function(id) {\n        var instance = origGetFn(id);\n        if(!instance.avModifications) {\n          modifyBlockInstances(id, instance);\n        }\n        return instance;\n      };\n\n    } catch(e) {\n      $log.warn('blockUI is required to use av block.');\n    }\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // Helper directive that hooks into block-ui's start-up lifecycle and starts the loader\n  availity.ui.directive('avBlockUi', function(blockUI) {\n\n    return {\n      restrict: 'A',\n      link: function($scope, $element, $attrs) {\n\n        var blockId = $attrs.avBlockUi;\n        var blockCount = $attrs.blockCount;\n        var instance = blockUI.instances.get(blockId);\n        if(blockCount > 0) {\n          instance.startLoader();\n        }\n      }\n    };\n\n  });\n\n})(window);\n","/*\n* Inspired by https://github.com/angular-ui/bootstrap/blob/master/src/tabs/tabs.js\n*/\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_TABS', {\n    TEMPLATES: {\n      TABS: 'ui/tabs/tabs-tpl.html',\n      TAB: 'ui/tabs/tab-tpl.html'\n    }\n  });\n\n  function TabsController($scope) {\n\n    var self = this;\n\n    $scope.tabs = [];\n    self.tabs = $scope.tabs;\n\n    this.addTab = function(tab) {\n      self.tabs.push(tab);\n\n      if(self.tabs.length === 1) {\n        tab.active = true;\n      } else if(tab.active) {\n        self.selectTab(tab);\n      } else {\n        tab.active = false;\n      }\n    };\n\n    this.removeTab = function(tab) {\n      var index = self.tabs.indexOf(tab);\n\n      if(tab.active && self.tabs.length > 1) {\n        //If this is the last tab, select the previous tab. else, the next tab.\n        var newActiveIndex = index === self.tabs.length - 1 ? index - 1 : index + 1;\n        self.selectTab(self.tabs[newActiveIndex]);\n      }\n\n      self.tabs.splice(index, 1);\n    };\n\n    this.selectTab = function(selectedTab) {\n      angular.forEach(self.tabs, function (tab) {\n        if(tab.active && tab !== selectedTab) {\n          tab.active = false;\n          tab.onDeselect();\n        }\n      });\n\n      selectedTab.active = true;\n      selectedTab.onSelect();\n    };\n  }\n\n  TabsController.$inject = ['$scope'];\n  availity.ui.controller('AvTabsController', TabsController);\n\n  function TabsDirective(AV_TABS) {\n    return {\n      restrict: 'AE',\n      templateUrl: AV_TABS.TEMPLATES.TABS,\n      transclude: true,\n      replace: true,\n      controller: 'AvTabsController',\n      scope: true,\n      link: function(scope, element, attrs) {\n        scope.justified = !!attrs.justified;\n        scope.tabType = attrs.tabType;\n        scope.vertical = !!attrs.vertical;\n\n        if(angular.isUndefined(attrs.padContent)) {\n          scope.padContent = true;\n        }\n      }\n    };\n  }\n\n  TabsDirective.$inject = ['AV_TABS'];\n  availity.ui.directive('avTabs', TabsDirective);\n\n  function TabDirective(AV_TABS) {\n    return {\n      restrict: 'AE',\n      templateUrl: AV_TABS.TEMPLATES.TAB,\n      replace: true,\n      require: '^avTabs',\n      transclude: true,\n      scope: {\n        heading: '@',\n        template: '=',\n        templateUrl: '=',\n        onSelect: '&select',\n        onDeselect: '&deselect'\n      },\n      controller: function() {\n        // Allow avTabs to be required by other directives\n      },\n      link: function(scope, element, attrs, tabsController, transclude) {\n        scope.transcludeFn = transclude;\n\n        tabsController.addTab(scope);\n\n        scope.$on('destroy', function() {\n          tabsController.removeTab(scope);\n        });\n\n        scope.select = function() {\n          if(!scope.disabled) {\n            tabsController.selectTab(scope);\n          }\n        };\n\n        scope.$watch('active', function(active) {\n          if(active) {\n            tabsController.selectTab(scope);\n          }\n        });\n\n        if(angular.isDefined(attrs.active)) {\n          scope.active = attrs.active;\n\n          scope.$parent.$watch(attrs.active, function(active) {\n            if(active) {\n              tabsController.selectTab(scope);\n            }\n          });\n        }\n\n        if(angular.isDefined(attrs.disable)) {\n          scope.$parent.$watch(attrs.disable, function(disabled) {\n            scope.disabled = !!disabled;\n          });\n        }\n      }\n    };\n  }\n\n  TabDirective.$inject = ['AV_TABS'];\n  availity.ui.directive('avTab', TabDirective);\n\n  function TabPaneDirective(avTemplateCache, $compile) {\n    return {\n      restrict: 'AE',\n      require: '^avTabs',\n      link: function(scope, element, attrs) {\n\n        var tab = scope.$eval(attrs.avTabPane);\n\n        if(angular.isDefined(tab.template) || angular.isDefined(tab.templateUrl)) {\n          avTemplateCache.get(tab)\n          .then(function(template) {\n            element.append($compile(template)(scope));\n          });\n        } else {\n          tab.transcludeFn(tab.$parent, function(contents) {\n            angular.forEach(contents, function(node) {\n              element.append(node);\n            });\n          });\n        }\n      }\n    };\n  }\n\n  TabPaneDirective.$inject = ['avTemplateCache', '$compile'];\n  availity.ui.directive('avTabPane', TabPaneDirective);\n\n})(window);\n"],"sourceRoot":"/source/"}