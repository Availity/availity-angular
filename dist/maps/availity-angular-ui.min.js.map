{"version":3,"sources":["availity-angular-ui.js","/source/index.js","/source/template.js","/source/modal.js","/source/form.js","/source/field.js","/source/popover.js","/source/container.js","/source/adapter-bootstrap.js","/source/adapter.js","/source/dropdown.js","/source/datepicker.js","/source/idle-notifier.js","/source/mask.js","/source/has-permission.js","/source/analytics.js","/source/placeholder.js","/source/breadcrumbs.js","/source/approximate.js","/source/badge.js","/source/removable-label.js","/source/loader.js","/source/block.js","/source/block-directive.js","/source/tabs.js","/source/scroll-pagination.js"],"names":["root","availity","MODULE_UI","ui","angular","module","constant","NG_OPTIONS","exports","window","factory","$q","$templateCache","$http","get","options","valid","template","templateUrl","Error","when","cache","then","result","data","OPTIONS","scope","id","container","keyboard","backdrop","show","remote","EVENTS","SHOW","SHOWN","HIDE","HIDDEN","NAMESPACE","MODAL","BS_EVENTS","TEMPLATES","AvModalManager","this","instances","proto","prototype","add","push","remove","_","without","closeAll","forEach","$el","$","bsModal","removeBackdrop","$body","removeClass","resetAdjustments","resetScrollbar","avModal","destroy","ModalFactory","$rootScope","$timeout","$compile","AV_MODAL","avTemplateCache","avModalManager","Modal","self","templateDefer","defer","templatePromise","promise","extend","$new","_build","create","$element","element","_createId","_scope","_init","appendTo","resolve","modal","_listeners","modalShow","modalToggle","toggle","modalHide","hide","animationShowDefer","animationHideDefer","on","event","$emit","isFunction","onShown","onHidden","call","$evalAsync","$on","_id","isShown","attr","uuid","directive","restrict","replace","transclude","size","controller","ngForm","rulesKey","avValOn","avValDebounce","avValInvalid","violations","init","form","record","count","violocationCount","reduce","sum","num","$setValidity","unrecord","reset","$setPristine","$submitted","$setSubmitted","setRulesKey","key","$log","$parse","AV_VAL","avValAdapter","priority","require","compile","pre","iEl","iAttrs","controllers","ruleFn","avValForm","error","$watch","_rulesKey","_oldRulesKey","avForm","info","$broadcast","REVALIDATE","post","fn","ngSubmit","off","ngClick","RESET","bind","SUBMITTED","$invalid","FAILED","preventDefault","stopImmediatePropagation","scroll","callback","$event","$apply","$attrs","avVal","$scope","$sniffer","ngModel","rule","placeholder","noEvent","createId","avId","setNgModel","setRule","updateModel","results","validationKeys","avResults","contraintName","isValid","avViolations","length","$error","value","indexOf","lastIndexOf","updateView","$dirty","avValShow","message","validate","validateModel","validateView","undefined","onDebounce","val","trim","isCheckbox","$setViewValue","checked","isRadio","is","type","splice","unbind","debounce","msie","cancel","link","attrs","avValField","parseInt","DEBOUNCE","isNumber","debounceAllowed","$parsers","$formatters","unshift","$viewValue","provider","config","showOnLoadHideDelay","set","$get","copy","NAME","AV_POPOVER","avPopoverConfig","listeners","name","ev","plugin","popover","showOnLoad","delay","avPopover","html","messages","CLASSES","SUCCESS","WARNING","ERROR","FEEDBACK","HELP","FORM_GROUP","NAVBAR","SELECTORS","CONTAINER","DATA_CONTAINER","CONTROLLER","AV_BOOTSTRAP_ADAPTER","$valid","parents","addClass","selector","join","target","siblings","warn","el","avValModel","navbarSelector","offset","each","outerHeight","$target","find","animate","scrollTop","top","DEFAULT","that","setAdapter","adapter","AV_VAL_ADAPTER","$injector","Adapter","adapterName","closeOnResize","dropdownAutoWidth","minimumResultsForSearch","AV_UI","AV_DROPDOWN","avDropdownConfig","match","contains","$eval","isRemoteMultiple","multiple","isDefined","query","queryFn","getId","tagName","toLowerCase","setRemoteViewValue","e","values","isArray","isObject","added","index","findIndex","matches","removed","setViewValue","getSelected","model","items","collection","item","valueFn","equals","locals","valueName","response","more","setValue","viewValue","selected","select2","getMultiSelected","indices","savedObject","temp","inputViewValues","$modelValue","isUndefined","correlationId","setValues","isEmpty","ngOptions","displayFn","keyName","$watchCollection","newVal","oldVal","$window","avDropdown","parent","prev","toggleClass","$pristine","ngFocus","ngBlur","classNames","className","split","i","_$render","$render","win","$observe","autoclose","todayHighlight","format","forceParse","ADD_ON_SELECTOR","DEFAULTS","MODELFORMAT","AV_DATEPICKER","avDatepickerConfig","setDate","findModel","$input","andSelf","modelToView","isoWrap","datepicker","DPGlobal","formatDate","wrapIsoDate","date","m","moment","toDate","viewToModel","parseFormat","utcDate","parseDate","localDate","_utc_to_local","modelFormat","avDatepicker","prop","focus","OK","BASE","SESSION","sessionTemplate","warningTemplate","setSessionTemplate","setWarningTemplate","AV_IDLE","AV_UI_IDLE","AvModal","$document","AvIdleNotifier","idle","initListeners","listener","IDLE_ACTIVE","showWarning","IDLE_INACTIVE","hideWarning","SESSION_TIMEOUT_ACTIVE","showSession","destroyListeners","disableBackDrop","onSessionTimeout","SESSION_TIMEOUT_REDIRECT","run","avIdleNotifier","phone","SSN","AV_MASK","maskType","inputmask","onSuccess","isAuthorized","onError","avUserAuthorizations","$attr","avHasPermission","permissions","words","isAnyAuthorized","getOptions","avAnalyticsUtils","avAnalytics","onEvent","properties","level","isExternalLink","stopPropagation","trackEvent","document","location","AV_ANALYTICS","childCtrl","parentCtrl","parentOptions","getProperties","eventType","avAnalyticsOn","requires","$provide","decorator","$delegate","originalLink","newLink","keys","apply","arguments","TEMPLATE","AvBreadcrumbsController","$state","getBreadcrumb","breadcrumbs","state","breadcrumb","parentState","getBreadcrumbs","current","$inject","avBreadcrumbs","AV_BREADCRUMBS","filter","pow","Math","floor","abs","log","round","number","precision","prec","base","unit","COLOR","DEFAULT_CLASS","SHOW_WHEN_ZERO","badgeDirective","AV_BADGE","color","showWhenZero","classes","AV_REMOVABLE_LABEL","removeValue","onRemove","removeLabel","disabled","LOADER","active","start","velocity","stagger","opacity","duration","complete","setTimeout","endAnimation","removeData","stop","AV_LOADER","avLoader","BLOCK","getLoaderController","blockId","triggerLoaderController","instance","loaderController","triggerInstance","origFn","loaderFn","modifyBlockInstances","origStartFn","origStopFn","startLoader","avModifications","AV_BLOCK","blockUIConfig","blockUI","autoBlock","origGetFn","avBlockUi","blockCount","TABS","TAB","TabsController","tabs","addTab","tab","selectTab","removeTab","newActiveIndex","selectedTab","onDeselect","onSelect","TabsDirective","AV_TABS","justified","tabType","vertical","padContent","TabDirective","heading","tabsController","transcludeFn","select","$parent","disable","TabPaneDirective","avTabPane","append","contents","node","DEFAULT_OPTIONS","limit","maxCached","loadMoreText","entryIdAttribute","apiParams","beforePageLoad","afterPageLoad","AvScrollPaginationService","registerInstance","instanceInterface","unregisterInstance","resetInstance","AV_SCROLL_PAGINATION","avScrollPaginationService","buildOptions","_options","lowOffset","highOffset","originalEntries","entries","updateButtonVisibilityFlags","showNext","totalCount","showPrev","loadEntries","prepend","block","avScrollPagination","params","apiResource","responseData","getResponseData","resourceId","addEntries","responseKey","nestedData","noData","oldEntries","diff","trackedElementId","slice","autoscroll","trackedElement","trackedElementTop","newScrollTop","loadPrev","loadNext"],"mappings":"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","file":"availity-angular-ui.min.js","sourcesContent":["/**\n * availity-angular v1.8.1 -- January-20\n * Copyright 2016 Availity, LLC \n */\n\n// Source: /lib/ui/index.js\n\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity || {};\n\n  availity.MODULE_UI = 'availity.ui';\n  availity.ui = angular.module(availity.MODULE_UI, ['ng', 'ngSanitize']);\n\n  availity.ui.constant('AV_UI', {\n    // jscs: disable\n    NG_OPTIONS: /^\\s*([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?(?:\\s+group\\s+by\\s+([\\s\\S]+?))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+([\\s\\S]+?)(?:\\s+track\\s+by\\s+([\\s\\S]+?))?$/\n    // jscs: enable\n  });\n\n  if(typeof module !== 'undefined' && module.exports) {\n    module.exports = availity;\n  }\n\n\n})(window);\n\n// Source: /lib/ui/templates/template.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.factory('avTemplateCache', function($q, $templateCache, $http) {\n\n    return {\n\n      get: function(options) {\n\n        var valid = !options.template || !options.templateUrl;\n\n        if(!valid) {\n          throw new Error('Either options.template or options.templateUrl must be defined for avTemplateCache');\n        }\n\n        return options.template ? $q.when(options.template) :\n          $http.get(options.templateUrl, {cache: $templateCache})\n            .then(function(result) {\n              return result.data;\n            });\n      }\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/modal/modal.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_MODAL', {\n\n    OPTIONS: {\n      scope: null,\n      templateUrl: null,\n      template: null,\n      id: null,\n      container: null,\n\n      // Bootstrap defaults\n      keyboard: true,\n      backdrop: true,\n      show: false,\n      remote: false\n    },\n\n    EVENTS: {\n      SHOW: 'show.av.modal',\n      SHOWN: 'shown.av.modal',\n      HIDE: 'hide.av.modal',\n      HIDDEN: 'hidden.av.modal'\n    },\n\n    NAMESPACE: {\n      MODAL: 'bs.modal'\n    },\n\n    BS_EVENTS:  {\n      SHOW: 'show.bs.modal',\n      SHOWN: 'shown.bs.modal',\n      HIDE: 'hide.bs.modal',\n      HIDDEN: 'hidden.bs.modal'\n    },\n\n    TEMPLATES: {\n      MODAL: 'ui/modal/modal-tpl.html'\n    }\n  });\n\n  availity.ui.factory('avModalManager', function() {\n\n    var AvModalManager = function() {\n      this.instances = [];\n    };\n\n    var proto = AvModalManager.prototype;\n\n    proto.add = function(id) {\n      this.instances.push(id);\n    };\n\n    proto.remove = function(id) {\n      this.instances = _.without(this.instances, id);\n    };\n\n    proto.closeAll = function() {\n\n      _.forEach(this.instances, function(id) {\n\n        var $el = $('#' + id);\n\n        if(!$el) {\n          return;\n        }\n\n        var bsModal = $el.data('bs.modal');\n        if(bsModal) {\n          bsModal.removeBackdrop();\n          bsModal.$body.removeClass('modal-open');\n          bsModal.resetAdjustments();\n          bsModal.resetScrollbar();\n        }\n\n        var avModal = $el.data('AvModal');\n        if(avModal) {\n          avModal.destroy();\n        }\n\n      });\n    };\n\n    return new AvModalManager();\n\n  });\n\n  var ModalFactory = function($rootScope, $timeout, $compile, AV_MODAL, avTemplateCache, $q, avModalManager) {\n\n    var Modal = function(options) {\n\n      var self = this;\n\n      this.templateDefer = $q.defer();\n      this.templatePromise = this.templateDefer.promise;\n\n      this.options = angular.extend({}, AV_MODAL.OPTIONS, {scope: $rootScope.$new()}, options);\n\n      avTemplateCache.get(options).then(function(template) {\n        self.options.template = template;\n        self._build();\n      });\n\n    };\n\n    Modal.create = function(options) {\n      return new Modal(options);\n    };\n\n    var proto = Modal.prototype;\n\n    proto._build = function() {\n\n      var self = this;\n\n      var scope = this.options.scope;\n      this.$element = angular.element(this.options.template);\n\n      this._createId();\n\n      this._scope();\n\n      $compile(this.$element)(scope);\n\n      $timeout(function() {\n        self._init();\n      }, 0, true);\n\n      // Append to container or <body>\n      this.options.container ? this.$element.appendTo(this.options.container) : this.$element.appendTo('body');\n\n    };\n\n    proto._init = function() {\n\n      this.$element.data('AvModal', this);\n\n      this.templateDefer.resolve(true);\n\n      // Initialize Bootstrap jQuery plugin\n      this.$element.modal({\n        'backdrop': this.options.backdrop,\n        'keyboard': this.options.keyboard,\n        'show': this.options.show,\n        'remote': this.options.remote\n      });\n\n      this._listeners();\n    };\n\n    // Add helpers to scope so clients can call internal methods\n    proto._scope = function() {\n\n      var self = this;\n      var scope = this.options.scope;\n\n      scope.modalShow = function() {\n        return self.show();\n      };\n\n      scope.modalToggle = function() {\n        return self.toggle();\n      };\n\n      scope.modalHide = function() {\n        return self.hide();\n      };\n\n    };\n\n    proto._listeners = function() {\n\n      var self = this;\n      var scope = this.options.scope;\n      var $element = this.$element;\n\n      this.animationShowDefer = $q.defer();\n      this.animationHideDefer = $q.defer();\n\n      $element.on(AV_MODAL.BS_EVENTS.SHOW, function(event) {\n        scope.$emit(AV_MODAL.EVENTS.SHOW, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.SHOWN, function(event) {\n\n        if(angular.isFunction(self.options.onShown)) {\n          self.options.onShown();\n        }\n\n        self.animationShowDefer.resolve(true);\n\n        scope.$emit(AV_MODAL.EVENTS.SHOWN, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.HIDE, function(event) {\n        scope.$emit(AV_MODAL.EVENTS.HIDE, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.HIDDEN, function(event) {\n\n        if(angular.isFunction(self.options.onHidden)) {\n          self.options.onHidden.call(this);\n        }\n\n        self.animationHideDefer.resolve(true);\n        scope.$emit(AV_MODAL.EVENTS.HIDDEN, event, self);\n\n        scope.$evalAsync(function() {\n          self.destroy();\n        });\n\n      });\n\n      // Garbage collection\n      scope.$on('$destroy', function() {\n        avModalManager.remove(self._id);\n        self.destroy();\n      });\n\n    };\n\n    proto.show = function() {\n\n      var self = this;\n      this.animationShowDefer = $q.defer();\n\n      this.templatePromise.then(function() {\n        self.isShown() ? self.animationShowDefer.resolve(true) : self.$element.modal('show');\n      });\n\n      return this.animationShowDefer.promise;\n\n    };\n\n    proto.hide = function() {\n\n      var self = this;\n      this.animationHideDefer = $q.defer();\n\n      this.templatePromise.then(function() {\n        !self.isShown() ? self.animationHideDefer.resolve(true) : self.$element.modal('hide');\n      });\n\n      return this.animationHideDefer.promise;\n    };\n\n    proto.isShown = function() {\n      return this.$element.data(AV_MODAL.NAMESPACE.MODAL).isShown;\n    },\n\n    proto.toggle = function() {\n\n      var self = this;\n\n      return this.templatePromise.then(function() {\n        return self.isShown() ? self.hide() : self.show();\n      });\n\n    };\n\n    proto.destroy = function() {\n\n      var self = this;\n\n      return this.templatePromise.then(function() {\n        self.$element.data('AvModal', null);\n        self.$element.remove();\n      });\n\n    };\n\n    proto._createId = function() {\n      // Create a unique id for the modal if not present or passed in via options\n      var id = this.$element.attr('id');\n      if(!id) {\n        // Get id from options or create a unique id\n        id = this.options.id ? this.options.id : availity.uuid('av-modal-id');\n        this.$element.attr('id', id);\n      }\n\n      this._id = id;\n\n      avModalManager.add(id);\n    };\n\n    return Modal;\n  };\n\n  availity.ui.factory('AvModal', ModalFactory);\n\n  availity.ui.directive('avModal', function(AV_MODAL) {\n    return {\n      restrict: 'A',\n      replace: true,\n      transclude: true,\n      scope: {\n        size: '@'\n      },\n      templateUrl: AV_MODAL.TEMPLATES.MODAL\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/validation/form.js\n/**\n * 1. All fields should be pristine on first load\n * 2. If field is modified an invalid the field should be marked with an error\n *\n */\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('avValFormController', function() {\n\n    this.ngForm  = null;\n    this.rulesKey = null;\n    this.avValOn = null;\n    this.avValDebounce = null;\n    this.avValInvalid = false;\n\n    // Object that stores the unique id (key) and violation count (value) of all the form fields\n    //\n    // EX:\n    //\n    // {\n    //  avVal001: 0\n    //  avVal002: 2\n    //  avVal003: 1\n    // }\n    this.violations = {};\n\n    this.init = function(form) {\n      this.ngForm = form;\n    };\n\n    /**\n     * Records id of the form field and number of violations\n     * @param  {[type]} id    [description]\n     * @param  {[type]} count [description]\n     * @return {[type]}       [description]\n     */\n    this.record = function(id, count) {\n      this.violations[id] = count;\n\n      var violocationCount = _.reduce(this.violations, function(sum, num) {\n        return sum + num;\n      }, 0);\n\n      this.ngForm.$setValidity('av', violocationCount === 0);\n    };\n\n    this.unrecord = function(id) {\n      if(id && this.violations[id]) {\n        delete this.violations[id];\n      }\n    };\n\n    this.reset = function() {\n      this.ngForm.$setPristine();\n      this.ngForm.$submitted = false;\n    };\n\n    this.$setSubmitted = function() {\n      this.ngForm.$submitted = true;\n    };\n\n    this.setRulesKey = function(key) {\n      this.rulesKey = key;\n    };\n\n  });\n\n  // form.$error = {};\n  // form.$$success = {};\n  // form.$pending = undefined;\n  // form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);\n  // form.$dirty = false;\n  // form.$pristine = true;\n  // form.$valid = true;\n  // form.$invalid = false;\n  // form.$submitted = false;\n\n  availity.ui.directive('avValForm', function($log, $timeout, $parse, AV_VAL, avValAdapter, $rootScope) {\n    return {\n      restrict: 'A',\n      priority: 10,\n      require: ['form', 'avValForm'],\n      controller: 'avValFormController',\n      compile: function() {\n        return {\n          pre: function(scope, iEl, iAttrs, controllers) {\n\n            var ruleFn = $parse(iAttrs.avValForm);\n            var rulesKey = ruleFn(scope);\n            rulesKey = rulesKey || iAttrs.avValForm; // interpolated rule from scope || fixed string\n\n            if(!rulesKey) {\n              $log.error('avValForm requires a rules key in order to run the proper validation rules.');\n              return;\n            }\n\n            scope.$watch(ruleFn, function(_rulesKey, _oldRulesKey) {\n              if(_rulesKey) {\n                avForm.setRulesKey(_rulesKey);\n\n                if(_rulesKey !== _oldRulesKey) {\n                  $timeout(function() {\n                    $log.info('avValForm revalidate');\n                    $rootScope.$broadcast(AV_VAL.EVENTS.REVALIDATE);\n                  });\n                }\n\n              }\n\n            });\n\n            var ngForm = controllers[0];\n            var avForm = controllers[1];\n\n            // Allow form attributes to define the validation behavior of the form fields\n            // inside it.  If `av-val-on` or `av-val-debounce` are on the form then all form\n            // fields inside the form would inherit this behavior.\n            avForm.avValOn = iAttrs.avValOn || null;\n            avForm.avValDebounce = iAttrs.avValDebounce || null;\n            // Allows fields to update with invalid data for dirty form saving\n            avForm.avValInvalid = iAttrs.avValInvalid || false;\n\n            avForm.init(ngForm);\n            avForm.setRulesKey(rulesKey);\n\n          },\n          post: function(scope, iEl, iAttrs, controllers) {\n\n            iEl.attr('novalidate', 'novalidate');  // prevent HTML5 validation from kicking in\n\n            // Disable ng-submit or ng-click handlers and store the function to call for submitting\n            var fn;\n            if(iAttrs.ngSubmit) {\n              // Disable ng-submit event\n              iEl.off('submit');\n              fn = $parse(iAttrs.ngSubmit, /* expensiveChecks */ true);\n            }else if(iAttrs.ngClick) {\n              // Disable ng-click event\n              iEl.off('click');\n              fn = $parse(iAttrs.ngClick, /* expensiveChecks */ true);\n            }\n\n            var ngForm = controllers[0];\n            var avForm = controllers[1];\n\n            scope.$on(AV_VAL.EVENTS.RESET, function () {\n              avForm.reset();\n            });\n\n            iEl.bind('submit', function(event) {\n\n              scope.$broadcast(AV_VAL.EVENTS.SUBMITTED);\n              avForm.$setSubmitted();\n\n              if(ngForm.$invalid) {\n\n                scope.$broadcast(AV_VAL.EVENTS.FAILED);\n\n                $log.info('avValForm invalid.  preventing default submit action');\n\n                event.preventDefault();\n                event.stopImmediatePropagation();\n                scope.$broadcast(event);\n\n                avValAdapter.scroll(iEl);\n                return;\n              }\n\n              ngForm.$setPristine();\n\n              if(!fn) {\n                return;\n              }\n\n              var callback = function() {\n                fn(scope, {$event:event});\n              };\n\n              scope.$apply(callback);\n\n            });\n\n          }\n        };\n      }\n    };\n  });\n\n\n})(window);\n\n// Source: /lib/ui/validation/field.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('AvValFieldController', function($element, avValAdapter, $attrs, avVal, $log, $timeout, $scope, $sniffer) {\n\n    this.ngModel = null;\n    this.rule = null;\n    this.avValForm = null;\n    this.avValInvalid = false;\n\n    var self = this;\n\n    var placeholder = $element[0].placeholder;\n    var noEvent = {};\n\n    this.createId = function() {\n      this.ngModel.avId = availity.uuid('avVal');\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.setRule = function(rule) {\n      this.rule = rule;\n    };\n\n    this.avValForm = function(avValForm) {\n      this.avValForm = avValForm;\n    };\n\n    this.updateModel = function(results) {\n\n      var self = this;\n      var validationKeys = [];\n\n      this.ngModel.avResults = results;\n\n      // set state for each violation\n      angular.forEach(results.violations, function (result) {\n        var key = 'av-' + result.contraintName;\n        validationKeys.push(key);\n        self.ngModel.$setValidity(key, result.valid);\n      });\n\n      // set overall state for validation state\n      this.ngModel.$setValidity('av', this.ngModel.avResults.isValid);\n\n      // store violations\n      this.ngModel.avViolations = this.ngModel.avResults.violations;\n\n      // record the id and violation count in the av-form controller.  this determines if the form is\n      // valid if sum of violations for all form inputs === zero\n      this.avValForm.record(this.ngModel.avId, this.ngModel.avResults.violations.length);\n\n      // remove violation keys that are no longer falsy\n      angular.forEach(this.ngModel.$error, function(value, key) {\n\n        if(_.indexOf(validationKeys, key) === -1 && key.lastIndexOf('av-', 0) === 0) {\n          self.ngModel.$setValidity(key, true);\n        }\n      });\n    };\n\n    this.updateView = function() {\n      if(this.ngModel.$dirty || $scope.avValShow) {\n        avValAdapter.element($element, this.ngModel, this.ngModel.avResults.isValid);\n        avValAdapter.message($element, this.ngModel);\n      }\n    };\n\n    this.validate = function(value) {\n\n      $log.info('validating value [' + value + ']');\n\n      var rulesKey = self.avValForm.rulesKey;\n      var results = avVal.validate(rulesKey, $element, value, self.rule);\n\n      // validate function is called within the context of angular so fn.call and set the context\n      // to \"this\"\n      self.updateModel.call(self, results);\n      self.updateView.call(self);\n\n      return results;\n    };\n\n    this.validateModel = function(value) {\n\n      self.validate(value, true);\n      return value;\n\n    };\n\n    this.validateView = function(value) {\n\n      var results = self.validate(value);\n\n      if(self.avValForm.avValInvalid || self.avValInvalid) {\n        // allows invalid data from view to update model for dirty saving\n        return value;\n      }\n\n      // prevent invalid data from view to update model\n      return results.isValid ? value : undefined;\n\n    };\n\n    this.onDebounce = function() {\n\n      var value = $element.val().trim();\n\n      if(this.isCheckbox()) {\n        this.ngModel.$setViewValue($element[0].checked);\n      } else if(this.isRadio()) {\n        this.ngModel.$setViewValue($attrs.value);\n      }else {\n        this.ngModel.$setViewValue(value);\n      }\n\n    };\n\n    this.isRadio = function() {\n      return $element.is('input') && $attrs.type === 'radio';\n    };\n\n    this.isCheckbox = function() {\n      return $element.is('input') && $attrs.type === 'checkbox';\n    };\n\n    this.reset = function() {\n\n      var violations = this.ngModel.avResults.violations;\n      violations.splice(0, violations.length);\n\n      avValAdapter.message($element, this.ngModel);\n      avValAdapter.reset($element);\n\n    };\n\n    this.event = function(event, avValDebounce) {\n\n      var self = this;\n\n      $element.unbind('input');\n\n      var debounce;\n\n      $element.on(event, function() {\n\n        // https://github.com/angular/angular.js/blob/v1.2.27/src/ng/directive/input.js#L508\n        if($sniffer.msie <= 11 && (event || noEvent).type === 'input' && $element[0].placeholder !== placeholder) {\n          placeholder = $element[0].placeholder;\n          return;\n        }\n\n        $timeout.cancel(debounce);\n        debounce = $timeout(function() {\n          $scope.$apply(function() {\n            self.onDebounce();\n          });\n        }, avValDebounce);\n\n      });\n\n    };\n\n  });\n\n  // Events:\n  //\n  //  click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown\n  //  keyup keypress submit focus blur copy cut paste\n  availity.ui.directive('avValField', function($log, $timeout, avVal, avValAdapter, AV_VAL) {\n    return {\n      restrict: 'A',\n      controller: 'AvValFieldController',\n      require: ['^avValForm', 'ngModel', 'avValField'],\n      scope: {\n        avValDebounce: '@?',\n        avValOn: '@?',\n        avValShow: '=?'\n      },\n      link: function(scope, element, attrs, controllers) {\n\n        var rule = attrs.avValField;\n        var avValForm = controllers[0];\n        var ngModel = controllers[1];\n        var avValField = controllers[2];\n\n        var avValOn = scope.avValOn || avValForm.avValOn || 'input';\n\n        if(!ngModel && !rule) {\n          $log.error('avValField requires ngModel and a validation rule to run.');\n          return;\n        }\n\n        // Allows fields to update with invalid data for dirty form saving\n        avValField.avValInvalid = attrs.avValInvalid || false;\n\n        // CACHE THE MODEL\n        avValField.setNgModel(ngModel);\n\n        avValField.avValForm(avValForm);\n\n        avValField.setRule(rule);\n\n        avValField.createId();\n\n        // DEBOUNCE\n        var avValDebounce = parseInt(scope.avValDebounce || (avValForm.avValDebounce || AV_VAL.DEBOUNCE), 10);\n        avValDebounce = _.isNumber(avValDebounce) ? avValDebounce : AV_VAL.DEBOUNCE;\n\n        var debounceAllowed = !avValField.isRadio() && !avValField.isCheckbox() && avValOn !== 'blur';\n\n        if(!debounceAllowed) {\n          avValDebounce = 0;\n        }\n\n        // EVENT LISTENER\n        avValField.event(avValOn, avValDebounce);\n\n        // (view to model)\n        ngModel.$parsers.push(avValField.validateView);\n\n        // (model to view) - added to beginning of array because formatters\n        // are processed in reverse order thus allowing the model to be transformed\n        // before the validation framework check for validity.\n        ngModel.$formatters.unshift(avValField.validateModel);\n\n        scope.$on(AV_VAL.EVENTS.REVALIDATE, function() {\n          avValField.validate(ngModel.$viewValue);\n        });\n\n        // SUBMITTED EVENT\n        scope.$on(AV_VAL.EVENTS.SUBMITTED, function() {\n          ngModel.$dirty = true;\n          avValField.validate(ngModel.$viewValue);\n        });\n\n        // - Removes all errors on page,\n        // - does not reset view or model values.  This is to be handled by the app.\n        scope.$on(AV_VAL.EVENTS.RESET, function () {\n          avValField.reset();\n        });\n\n        scope.$on('$destroy', function () {\n          avValForm.unrecord(ngModel.avId);\n        });\n\n      }\n    };\n  });\n\n\n})(window);\n\n// Source: /lib/ui/popover/popover.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.provider('avPopoverConfig', function() {\n\n    var config = {\n      showOnLoadHideDelay: 10000\n    };\n\n    this.set = function(options) {\n      angular.extend(config, options);\n    };\n\n    this.$get = function() {\n      return angular.copy(config);\n    };\n  });\n\n  availity.ui.constant('AV_POPOVER', {\n    NAME: 'bs.popover'\n  });\n\n  availity.ui.controller('AvPopoverController', function($element, $scope, AV_POPOVER, $timeout, avPopoverConfig) {\n    this.options = angular.extend({}, avPopoverConfig);\n\n    this.listeners = function() {\n\n      var self = this;\n\n      angular.forEach(['show', 'shown', 'hide', 'hidden'], function(name) {\n        $element.on(name + '.bs.popover', function(ev) {\n          $scope.$emit('av:popover:' + name, ev);\n        });\n      });\n\n      $scope.$on('destroy', function() {\n        self.destroy();\n      });\n    };\n\n    this.plugin = function() {\n      return $element.data(AV_POPOVER.NAME);\n    };\n\n    this.show = function() {\n      $element.popover('show');\n    };\n\n    this.hide = function() {\n      $element.popover('hide');\n    };\n\n    this.toggle = function() {\n      $element.popover('toggle');\n    };\n\n    this.destroy = function() {\n      $element.popover('destroy');\n    };\n\n\n    this.init = function() {\n\n      this.listeners();\n\n      if($scope.showOnLoad) {\n\n        this.show();\n\n        if($scope.delay && $scope.delay.hide) {\n          $timeout(this.hide, $scope.delay.hide, false);\n          return;\n        }\n        // If no delay is found or cannot be parsed, set a default timeout so that the popover doesn't stick around forever\n        $timeout(this.hide, this.options.showOnLoadHideDelay, false);\n      }\n    };\n\n\n  });\n\n  availity.ui.directive('avPopover', function() {\n    return {\n      restrict: 'A',\n      controller: 'AvPopoverController',\n      scope: {\n        showOnLoad: '=',\n        delay: '='\n      },\n      link: function(scope, element, attrs, avPopover) {\n\n        var options = {};\n\n        scope.$evalAsync(function() {\n          element.popover(angular.extend({}, options, {\n            html: true\n          }));\n          avPopover.init();\n        });\n      }\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/validation/container.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('avValContainerController', function($scope, $timeout) {\n\n    this.message = function(ngModel) {\n\n      var message = null;\n      if(ngModel.avResults.violations.length && ngModel.avResults.violations[0].message) {\n        message = ngModel.avResults.violations[0].message;\n      }else {\n        message = null;\n      }\n\n      // $timeout is needed to update the UI from $broadcast events\n      $timeout(function() {\n        $scope.messages.message = message;\n      });\n\n    };\n\n  });\n\n  availity.ui.directive('avValContainer', function() {\n    return {\n      restrict: 'A',\n      controller: 'avValContainerController',\n      template: '<p class=\"help-block\" data-ng-bind-html=\"messages.message\"></p>',\n      replace: true,\n      scope: {\n\n      },\n      link: function(scope) {\n        scope.messages = _.extend({}, scope.messages, { message: null, id: null });\n      }\n    };\n  });\n\n\n})(window);\n\n// Source: /lib/ui/validation/adapter-bootstrap.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BOOTSTRAP_ADAPTER', {\n    CLASSES: {\n      SUCCESS: 'has-success',\n      WARNING: 'has-warning',\n      ERROR: 'has-error',\n      FEEDBACK: 'has-feedback',\n      HELP: 'help-block',\n      FORM_GROUP: '.form-group:first',\n      NAVBAR: 'navbar-fixed-top'\n    },\n    SELECTORS: {\n      CONTAINER: 'container-id',\n      DATA_CONTAINER: 'data-container-id'\n    },\n    CONTROLLER: '$avValContainerController'\n  });\n\n  availity.ui.factory('avValBootstrapAdapter', function(AV_BOOTSTRAP_ADAPTER, $timeout, $log) {\n\n    return {\n\n      element: function(element, ngModel) {\n        if(ngModel.$valid) {\n          element.parents(AV_BOOTSTRAP_ADAPTER.CLASSES.FORM_GROUP).removeClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n        }else {\n          element.parents(AV_BOOTSTRAP_ADAPTER.CLASSES.FORM_GROUP).addClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n        }\n      },\n\n      reset: function(element) {\n        element.parents(AV_BOOTSTRAP_ADAPTER.CLASSES.FORM_GROUP).removeClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n      },\n\n      message: function(element, ngModel) {\n\n        var selector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.HELP\n        ].join('');\n\n        var $el = $(element);\n\n        var target = $el.attr(AV_BOOTSTRAP_ADAPTER.SELECTORS.CONTAINER);\n        target = target || $el.attr(AV_BOOTSTRAP_ADAPTER.SELECTORS.DATA_CONTAINER);\n        // default to siblings\n        target = target ? $('#' + target) : $el.siblings(selector);\n\n        if(target.length === 0) {\n          $log.warn('avValBootstrapAdapter could not find validation container for {0}', [element]);\n          return;\n        }\n\n        var el = target[0];\n        $el = angular.element(el);\n        var avValModel = $el.data(AV_BOOTSTRAP_ADAPTER.CONTROLLER); // get the av val message controller\n        if(avValModel) {\n          avValModel.message(ngModel);\n        }\n      },\n\n      scroll: function(form) {\n\n        // Bootstrap fixed navbars causes bad scroll-to offsets so find them all\n        var navbarSelector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.NAVBAR\n        ].join('');\n\n        // Add up all the heights to find the true offset\n        var offset = 0;\n        $(navbarSelector).each(function() {\n          offset += $(this).outerHeight();\n        });\n\n        var selector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR,\n          ':first'\n        ].join('');\n\n        var $target = $(form).find(selector);\n        $timeout(function() {\n          // scroll to offset top of first error minus the offset of the navbars\n          $('body, html').animate({scrollTop: $target.offset().top - offset}, 'fast');\n        }, 0, false);\n      }\n    };\n  });\n\n\n})(window);\n\n// Source: /lib/ui/validation/adapter.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_VAL_ADAPTER', {\n    DEFAULT: 'avValBootstrapAdapter'\n  });\n\n  availity.ui.provider('avValAdapter', function() {\n\n    var that = this;\n\n    this.setAdapter = function(adapter) {\n      this.adapter = adapter;\n    };\n\n    this.$get = function(AV_VAL_ADAPTER, $injector) {\n\n      var Adapter = function() {\n        var adapterName = that.adapter || AV_VAL_ADAPTER.DEFAULT;\n        this.adapter = $injector.get(adapterName);\n      };\n\n      var proto = Adapter.prototype;\n\n      proto.element = function(element, ngModel) {\n        this.adapter.element(element, ngModel);\n      };\n\n      proto.reset = function(element) {\n        this.adapter.reset(element);\n      };\n\n      proto.message = function(element, ngModel) {\n        this.adapter.message(element, ngModel);\n      },\n\n      proto.scroll = function(form) {\n        this.adapter.scroll(form);\n      };\n\n      return new Adapter();\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/dropdown/dropdown.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.provider('avDropdownConfig', function() {\n    var config = {\n      closeOnResize: true,\n      dropdownAutoWidth: true,\n      minimumResultsForSearch: 5\n    };\n\n    this.set = function(options) {\n      angular.extend(config, options);\n    };\n\n    this.$get = function() {\n      return angular.copy(config);\n    };\n  });\n\n  availity.ui.constant('AV_DROPDOWN', {\n    OPTIONS: [\n      'width',\n      'minimumInputLength',\n      'maximumInputLength',\n      'minimumResultsForSearch',\n      'maximumSelectionSize',\n      'placeholderOption',\n      'separator',\n      'allowClear',\n      'multiple',\n      'closeOnSelect',\n      'openOnEnter',\n      'id',\n      'matcher',\n      'sortResults',\n      'formatSelection',\n      'formatResult',\n      'formatResultCssClass',\n      'formatNoMatches',\n      'formatSearching',\n      'formatAjaxError',\n      'formatInputTooShort',\n      'formatInputTooLong',\n      'formatSelectionTooBig',\n      'formatLoadMore',\n      'createSearchChoice',\n      'createSearchChoicePosition',\n      'initSelection',\n      'tokenizer',\n      'tokenSeparators',\n      'query',\n      'ajax',\n      'data',\n      'tags',\n      'containerCss',\n      'containerCssClass',\n      'dropdownCss',\n      'dropdownCssClass',\n      'dropdownAutoWidth',\n      'adaptContainerCssClass',\n      'adaptDropdownCssClass',\n      'escapeMarkup',\n      'selectOnBlur',\n      'loadMorePadding',\n      'nextSearchTerm',\n      'correlationId'\n    ]\n  });\n\n\n  availity.ui.controller('AvDropdownController', function($element, $attrs, AV_UI, AV_DROPDOWN, avDropdownConfig, $log, $scope, $timeout, $parse) {\n\n    var self = this;\n    this.options = {};\n    this.match = null;\n    this.ngModel = null;\n\n    this.init = function() {\n\n      self.options = angular.extend({}, avDropdownConfig);\n\n      _.forEach($attrs, function(value, key) {\n        if(_.contains(AV_DROPDOWN.OPTIONS, key.replace('data-', ''))) {\n          self.options[key] = $scope.$eval(value);\n        }\n      });\n\n      if(this.isRemoteMultiple()) {\n        self.options.multiple = angular.isDefined($attrs.multiple);\n      }\n\n      self.multiple = angular.isDefined($attrs.multiple);\n\n      if(self.options.query) {\n\n        self.queryFn = self.options.query;\n        // Function used to query results for the search term.\n        self.options.query = self.query;\n        // Function used to get the id from the choice object or a string representing the key under which the id is stored.\n        self.options.id = self.getId;\n      }\n\n    };\n\n    this.isRemoteMultiple = function() {\n      if(angular.isDefined($attrs.multiple) && $element.get(0).tagName.toLowerCase() === 'input') {\n        return true;\n      }\n      return false;\n    };\n\n    this.setRemoteViewValue = function(e) {\n\n      var values = this.ngModel.$viewValue;\n\n      if(!angular.isArray(values) || !angular.isObject(values)) {\n        values = [];\n      }\n\n      if(e.added) {\n        // Adding to collection\n        values.push(e.added);\n      } else {\n        // Removing from collection\n        var index = _.findIndex(values, function(value) {\n          return  _.matches(e.removed)(value);\n        });\n        values.splice(index, 1);\n      }\n\n      this.ngModel.$setViewValue(values);\n\n    };\n\n    this.setViewValue = function(e) {\n      this.ngModel.$setViewValue(e.added);\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.getSelected = function(model) {\n\n      if(self.options.query) {\n        return 0;\n      }\n\n      var items = this.collection($scope);\n\n      var index = _.findIndex(items, function(item) {\n        if (!self.valueFn) {\n          return angular.equals(item, model);\n        } else {\n          var locals = {};\n          locals[self.valueName] = item;\n          var value = self.valueFn($scope, locals);\n          return angular.equals(value, model);\n        }\n      });\n\n      return index;\n\n    };\n\n    // Result:\n    //\n    // {\n    //   \"code\": \"252Y00000X\",\n    //   \"value\": \"AGENCIES,EARLY INTERVENTION PROVIDER AGENCY,NOT APPLICABLE|Agency\",\n    //   \"id\": \"252Y00000X\"\n    // }\n    this.getId = function(result) {\n      return result.id;\n    };\n\n    // Wrapper around the query function for Select2.  When the promise resolves\n    // the callback\n    this.query = function(options) {\n\n      self.queryFn(options).then(function(response) {\n\n        // Callback function that should be called with the result object. The result object:\n        //\n        // result.results (object) - Array of result objects. The default renderers\n        //    expect objects with id and text keys. The id property is required,\n        //    even if custom renderers are used. The object may also contain a children\n        //    key if hierarchical data is displayed. The object may also contain a disabled\n        //    boolean property indicating whether this result can be selected.\n        //\n        // result.more (boolean) - true if more results are available for the current\n        //    search term.\n        //\n        // results.context (object) - A user-defined object that should be made available\n        //    as the context parameter to the query function on subsequent queries to load\n        //    more result pages for the same search term. See the description of\n        //    options.context parameter.\n        options.callback({more: response.more, results: response.results});\n      });\n    };\n\n    this.setValue = function() {\n\n      var viewValue = self.ngModel.$viewValue;\n      var selected = null;\n      if(viewValue) {\n        selected = this.getSelected(viewValue);\n      }\n\n      // var apply = scope.$evalAsync || $timeout;\n      $timeout(function() {\n        $element\n          .select2('val',  (selected === null || selected === 'undefined') ? '' : selected); // null === '' for Select2\n      });\n    };\n\n    this.getMultiSelected = function(viewValue) {\n\n      var indices = [];\n\n      if($element.get(0).tagName.toLowerCase() !== 'input') {\n        var options = this.collection($scope);\n\n        _.each(viewValue, function(savedObject) {\n          var index = _.findIndex(options, function(value) {\n            var temp = angular.copy(savedObject); // remove hashkeys for comparison\n            return _.matches(temp)(value);\n          });\n          indices.push(index);\n        });\n\n      } else {\n\n        var inputViewValues = this.ngModel.$modelValue;\n\n        _.each(inputViewValues, function(savedObject) {\n\n          if(_.isUndefined(savedObject.id) ) {\n\n            if(savedObject.id || savedObject[self.options.correlationId]) {\n\n              savedObject.id = savedObject[self.options.correlationId];\n\n            } else {\n\n              throw new Error('dropdown list must have a id or a alternative value to use as a id');\n            }\n\n          }\n\n        });\n      }\n\n      if(indices.length > 0) {\n        viewValue = indices;\n      }\n\n      return viewValue;\n\n    };\n\n    this.setValues = function() {\n\n      var viewValue = self.ngModel.$viewValue;\n\n      if(!angular.isArray(viewValue)) {\n        viewValue = [];\n      }\n\n      if(!_.isEmpty(viewValue) && _.isObject(viewValue[0])) {\n        viewValue = this.getMultiSelected(viewValue);\n      }\n\n      $timeout(function() {\n        $element\n          .select2('val', viewValue);\n      });\n    };\n\n    this.ngOptions = function() {\n\n      this.match = $attrs.ngOptions.match(AV_UI.NG_OPTIONS);\n      if(!this.match) {\n        throw new Error('Invalid ngOptions for avDropdown');\n      }\n      // AV_UI.NG_OPTIONS regex will parse into arrays like below:\n      //\n      // 0: \"state.name for state in states\"\n      // 1: \"state.name\"\n      // 2: undefined\n      // 3: undefined\n      // 4: \"state\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"states\"\n      // 8: undefined\n      //\n      // 0: \"state.id as state.name for state in states\"\n      // 1: \"state.id\"\n      // 2: \"state.name\"\n      // 3: undefined\n      // 4: \"state\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"states\"\n      // 8: undefined\n      //\n      // 0: \"state.name for state in states track by state.id\"\n      // 1: \"state.name\"\n      // 2: undefined\n      // 3: undefined\n      // 4: \"state\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"states\"\n      // 8: \"state.id\"\n      //\n      // 0: \"person.fullName as (person.lastName + ', ' + person.firstName) for person in feeScheduleModel.persons\"\n      // 1: \"person.fullName\"\n      // 2: \"(person.lastName + ', ' + person.firstName)\"\n      // 3: undefined\n      // 4: \"person\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"feeScheduleModel.persons\"\n      // 8: undefined\n      //\n      this.displayFn = $parse(this.match[2] || this.match[1]); // this is the function to retrieve the text to show as\n      this.collection = $parse(this.match[7]);\n      this.valueName = this.match[4] || this.match[6];\n      this.valueFn = $parse(this.match[2] ? this.match[1] : this.valueName);\n      this.keyName = this.match[5];\n\n      $scope.$watchCollection(this.collection, function(newVal, oldVal) {\n        if(angular.equals(newVal, oldVal)) {\n          return;\n        }\n\n        self.setValue();\n\n      }, true);\n\n    };\n  });\n\n  availity.ui.directive('avDropdown', function($timeout, $log, $window) {\n\n    return {\n      restrict: 'A',\n      require: ['ngModel', 'avDropdown'],\n      controller: 'AvDropdownController',\n      link: function(scope, element, attrs, controllers) {\n        var ngModel = controllers[0];\n        var avDropdown = controllers[1];\n\n        avDropdown.setNgModel(ngModel);\n        avDropdown.init();\n\n        if(attrs.ngOptions ) {\n          avDropdown.ngOptions();\n        }\n\n        ngModel.$parsers.push(function(value) {\n          var parent = element.prev();\n          parent\n            .toggleClass('ng-invalid', !ngModel.$valid)\n            .toggleClass('ng-valid', ngModel.$valid)\n            .toggleClass('ng-invalid-required', !ngModel.$valid)\n            .toggleClass('ng-valid-required', ngModel.$valid)\n            .toggleClass('ng-dirty', ngModel.$dirty)\n            .toggleClass('ng-pristine', ngModel.$pristine);\n          return value;\n        });\n\n        element.on('change', function(e) {\n\n          // special case since the ajax handling doesn't bind to the model correctly\n          // this has to do with select2 (v3.5.2) using a hidden field instead of a select for ajax\n          if(avDropdown.options.query) {\n            $timeout(function() {\n              // look at moving this to the controller\n              if(avDropdown.isRemoteMultiple()) {\n                avDropdown.setRemoteViewValue(e);\n              } else {\n                avDropdown.setViewValue(e);\n              }\n\n            }, false, 0);\n          }\n\n          $log.info(e);\n\n        });\n\n        // fires ng-focus when select2-focus fires.\n        element.on('select2-focus', function() {\n          if(attrs.ngFocus) {\n            scope.$eval(scope.$eval(attrs.ngFocus));\n          }\n        });\n\n        // fires ng-blur when select2-blur occurs.\n        element.on('select2-blur', function() {\n          if(attrs.ngBlur) {\n            scope.$eval(scope.$eval(attrs.ngBlur));\n          }\n        });\n\n        // https://github.com/t0m/select2-bootstrap-css/issues/37#issuecomment-42714589\n        element.on('select2-open', function () {\n          // look for .has-success, .has-warning, .has-error\n          // (really look for .has-* … which is good enough for the demo page, but obviously might interfere with other CSS-classes starting with \"has-\")\n          if(element.parents('[class*=\"has-\"]').length) {\n\n            // get all CSS-classes from the element where we found \"has-*\" and collect them in an array\n            var classNames = $(this).parents('[class*=\"has-\"]')[0].className.split(/\\s+/);\n\n            // go through the class names, find \"has-\"\n            for(var i = 0; i < classNames.length; ++i) {\n              if(classNames[i].match('has-')) {\n                $('#select2-drop').addClass(classNames[i]);\n              }\n            }\n          }\n        });\n\n\n        var _$render = ngModel.$render;\n        ngModel.$render = function() {\n          _$render();\n\n          if(avDropdown.multiple) {\n            avDropdown.setValues();\n          }else {\n            avDropdown.setValue();\n          }\n\n        };\n\n        var win = angular.element($window);\n\n        win.bind('resize', function() {\n          element.select2('close');\n        });\n\n        attrs.$observe('disabled', function (value) {\n          element.select2('enable', !value);\n        });\n\n        attrs.$observe('readonly', function (value) {\n          element.select2('readonly', !!value);\n        });\n\n        scope.$on('destroy', function() {\n          element.select2('destroy');\n        });\n\n        $timeout(function() {\n          element.select2(avDropdown.options);\n        });\n      }\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/datepicker/datepicker.js\n/**\n * Inspiration https://github.com/mgcrea/angular-strap/blob/v0.7.8/src/directives/datepicker.js\n */\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.provider('avDatepickerConfig', function() {\n\n    var config = {\n      autoclose: true,\n      todayHighlight: true,\n      format: 'mm/dd/yyyy',\n      forceParse: false\n    };\n\n    this.set = function(options) {\n      angular.extend(config, options);\n    };\n\n    this.$get = function() {\n      return angular.copy(config);\n    };\n\n  });\n\n  // Options: http://bootstrap-datepicker.readthedocs.org/en/latest/options.html\n  availity.ui.constant('AV_DATEPICKER', {\n    CONTROLLER: '$ngModelController',\n    ADD_ON_SELECTOR: '[data-toggle=\"datepicker\"]',\n    OPTIONS: [\n      'autoclose',\n      'beforeShowDay',\n      'beforeShowMonth',\n      'calendarWeeks',\n      'clearBtn',\n      'toggleActive',\n      'container',\n      'daysOfWeekDisabled',\n      'datesDisabled',\n      'defaultViewDate',\n      'endDate',\n      'forceParse',\n      'format',\n      'inputs',\n      'keyboardNavigation',\n      'language',\n      'minViewMode',\n      'multidate',\n      'multidateSeparator',\n      'orientation',\n      'startDate',\n      'startView',\n      'todayBtn',\n      'todayHighlight',\n      'weekStart',\n      'showOnFocus',\n      'disableTouchKeyboard',\n      'enableOnReadonly',\n      'modelFormat'\n    ],\n    DEFAULTS: {\n      MODELFORMAT: 'YYYY-MM-DD'\n    }\n  });\n\n  availity.ui.controller('AvDatepickerController', function($element, $attrs, AV_DATEPICKER, $scope, avDatepickerConfig) {\n\n    var self = this;\n    this.options = {};\n\n    this.setValue = function() {\n\n      var viewValue = self.ngModel.$viewValue;\n      var plugin = this.plugin();\n\n      if(!viewValue || !plugin) {\n        return;\n      }\n\n      plugin.setDate(viewValue);\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.findModel = function() {\n\n      var ngModel = null;\n\n      var $input = $element.find('input:first').andSelf();\n      if($input.length) {\n        ngModel = $input.data(AV_DATEPICKER.CONTROLLER);\n        this.setNgModel(ngModel);\n      }\n\n      return ngModel;\n    };\n\n    this.modelToView = function(isoWrap) {\n      var viewValue = $.fn.datepicker.DPGlobal.formatDate(isoWrap, self.options.format, 'en');\n      return viewValue;\n    };\n\n    this.wrapIsoDate = function() {\n\n      var date = self.ngModel.$modelValue;\n      var isoWrap;\n\n      if(date !== undefined && date !== null) {\n        var m = moment(date);\n        isoWrap = m.isValid() ? m.toDate() : null;\n      }\n\n      return isoWrap;\n    };\n\n    this.viewToModel = function() {\n      var format = $.fn.datepicker.DPGlobal.parseFormat(self.options.format);\n      var utcDate = $.fn.datepicker.DPGlobal.parseDate(self.ngModel.$viewValue, format, 'en');\n\n      var plugin = self.plugin();\n\n      if(!plugin) {\n        return;\n      }\n\n      // jscs: disable\n      var localDate = plugin._utc_to_local(utcDate);\n      // jscs: enable\n\n      if(self.options.modelFormat && localDate) {\n        localDate = moment(localDate).format(self.options.modelFormat);\n      }\n\n      return localDate;\n    };\n\n    this.init = function() {\n\n      self.options = angular.extend({}, avDatepickerConfig);\n\n      _.forEach($attrs, function(value, key) {\n        if(_.contains(AV_DATEPICKER.OPTIONS, key.replace('data-', ''))) {\n          self.options[key] = $scope.$eval(value);\n        }\n      });\n\n      if(self.options.modelFormat && self.options.modelFormat.toLowerCase() === 'default') {\n        self.options.modelFormat = AV_DATEPICKER.DEFAULTS.MODELFORMAT;\n      }\n    };\n\n    this.plugin = function() {\n      return $element.data('datepicker');\n    };\n\n    this.destroy = function() {\n      var plugin = this.plugin();\n      if(plugin) {\n        plugin.remove();\n        $element.data('datepicker', null);\n      }\n    };\n\n    this.hide = function() {\n      var plugin = this.plugin();\n      if(plugin) {\n        plugin.hide();\n      }\n    };\n  });\n\n  availity.ui.directive('avDatepicker', function($window, $log, AV_DATEPICKER) {\n    return {\n      restrict: 'A',\n      require: ['ngModel', 'avDatepicker'],\n      controller: 'AvDatepickerController',\n      link: function(scope, element, attrs, controllers) {\n\n        var ngModel = controllers[0];\n        var avDatepicker = controllers[1];\n\n        if(!ngModel) {\n          ngModel = avDatepicker.findModel();\n          if(!ngModel) {\n            $log.error('avDatepicker requires ngModel');\n            return;\n          }\n        }\n\n        avDatepicker.init();\n        avDatepicker.setNgModel(ngModel);\n\n        element.on('changeDate', function(e) {\n          $log.info('avDatepicker changeDate {0}', [e]);\n        });\n\n        // (view to model)\n        ngModel.$parsers.push(avDatepicker.viewToModel);\n\n        // (model to view) - added to end of formatters array\n        // because they are processed in reverse order.\n        // if the model is in Date format and send to the validation framework\n        // prior to getting converted to the expected $viewValue format,\n        // the validation will fail.\n        ngModel.$formatters.push(avDatepicker.modelToView);\n        ngModel.$formatters.push(avDatepicker.wrapIsoDate);\n\n        var _$render = ngModel.$render;\n        ngModel.$render = function() {\n          _$render();\n          avDatepicker.setValue();\n        };\n\n        var win = angular.element($window);\n\n        win.bind('scroll', function() {\n          avDatepicker.hide();\n        });\n\n        var target = element.siblings(AV_DATEPICKER.ADD_ON_SELECTOR);\n        if(target.length) {\n          target.on('click.datepicker', function() {\n            if(!element.prop('disabled')) { // Hack check for IE 8\n              element.focus();\n            }\n          });\n        }\n\n        scope.$on('destroy', function() {\n          avDatepicker.destroy();\n          if(target.length) {\n            target.off('click.datepicker');\n          }\n        });\n\n        scope.$evalAsync(function() {\n          element.datepicker(avDatepicker.options);\n        });\n      }\n    };\n  });\n})(window);\n\n// Source: /lib/ui/idle/idle-notifier.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_UI_IDLE', {\n    EVENTS: {\n      OK: 'mousedown.av.idle.notifier'\n    },\n    TEMPLATES: {\n      BASE: 'ui/idle/idle-tpl.html',\n      SESSION: 'ui/idle/idle-session-tpl.html',\n      WARNING: 'ui/idle/idle-warning-tpl.html'\n    }\n  });\n\n  availity.ui.provider('avIdleNotifier', function() {\n\n    var sessionTemplate;\n    var warningTemplate;\n    var $scope;\n\n    this.setSessionTemplate = function(template) {\n      sessionTemplate = template;\n    };\n\n    this.setWarningTemplate = function(template) {\n      warningTemplate = template;\n    };\n\n    this.$get = function(AV_IDLE, AV_UI_IDLE, $rootScope, AvModal, $document, $timeout) {\n\n      var AvIdleNotifier = function() {\n        this.listeners = [];\n        this.modal = null;\n      };\n\n      var proto = AvIdleNotifier.prototype;\n\n      proto.init = function() {\n\n        $scope = $rootScope.$new(true);\n        $scope.idle = {};\n\n        this.initListeners();\n      };\n\n      proto.initListeners = function() {\n\n        var self = this;\n        var listener = null;\n\n        // ACTIVE IDLING\n        listener = $rootScope.$on(AV_IDLE.EVENTS.IDLE_ACTIVE, function() {\n          self.showWarning();\n        });\n        this.listeners.push(listener);\n\n        // INACTIVE IDLING\n        listener = $rootScope.$on(AV_IDLE.EVENTS.IDLE_INACTIVE, function() {\n          self.hideWarning();\n        });\n        this.listeners.push(listener);\n\n        // SESSION TIMEOUT OUT\n        listener = $rootScope.$on(AV_IDLE.EVENTS.SESSION_TIMEOUT_ACTIVE, function() {\n          self.showSession();\n        });\n        this.listeners.push(listener);\n\n      };\n\n      proto.destroyListeners = function() {\n        // turn off each listener @see http://stackoverflow.com/a/14898795\n        _.each(this.listeners, function(listener) {\n          listener();\n        });\n      };\n\n      proto.showWarning = function() {\n\n        var self = this;\n\n        if(this.modal !== null) {\n          return;\n        }\n\n        $scope = $rootScope.$new(true);\n        $scope.idle = {};\n        $scope.idle.template = AV_UI_IDLE.TEMPLATES.WARNING;\n\n        this.modal = new AvModal({\n          show: true,\n          scope: $scope,\n          backdrop: 'static',\n          templateUrl: AV_UI_IDLE.TEMPLATES.BASE\n        });\n\n        $document.find('body').on(AV_UI_IDLE.EVENTS.OK, function() {\n          self.hideWarning();\n        });\n\n      };\n\n      proto.hideWarning = function() {\n        if(this.modal) {\n          this.disableBackDrop();\n          this.modal.hide();\n        }\n\n        this.modal = null;\n      };\n\n      proto.disableBackDrop = function() {\n        $document.find('body').off(AV_UI_IDLE.EVENTS.OK);\n      };\n\n      proto.showSession = function() {\n        var self = this;\n        this.disableBackDrop();\n\n        $timeout(function() {\n          $scope.idle.template = AV_UI_IDLE.TEMPLATES.SESSION;\n          $scope.idle.onSessionTimeout = _.bind(self.onSessionTimeout, self);\n        }, 0, true);\n\n      };\n\n      proto.onSessionTimeout = function() {\n        $rootScope.$broadcast(AV_IDLE.EVENTS.SESSION_TIMEOUT_REDIRECT);\n      };\n\n      return new AvIdleNotifier();\n\n    };\n\n  });\n\n  availity.ui.run(function(avIdleNotifier) {\n    avIdleNotifier.init();\n  });\n\n})(window);\n\n// Source: /lib/ui/mask/mask.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_MASK', {\n    NAME: 'inputmask',\n    DEFAULTS: {\n      date: '99/99/9999',\n      phone: '(999) 999-9999',\n      SSN:'999-99-9999'\n    }\n  });\n\n  availity.ui.directive('avMask', function($window, $log, AV_MASK) {\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function(scope, element, attrs) {\n\n        var maskType = AV_MASK.DEFAULTS[attrs['avMask']];\n        if(!maskType) {\n          maskType = attrs['avMask'];\n        }\n\n        scope.$evalAsync(function() {\n          element.inputmask(maskType);\n        });\n\n        scope.$on('$destroy', function () {\n          element.inputmask('remove');\n        });\n      }\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/permissions/has-permission.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('AvHasPermissionController', function($element) {\n\n    this.onSuccess = function(isAuthorized) {\n      if(isAuthorized) {\n        $element.removeClass('ng-hide');\n        $element.show();\n      } else {\n        $element.remove();\n      }\n    };\n\n    this.onError = function() {\n      $element.remove();\n    };\n\n  });\n\n  availity.ui.directive('avHasPermission', function(avUserAuthorizations) {\n    return {\n      restrict: 'EA',\n      controller: 'AvHasPermissionController',\n      require: ['avHasPermission'],\n      link: function($scope, $element, $attr, controllers) {\n\n        var avHasPermission = controllers[0];\n\n        $element.hide();\n\n        $scope.$watch($attr.avHasPermission, function(permissions) {\n\n          if(!angular.isArray(permissions)) {\n            permissions = _.words('' + permissions);\n          }\n\n          avUserAuthorizations.isAnyAuthorized(permissions).then(avHasPermission.onSuccess, avHasPermission.onError);\n        });\n      }\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/analytics/analytics.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.directive('avAnalytics', function() {\n    return {\n      scope: {\n        options: '=avAnalytics'\n      },\n      controller: function($scope) {\n        this.getOptions = function() {\n          return $scope.options;\n        };\n      }\n    };\n  });\n\n  availity.ui.controller('AvAnalyticsController', function(avAnalyticsUtils, avAnalytics) {\n\n    this.onEvent = function(event, element, options) {\n\n      // convert the directive attributes into object with properties with sane defaults\n      var properties = angular.extend(\n        {\n          level: 'info'\n        },\n        options,\n        {\n          event: event.type\n        }\n      );\n\n      // If an external link is detected\n      if(avAnalyticsUtils.isExternalLink(properties)) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      var promise = avAnalytics.trackEvent(properties);\n      promise['finally'](function() {\n        if(avAnalyticsUtils.isExternalLink(properties)) {\n          document.location = element.attr('href');\n        }\n      });\n    };\n  });\n\n  availity.ui.directive('avAnalyticsOn', function(AV_ANALYTICS, avAnalyticsUtils) {\n    return {\n      restrict: 'A',\n      controller: 'AvAnalyticsController',\n      require: ['avAnalyticsOn','?^avAnalytics'],\n      link: function(scope, element, attrs, controllers) {\n        var childCtrl = controllers[0];\n        var parentCtrl = {};\n        var parentOptions = {};\n\n        if (controllers[1])  {\n          parentCtrl = controllers[1];\n          parentOptions = parentCtrl.getOptions();\n        }\n\n        var options = angular.extend(\n          {},\n          parentOptions,\n          avAnalyticsUtils.getProperties(attrs)\n        );\n\n        var eventType = attrs.avAnalyticsOn || AV_ANALYTICS.EVENTS.DEFAULT;\n\n        element.on(eventType, function(event) {\n          childCtrl.onEvent(event, element, options);\n        });\n      }\n    };\n  });\n})(window);\n\n// Source: /lib/ui/placeholder/placeholder.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.requires.push('ng.shims.placeholder');\n\n  availity.ui.config(function($provide) {\n\n    $provide.decorator('placeholderDirective', ['$delegate', '$log', function($delegate, $log) {\n\n      var directive = $delegate[0];\n      var originalLink = directive.link;\n\n      var newLink = function(scope, element, attrs) {\n\n        if(originalLink && _.contains(_.keys(attrs), 'avMask')) {\n          $log.info('placeholder shim not running on an element due to avMask on same element');\n          return;\n        }else if(originalLink) {\n          originalLink.apply(this, arguments);\n        }\n        //else originalLink doesn't exist\n      };\n\n      directive.compile = function() {\n        return newLink;\n      };\n\n      return $delegate;\n    }]);\n\n  });\n})(window);\n\n// Source: /lib/ui/breadcrumbs/breadcrumbs.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BREADCRUMBS', {\n\n    TEMPLATE: 'ui/breadcrumbs/breadcrumbs-tpl.html'\n  });\n\n  function AvBreadcrumbsController($state) {\n\n    this.getBreadcrumb = function(breadcrumbs, state) {\n      if(!state || !state.data) {\n        return;\n      }\n\n      var breadcrumb = state.data.breadcrumb;\n      if(!breadcrumb) {\n        return;\n      }\n\n      if(breadcrumb.parent) {\n        var parentState = $state.get(breadcrumb.parent);\n\n        if(parentState) {\n          this.getBreadcrumb(breadcrumbs, parentState);\n        }\n      }\n      breadcrumb.state = state.name;\n      breadcrumbs.push(breadcrumb);\n    };\n\n    this.getBreadcrumbs = function() {\n      var breadcrumbs = [];\n      this.getBreadcrumb(breadcrumbs, $state.current);\n      return breadcrumbs;\n    };\n\n  }\n\n  AvBreadcrumbsController.$inject = ['$state'];\n  availity.ui.controller('AvBreadcrumbsController', AvBreadcrumbsController);\n\n  function avBreadcrumbs(AV_BREADCRUMBS) {\n    return {\n      restrict: 'EA',\n      replace: true,\n      templateUrl: AV_BREADCRUMBS.TEMPLATE,\n      controller: 'AvBreadcrumbsController',\n      link: function(scope, element, attrs, avBreadcrumbs) {\n        scope.breadcrumbs = avBreadcrumbs.getBreadcrumbs();\n\n        scope.$on('$stateChangeSuccess', function() {\n          scope.breadcrumbs = avBreadcrumbs.getBreadcrumbs();\n        });\n      }\n    };\n  }\n\n  avBreadcrumbs.$inject = ['AV_BREADCRUMBS'];\n  availity.ui.directive('avBreadcrumbs', avBreadcrumbs);\n\n})(window);\n\n// Source: /lib/ui/filters/approximate.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.filter('avApproximate', function() {\n    var pow = Math.pow;\n    var floor = Math.floor;\n    var abs = Math.abs;\n    var log = Math.log;\n\n    function round(number, precision) {\n      var prec = pow(10, precision);\n      return Math.round(number * prec) / prec;\n    }\n\n    return function (number, precision) {\n      precision = precision || 0;\n      var base = floor(log(abs(number)) / log(1000));\n      var unit = 'kMGTPE'[base - 1];\n      return unit ? round(number / pow(1000, base), precision) + unit : (number || 0);\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/badge/badge.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BADGE', {\n    COLOR: null,\n    DEFAULT_CLASS: 'badge',\n    SHOW_WHEN_ZERO: false,\n    TEMPLATE: 'ui/badge/badge-tpl.html'\n  });\n\n  function badgeDirective(AV_BADGE) {\n\n    return {\n      scope: {\n        color: '@',\n        count: '=avBadge',\n        showWhenZero: '@'\n      },\n      templateUrl: AV_BADGE.TEMPLATE,\n      link: function(scope, element) {\n        scope.color = scope.color || AV_BADGE.COLOR;\n        scope.showWhenZero = scope.showWhenZero || AV_BADGE.SHOW_WHEN_ZERO;\n\n        var classes = [];\n        classes.push(AV_BADGE.DEFAULT_CLASS);\n        if(scope.color) {\n          classes.push(scope.color);\n        }\n\n        element.addClass(classes.join(' '));\n      }\n    };\n  }\n\n  badgeDirective.$inject = ['AV_BADGE'];\n  availity.ui.directive('avBadge', badgeDirective);\n\n})(window);\n\n// Source: /lib/ui/labels/removable-label.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_REMOVABLE_LABEL', {\n    TEMPLATE: 'ui/labels/removable-label-tpl.html'\n  });\n\n  availity.ui.directive('avRemovableLabel', function(AV_REMOVABLE_LABEL) {\n    return {\n      templateUrl: AV_REMOVABLE_LABEL.TEMPLATE,\n      transclude: true,\n      scope: {\n        removeValue: '=',\n        onRemove: '&'\n      },\n      link: function(scope, element, attrs) {\n        element.addClass('label-remove');\n        scope.removeLabel = function() {\n          if(!attrs.disabled) {\n            scope.onRemove()(scope.removeValue);\n          }\n        };\n      }\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/animation/loader.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_LOADER', {\n\n    TEMPLATES: {\n      LOADER: 'ui/animation/loader-tpl.html'\n    }\n\n  });\n\n  availity.ui.controller('AvLoaderController', function($element) {\n\n    var self = this;\n    var active;\n\n    this.start = function() {\n      active = true;\n      this.animate();\n    };\n\n    this.animate = function() {\n\n      $element\n        .find('.loading-bullet')\n        .velocity('transition.slideRightIn', { stagger: 250 })\n        .velocity({ opacity: 0 }, {\n          delay: 750,\n          duration: 500,\n          complete: function() {\n            if(active) {\n              setTimeout(function() {self.animate();}, 500);\n            } else {\n              self.endAnimation();\n            }\n          }\n        });\n\n    };\n\n    this.endAnimation = function() {\n      $element.find('.loading-bullet').velocity('stop', true);\n      $element.removeData();\n    };\n\n    this.stop = function() {\n      active = false;\n    };\n\n  });\n\n  availity.ui.directive('avLoader', function(AV_LOADER) {\n    return {\n      restrict: 'A',\n      replace: true,\n      controller: 'AvLoaderController',\n      require: 'avLoader',\n      templateUrl: AV_LOADER.TEMPLATES.LOADER,\n      link: function(scope, element, attr, avLoader) {\n\n        if(!attr.delay) {\n          avLoader.start();\n        }\n\n        scope.$on('$destroy', function() {\n          avLoader.stop();\n        });\n\n      }\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/block/block.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BLOCK', {\n    TEMPLATES: {\n      BLOCK: 'ui/block/block-tpl.html'\n    }\n  });\n\n  var getLoaderController = function(blockId) {\n    var el = $('[data-block-ui=\"' + blockId + '\"]') || $('[block-ui=\"' + blockId + '\"]');\n    if(el) {\n      return el.find('[data-av-loader]').controller('avLoader');\n    }\n  };\n\n  var triggerLoaderController = function(id, instance, fn) {\n\n    var controller = instance.loaderController;\n    if(!controller) {\n      controller = getLoaderController(id);\n      instance.loaderController = controller;\n    }\n    if(controller && _.isFunction(controller[fn])) {\n      controller[fn]();\n    }\n\n  };\n\n  var triggerInstance = function(id, instance, origFn, loaderFn) {\n    triggerLoaderController(id, instance, loaderFn);\n    origFn.apply(instance);\n  };\n\n  var modifyBlockInstances = function(id, instance) {\n\n    var origStartFn = instance.start;\n    var origStopFn = instance.stop;\n\n    instance.start = function() {\n      triggerInstance(id, instance, origStartFn, 'start');\n    };\n\n    instance.stop = function() {\n      triggerInstance(id, instance, origStopFn, 'stop');\n    };\n\n    instance.startLoader = function() {\n      triggerLoaderController(id, instance, 'start');\n    };\n\n    instance.avModifications = true;\n  };\n\n  availity.ui.run(function($injector, $log, AV_BLOCK) {\n\n    try {\n\n      var blockUIConfig = $injector.get('blockUIConfig');\n      var blockUI = $injector.get('blockUI');\n      blockUIConfig.autoBlock = false;\n      blockUIConfig.delay = 0;\n      blockUIConfig.templateUrl = AV_BLOCK.TEMPLATES.BLOCK;\n\n      var origGetFn = blockUI.instances.get;\n      blockUI.instances.get = function(id) {\n        var instance = origGetFn(id);\n        if(!instance.avModifications) {\n          modifyBlockInstances(id, instance);\n        }\n        return instance;\n      };\n\n    } catch(e) {\n      $log.warn('blockUI is required to use av block.');\n    }\n  });\n\n})(window);\n\n// Source: /lib/ui/block/block-directive.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // Helper directive that hooks into block-ui's start-up lifecycle and starts the loader\n  availity.ui.directive('avBlockUi', function(blockUI) {\n\n    return {\n      restrict: 'A',\n      link: function($scope, $element, $attrs) {\n\n        var blockId = $attrs.avBlockUi;\n        var blockCount = $attrs.blockCount;\n        var instance = blockUI.instances.get(blockId);\n        if(blockCount > 0) {\n          instance.startLoader();\n        }\n      }\n    };\n\n  });\n\n})(window);\n\n// Source: /lib/ui/tabs/tabs.js\n/*\n* Inspired by https://github.com/angular-ui/bootstrap/blob/master/src/tabs/tabs.js\n*/\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_TABS', {\n    TEMPLATES: {\n      TABS: 'ui/tabs/tabs-tpl.html',\n      TAB: 'ui/tabs/tab-tpl.html'\n    }\n  });\n\n  function TabsController($scope) {\n\n    var self = this;\n\n    $scope.tabs = [];\n    self.tabs = $scope.tabs;\n\n    this.addTab = function(tab) {\n      self.tabs.push(tab);\n\n      if(self.tabs.length === 1) {\n        tab.active = true;\n      } else if(tab.active) {\n        self.selectTab(tab);\n      } else {\n        tab.active = false;\n      }\n    };\n\n    this.removeTab = function(tab) {\n      var index = self.tabs.indexOf(tab);\n\n      if(tab.active && self.tabs.length > 1) {\n        //If this is the last tab, select the previous tab. else, the next tab.\n        var newActiveIndex = index === self.tabs.length - 1 ? index - 1 : index + 1;\n        self.selectTab(self.tabs[newActiveIndex]);\n      }\n\n      self.tabs.splice(index, 1);\n    };\n\n    this.selectTab = function(selectedTab) {\n      angular.forEach(self.tabs, function (tab) {\n        if(tab.active && tab !== selectedTab) {\n          tab.active = false;\n          tab.onDeselect();\n        }\n      });\n\n      selectedTab.active = true;\n      selectedTab.onSelect();\n    };\n  }\n\n  TabsController.$inject = ['$scope'];\n  availity.ui.controller('AvTabsController', TabsController);\n\n  function TabsDirective(AV_TABS) {\n    return {\n      restrict: 'AE',\n      templateUrl: AV_TABS.TEMPLATES.TABS,\n      transclude: true,\n      replace: true,\n      controller: 'AvTabsController',\n      scope: true,\n      link: function(scope, element, attrs) {\n        scope.justified = !!attrs.justified;\n        scope.tabType = attrs.tabType;\n        scope.vertical = !!attrs.vertical;\n\n        if(angular.isUndefined(attrs.padContent)) {\n          scope.padContent = true;\n        }\n      }\n    };\n  }\n\n  TabsDirective.$inject = ['AV_TABS'];\n  availity.ui.directive('avTabs', TabsDirective);\n\n  function TabDirective(AV_TABS) {\n    return {\n      restrict: 'AE',\n      templateUrl: AV_TABS.TEMPLATES.TAB,\n      replace: true,\n      require: '^avTabs',\n      transclude: true,\n      scope: {\n        heading: '@',\n        template: '=',\n        templateUrl: '=',\n        onSelect: '&select',\n        onDeselect: '&deselect'\n      },\n      controller: function() {\n        // Allow avTabs to be required by other directives\n      },\n      link: function(scope, element, attrs, tabsController, transclude) {\n        scope.transcludeFn = transclude;\n\n        tabsController.addTab(scope);\n\n        scope.$on('destroy', function() {\n          tabsController.removeTab(scope);\n        });\n\n        scope.select = function() {\n          if(!scope.disabled) {\n            tabsController.selectTab(scope);\n          }\n        };\n\n        scope.$watch('active', function(active) {\n          if(active) {\n            tabsController.selectTab(scope);\n          }\n        });\n\n        if(angular.isDefined(attrs.active)) {\n          scope.active = attrs.active;\n\n          scope.$parent.$watch(attrs.active, function(active) {\n            if(active) {\n              tabsController.selectTab(scope);\n            }\n          });\n        }\n\n        if(angular.isDefined(attrs.disable)) {\n          scope.$parent.$watch(attrs.disable, function(disabled) {\n            scope.disabled = !!disabled;\n          });\n        }\n      }\n    };\n  }\n\n  TabDirective.$inject = ['AV_TABS'];\n  availity.ui.directive('avTab', TabDirective);\n\n  function TabPaneDirective(avTemplateCache, $compile) {\n    return {\n      restrict: 'AE',\n      require: '^avTabs',\n      link: function(scope, element, attrs) {\n\n        var tab = scope.$eval(attrs.avTabPane);\n\n        if(angular.isDefined(tab.template) || angular.isDefined(tab.templateUrl)) {\n          avTemplateCache.get(tab)\n          .then(function(template) {\n            element.append($compile(template)(scope));\n          });\n        } else {\n          tab.transcludeFn(tab.$parent, function(contents) {\n            angular.forEach(contents, function(node) {\n              element.append(node);\n            });\n          });\n        }\n      }\n    };\n  }\n\n  TabPaneDirective.$inject = ['avTemplateCache', '$compile'];\n  availity.ui.directive('avTabPane', TabPaneDirective);\n\n})(window);\n\n// Source: /lib/ui/scroll-pagination/scroll-pagination.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_SCROLL_PAGINATION', {\n    TEMPLATE: 'ui/scroll-pagination/scroll-pagination-tpl.html',\n    DEFAULT_OPTIONS: {\n      limit: 50,\n      offset: 0,\n      maxCached: 100,\n      loadMoreText: 'Load more items',\n      entryIdAttribute: 'id',\n      apiParams: {},\n      beforePageLoad: undefined,\n      afterPageLoad: undefined\n    }\n  });\n\n\n  availity.ui.factory('avScrollPaginationService', function($log) {\n    function AvScrollPaginationService() {\n      this.instances = {};\n    }\n\n    var proto = AvScrollPaginationService.prototype;\n\n    proto.registerInstance = function(instanceInterface, id) {\n      if (this.instances[id]) {\n        $log.warn('Found existing instance with id ' + id);\n      }\n      this.instances[id] = instanceInterface;\n    };\n\n    proto.unregisterInstance = function(id) {\n      delete this.instances[id];\n    };\n\n    proto.resetInstance = function(id) {\n      if (this.instances[id]) {\n        this.instances[id].reset();\n        return true;\n      }\n      return false;\n    };\n\n    return new AvScrollPaginationService();\n  });\n\n  availity.ui.controller('AvScrollPaginationController', function($scope, $element, $timeout, $log, AV_SCROLL_PAGINATION, blockUI, avScrollPaginationService) {\n\n    var self = this;\n\n    this.buildOptions = function() {\n      $scope._options = {};\n      _.extend($scope._options, AV_SCROLL_PAGINATION.DEFAULT_OPTIONS, $scope.options || {});\n      $scope._options.lowOffset = $scope._options.offset;\n      $scope._options.highOffset = $scope._options.offset;\n    };\n\n    var originalEntries = angular.copy($scope.entries);\n    this.buildOptions();\n\n    this.updateButtonVisibilityFlags = function(data) {\n      $scope.showNext = $scope._options.highOffset + data.count < data.totalCount;\n      $scope.showPrev = $scope._options.lowOffset > 0;\n    };\n\n    this.loadEntries = function(prepend) {\n      var block = blockUI.instances.get('scroll-pagination-block-' + $scope.avScrollPagination);\n      block.start();\n      if (_.isFunction($scope._options.beforePageLoad)) {\n        $scope._options.beforePageLoad($scope._options);\n      }\n      var params = {};\n      _.extend(params, $scope._options.apiParams, {limit: $scope._options.limit, offset: $scope._options.offset});\n      $scope.apiResource.query({params: params}).then(function(response) {\n        var responseData = self.getResponseData(response);\n        if ($scope._options.afterPageLoad) {\n          $scope._options.afterPageLoad(responseData);\n        }\n        if (responseData && responseData[$scope._options.resourceId]) {\n          self.addEntries(responseData[$scope._options.resourceId], prepend);\n        }\n        self.updateButtonVisibilityFlags(responseData);\n        block.stop();\n      }, function() {\n        $log.error('API call failed');\n        block.stop();\n      });\n    };\n\n    this.getResponseData = function(data) {\n      if (data) {\n        if ($scope._options.responseKey) {\n          var keys = $scope._options.responseKey.split('.');\n          var nestedData = data;\n          var noData = false;\n          _.each(keys, function(key) {\n            if (!noData) {\n              nestedData = nestedData[key];\n              if (!nestedData) {\n                noData = true;\n              }\n            }\n          });\n          return noData ? [] : nestedData;\n        } else {\n          return data;\n        }\n      }\n      return [];\n    };\n\n    this.addEntries = function(entries, prepend) {\n      var oldEntries = angular.copy($scope.entries);\n      if (prepend) {\n        $scope.entries.unshift.apply($scope.entries, entries);\n      } else {\n        $scope.entries.push.apply($scope.entries, entries);\n      }\n      if ($scope.entries.length > $scope._options.maxCached) {\n        var diff = $scope.entries.length - $scope._options.maxCached;\n        var trackedElementId;\n        if (prepend) {\n          $scope.entries = $scope.entries.slice(0, $scope._options.maxCached);\n          $scope._options.highOffset -= diff;\n          trackedElementId = oldEntries[oldEntries.length-diff-1] ? oldEntries[oldEntries.length-diff-1][$scope._options.entryIdAttribute] : undefined;\n        } else {\n          $scope.entries = $scope.entries.slice(diff, $scope.entries.length);\n          $scope._options.lowOffset += diff;\n          trackedElementId = oldEntries[diff] ? oldEntries[diff][$scope._options.entryIdAttribute] : undefined;\n        }\n        self.autoscroll(trackedElementId, prepend);\n      }\n    };\n\n    this.autoscroll = function(trackedElementId, prepend) {\n      if (trackedElementId) {\n        var trackedElement = $element.find('#'+trackedElementId);\n        var trackedElementTop = trackedElement.offset().top;\n        $timeout(function() {\n          var newScrollTop = $element.scrollTop() + trackedElement.offset().top - trackedElementTop;\n          $element.animate({scrollTop: newScrollTop}, 0);\n        }, 0, false);\n      } else {\n        $timeout(function() {\n          if (prepend) {\n            $element.animate({scrollTop: $element.prop('scrollHeight')}, 0);\n          } else {\n            $element.animate({scrollTop: 0}, 0);\n          }\n        }, 0, false);\n      }\n    };\n\n    this.loadPrev = function() {\n      $scope._options.lowOffset -= $scope._options.limit;\n      $scope._options.offset = $scope._options.lowOffset;\n      self.loadEntries(true);\n    };\n\n    this.loadNext = function() {\n      $scope._options.highOffset += $scope._options.limit;\n      $scope._options.offset = $scope._options.highOffset;\n      self.loadEntries();\n    };\n\n    avScrollPaginationService.registerInstance({\n      reset: function() {\n        $element.animate({scrollTop: 0}, 0);\n        $scope.entries = angular.copy(originalEntries);\n        self.buildOptions();\n        self.loadEntries();\n      }},\n      $scope.avScrollPagination\n    );\n\n    $scope.$on('$destroy', function() {\n      avScrollPaginationService.unregisterInstance($scope.avScrollPagination);\n    });\n\n    $scope.loadPrev = self.loadPrev;\n    $scope.loadNext = self.loadNext;\n\n    this.loadEntries();\n  });\n\n\n\n  availity.ui.directive('avScrollPagination', function($log, AV_SCROLL_PAGINATION) {\n    return {\n      restrict: 'A',\n      controller: 'AvScrollPaginationController',\n      transclude: true,\n      templateUrl: AV_SCROLL_PAGINATION.TEMPLATE,\n      scope: {\n        apiResource: '=',\n        entries: '=',\n        options: '=',\n        avScrollPagination: '@'\n      },\n      link: function($scope) {\n        if (!$scope.avScrollPagination) {\n          $log.error('Directive must include an id');\n        }\n      }\n    };\n  });\n\n})(window);\n\n//# sourceMappingURL=maps/availity-angular-ui.js.map\n","/*global module*/\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity || {};\n\n  availity.MODULE_UI = 'availity.ui';\n  availity.ui = angular.module(availity.MODULE_UI, ['ng', 'ngSanitize']);\n\n  availity.ui.constant('AV_UI', {\n    // jscs: disable\n    NG_OPTIONS: /^\\s*([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?(?:\\s+group\\s+by\\s+([\\s\\S]+?))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+([\\s\\S]+?)(?:\\s+track\\s+by\\s+([\\s\\S]+?))?$/\n    // jscs: enable\n  });\n\n  if(typeof module !== 'undefined' && module.exports) {\n    module.exports = availity;\n  }\n\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.factory('avTemplateCache', function($q, $templateCache, $http) {\n\n    return {\n\n      get: function(options) {\n\n        var valid = !options.template || !options.templateUrl;\n\n        if(!valid) {\n          throw new Error('Either options.template or options.templateUrl must be defined for avTemplateCache');\n        }\n\n        return options.template ? $q.when(options.template) :\n          $http.get(options.templateUrl, {cache: $templateCache})\n            .then(function(result) {\n              return result.data;\n            });\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_MODAL', {\n\n    OPTIONS: {\n      scope: null,\n      templateUrl: null,\n      template: null,\n      id: null,\n      container: null,\n\n      // Bootstrap defaults\n      keyboard: true,\n      backdrop: true,\n      show: false,\n      remote: false\n    },\n\n    EVENTS: {\n      SHOW: 'show.av.modal',\n      SHOWN: 'shown.av.modal',\n      HIDE: 'hide.av.modal',\n      HIDDEN: 'hidden.av.modal'\n    },\n\n    NAMESPACE: {\n      MODAL: 'bs.modal'\n    },\n\n    BS_EVENTS:  {\n      SHOW: 'show.bs.modal',\n      SHOWN: 'shown.bs.modal',\n      HIDE: 'hide.bs.modal',\n      HIDDEN: 'hidden.bs.modal'\n    },\n\n    TEMPLATES: {\n      MODAL: 'ui/modal/modal-tpl.html'\n    }\n  });\n\n  availity.ui.factory('avModalManager', function() {\n\n    var AvModalManager = function() {\n      this.instances = [];\n    };\n\n    var proto = AvModalManager.prototype;\n\n    proto.add = function(id) {\n      this.instances.push(id);\n    };\n\n    proto.remove = function(id) {\n      this.instances = _.without(this.instances, id);\n    };\n\n    proto.closeAll = function() {\n\n      _.forEach(this.instances, function(id) {\n\n        var $el = $('#' + id);\n\n        if(!$el) {\n          return;\n        }\n\n        var bsModal = $el.data('bs.modal');\n        if(bsModal) {\n          bsModal.removeBackdrop();\n          bsModal.$body.removeClass('modal-open');\n          bsModal.resetAdjustments();\n          bsModal.resetScrollbar();\n        }\n\n        var avModal = $el.data('AvModal');\n        if(avModal) {\n          avModal.destroy();\n        }\n\n      });\n    };\n\n    return new AvModalManager();\n\n  });\n\n  var ModalFactory = function($rootScope, $timeout, $compile, AV_MODAL, avTemplateCache, $q, avModalManager) {\n\n    var Modal = function(options) {\n\n      var self = this;\n\n      this.templateDefer = $q.defer();\n      this.templatePromise = this.templateDefer.promise;\n\n      this.options = angular.extend({}, AV_MODAL.OPTIONS, {scope: $rootScope.$new()}, options);\n\n      avTemplateCache.get(options).then(function(template) {\n        self.options.template = template;\n        self._build();\n      });\n\n    };\n\n    Modal.create = function(options) {\n      return new Modal(options);\n    };\n\n    var proto = Modal.prototype;\n\n    proto._build = function() {\n\n      var self = this;\n\n      var scope = this.options.scope;\n      this.$element = angular.element(this.options.template);\n\n      this._createId();\n\n      this._scope();\n\n      $compile(this.$element)(scope);\n\n      $timeout(function() {\n        self._init();\n      }, 0, true);\n\n      // Append to container or <body>\n      this.options.container ? this.$element.appendTo(this.options.container) : this.$element.appendTo('body');\n\n    };\n\n    proto._init = function() {\n\n      this.$element.data('AvModal', this);\n\n      this.templateDefer.resolve(true);\n\n      // Initialize Bootstrap jQuery plugin\n      this.$element.modal({\n        'backdrop': this.options.backdrop,\n        'keyboard': this.options.keyboard,\n        'show': this.options.show,\n        'remote': this.options.remote\n      });\n\n      this._listeners();\n    };\n\n    // Add helpers to scope so clients can call internal methods\n    proto._scope = function() {\n\n      var self = this;\n      var scope = this.options.scope;\n\n      scope.modalShow = function() {\n        return self.show();\n      };\n\n      scope.modalToggle = function() {\n        return self.toggle();\n      };\n\n      scope.modalHide = function() {\n        return self.hide();\n      };\n\n    };\n\n    proto._listeners = function() {\n\n      var self = this;\n      var scope = this.options.scope;\n      var $element = this.$element;\n\n      this.animationShowDefer = $q.defer();\n      this.animationHideDefer = $q.defer();\n\n      $element.on(AV_MODAL.BS_EVENTS.SHOW, function(event) {\n        scope.$emit(AV_MODAL.EVENTS.SHOW, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.SHOWN, function(event) {\n\n        if(angular.isFunction(self.options.onShown)) {\n          self.options.onShown();\n        }\n\n        self.animationShowDefer.resolve(true);\n\n        scope.$emit(AV_MODAL.EVENTS.SHOWN, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.HIDE, function(event) {\n        scope.$emit(AV_MODAL.EVENTS.HIDE, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.HIDDEN, function(event) {\n\n        if(angular.isFunction(self.options.onHidden)) {\n          self.options.onHidden.call(this);\n        }\n\n        self.animationHideDefer.resolve(true);\n        scope.$emit(AV_MODAL.EVENTS.HIDDEN, event, self);\n\n        scope.$evalAsync(function() {\n          self.destroy();\n        });\n\n      });\n\n      // Garbage collection\n      scope.$on('$destroy', function() {\n        avModalManager.remove(self._id);\n        self.destroy();\n      });\n\n    };\n\n    proto.show = function() {\n\n      var self = this;\n      this.animationShowDefer = $q.defer();\n\n      this.templatePromise.then(function() {\n        self.isShown() ? self.animationShowDefer.resolve(true) : self.$element.modal('show');\n      });\n\n      return this.animationShowDefer.promise;\n\n    };\n\n    proto.hide = function() {\n\n      var self = this;\n      this.animationHideDefer = $q.defer();\n\n      this.templatePromise.then(function() {\n        !self.isShown() ? self.animationHideDefer.resolve(true) : self.$element.modal('hide');\n      });\n\n      return this.animationHideDefer.promise;\n    };\n\n    proto.isShown = function() {\n      return this.$element.data(AV_MODAL.NAMESPACE.MODAL).isShown;\n    },\n\n    proto.toggle = function() {\n\n      var self = this;\n\n      return this.templatePromise.then(function() {\n        return self.isShown() ? self.hide() : self.show();\n      });\n\n    };\n\n    proto.destroy = function() {\n\n      var self = this;\n\n      return this.templatePromise.then(function() {\n        self.$element.data('AvModal', null);\n        self.$element.remove();\n      });\n\n    };\n\n    proto._createId = function() {\n      // Create a unique id for the modal if not present or passed in via options\n      var id = this.$element.attr('id');\n      if(!id) {\n        // Get id from options or create a unique id\n        id = this.options.id ? this.options.id : availity.uuid('av-modal-id');\n        this.$element.attr('id', id);\n      }\n\n      this._id = id;\n\n      avModalManager.add(id);\n    };\n\n    return Modal;\n  };\n\n  availity.ui.factory('AvModal', ModalFactory);\n\n  availity.ui.directive('avModal', function(AV_MODAL) {\n    return {\n      restrict: 'A',\n      replace: true,\n      transclude: true,\n      scope: {\n        size: '@'\n      },\n      templateUrl: AV_MODAL.TEMPLATES.MODAL\n    };\n  });\n\n})(window);\n","/**\n * 1. All fields should be pristine on first load\n * 2. If field is modified an invalid the field should be marked with an error\n *\n */\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('avValFormController', function() {\n\n    this.ngForm  = null;\n    this.rulesKey = null;\n    this.avValOn = null;\n    this.avValDebounce = null;\n    this.avValInvalid = false;\n\n    // Object that stores the unique id (key) and violation count (value) of all the form fields\n    //\n    // EX:\n    //\n    // {\n    //  avVal001: 0\n    //  avVal002: 2\n    //  avVal003: 1\n    // }\n    this.violations = {};\n\n    this.init = function(form) {\n      this.ngForm = form;\n    };\n\n    /**\n     * Records id of the form field and number of violations\n     * @param  {[type]} id    [description]\n     * @param  {[type]} count [description]\n     * @return {[type]}       [description]\n     */\n    this.record = function(id, count) {\n      this.violations[id] = count;\n\n      var violocationCount = _.reduce(this.violations, function(sum, num) {\n        return sum + num;\n      }, 0);\n\n      this.ngForm.$setValidity('av', violocationCount === 0);\n    };\n\n    this.unrecord = function(id) {\n      if(id && this.violations[id]) {\n        delete this.violations[id];\n      }\n    };\n\n    this.reset = function() {\n      this.ngForm.$setPristine();\n      this.ngForm.$submitted = false;\n    };\n\n    this.$setSubmitted = function() {\n      this.ngForm.$submitted = true;\n    };\n\n    this.setRulesKey = function(key) {\n      this.rulesKey = key;\n    };\n\n  });\n\n  // form.$error = {};\n  // form.$$success = {};\n  // form.$pending = undefined;\n  // form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);\n  // form.$dirty = false;\n  // form.$pristine = true;\n  // form.$valid = true;\n  // form.$invalid = false;\n  // form.$submitted = false;\n\n  availity.ui.directive('avValForm', function($log, $timeout, $parse, AV_VAL, avValAdapter, $rootScope) {\n    return {\n      restrict: 'A',\n      priority: 10,\n      require: ['form', 'avValForm'],\n      controller: 'avValFormController',\n      compile: function() {\n        return {\n          pre: function(scope, iEl, iAttrs, controllers) {\n\n            var ruleFn = $parse(iAttrs.avValForm);\n            var rulesKey = ruleFn(scope);\n            rulesKey = rulesKey || iAttrs.avValForm; // interpolated rule from scope || fixed string\n\n            if(!rulesKey) {\n              $log.error('avValForm requires a rules key in order to run the proper validation rules.');\n              return;\n            }\n\n            scope.$watch(ruleFn, function(_rulesKey, _oldRulesKey) {\n              if(_rulesKey) {\n                avForm.setRulesKey(_rulesKey);\n\n                if(_rulesKey !== _oldRulesKey) {\n                  $timeout(function() {\n                    $log.info('avValForm revalidate');\n                    $rootScope.$broadcast(AV_VAL.EVENTS.REVALIDATE);\n                  });\n                }\n\n              }\n\n            });\n\n            var ngForm = controllers[0];\n            var avForm = controllers[1];\n\n            // Allow form attributes to define the validation behavior of the form fields\n            // inside it.  If `av-val-on` or `av-val-debounce` are on the form then all form\n            // fields inside the form would inherit this behavior.\n            avForm.avValOn = iAttrs.avValOn || null;\n            avForm.avValDebounce = iAttrs.avValDebounce || null;\n            // Allows fields to update with invalid data for dirty form saving\n            avForm.avValInvalid = iAttrs.avValInvalid || false;\n\n            avForm.init(ngForm);\n            avForm.setRulesKey(rulesKey);\n\n          },\n          post: function(scope, iEl, iAttrs, controllers) {\n\n            iEl.attr('novalidate', 'novalidate');  // prevent HTML5 validation from kicking in\n\n            // Disable ng-submit or ng-click handlers and store the function to call for submitting\n            var fn;\n            if(iAttrs.ngSubmit) {\n              // Disable ng-submit event\n              iEl.off('submit');\n              fn = $parse(iAttrs.ngSubmit, /* expensiveChecks */ true);\n            }else if(iAttrs.ngClick) {\n              // Disable ng-click event\n              iEl.off('click');\n              fn = $parse(iAttrs.ngClick, /* expensiveChecks */ true);\n            }\n\n            var ngForm = controllers[0];\n            var avForm = controllers[1];\n\n            scope.$on(AV_VAL.EVENTS.RESET, function () {\n              avForm.reset();\n            });\n\n            iEl.bind('submit', function(event) {\n\n              scope.$broadcast(AV_VAL.EVENTS.SUBMITTED);\n              avForm.$setSubmitted();\n\n              if(ngForm.$invalid) {\n\n                scope.$broadcast(AV_VAL.EVENTS.FAILED);\n\n                $log.info('avValForm invalid.  preventing default submit action');\n\n                event.preventDefault();\n                event.stopImmediatePropagation();\n                scope.$broadcast(event);\n\n                avValAdapter.scroll(iEl);\n                return;\n              }\n\n              ngForm.$setPristine();\n\n              if(!fn) {\n                return;\n              }\n\n              var callback = function() {\n                fn(scope, {$event:event});\n              };\n\n              scope.$apply(callback);\n\n            });\n\n          }\n        };\n      }\n    };\n  });\n\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('AvValFieldController', function($element, avValAdapter, $attrs, avVal, $log, $timeout, $scope, $sniffer) {\n\n    this.ngModel = null;\n    this.rule = null;\n    this.avValForm = null;\n    this.avValInvalid = false;\n\n    var self = this;\n\n    var placeholder = $element[0].placeholder;\n    var noEvent = {};\n\n    this.createId = function() {\n      this.ngModel.avId = availity.uuid('avVal');\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.setRule = function(rule) {\n      this.rule = rule;\n    };\n\n    this.avValForm = function(avValForm) {\n      this.avValForm = avValForm;\n    };\n\n    this.updateModel = function(results) {\n\n      var self = this;\n      var validationKeys = [];\n\n      this.ngModel.avResults = results;\n\n      // set state for each violation\n      angular.forEach(results.violations, function (result) {\n        var key = 'av-' + result.contraintName;\n        validationKeys.push(key);\n        self.ngModel.$setValidity(key, result.valid);\n      });\n\n      // set overall state for validation state\n      this.ngModel.$setValidity('av', this.ngModel.avResults.isValid);\n\n      // store violations\n      this.ngModel.avViolations = this.ngModel.avResults.violations;\n\n      // record the id and violation count in the av-form controller.  this determines if the form is\n      // valid if sum of violations for all form inputs === zero\n      this.avValForm.record(this.ngModel.avId, this.ngModel.avResults.violations.length);\n\n      // remove violation keys that are no longer falsy\n      angular.forEach(this.ngModel.$error, function(value, key) {\n\n        if(_.indexOf(validationKeys, key) === -1 && key.lastIndexOf('av-', 0) === 0) {\n          self.ngModel.$setValidity(key, true);\n        }\n      });\n    };\n\n    this.updateView = function() {\n      if(this.ngModel.$dirty || $scope.avValShow) {\n        avValAdapter.element($element, this.ngModel, this.ngModel.avResults.isValid);\n        avValAdapter.message($element, this.ngModel);\n      }\n    };\n\n    this.validate = function(value) {\n\n      $log.info('validating value [' + value + ']');\n\n      var rulesKey = self.avValForm.rulesKey;\n      var results = avVal.validate(rulesKey, $element, value, self.rule);\n\n      // validate function is called within the context of angular so fn.call and set the context\n      // to \"this\"\n      self.updateModel.call(self, results);\n      self.updateView.call(self);\n\n      return results;\n    };\n\n    this.validateModel = function(value) {\n\n      self.validate(value, true);\n      return value;\n\n    };\n\n    this.validateView = function(value) {\n\n      var results = self.validate(value);\n\n      if(self.avValForm.avValInvalid || self.avValInvalid) {\n        // allows invalid data from view to update model for dirty saving\n        return value;\n      }\n\n      // prevent invalid data from view to update model\n      return results.isValid ? value : undefined;\n\n    };\n\n    this.onDebounce = function() {\n\n      var value = $element.val().trim();\n\n      if(this.isCheckbox()) {\n        this.ngModel.$setViewValue($element[0].checked);\n      } else if(this.isRadio()) {\n        this.ngModel.$setViewValue($attrs.value);\n      }else {\n        this.ngModel.$setViewValue(value);\n      }\n\n    };\n\n    this.isRadio = function() {\n      return $element.is('input') && $attrs.type === 'radio';\n    };\n\n    this.isCheckbox = function() {\n      return $element.is('input') && $attrs.type === 'checkbox';\n    };\n\n    this.reset = function() {\n\n      var violations = this.ngModel.avResults.violations;\n      violations.splice(0, violations.length);\n\n      avValAdapter.message($element, this.ngModel);\n      avValAdapter.reset($element);\n\n    };\n\n    this.event = function(event, avValDebounce) {\n\n      var self = this;\n\n      $element.unbind('input');\n\n      var debounce;\n\n      $element.on(event, function() {\n\n        // https://github.com/angular/angular.js/blob/v1.2.27/src/ng/directive/input.js#L508\n        if($sniffer.msie <= 11 && (event || noEvent).type === 'input' && $element[0].placeholder !== placeholder) {\n          placeholder = $element[0].placeholder;\n          return;\n        }\n\n        $timeout.cancel(debounce);\n        debounce = $timeout(function() {\n          $scope.$apply(function() {\n            self.onDebounce();\n          });\n        }, avValDebounce);\n\n      });\n\n    };\n\n  });\n\n  // Events:\n  //\n  //  click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown\n  //  keyup keypress submit focus blur copy cut paste\n  availity.ui.directive('avValField', function($log, $timeout, avVal, avValAdapter, AV_VAL) {\n    return {\n      restrict: 'A',\n      controller: 'AvValFieldController',\n      require: ['^avValForm', 'ngModel', 'avValField'],\n      scope: {\n        avValDebounce: '@?',\n        avValOn: '@?',\n        avValShow: '=?'\n      },\n      link: function(scope, element, attrs, controllers) {\n\n        var rule = attrs.avValField;\n        var avValForm = controllers[0];\n        var ngModel = controllers[1];\n        var avValField = controllers[2];\n\n        var avValOn = scope.avValOn || avValForm.avValOn || 'input';\n\n        if(!ngModel && !rule) {\n          $log.error('avValField requires ngModel and a validation rule to run.');\n          return;\n        }\n\n        // Allows fields to update with invalid data for dirty form saving\n        avValField.avValInvalid = attrs.avValInvalid || false;\n\n        // CACHE THE MODEL\n        avValField.setNgModel(ngModel);\n\n        avValField.avValForm(avValForm);\n\n        avValField.setRule(rule);\n\n        avValField.createId();\n\n        // DEBOUNCE\n        var avValDebounce = parseInt(scope.avValDebounce || (avValForm.avValDebounce || AV_VAL.DEBOUNCE), 10);\n        avValDebounce = _.isNumber(avValDebounce) ? avValDebounce : AV_VAL.DEBOUNCE;\n\n        var debounceAllowed = !avValField.isRadio() && !avValField.isCheckbox() && avValOn !== 'blur';\n\n        if(!debounceAllowed) {\n          avValDebounce = 0;\n        }\n\n        // EVENT LISTENER\n        avValField.event(avValOn, avValDebounce);\n\n        // (view to model)\n        ngModel.$parsers.push(avValField.validateView);\n\n        // (model to view) - added to beginning of array because formatters\n        // are processed in reverse order thus allowing the model to be transformed\n        // before the validation framework check for validity.\n        ngModel.$formatters.unshift(avValField.validateModel);\n\n        scope.$on(AV_VAL.EVENTS.REVALIDATE, function() {\n          avValField.validate(ngModel.$viewValue);\n        });\n\n        // SUBMITTED EVENT\n        scope.$on(AV_VAL.EVENTS.SUBMITTED, function() {\n          ngModel.$dirty = true;\n          avValField.validate(ngModel.$viewValue);\n        });\n\n        // - Removes all errors on page,\n        // - does not reset view or model values.  This is to be handled by the app.\n        scope.$on(AV_VAL.EVENTS.RESET, function () {\n          avValField.reset();\n        });\n\n        scope.$on('$destroy', function () {\n          avValForm.unrecord(ngModel.avId);\n        });\n\n      }\n    };\n  });\n\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.provider('avPopoverConfig', function() {\n\n    var config = {\n      showOnLoadHideDelay: 10000\n    };\n\n    this.set = function(options) {\n      angular.extend(config, options);\n    };\n\n    this.$get = function() {\n      return angular.copy(config);\n    };\n  });\n\n  availity.ui.constant('AV_POPOVER', {\n    NAME: 'bs.popover'\n  });\n\n  availity.ui.controller('AvPopoverController', function($element, $scope, AV_POPOVER, $timeout, avPopoverConfig) {\n    this.options = angular.extend({}, avPopoverConfig);\n\n    this.listeners = function() {\n\n      var self = this;\n\n      angular.forEach(['show', 'shown', 'hide', 'hidden'], function(name) {\n        $element.on(name + '.bs.popover', function(ev) {\n          $scope.$emit('av:popover:' + name, ev);\n        });\n      });\n\n      $scope.$on('destroy', function() {\n        self.destroy();\n      });\n    };\n\n    this.plugin = function() {\n      return $element.data(AV_POPOVER.NAME);\n    };\n\n    this.show = function() {\n      $element.popover('show');\n    };\n\n    this.hide = function() {\n      $element.popover('hide');\n    };\n\n    this.toggle = function() {\n      $element.popover('toggle');\n    };\n\n    this.destroy = function() {\n      $element.popover('destroy');\n    };\n\n\n    this.init = function() {\n\n      this.listeners();\n\n      if($scope.showOnLoad) {\n\n        this.show();\n\n        if($scope.delay && $scope.delay.hide) {\n          $timeout(this.hide, $scope.delay.hide, false);\n          return;\n        }\n        // If no delay is found or cannot be parsed, set a default timeout so that the popover doesn't stick around forever\n        $timeout(this.hide, this.options.showOnLoadHideDelay, false);\n      }\n    };\n\n\n  });\n\n  availity.ui.directive('avPopover', function() {\n    return {\n      restrict: 'A',\n      controller: 'AvPopoverController',\n      scope: {\n        showOnLoad: '=',\n        delay: '='\n      },\n      link: function(scope, element, attrs, avPopover) {\n\n        var options = {};\n\n        scope.$evalAsync(function() {\n          element.popover(angular.extend({}, options, {\n            html: true\n          }));\n          avPopover.init();\n        });\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('avValContainerController', function($scope, $timeout) {\n\n    this.message = function(ngModel) {\n\n      var message = null;\n      if(ngModel.avResults.violations.length && ngModel.avResults.violations[0].message) {\n        message = ngModel.avResults.violations[0].message;\n      }else {\n        message = null;\n      }\n\n      // $timeout is needed to update the UI from $broadcast events\n      $timeout(function() {\n        $scope.messages.message = message;\n      });\n\n    };\n\n  });\n\n  availity.ui.directive('avValContainer', function() {\n    return {\n      restrict: 'A',\n      controller: 'avValContainerController',\n      template: '<p class=\"help-block\" data-ng-bind-html=\"messages.message\"></p>',\n      replace: true,\n      scope: {\n\n      },\n      link: function(scope) {\n        scope.messages = _.extend({}, scope.messages, { message: null, id: null });\n      }\n    };\n  });\n\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BOOTSTRAP_ADAPTER', {\n    CLASSES: {\n      SUCCESS: 'has-success',\n      WARNING: 'has-warning',\n      ERROR: 'has-error',\n      FEEDBACK: 'has-feedback',\n      HELP: 'help-block',\n      FORM_GROUP: '.form-group:first',\n      NAVBAR: 'navbar-fixed-top'\n    },\n    SELECTORS: {\n      CONTAINER: 'container-id',\n      DATA_CONTAINER: 'data-container-id'\n    },\n    CONTROLLER: '$avValContainerController'\n  });\n\n  availity.ui.factory('avValBootstrapAdapter', function(AV_BOOTSTRAP_ADAPTER, $timeout, $log) {\n\n    return {\n\n      element: function(element, ngModel) {\n        if(ngModel.$valid) {\n          element.parents(AV_BOOTSTRAP_ADAPTER.CLASSES.FORM_GROUP).removeClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n        }else {\n          element.parents(AV_BOOTSTRAP_ADAPTER.CLASSES.FORM_GROUP).addClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n        }\n      },\n\n      reset: function(element) {\n        element.parents(AV_BOOTSTRAP_ADAPTER.CLASSES.FORM_GROUP).removeClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n      },\n\n      message: function(element, ngModel) {\n\n        var selector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.HELP\n        ].join('');\n\n        var $el = $(element);\n\n        var target = $el.attr(AV_BOOTSTRAP_ADAPTER.SELECTORS.CONTAINER);\n        target = target || $el.attr(AV_BOOTSTRAP_ADAPTER.SELECTORS.DATA_CONTAINER);\n        // default to siblings\n        target = target ? $('#' + target) : $el.siblings(selector);\n\n        if(target.length === 0) {\n          $log.warn('avValBootstrapAdapter could not find validation container for {0}', [element]);\n          return;\n        }\n\n        var el = target[0];\n        $el = angular.element(el);\n        var avValModel = $el.data(AV_BOOTSTRAP_ADAPTER.CONTROLLER); // get the av val message controller\n        if(avValModel) {\n          avValModel.message(ngModel);\n        }\n      },\n\n      scroll: function(form) {\n\n        // Bootstrap fixed navbars causes bad scroll-to offsets so find them all\n        var navbarSelector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.NAVBAR\n        ].join('');\n\n        // Add up all the heights to find the true offset\n        var offset = 0;\n        $(navbarSelector).each(function() {\n          offset += $(this).outerHeight();\n        });\n\n        var selector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR,\n          ':first'\n        ].join('');\n\n        var $target = $(form).find(selector);\n        $timeout(function() {\n          // scroll to offset top of first error minus the offset of the navbars\n          $('body, html').animate({scrollTop: $target.offset().top - offset}, 'fast');\n        }, 0, false);\n      }\n    };\n  });\n\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_VAL_ADAPTER', {\n    DEFAULT: 'avValBootstrapAdapter'\n  });\n\n  availity.ui.provider('avValAdapter', function() {\n\n    var that = this;\n\n    this.setAdapter = function(adapter) {\n      this.adapter = adapter;\n    };\n\n    this.$get = function(AV_VAL_ADAPTER, $injector) {\n\n      var Adapter = function() {\n        var adapterName = that.adapter || AV_VAL_ADAPTER.DEFAULT;\n        this.adapter = $injector.get(adapterName);\n      };\n\n      var proto = Adapter.prototype;\n\n      proto.element = function(element, ngModel) {\n        this.adapter.element(element, ngModel);\n      };\n\n      proto.reset = function(element) {\n        this.adapter.reset(element);\n      };\n\n      proto.message = function(element, ngModel) {\n        this.adapter.message(element, ngModel);\n      },\n\n      proto.scroll = function(form) {\n        this.adapter.scroll(form);\n      };\n\n      return new Adapter();\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.provider('avDropdownConfig', function() {\n    var config = {\n      closeOnResize: true,\n      dropdownAutoWidth: true,\n      minimumResultsForSearch: 5\n    };\n\n    this.set = function(options) {\n      angular.extend(config, options);\n    };\n\n    this.$get = function() {\n      return angular.copy(config);\n    };\n  });\n\n  availity.ui.constant('AV_DROPDOWN', {\n    OPTIONS: [\n      'width',\n      'minimumInputLength',\n      'maximumInputLength',\n      'minimumResultsForSearch',\n      'maximumSelectionSize',\n      'placeholderOption',\n      'separator',\n      'allowClear',\n      'multiple',\n      'closeOnSelect',\n      'openOnEnter',\n      'id',\n      'matcher',\n      'sortResults',\n      'formatSelection',\n      'formatResult',\n      'formatResultCssClass',\n      'formatNoMatches',\n      'formatSearching',\n      'formatAjaxError',\n      'formatInputTooShort',\n      'formatInputTooLong',\n      'formatSelectionTooBig',\n      'formatLoadMore',\n      'createSearchChoice',\n      'createSearchChoicePosition',\n      'initSelection',\n      'tokenizer',\n      'tokenSeparators',\n      'query',\n      'ajax',\n      'data',\n      'tags',\n      'containerCss',\n      'containerCssClass',\n      'dropdownCss',\n      'dropdownCssClass',\n      'dropdownAutoWidth',\n      'adaptContainerCssClass',\n      'adaptDropdownCssClass',\n      'escapeMarkup',\n      'selectOnBlur',\n      'loadMorePadding',\n      'nextSearchTerm',\n      'correlationId'\n    ]\n  });\n\n\n  availity.ui.controller('AvDropdownController', function($element, $attrs, AV_UI, AV_DROPDOWN, avDropdownConfig, $log, $scope, $timeout, $parse) {\n\n    var self = this;\n    this.options = {};\n    this.match = null;\n    this.ngModel = null;\n\n    this.init = function() {\n\n      self.options = angular.extend({}, avDropdownConfig);\n\n      _.forEach($attrs, function(value, key) {\n        if(_.contains(AV_DROPDOWN.OPTIONS, key.replace('data-', ''))) {\n          self.options[key] = $scope.$eval(value);\n        }\n      });\n\n      if(this.isRemoteMultiple()) {\n        self.options.multiple = angular.isDefined($attrs.multiple);\n      }\n\n      self.multiple = angular.isDefined($attrs.multiple);\n\n      if(self.options.query) {\n\n        self.queryFn = self.options.query;\n        // Function used to query results for the search term.\n        self.options.query = self.query;\n        // Function used to get the id from the choice object or a string representing the key under which the id is stored.\n        self.options.id = self.getId;\n      }\n\n    };\n\n    this.isRemoteMultiple = function() {\n      if(angular.isDefined($attrs.multiple) && $element.get(0).tagName.toLowerCase() === 'input') {\n        return true;\n      }\n      return false;\n    };\n\n    this.setRemoteViewValue = function(e) {\n\n      var values = this.ngModel.$viewValue;\n\n      if(!angular.isArray(values) || !angular.isObject(values)) {\n        values = [];\n      }\n\n      if(e.added) {\n        // Adding to collection\n        values.push(e.added);\n      } else {\n        // Removing from collection\n        var index = _.findIndex(values, function(value) {\n          return  _.matches(e.removed)(value);\n        });\n        values.splice(index, 1);\n      }\n\n      this.ngModel.$setViewValue(values);\n\n    };\n\n    this.setViewValue = function(e) {\n      this.ngModel.$setViewValue(e.added);\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.getSelected = function(model) {\n\n      if(self.options.query) {\n        return 0;\n      }\n\n      var items = this.collection($scope);\n\n      var index = _.findIndex(items, function(item) {\n        if (!self.valueFn) {\n          return angular.equals(item, model);\n        } else {\n          var locals = {};\n          locals[self.valueName] = item;\n          var value = self.valueFn($scope, locals);\n          return angular.equals(value, model);\n        }\n      });\n\n      return index;\n\n    };\n\n    // Result:\n    //\n    // {\n    //   \"code\": \"252Y00000X\",\n    //   \"value\": \"AGENCIES,EARLY INTERVENTION PROVIDER AGENCY,NOT APPLICABLE|Agency\",\n    //   \"id\": \"252Y00000X\"\n    // }\n    this.getId = function(result) {\n      return result.id;\n    };\n\n    // Wrapper around the query function for Select2.  When the promise resolves\n    // the callback\n    this.query = function(options) {\n\n      self.queryFn(options).then(function(response) {\n\n        // Callback function that should be called with the result object. The result object:\n        //\n        // result.results (object) - Array of result objects. The default renderers\n        //    expect objects with id and text keys. The id property is required,\n        //    even if custom renderers are used. The object may also contain a children\n        //    key if hierarchical data is displayed. The object may also contain a disabled\n        //    boolean property indicating whether this result can be selected.\n        //\n        // result.more (boolean) - true if more results are available for the current\n        //    search term.\n        //\n        // results.context (object) - A user-defined object that should be made available\n        //    as the context parameter to the query function on subsequent queries to load\n        //    more result pages for the same search term. See the description of\n        //    options.context parameter.\n        options.callback({more: response.more, results: response.results});\n      });\n    };\n\n    this.setValue = function() {\n\n      var viewValue = self.ngModel.$viewValue;\n      var selected = null;\n      if(viewValue) {\n        selected = this.getSelected(viewValue);\n      }\n\n      // var apply = scope.$evalAsync || $timeout;\n      $timeout(function() {\n        $element\n          .select2('val',  (selected === null || selected === 'undefined') ? '' : selected); // null === '' for Select2\n      });\n    };\n\n    this.getMultiSelected = function(viewValue) {\n\n      var indices = [];\n\n      if($element.get(0).tagName.toLowerCase() !== 'input') {\n        var options = this.collection($scope);\n\n        _.each(viewValue, function(savedObject) {\n          var index = _.findIndex(options, function(value) {\n            var temp = angular.copy(savedObject); // remove hashkeys for comparison\n            return _.matches(temp)(value);\n          });\n          indices.push(index);\n        });\n\n      } else {\n\n        var inputViewValues = this.ngModel.$modelValue;\n\n        _.each(inputViewValues, function(savedObject) {\n\n          if(_.isUndefined(savedObject.id) ) {\n\n            if(savedObject.id || savedObject[self.options.correlationId]) {\n\n              savedObject.id = savedObject[self.options.correlationId];\n\n            } else {\n\n              throw new Error('dropdown list must have a id or a alternative value to use as a id');\n            }\n\n          }\n\n        });\n      }\n\n      if(indices.length > 0) {\n        viewValue = indices;\n      }\n\n      return viewValue;\n\n    };\n\n    this.setValues = function() {\n\n      var viewValue = self.ngModel.$viewValue;\n\n      if(!angular.isArray(viewValue)) {\n        viewValue = [];\n      }\n\n      if(!_.isEmpty(viewValue) && _.isObject(viewValue[0])) {\n        viewValue = this.getMultiSelected(viewValue);\n      }\n\n      $timeout(function() {\n        $element\n          .select2('val', viewValue);\n      });\n    };\n\n    this.ngOptions = function() {\n\n      this.match = $attrs.ngOptions.match(AV_UI.NG_OPTIONS);\n      if(!this.match) {\n        throw new Error('Invalid ngOptions for avDropdown');\n      }\n      // AV_UI.NG_OPTIONS regex will parse into arrays like below:\n      //\n      // 0: \"state.name for state in states\"\n      // 1: \"state.name\"\n      // 2: undefined\n      // 3: undefined\n      // 4: \"state\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"states\"\n      // 8: undefined\n      //\n      // 0: \"state.id as state.name for state in states\"\n      // 1: \"state.id\"\n      // 2: \"state.name\"\n      // 3: undefined\n      // 4: \"state\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"states\"\n      // 8: undefined\n      //\n      // 0: \"state.name for state in states track by state.id\"\n      // 1: \"state.name\"\n      // 2: undefined\n      // 3: undefined\n      // 4: \"state\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"states\"\n      // 8: \"state.id\"\n      //\n      // 0: \"person.fullName as (person.lastName + ', ' + person.firstName) for person in feeScheduleModel.persons\"\n      // 1: \"person.fullName\"\n      // 2: \"(person.lastName + ', ' + person.firstName)\"\n      // 3: undefined\n      // 4: \"person\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"feeScheduleModel.persons\"\n      // 8: undefined\n      //\n      this.displayFn = $parse(this.match[2] || this.match[1]); // this is the function to retrieve the text to show as\n      this.collection = $parse(this.match[7]);\n      this.valueName = this.match[4] || this.match[6];\n      this.valueFn = $parse(this.match[2] ? this.match[1] : this.valueName);\n      this.keyName = this.match[5];\n\n      $scope.$watchCollection(this.collection, function(newVal, oldVal) {\n        if(angular.equals(newVal, oldVal)) {\n          return;\n        }\n\n        self.setValue();\n\n      }, true);\n\n    };\n  });\n\n  availity.ui.directive('avDropdown', function($timeout, $log, $window) {\n\n    return {\n      restrict: 'A',\n      require: ['ngModel', 'avDropdown'],\n      controller: 'AvDropdownController',\n      link: function(scope, element, attrs, controllers) {\n        var ngModel = controllers[0];\n        var avDropdown = controllers[1];\n\n        avDropdown.setNgModel(ngModel);\n        avDropdown.init();\n\n        if(attrs.ngOptions ) {\n          avDropdown.ngOptions();\n        }\n\n        ngModel.$parsers.push(function(value) {\n          var parent = element.prev();\n          parent\n            .toggleClass('ng-invalid', !ngModel.$valid)\n            .toggleClass('ng-valid', ngModel.$valid)\n            .toggleClass('ng-invalid-required', !ngModel.$valid)\n            .toggleClass('ng-valid-required', ngModel.$valid)\n            .toggleClass('ng-dirty', ngModel.$dirty)\n            .toggleClass('ng-pristine', ngModel.$pristine);\n          return value;\n        });\n\n        element.on('change', function(e) {\n\n          // special case since the ajax handling doesn't bind to the model correctly\n          // this has to do with select2 (v3.5.2) using a hidden field instead of a select for ajax\n          if(avDropdown.options.query) {\n            $timeout(function() {\n              // look at moving this to the controller\n              if(avDropdown.isRemoteMultiple()) {\n                avDropdown.setRemoteViewValue(e);\n              } else {\n                avDropdown.setViewValue(e);\n              }\n\n            }, false, 0);\n          }\n\n          $log.info(e);\n\n        });\n\n        // fires ng-focus when select2-focus fires.\n        element.on('select2-focus', function() {\n          if(attrs.ngFocus) {\n            scope.$eval(scope.$eval(attrs.ngFocus));\n          }\n        });\n\n        // fires ng-blur when select2-blur occurs.\n        element.on('select2-blur', function() {\n          if(attrs.ngBlur) {\n            scope.$eval(scope.$eval(attrs.ngBlur));\n          }\n        });\n\n        // https://github.com/t0m/select2-bootstrap-css/issues/37#issuecomment-42714589\n        element.on('select2-open', function () {\n          // look for .has-success, .has-warning, .has-error\n          // (really look for .has-* … which is good enough for the demo page, but obviously might interfere with other CSS-classes starting with \"has-\")\n          if(element.parents('[class*=\"has-\"]').length) {\n\n            // get all CSS-classes from the element where we found \"has-*\" and collect them in an array\n            var classNames = $(this).parents('[class*=\"has-\"]')[0].className.split(/\\s+/);\n\n            // go through the class names, find \"has-\"\n            for(var i = 0; i < classNames.length; ++i) {\n              if(classNames[i].match('has-')) {\n                $('#select2-drop').addClass(classNames[i]);\n              }\n            }\n          }\n        });\n\n\n        var _$render = ngModel.$render;\n        ngModel.$render = function() {\n          _$render();\n\n          if(avDropdown.multiple) {\n            avDropdown.setValues();\n          }else {\n            avDropdown.setValue();\n          }\n\n        };\n\n        var win = angular.element($window);\n\n        win.bind('resize', function() {\n          element.select2('close');\n        });\n\n        attrs.$observe('disabled', function (value) {\n          element.select2('enable', !value);\n        });\n\n        attrs.$observe('readonly', function (value) {\n          element.select2('readonly', !!value);\n        });\n\n        scope.$on('destroy', function() {\n          element.select2('destroy');\n        });\n\n        $timeout(function() {\n          element.select2(avDropdown.options);\n        });\n      }\n    };\n  });\n\n})(window);\n","/**\n * Inspiration https://github.com/mgcrea/angular-strap/blob/v0.7.8/src/directives/datepicker.js\n */\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.provider('avDatepickerConfig', function() {\n\n    var config = {\n      autoclose: true,\n      todayHighlight: true,\n      format: 'mm/dd/yyyy',\n      forceParse: false\n    };\n\n    this.set = function(options) {\n      angular.extend(config, options);\n    };\n\n    this.$get = function() {\n      return angular.copy(config);\n    };\n\n  });\n\n  // Options: http://bootstrap-datepicker.readthedocs.org/en/latest/options.html\n  availity.ui.constant('AV_DATEPICKER', {\n    CONTROLLER: '$ngModelController',\n    ADD_ON_SELECTOR: '[data-toggle=\"datepicker\"]',\n    OPTIONS: [\n      'autoclose',\n      'beforeShowDay',\n      'beforeShowMonth',\n      'calendarWeeks',\n      'clearBtn',\n      'toggleActive',\n      'container',\n      'daysOfWeekDisabled',\n      'datesDisabled',\n      'defaultViewDate',\n      'endDate',\n      'forceParse',\n      'format',\n      'inputs',\n      'keyboardNavigation',\n      'language',\n      'minViewMode',\n      'multidate',\n      'multidateSeparator',\n      'orientation',\n      'startDate',\n      'startView',\n      'todayBtn',\n      'todayHighlight',\n      'weekStart',\n      'showOnFocus',\n      'disableTouchKeyboard',\n      'enableOnReadonly',\n      'modelFormat'\n    ],\n    DEFAULTS: {\n      MODELFORMAT: 'YYYY-MM-DD'\n    }\n  });\n\n  availity.ui.controller('AvDatepickerController', function($element, $attrs, AV_DATEPICKER, $scope, avDatepickerConfig) {\n\n    var self = this;\n    this.options = {};\n\n    this.setValue = function() {\n\n      var viewValue = self.ngModel.$viewValue;\n      var plugin = this.plugin();\n\n      if(!viewValue || !plugin) {\n        return;\n      }\n\n      plugin.setDate(viewValue);\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.findModel = function() {\n\n      var ngModel = null;\n\n      var $input = $element.find('input:first').andSelf();\n      if($input.length) {\n        ngModel = $input.data(AV_DATEPICKER.CONTROLLER);\n        this.setNgModel(ngModel);\n      }\n\n      return ngModel;\n    };\n\n    this.modelToView = function(isoWrap) {\n      var viewValue = $.fn.datepicker.DPGlobal.formatDate(isoWrap, self.options.format, 'en');\n      return viewValue;\n    };\n\n    this.wrapIsoDate = function() {\n\n      var date = self.ngModel.$modelValue;\n      var isoWrap;\n\n      if(date !== undefined && date !== null) {\n        var m = moment(date);\n        isoWrap = m.isValid() ? m.toDate() : null;\n      }\n\n      return isoWrap;\n    };\n\n    this.viewToModel = function() {\n      var format = $.fn.datepicker.DPGlobal.parseFormat(self.options.format);\n      var utcDate = $.fn.datepicker.DPGlobal.parseDate(self.ngModel.$viewValue, format, 'en');\n\n      var plugin = self.plugin();\n\n      if(!plugin) {\n        return;\n      }\n\n      // jscs: disable\n      var localDate = plugin._utc_to_local(utcDate);\n      // jscs: enable\n\n      if(self.options.modelFormat && localDate) {\n        localDate = moment(localDate).format(self.options.modelFormat);\n      }\n\n      return localDate;\n    };\n\n    this.init = function() {\n\n      self.options = angular.extend({}, avDatepickerConfig);\n\n      _.forEach($attrs, function(value, key) {\n        if(_.contains(AV_DATEPICKER.OPTIONS, key.replace('data-', ''))) {\n          self.options[key] = $scope.$eval(value);\n        }\n      });\n\n      if(self.options.modelFormat && self.options.modelFormat.toLowerCase() === 'default') {\n        self.options.modelFormat = AV_DATEPICKER.DEFAULTS.MODELFORMAT;\n      }\n    };\n\n    this.plugin = function() {\n      return $element.data('datepicker');\n    };\n\n    this.destroy = function() {\n      var plugin = this.plugin();\n      if(plugin) {\n        plugin.remove();\n        $element.data('datepicker', null);\n      }\n    };\n\n    this.hide = function() {\n      var plugin = this.plugin();\n      if(plugin) {\n        plugin.hide();\n      }\n    };\n  });\n\n  availity.ui.directive('avDatepicker', function($window, $log, AV_DATEPICKER) {\n    return {\n      restrict: 'A',\n      require: ['ngModel', 'avDatepicker'],\n      controller: 'AvDatepickerController',\n      link: function(scope, element, attrs, controllers) {\n\n        var ngModel = controllers[0];\n        var avDatepicker = controllers[1];\n\n        if(!ngModel) {\n          ngModel = avDatepicker.findModel();\n          if(!ngModel) {\n            $log.error('avDatepicker requires ngModel');\n            return;\n          }\n        }\n\n        avDatepicker.init();\n        avDatepicker.setNgModel(ngModel);\n\n        element.on('changeDate', function(e) {\n          $log.info('avDatepicker changeDate {0}', [e]);\n        });\n\n        // (view to model)\n        ngModel.$parsers.push(avDatepicker.viewToModel);\n\n        // (model to view) - added to end of formatters array\n        // because they are processed in reverse order.\n        // if the model is in Date format and send to the validation framework\n        // prior to getting converted to the expected $viewValue format,\n        // the validation will fail.\n        ngModel.$formatters.push(avDatepicker.modelToView);\n        ngModel.$formatters.push(avDatepicker.wrapIsoDate);\n\n        var _$render = ngModel.$render;\n        ngModel.$render = function() {\n          _$render();\n          avDatepicker.setValue();\n        };\n\n        var win = angular.element($window);\n\n        win.bind('scroll', function() {\n          avDatepicker.hide();\n        });\n\n        var target = element.siblings(AV_DATEPICKER.ADD_ON_SELECTOR);\n        if(target.length) {\n          target.on('click.datepicker', function() {\n            if(!element.prop('disabled')) { // Hack check for IE 8\n              element.focus();\n            }\n          });\n        }\n\n        scope.$on('destroy', function() {\n          avDatepicker.destroy();\n          if(target.length) {\n            target.off('click.datepicker');\n          }\n        });\n\n        scope.$evalAsync(function() {\n          element.datepicker(avDatepicker.options);\n        });\n      }\n    };\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_UI_IDLE', {\n    EVENTS: {\n      OK: 'mousedown.av.idle.notifier'\n    },\n    TEMPLATES: {\n      BASE: 'ui/idle/idle-tpl.html',\n      SESSION: 'ui/idle/idle-session-tpl.html',\n      WARNING: 'ui/idle/idle-warning-tpl.html'\n    }\n  });\n\n  availity.ui.provider('avIdleNotifier', function() {\n\n    var sessionTemplate;\n    var warningTemplate;\n    var $scope;\n\n    this.setSessionTemplate = function(template) {\n      sessionTemplate = template;\n    };\n\n    this.setWarningTemplate = function(template) {\n      warningTemplate = template;\n    };\n\n    this.$get = function(AV_IDLE, AV_UI_IDLE, $rootScope, AvModal, $document, $timeout) {\n\n      var AvIdleNotifier = function() {\n        this.listeners = [];\n        this.modal = null;\n      };\n\n      var proto = AvIdleNotifier.prototype;\n\n      proto.init = function() {\n\n        $scope = $rootScope.$new(true);\n        $scope.idle = {};\n\n        this.initListeners();\n      };\n\n      proto.initListeners = function() {\n\n        var self = this;\n        var listener = null;\n\n        // ACTIVE IDLING\n        listener = $rootScope.$on(AV_IDLE.EVENTS.IDLE_ACTIVE, function() {\n          self.showWarning();\n        });\n        this.listeners.push(listener);\n\n        // INACTIVE IDLING\n        listener = $rootScope.$on(AV_IDLE.EVENTS.IDLE_INACTIVE, function() {\n          self.hideWarning();\n        });\n        this.listeners.push(listener);\n\n        // SESSION TIMEOUT OUT\n        listener = $rootScope.$on(AV_IDLE.EVENTS.SESSION_TIMEOUT_ACTIVE, function() {\n          self.showSession();\n        });\n        this.listeners.push(listener);\n\n      };\n\n      proto.destroyListeners = function() {\n        // turn off each listener @see http://stackoverflow.com/a/14898795\n        _.each(this.listeners, function(listener) {\n          listener();\n        });\n      };\n\n      proto.showWarning = function() {\n\n        var self = this;\n\n        if(this.modal !== null) {\n          return;\n        }\n\n        $scope = $rootScope.$new(true);\n        $scope.idle = {};\n        $scope.idle.template = AV_UI_IDLE.TEMPLATES.WARNING;\n\n        this.modal = new AvModal({\n          show: true,\n          scope: $scope,\n          backdrop: 'static',\n          templateUrl: AV_UI_IDLE.TEMPLATES.BASE\n        });\n\n        $document.find('body').on(AV_UI_IDLE.EVENTS.OK, function() {\n          self.hideWarning();\n        });\n\n      };\n\n      proto.hideWarning = function() {\n        if(this.modal) {\n          this.disableBackDrop();\n          this.modal.hide();\n        }\n\n        this.modal = null;\n      };\n\n      proto.disableBackDrop = function() {\n        $document.find('body').off(AV_UI_IDLE.EVENTS.OK);\n      };\n\n      proto.showSession = function() {\n        var self = this;\n        this.disableBackDrop();\n\n        $timeout(function() {\n          $scope.idle.template = AV_UI_IDLE.TEMPLATES.SESSION;\n          $scope.idle.onSessionTimeout = _.bind(self.onSessionTimeout, self);\n        }, 0, true);\n\n      };\n\n      proto.onSessionTimeout = function() {\n        $rootScope.$broadcast(AV_IDLE.EVENTS.SESSION_TIMEOUT_REDIRECT);\n      };\n\n      return new AvIdleNotifier();\n\n    };\n\n  });\n\n  availity.ui.run(function(avIdleNotifier) {\n    avIdleNotifier.init();\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_MASK', {\n    NAME: 'inputmask',\n    DEFAULTS: {\n      date: '99/99/9999',\n      phone: '(999) 999-9999',\n      SSN:'999-99-9999'\n    }\n  });\n\n  availity.ui.directive('avMask', function($window, $log, AV_MASK) {\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function(scope, element, attrs) {\n\n        var maskType = AV_MASK.DEFAULTS[attrs['avMask']];\n        if(!maskType) {\n          maskType = attrs['avMask'];\n        }\n\n        scope.$evalAsync(function() {\n          element.inputmask(maskType);\n        });\n\n        scope.$on('$destroy', function () {\n          element.inputmask('remove');\n        });\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('AvHasPermissionController', function($element) {\n\n    this.onSuccess = function(isAuthorized) {\n      if(isAuthorized) {\n        $element.removeClass('ng-hide');\n        $element.show();\n      } else {\n        $element.remove();\n      }\n    };\n\n    this.onError = function() {\n      $element.remove();\n    };\n\n  });\n\n  availity.ui.directive('avHasPermission', function(avUserAuthorizations) {\n    return {\n      restrict: 'EA',\n      controller: 'AvHasPermissionController',\n      require: ['avHasPermission'],\n      link: function($scope, $element, $attr, controllers) {\n\n        var avHasPermission = controllers[0];\n\n        $element.hide();\n\n        $scope.$watch($attr.avHasPermission, function(permissions) {\n\n          if(!angular.isArray(permissions)) {\n            permissions = _.words('' + permissions);\n          }\n\n          avUserAuthorizations.isAnyAuthorized(permissions).then(avHasPermission.onSuccess, avHasPermission.onError);\n        });\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.directive('avAnalytics', function() {\n    return {\n      scope: {\n        options: '=avAnalytics'\n      },\n      controller: function($scope) {\n        this.getOptions = function() {\n          return $scope.options;\n        };\n      }\n    };\n  });\n\n  availity.ui.controller('AvAnalyticsController', function(avAnalyticsUtils, avAnalytics) {\n\n    this.onEvent = function(event, element, options) {\n\n      // convert the directive attributes into object with properties with sane defaults\n      var properties = angular.extend(\n        {\n          level: 'info'\n        },\n        options,\n        {\n          event: event.type\n        }\n      );\n\n      // If an external link is detected\n      if(avAnalyticsUtils.isExternalLink(properties)) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      var promise = avAnalytics.trackEvent(properties);\n      promise['finally'](function() {\n        if(avAnalyticsUtils.isExternalLink(properties)) {\n          document.location = element.attr('href');\n        }\n      });\n    };\n  });\n\n  availity.ui.directive('avAnalyticsOn', function(AV_ANALYTICS, avAnalyticsUtils) {\n    return {\n      restrict: 'A',\n      controller: 'AvAnalyticsController',\n      require: ['avAnalyticsOn','?^avAnalytics'],\n      link: function(scope, element, attrs, controllers) {\n        var childCtrl = controllers[0];\n        var parentCtrl = {};\n        var parentOptions = {};\n\n        if (controllers[1])  {\n          parentCtrl = controllers[1];\n          parentOptions = parentCtrl.getOptions();\n        }\n\n        var options = angular.extend(\n          {},\n          parentOptions,\n          avAnalyticsUtils.getProperties(attrs)\n        );\n\n        var eventType = attrs.avAnalyticsOn || AV_ANALYTICS.EVENTS.DEFAULT;\n\n        element.on(eventType, function(event) {\n          childCtrl.onEvent(event, element, options);\n        });\n      }\n    };\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.requires.push('ng.shims.placeholder');\n\n  availity.ui.config(function($provide) {\n\n    $provide.decorator('placeholderDirective', ['$delegate', '$log', function($delegate, $log) {\n\n      var directive = $delegate[0];\n      var originalLink = directive.link;\n\n      var newLink = function(scope, element, attrs) {\n\n        if(originalLink && _.contains(_.keys(attrs), 'avMask')) {\n          $log.info('placeholder shim not running on an element due to avMask on same element');\n          return;\n        }else if(originalLink) {\n          originalLink.apply(this, arguments);\n        }\n        //else originalLink doesn't exist\n      };\n\n      directive.compile = function() {\n        return newLink;\n      };\n\n      return $delegate;\n    }]);\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BREADCRUMBS', {\n\n    TEMPLATE: 'ui/breadcrumbs/breadcrumbs-tpl.html'\n  });\n\n  function AvBreadcrumbsController($state) {\n\n    this.getBreadcrumb = function(breadcrumbs, state) {\n      if(!state || !state.data) {\n        return;\n      }\n\n      var breadcrumb = state.data.breadcrumb;\n      if(!breadcrumb) {\n        return;\n      }\n\n      if(breadcrumb.parent) {\n        var parentState = $state.get(breadcrumb.parent);\n\n        if(parentState) {\n          this.getBreadcrumb(breadcrumbs, parentState);\n        }\n      }\n      breadcrumb.state = state.name;\n      breadcrumbs.push(breadcrumb);\n    };\n\n    this.getBreadcrumbs = function() {\n      var breadcrumbs = [];\n      this.getBreadcrumb(breadcrumbs, $state.current);\n      return breadcrumbs;\n    };\n\n  }\n\n  AvBreadcrumbsController.$inject = ['$state'];\n  availity.ui.controller('AvBreadcrumbsController', AvBreadcrumbsController);\n\n  function avBreadcrumbs(AV_BREADCRUMBS) {\n    return {\n      restrict: 'EA',\n      replace: true,\n      templateUrl: AV_BREADCRUMBS.TEMPLATE,\n      controller: 'AvBreadcrumbsController',\n      link: function(scope, element, attrs, avBreadcrumbs) {\n        scope.breadcrumbs = avBreadcrumbs.getBreadcrumbs();\n\n        scope.$on('$stateChangeSuccess', function() {\n          scope.breadcrumbs = avBreadcrumbs.getBreadcrumbs();\n        });\n      }\n    };\n  }\n\n  avBreadcrumbs.$inject = ['AV_BREADCRUMBS'];\n  availity.ui.directive('avBreadcrumbs', avBreadcrumbs);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.filter('avApproximate', function() {\n    var pow = Math.pow;\n    var floor = Math.floor;\n    var abs = Math.abs;\n    var log = Math.log;\n\n    function round(number, precision) {\n      var prec = pow(10, precision);\n      return Math.round(number * prec) / prec;\n    }\n\n    return function (number, precision) {\n      precision = precision || 0;\n      var base = floor(log(abs(number)) / log(1000));\n      var unit = 'kMGTPE'[base - 1];\n      return unit ? round(number / pow(1000, base), precision) + unit : (number || 0);\n    };\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BADGE', {\n    COLOR: null,\n    DEFAULT_CLASS: 'badge',\n    SHOW_WHEN_ZERO: false,\n    TEMPLATE: 'ui/badge/badge-tpl.html'\n  });\n\n  function badgeDirective(AV_BADGE) {\n\n    return {\n      scope: {\n        color: '@',\n        count: '=avBadge',\n        showWhenZero: '@'\n      },\n      templateUrl: AV_BADGE.TEMPLATE,\n      link: function(scope, element) {\n        scope.color = scope.color || AV_BADGE.COLOR;\n        scope.showWhenZero = scope.showWhenZero || AV_BADGE.SHOW_WHEN_ZERO;\n\n        var classes = [];\n        classes.push(AV_BADGE.DEFAULT_CLASS);\n        if(scope.color) {\n          classes.push(scope.color);\n        }\n\n        element.addClass(classes.join(' '));\n      }\n    };\n  }\n\n  badgeDirective.$inject = ['AV_BADGE'];\n  availity.ui.directive('avBadge', badgeDirective);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_REMOVABLE_LABEL', {\n    TEMPLATE: 'ui/labels/removable-label-tpl.html'\n  });\n\n  availity.ui.directive('avRemovableLabel', function(AV_REMOVABLE_LABEL) {\n    return {\n      templateUrl: AV_REMOVABLE_LABEL.TEMPLATE,\n      transclude: true,\n      scope: {\n        removeValue: '=',\n        onRemove: '&'\n      },\n      link: function(scope, element, attrs) {\n        element.addClass('label-remove');\n        scope.removeLabel = function() {\n          if(!attrs.disabled) {\n            scope.onRemove()(scope.removeValue);\n          }\n        };\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_LOADER', {\n\n    TEMPLATES: {\n      LOADER: 'ui/animation/loader-tpl.html'\n    }\n\n  });\n\n  availity.ui.controller('AvLoaderController', function($element) {\n\n    var self = this;\n    var active;\n\n    this.start = function() {\n      active = true;\n      this.animate();\n    };\n\n    this.animate = function() {\n\n      $element\n        .find('.loading-bullet')\n        .velocity('transition.slideRightIn', { stagger: 250 })\n        .velocity({ opacity: 0 }, {\n          delay: 750,\n          duration: 500,\n          complete: function() {\n            if(active) {\n              setTimeout(function() {self.animate();}, 500);\n            } else {\n              self.endAnimation();\n            }\n          }\n        });\n\n    };\n\n    this.endAnimation = function() {\n      $element.find('.loading-bullet').velocity('stop', true);\n      $element.removeData();\n    };\n\n    this.stop = function() {\n      active = false;\n    };\n\n  });\n\n  availity.ui.directive('avLoader', function(AV_LOADER) {\n    return {\n      restrict: 'A',\n      replace: true,\n      controller: 'AvLoaderController',\n      require: 'avLoader',\n      templateUrl: AV_LOADER.TEMPLATES.LOADER,\n      link: function(scope, element, attr, avLoader) {\n\n        if(!attr.delay) {\n          avLoader.start();\n        }\n\n        scope.$on('$destroy', function() {\n          avLoader.stop();\n        });\n\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BLOCK', {\n    TEMPLATES: {\n      BLOCK: 'ui/block/block-tpl.html'\n    }\n  });\n\n  var getLoaderController = function(blockId) {\n    var el = $('[data-block-ui=\"' + blockId + '\"]') || $('[block-ui=\"' + blockId + '\"]');\n    if(el) {\n      return el.find('[data-av-loader]').controller('avLoader');\n    }\n  };\n\n  var triggerLoaderController = function(id, instance, fn) {\n\n    var controller = instance.loaderController;\n    if(!controller) {\n      controller = getLoaderController(id);\n      instance.loaderController = controller;\n    }\n    if(controller && _.isFunction(controller[fn])) {\n      controller[fn]();\n    }\n\n  };\n\n  var triggerInstance = function(id, instance, origFn, loaderFn) {\n    triggerLoaderController(id, instance, loaderFn);\n    origFn.apply(instance);\n  };\n\n  var modifyBlockInstances = function(id, instance) {\n\n    var origStartFn = instance.start;\n    var origStopFn = instance.stop;\n\n    instance.start = function() {\n      triggerInstance(id, instance, origStartFn, 'start');\n    };\n\n    instance.stop = function() {\n      triggerInstance(id, instance, origStopFn, 'stop');\n    };\n\n    instance.startLoader = function() {\n      triggerLoaderController(id, instance, 'start');\n    };\n\n    instance.avModifications = true;\n  };\n\n  availity.ui.run(function($injector, $log, AV_BLOCK) {\n\n    try {\n\n      var blockUIConfig = $injector.get('blockUIConfig');\n      var blockUI = $injector.get('blockUI');\n      blockUIConfig.autoBlock = false;\n      blockUIConfig.delay = 0;\n      blockUIConfig.templateUrl = AV_BLOCK.TEMPLATES.BLOCK;\n\n      var origGetFn = blockUI.instances.get;\n      blockUI.instances.get = function(id) {\n        var instance = origGetFn(id);\n        if(!instance.avModifications) {\n          modifyBlockInstances(id, instance);\n        }\n        return instance;\n      };\n\n    } catch(e) {\n      $log.warn('blockUI is required to use av block.');\n    }\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // Helper directive that hooks into block-ui's start-up lifecycle and starts the loader\n  availity.ui.directive('avBlockUi', function(blockUI) {\n\n    return {\n      restrict: 'A',\n      link: function($scope, $element, $attrs) {\n\n        var blockId = $attrs.avBlockUi;\n        var blockCount = $attrs.blockCount;\n        var instance = blockUI.instances.get(blockId);\n        if(blockCount > 0) {\n          instance.startLoader();\n        }\n      }\n    };\n\n  });\n\n})(window);\n","/*\n* Inspired by https://github.com/angular-ui/bootstrap/blob/master/src/tabs/tabs.js\n*/\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_TABS', {\n    TEMPLATES: {\n      TABS: 'ui/tabs/tabs-tpl.html',\n      TAB: 'ui/tabs/tab-tpl.html'\n    }\n  });\n\n  function TabsController($scope) {\n\n    var self = this;\n\n    $scope.tabs = [];\n    self.tabs = $scope.tabs;\n\n    this.addTab = function(tab) {\n      self.tabs.push(tab);\n\n      if(self.tabs.length === 1) {\n        tab.active = true;\n      } else if(tab.active) {\n        self.selectTab(tab);\n      } else {\n        tab.active = false;\n      }\n    };\n\n    this.removeTab = function(tab) {\n      var index = self.tabs.indexOf(tab);\n\n      if(tab.active && self.tabs.length > 1) {\n        //If this is the last tab, select the previous tab. else, the next tab.\n        var newActiveIndex = index === self.tabs.length - 1 ? index - 1 : index + 1;\n        self.selectTab(self.tabs[newActiveIndex]);\n      }\n\n      self.tabs.splice(index, 1);\n    };\n\n    this.selectTab = function(selectedTab) {\n      angular.forEach(self.tabs, function (tab) {\n        if(tab.active && tab !== selectedTab) {\n          tab.active = false;\n          tab.onDeselect();\n        }\n      });\n\n      selectedTab.active = true;\n      selectedTab.onSelect();\n    };\n  }\n\n  TabsController.$inject = ['$scope'];\n  availity.ui.controller('AvTabsController', TabsController);\n\n  function TabsDirective(AV_TABS) {\n    return {\n      restrict: 'AE',\n      templateUrl: AV_TABS.TEMPLATES.TABS,\n      transclude: true,\n      replace: true,\n      controller: 'AvTabsController',\n      scope: true,\n      link: function(scope, element, attrs) {\n        scope.justified = !!attrs.justified;\n        scope.tabType = attrs.tabType;\n        scope.vertical = !!attrs.vertical;\n\n        if(angular.isUndefined(attrs.padContent)) {\n          scope.padContent = true;\n        }\n      }\n    };\n  }\n\n  TabsDirective.$inject = ['AV_TABS'];\n  availity.ui.directive('avTabs', TabsDirective);\n\n  function TabDirective(AV_TABS) {\n    return {\n      restrict: 'AE',\n      templateUrl: AV_TABS.TEMPLATES.TAB,\n      replace: true,\n      require: '^avTabs',\n      transclude: true,\n      scope: {\n        heading: '@',\n        template: '=',\n        templateUrl: '=',\n        onSelect: '&select',\n        onDeselect: '&deselect'\n      },\n      controller: function() {\n        // Allow avTabs to be required by other directives\n      },\n      link: function(scope, element, attrs, tabsController, transclude) {\n        scope.transcludeFn = transclude;\n\n        tabsController.addTab(scope);\n\n        scope.$on('destroy', function() {\n          tabsController.removeTab(scope);\n        });\n\n        scope.select = function() {\n          if(!scope.disabled) {\n            tabsController.selectTab(scope);\n          }\n        };\n\n        scope.$watch('active', function(active) {\n          if(active) {\n            tabsController.selectTab(scope);\n          }\n        });\n\n        if(angular.isDefined(attrs.active)) {\n          scope.active = attrs.active;\n\n          scope.$parent.$watch(attrs.active, function(active) {\n            if(active) {\n              tabsController.selectTab(scope);\n            }\n          });\n        }\n\n        if(angular.isDefined(attrs.disable)) {\n          scope.$parent.$watch(attrs.disable, function(disabled) {\n            scope.disabled = !!disabled;\n          });\n        }\n      }\n    };\n  }\n\n  TabDirective.$inject = ['AV_TABS'];\n  availity.ui.directive('avTab', TabDirective);\n\n  function TabPaneDirective(avTemplateCache, $compile) {\n    return {\n      restrict: 'AE',\n      require: '^avTabs',\n      link: function(scope, element, attrs) {\n\n        var tab = scope.$eval(attrs.avTabPane);\n\n        if(angular.isDefined(tab.template) || angular.isDefined(tab.templateUrl)) {\n          avTemplateCache.get(tab)\n          .then(function(template) {\n            element.append($compile(template)(scope));\n          });\n        } else {\n          tab.transcludeFn(tab.$parent, function(contents) {\n            angular.forEach(contents, function(node) {\n              element.append(node);\n            });\n          });\n        }\n      }\n    };\n  }\n\n  TabPaneDirective.$inject = ['avTemplateCache', '$compile'];\n  availity.ui.directive('avTabPane', TabPaneDirective);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_SCROLL_PAGINATION', {\n    TEMPLATE: 'ui/scroll-pagination/scroll-pagination-tpl.html',\n    DEFAULT_OPTIONS: {\n      limit: 50,\n      offset: 0,\n      maxCached: 100,\n      loadMoreText: 'Load more items',\n      entryIdAttribute: 'id',\n      apiParams: {},\n      beforePageLoad: undefined,\n      afterPageLoad: undefined\n    }\n  });\n\n\n  availity.ui.factory('avScrollPaginationService', function($log) {\n    function AvScrollPaginationService() {\n      this.instances = {};\n    }\n\n    var proto = AvScrollPaginationService.prototype;\n\n    proto.registerInstance = function(instanceInterface, id) {\n      if (this.instances[id]) {\n        $log.warn('Found existing instance with id ' + id);\n      }\n      this.instances[id] = instanceInterface;\n    };\n\n    proto.unregisterInstance = function(id) {\n      delete this.instances[id];\n    };\n\n    proto.resetInstance = function(id) {\n      if (this.instances[id]) {\n        this.instances[id].reset();\n        return true;\n      }\n      return false;\n    };\n\n    return new AvScrollPaginationService();\n  });\n\n  availity.ui.controller('AvScrollPaginationController', function($scope, $element, $timeout, $log, AV_SCROLL_PAGINATION, blockUI, avScrollPaginationService) {\n\n    var self = this;\n\n    this.buildOptions = function() {\n      $scope._options = {};\n      _.extend($scope._options, AV_SCROLL_PAGINATION.DEFAULT_OPTIONS, $scope.options || {});\n      $scope._options.lowOffset = $scope._options.offset;\n      $scope._options.highOffset = $scope._options.offset;\n    };\n\n    var originalEntries = angular.copy($scope.entries);\n    this.buildOptions();\n\n    this.updateButtonVisibilityFlags = function(data) {\n      $scope.showNext = $scope._options.highOffset + data.count < data.totalCount;\n      $scope.showPrev = $scope._options.lowOffset > 0;\n    };\n\n    this.loadEntries = function(prepend) {\n      var block = blockUI.instances.get('scroll-pagination-block-' + $scope.avScrollPagination);\n      block.start();\n      if (_.isFunction($scope._options.beforePageLoad)) {\n        $scope._options.beforePageLoad($scope._options);\n      }\n      var params = {};\n      _.extend(params, $scope._options.apiParams, {limit: $scope._options.limit, offset: $scope._options.offset});\n      $scope.apiResource.query({params: params}).then(function(response) {\n        var responseData = self.getResponseData(response);\n        if ($scope._options.afterPageLoad) {\n          $scope._options.afterPageLoad(responseData);\n        }\n        if (responseData && responseData[$scope._options.resourceId]) {\n          self.addEntries(responseData[$scope._options.resourceId], prepend);\n        }\n        self.updateButtonVisibilityFlags(responseData);\n        block.stop();\n      }, function() {\n        $log.error('API call failed');\n        block.stop();\n      });\n    };\n\n    this.getResponseData = function(data) {\n      if (data) {\n        if ($scope._options.responseKey) {\n          var keys = $scope._options.responseKey.split('.');\n          var nestedData = data;\n          var noData = false;\n          _.each(keys, function(key) {\n            if (!noData) {\n              nestedData = nestedData[key];\n              if (!nestedData) {\n                noData = true;\n              }\n            }\n          });\n          return noData ? [] : nestedData;\n        } else {\n          return data;\n        }\n      }\n      return [];\n    };\n\n    this.addEntries = function(entries, prepend) {\n      var oldEntries = angular.copy($scope.entries);\n      if (prepend) {\n        $scope.entries.unshift.apply($scope.entries, entries);\n      } else {\n        $scope.entries.push.apply($scope.entries, entries);\n      }\n      if ($scope.entries.length > $scope._options.maxCached) {\n        var diff = $scope.entries.length - $scope._options.maxCached;\n        var trackedElementId;\n        if (prepend) {\n          $scope.entries = $scope.entries.slice(0, $scope._options.maxCached);\n          $scope._options.highOffset -= diff;\n          trackedElementId = oldEntries[oldEntries.length-diff-1] ? oldEntries[oldEntries.length-diff-1][$scope._options.entryIdAttribute] : undefined;\n        } else {\n          $scope.entries = $scope.entries.slice(diff, $scope.entries.length);\n          $scope._options.lowOffset += diff;\n          trackedElementId = oldEntries[diff] ? oldEntries[diff][$scope._options.entryIdAttribute] : undefined;\n        }\n        self.autoscroll(trackedElementId, prepend);\n      }\n    };\n\n    this.autoscroll = function(trackedElementId, prepend) {\n      if (trackedElementId) {\n        var trackedElement = $element.find('#'+trackedElementId);\n        var trackedElementTop = trackedElement.offset().top;\n        $timeout(function() {\n          var newScrollTop = $element.scrollTop() + trackedElement.offset().top - trackedElementTop;\n          $element.animate({scrollTop: newScrollTop}, 0);\n        }, 0, false);\n      } else {\n        $timeout(function() {\n          if (prepend) {\n            $element.animate({scrollTop: $element.prop('scrollHeight')}, 0);\n          } else {\n            $element.animate({scrollTop: 0}, 0);\n          }\n        }, 0, false);\n      }\n    };\n\n    this.loadPrev = function() {\n      $scope._options.lowOffset -= $scope._options.limit;\n      $scope._options.offset = $scope._options.lowOffset;\n      self.loadEntries(true);\n    };\n\n    this.loadNext = function() {\n      $scope._options.highOffset += $scope._options.limit;\n      $scope._options.offset = $scope._options.highOffset;\n      self.loadEntries();\n    };\n\n    avScrollPaginationService.registerInstance({\n      reset: function() {\n        $element.animate({scrollTop: 0}, 0);\n        $scope.entries = angular.copy(originalEntries);\n        self.buildOptions();\n        self.loadEntries();\n      }},\n      $scope.avScrollPagination\n    );\n\n    $scope.$on('$destroy', function() {\n      avScrollPaginationService.unregisterInstance($scope.avScrollPagination);\n    });\n\n    $scope.loadPrev = self.loadPrev;\n    $scope.loadNext = self.loadNext;\n\n    this.loadEntries();\n  });\n\n\n\n  availity.ui.directive('avScrollPagination', function($log, AV_SCROLL_PAGINATION) {\n    return {\n      restrict: 'A',\n      controller: 'AvScrollPaginationController',\n      transclude: true,\n      templateUrl: AV_SCROLL_PAGINATION.TEMPLATE,\n      scope: {\n        apiResource: '=',\n        entries: '=',\n        options: '=',\n        avScrollPagination: '@'\n      },\n      link: function($scope) {\n        if (!$scope.avScrollPagination) {\n          $log.error('Directive must include an id');\n        }\n      }\n    };\n  });\n\n})(window);\n"],"sourceRoot":"/source/"}