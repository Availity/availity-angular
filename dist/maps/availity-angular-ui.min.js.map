{"version":3,"sources":["/source/index.js","/source/template.js","/source/modal.js","/source/form.js","/source/field.js","/source/popover.js","/source/messages.js","/source/adapter-bootstrap.js","/source/adapter.js","/source/dropdown.js","/source/datepicker.js","/source/idle-notifier.js","/source/mask.js","/source/has-permission.js","/source/analytics.js","/source/placeholder.js","/source/breadcrumbs.js","/source/approximate.js","/source/badge.js","/source/removable-label.js","/source/loader.js","/source/block.js","availity-angular-ui.js"],"names":["root","availity","MODULE_UI","ui","angular","module","constant","NG_OPTIONS","exports","window","factory","$q","$templateCache","$http","get","options","valid","template","templateUrl","Error","when","cache","then","result","data","OPTIONS","scope","id","container","keyboard","backdrop","show","remote","EVENTS","SHOW","SHOWN","HIDE","HIDDEN","BS_EVENTS","TEMPLATES","MODAL","ModalFactory","$rootScope","$timeout","$compile","AV_MODAL","avTemplateCache","Modal","self","this","extend","$new","create","proto","prototype","$element","element","createId","init","appendTo","modalShow","modalToggle","toggle","modalHide","hide","modal","listeners","on","event","$emit","isFunction","onShown","onHidden","call","destroy","$on","deferred","defer","one","resolve","promise","remove","attr","uuid","directive","restrict","replace","transclude","controller","ngForm","rulesKey","avValOn","avValDebounce","avValInvalid","violations","form","record","count","violocationCount","_","reduce","sum","num","$setValidity","unrecord","reset","$setPristine","$submitted","$setSubmitted","setRulesKey","key","$log","$parse","AV_VAL","avValAdapter","priority","require","compile","pre","iEl","iAttrs","controllers","ruleFn","avValForm","error","$watch","_rulesKey","_oldRulesKey","avForm","info","$broadcast","REVALIDATE","post","fn","ngSubmit","off","ngClick","RESET","bind","SUBMITTED","$invalid","FAILED","preventDefault","stopImmediatePropagation","scroll","callback","$event","$apply","avVal","$scope","$sniffer","ngModel","rule","placeholder","noEvent","avId","setNgModel","setRule","updateModel","results","validationKeys","avResults","forEach","contraintName","push","isValid","avViolations","length","$error","value","indexOf","lastIndexOf","updateView","$dirty","message","validate","validateModel","validateView","undefined","splice","unbind","debounce","msie","type","cancel","$setViewValue","val","link","attrs","avValField","parseInt","DEBOUNCE","isNumber","debounceAllowed","is","$parsers","$formatters","unshift","$viewValue","NAME","AV_POPOVER","name","ev","plugin","popover","$evalAsync","html","messages","CLASSES","SUCCESS","WARNING","ERROR","FEEDBACK","HELP","FORM_GROUP","NAVBAR","SELECTORS","CONTAINER","DATA_CONTAINER","CONTROLLER","AV_BOOTSTRAP_ADAPTER","$valid","parents","removeClass","addClass","selector","join","$el","$","target","siblings","warn","el","avValModel","navbarSelector","offset","each","outerHeight","$target","find","animate","scrollTop","top","DEFAULT","provider","that","setAdapter","adapter","$get","AV_VAL_ADAPTER","$injector","Adapter","adapterName","$attrs","AV_UI","AV_DROPDOWN","match","contains","$eval","multiple","isDefined","closeOnResize","query","queryFn","getId","getSelected","model","items","collection","index","findIndex","item","equals","response","more","setValue","viewValue","selected","select2","getMultiSelected","indices","savedObject","temp","copy","matches","setValues","isArray","isEmpty","isObject","ngOptions","displayFn","valueName","valueFn","keyName","$watchCollection","newVal","oldVal","$window","avDropdown","parent","prev","toggleClass","$pristine","e","added","ngFocus","ngBlur","classNames","className","split","i","_$render","$render","win","$observe","ADD_ON_SELECTOR","DEFAULTS","FORMAT","CLOSE","TODAY","FORCEPARSE","MODELFORMAT","AV_DATEPICKER","$modelValue","setDate","findModel","$input","andSelf","modelToView","datepicker","DPGlobal","formatDate","format","wrapIsoDate","date","moment","isDate","m","toDate","viewToModel","parseFormat","utcDate","parseDate","localDate","_utc_to_local","modelFormat","autoclose","todayHighlight","forceParse","toLowerCase","avDatepicker","prop","focus","OK","BASE","SESSION","sessionTemplate","warningTemplate","setSessionTemplate","setWarningTemplate","AV_IDLE","AV_UI_IDLE","AvModal","$document","AvIdleNotifier","idle","initListeners","listener","IDLE_ACTIVE","showWarning","IDLE_INACTIVE","hideWarning","SESSION_TIMEOUT_ACTIVE","showSession","destroyListeners","disableBackDrop","onSessionTimeout","SESSION_TIMEOUT_REDIRECT","run","avIdleNotifier","phone","SSN","AV_MASK","maskType","inputmask","onSuccess","isAuthorized","onError","avUserAuthorizations","$attr","avHasPermission","permissions","words","isAnyAuthorized","core","avAnalyticsUtils","avAnalytics","onEvent","isExternalLink","stopPropagation","properties","level","getProperties","trackEvent","document","location","required","avAnalyticsOn","eventType","requires","config","$provide","decorator","$delegate","originalLink","newLink","keys","apply","arguments","TEMPLATE","avBreadcrumbsController","$state","getBreadcrumb","breadcrumbs","state","breadcrumb","parentState","getBreadcrumbs","current","$inject","avBreadcrumbs","AV_BREADCRUMBS","AvBreadcrumbsController","filter","pow","Math","floor","abs","log","round","number","precision","prec","base","unit","COLOR","DEFAULT_CLASS","SHOW_WHEN_ZERO","badgeDirective","AV_BADGE","color","showWhenZero","classes","AV_REMOVABLE_LABEL","removeValue","onRemove","removeLabel","disabled","LOADER","active","start","velocity","stagger","opacity","delay","duration","complete","setTimeout","endAnimation","removeData","stop","AV_LOADER","avLoader","blockTemplate","BLOCK","getLoaderController","blockId","triggerLoaderController","instance","loaderController","triggerInstance","origFn","loaderFn","modifyBlockInstances","origStartFn","origStopFn","avModifications","blockUIConfig","blockUI","autoBlock","origGetFn","instances"],"mappings":"CAQA,SAAAA,MAEA,YAEA,IAAAC,UAAAD,KAAAC,YAEAA,UAAAC,UAAA,aACAD,UAAAE,GAAAC,QAAAC,OAAAJ,SAAAC,WAAA,KAAA,cAEAD,UAAAE,GAAAG,SAAA,SAEAC,WAAA,0MAIA,UAAAF,UAAA,aAAAA,OAAAG,QAAA,CACAH,OAAAG,QAAAP,YCrBAQ,SAGA,SAAAT,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAO,QAAA,kBAAA,SAAAC,GAAAC,eAAAC,OAEA,OAEAC,IAAA,SAAAC,SAEA,GAAAC,QAAAD,QAAAE,WAAAF,QAAAG,WAEA,KAAAF,MAAA,CACA,KAAA,IAAAG,OAAA,sFAGA,MAAAJ,SAAAE,SAAAN,GAAAS,KAAAL,QAAAE,UACAJ,MAAAC,IAAAC,QAAAG,aAAAG,MAAAT,iBACAU,KAAA,SAAAC,QACA,MAAAA,QAAAC,aCxBAf,SAGA,SAAAT,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAG,SAAA,YAEAmB,SACAC,MAAA,KACAR,YAAA,KACAD,SAAA,KACAU,GAAA,KACAC,UAAA,KAGAC,SAAA,KACAC,SAAA,KACAC,KAAA,MACAC,OAAA,OAGAC,QACAC,KAAA,gBACAC,MAAA,iBACAC,KAAA,gBACAC,OAAA,mBAGAC,WACAJ,KAAA,gBACAC,MAAA,iBACAC,KAAA,gBACAC,OAAA,mBAGAE,WACAC,MAAA,4BAIA,IAAAC,cAAA,SAAAC,WAAAC,SAAAC,SAAAC,SAAAC,gBAAAnC,IAEA,GAAAoC,OAAA,SAAAhC,SAEA,GAAAiC,MAAAC,IAEAA,MAAAlC,QAAAX,QAAA8C,UAAAL,SAAApB,SAAAC,MAAAgB,WAAAS,QAAApC,QAEA+B,iBAAAhC,IAAAC,SAAAO,KAAA,SAAAL,UACA+B,KAAAjC,QAAAE,SAAAA,QACA+B,MAAAI,WAKA,IAAAC,OAAAN,MAAAO,SAEAD,OAAAD,OAAA,WAEA,GAAAJ,MAAAC,IAEA,IAAAvB,OAAAuB,KAAAlC,QAAAW,KACAuB,MAAAM,SAAAnD,QAAAoD,QAAAP,KAAAlC,QAAAE,SAEAgC,MAAAQ,UACAR,MAAAvB,OAEAkB,UAAAK,KAAAM,UAAA7B,MACAiB,UAAA,WACAK,KAAAU,QACA,EAAA,KAGAT,MAAAlC,QAAAa,UAAAqB,KAAAM,SAAAI,SAAAV,KAAAlC,QAAAa,WAAAqB,KAAAM,SAAAI,SAAA,QAIAN,OAAA3B,MAAA,WAEA,GAAAsB,MAAAC,IACA,IAAAvB,OAAAuB,KAAAlC,QAAAW,KAEAA,OAAAkC,UAAA,WACAZ,KAAAjB,OAGAL,OAAAmC,YAAA,WACAb,KAAAc,SAGApC,OAAAqC,UAAA,WACAf,KAAAgB,QAKAX,OAAAK,KAAA,WAGAT,KAAAM,SAAAU,OACAnC,SAAAmB,KAAAlC,QAAAe,SACAD,SAAAoB,KAAAlC,QAAAc,SACAE,KAAAkB,KAAAlC,QAAAgB,KACAC,OAAAiB,KAAAlC,QAAAiB,QAGAiB,MAAAiB,YAGAb,OAAAa,UAAA,WAEA,GAAAlB,MAAAC,IACA,IAAAvB,OAAAuB,KAAAlC,QAAAW,KACA,IAAA6B,UAAAN,KAAAM,QAEAA,UAAAY,GAAAtB,SAAAP,UAAAJ,KAAA,SAAAkC,OACA1C,MAAA2C,MAAAxB,SAAAZ,OAAAC,KAAAkC,MAAApB,OAGAO,UAAAY,GAAAtB,SAAAP,UAAAH,MAAA,SAAAiC,OAEA,GAAAhE,QAAAkE,WAAAtB,KAAAjC,QAAAwD,SAAA,CACAvB,KAAAjC,QAAAwD,UAGA7C,MAAA2C,MAAAxB,SAAAZ,OAAAE,MAAAiC,MAAApB,OAGAO,UAAAY,GAAAtB,SAAAP,UAAAF,KAAA,SAAAgC,OACA1C,MAAA2C,MAAAxB,SAAAZ,OAAAG,KAAAgC,MAAApB,OAGAO,UAAAY,GAAAtB,SAAAP,UAAAD,OAAA,SAAA+B,OAEA,GAAAhE,QAAAkE,WAAAtB,KAAAjC,QAAAyD,UAAA,CACAxB,KAAAjC,QAAAyD,SAAAC,KAAAxB,MAGAvB,MAAA2C,MAAAxB,SAAAZ,OAAAI,OAAA+B,MAAApB,KAEAL,UAAA,WACAK,KAAA0B,WACA,EAAA,OAKAhD,OAAAiD,IAAA,WAAA,WACA3B,KAAA0B,YAIArB,OAAAtB,KAAA,WACAkB,KAAAM,SAAAU,MAAA,QAGAZ,OAAAW,KAAA,WACA,GAAAY,UAAAjE,GAAAkE,OAEA5B,MAAAM,SAAAU,MAAA,OACAhB,MAAAM,SAAAuB,IAAA,kBAAA,WACAF,SAAAG,QAAA,OAGA,OAAAH,UAAAI,QAGA3B,OAAAS,OAAA,WACAb,KAAAM,SAAA/B,KAAA,SAAAsC,SAGAT,OAAAqB,QAAA,WACAzB,KAAAM,SAAA0B,SAGA5B,OAAAI,SAAA,WAEA,GAAA9B,IAAAsB,KAAAM,SAAA2B,KAAA,KACA,KAAAvD,GAAA,CAEAA,GAAAsB,KAAAlC,QAAAY,GAAAsB,KAAAlC,QAAAY,GAAA1B,SAAAkF,KAAA,cACAlC,MAAAM,SAAA2B,KAAA,KAAAvD,KAIA,OAAAoB,OAIA9C,UAAAE,GAAAO,QAAA,UAAA+B,aAEAxC,UAAAE,GAAAiF,UAAA,UAAA,SAAAvC,UACA,OACAwC,SAAA,IACAC,QAAA,KACAC,WAAA,KACA7D,SACAR,YAAA2B,SAAAN,UAAAC,WCzMA/B,SAQA,SAAAT,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAqF,WAAA,sBAAA,WAEAvC,KAAAwC,OAAA,IACAxC,MAAAyC,SAAA,IACAzC,MAAA0C,QAAA,IACA1C,MAAA2C,cAAA,IACA3C,MAAA4C,aAAA,KAWA5C,MAAA6C,aAEA7C,MAAAS,KAAA,SAAAqC,MACA9C,KAAAwC,OAAAM,KASA9C,MAAA+C,OAAA,SAAArE,GAAAsE,OACAhD,KAAA6C,WAAAnE,IAAAsE,KAEA,IAAAC,kBAAAC,EAAAC,OAAAnD,KAAA6C,WAAA,SAAAO,IAAAC,KACA,MAAAD,KAAAC,KACA,EAEArD,MAAAwC,OAAAc,aAAA,KAAAL,mBAAA,GAGAjD,MAAAuD,SAAA,SAAA7E,IACA,GAAAA,IAAAsB,KAAA6C,WAAAnE,IAAA,OACAsB,MAAA6C,WAAAnE,KAIAsB,MAAAwD,MAAA,WACAxD,KAAAwC,OAAAiB,cACAzD,MAAAwC,OAAAkB,WAAA,MAGA1D,MAAA2D,cAAA,WACA3D,KAAAwC,OAAAkB,WAAA,KAGA1D,MAAA4D,YAAA,SAAAC,KACA7D,KAAAyC,SAAAoB,MAeA7G,UAAAE,GAAAiF,UAAA,YAAA,SAAA2B,KAAApE,SAAAqE,OAAAC,OAAAC,aAAAxE,YACA,OACA2C,SAAA,IACA8B,SAAA,GACAC,SAAA,OAAA,YAAA,aACA5B,WAAA,sBACA6B,QAAA,WACA,OACAC,IAAA,SAAA5F,MAAA6F,IAAAC,OAAAC,aAEA,GAAAC,QAAAV,OAAAQ,OAAAG,UACA,IAAAjC,UAAAgC,OAAAhG,MACAgE,UAAAA,UAAA8B,OAAAG,SAEA,KAAAjC,SAAA,CACAqB,KAAAa,MAAA,8EACA,QAGAlG,MAAAmG,OAAAH,OAAA,SAAAI,UAAAC,cACA,GAAAD,UAAA,CACAE,OAAAnB,YAAAiB,UAEA,IAAAA,YAAAC,aAAA,CACApF,SAAA,WACAoE,KAAAkB,KAAA,uBACAvF,YAAAwF,WAAAjB,OAAAhF,OAAAkG,iBAQA,IAAA1C,QAAAgC,YAAA,EACA,IAAAO,QAAAP,YAAA,EAKAO,QAAArC,QAAA6B,OAAA7B,SAAA,IACAqC,QAAApC,cAAA4B,OAAA5B,eAAA,IAEAoC,QAAAnC,aAAA2B,OAAA3B,cAAA,KAEAmC,QAAAtE,KAAA+B,OACAuC,QAAAnB,YAAAnB,WAGA0C,KAAA,SAAA1G,MAAA6F,IAAAC,OAAAC,aAEAF,IAAArC,KAAA,aAAA,aAGA,IAAAmD,GACA,IAAAb,OAAAc,SAAA,CAEAf,IAAAgB,IAAA,SACAF,IAAArB,OAAAQ,OAAAc,SAAA,UACA,IAAAd,OAAAgB,QAAA,CAEAjB,IAAAgB,IAAA,QACAF,IAAArB,OAAAQ,OAAAgB,QAAA,MAGA,GAAA/C,QAAAgC,YAAA,EACA,IAAAO,QAAAP,YAAA,EAEA/F,OAAAiD,IAAAsC,OAAAhF,OAAAwG,MAAA,WACAT,OAAAvB,SAGAc,KAAAmB,KAAA,SAAA,SAAAtE,OAEA1C,MAAAwG,WAAAjB,OAAAhF,OAAA0G,UACAX,QAAApB,eAEA,IAAAnB,OAAAmD,SAAA,CAEAlH,MAAAwG,WAAAjB,OAAAhF,OAAA4G,OAEA9B,MAAAkB,KAAA,uDAEA7D,OAAA0E,gBACA1E,OAAA2E,0BACArH,OAAAwG,WAAA9D,MAEA8C,cAAA8B,OAAAzB,IACA,QAGA9B,OAAAiB,cAEA,KAAA2B,GAAA,CACA,OAGA,GAAAY,UAAA,WACAZ,GAAA3G,OAAAwH,OAAA9E,QAGA1C,OAAAyH,OAAAF,oBCzLAxI,SAGA,SAAAT,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAqF,WAAA,uBAAA,SAAAjC,SAAA2D,aAAAkC,MAAArC,KAAApE,SAAA0G,OAAAC,UAEArG,KAAAsG,QAAA,IACAtG,MAAAuG,KAAA,IACAvG,MAAA0E,UAAA,IACA1E,MAAA4C,aAAA,KAEA,IAAA7C,MAAAC,IAEA,IAAAwG,aAAAlG,SAAA,GAAAkG,WACA,IAAAC,WAEAzG,MAAAQ,SAAA,WACAR,KAAAsG,QAAAI,KAAA1J,SAAAkF,KAAA,SAGAlC,MAAA2G,WAAA,SAAAL,SACAtG,KAAAsG,QAAAA,QAGAtG,MAAA4G,QAAA,SAAAL,MACAvG,KAAAuG,KAAAA,KAGAvG,MAAA0E,UAAA,SAAAA,WACA1E,KAAA0E,UAAAA,UAGA1E,MAAA6G,YAAA,SAAAC,SAEA,GAAA/G,MAAAC,IACA,IAAA+G,kBAEA/G,MAAAsG,QAAAU,UAAAF,OAGA3J,SAAA8J,QAAAH,QAAAjE,WAAA,SAAAvE,QACA,GAAAuF,KAAA,MAAAvF,OAAA4I,aACAH,gBAAAI,KAAAtD,IACA9D,MAAAuG,QAAAhD,aAAAO,IAAAvF,OAAAP,QAIAiC,MAAAsG,QAAAhD,aAAA,KAAAtD,KAAAsG,QAAAU,UAAAI,QAGApH,MAAAsG,QAAAe,aAAArH,KAAAsG,QAAAU,UAAAnE,UAIA7C,MAAA0E,UAAA3B,OAAA/C,KAAAsG,QAAAI,KAAA1G,KAAAsG,QAAAU,UAAAnE,WAAAyE,OAGAnK,SAAA8J,QAAAjH,KAAAsG,QAAAiB,OAAA,SAAAC,MAAA3D,KAEA,GAAAX,EAAAuE,QAAAV,eAAAlD,QAAA,GAAAA,IAAA6D,YAAA,MAAA,KAAA,EAAA,CACA3H,KAAAuG,QAAAhD,aAAAO,IAAA,SAKA7D,MAAA2H,WAAA,WACA,GAAA3H,KAAAsG,QAAAsB,OAAA,CACA3D,aAAA1D,QAAAD,SAAAN,KAAAsG,QAAAtG,KAAAsG,QAAAU,UAAAI,QACAnD,cAAA4D,QAAAvH,SAAAN,KAAAsG,UAIAtG,MAAA8H,SAAA,SAAAN,OAEA1D,KAAAkB,KAAA,qBAAAwC,MAAA,IAEA,IAAA/E,UAAA1C,KAAA2E,UAAAjC,QACA,IAAAqE,SAAAX,MAAA2B,SAAArF,SAAAnC,SAAAkH,MAAAzH,KAAAwG,KAGAxG,MAAA8G,YAAArF,KAAAzB,KAAA+G,QACA/G,MAAA4H,WAAAnG,KAAAzB,KAEA,OAAA+G,SAGA9G,MAAA+H,cAAA,SAAAP,OAEAzH,KAAA+H,SAAAN,MAAA,KACA,OAAAA,OAIAxH,MAAAgI,aAAA,SAAAR,OAEA,GAAAV,SAAA/G,KAAA+H,SAAAN,MAEA,IAAAzH,KAAA2E,UAAA9B,cAAA7C,KAAA6C,aAAA,CAEA,MAAA4E,OAIA,MAAAV,SAAAM,QAAAI,MAAAS,UAIAjI,MAAAwD,MAAA,WAEAS,aAAA4D,QAAAvH,SAAAN,KAAAsG,QACArC,cAAAT,MAAAlD,SAEA,IAAAuC,YAAA7C,KAAAsG,QAAAU,UAAAnE,UACAA,YAAAqF,OAAA,EAAArF,WAAAyE,QAIAtH,MAAAmB,MAAA,SAAAA,MAAAwB,eAEA,GAAA5C,MAAAC,IAEAM,UAAA6H,OAAA,QAEA,IAAAC,SAGA9H,UAAAY,GAAAC,MAAA,WAGA,GAAAkF,SAAAgC,MAAA,KAAAlH,OAAAsF,SAAA6B,OAAA,SAAAhI,SAAA,GAAAkG,cAAAA,YAAA,CACAA,YAAAlG,SAAA,GAAAkG,WACA,QAGA9G,SAAA6I,OAAAH,SACAA,UAAA1I,SAAA,WACA0G,OAAAF,OAAA,WACAnG,KAAAuG,QAAAkC,cAAAlI,SAAAmI,UAEA9F,mBAYA3F,UAAAE,GAAAiF,UAAA,aAAA,SAAA2B,KAAApE,SAAAyG,MAAAlC,aAAAD,QACA,OACA5B,SAAA,IACAG,WAAA,uBACA4B,SAAA,aAAA,WAAA,cACA1F,OACAkE,cAAA,KACAD,QAAA,MAEAgG,KAAA,SAAAjK,MAAA8B,QAAAoI,MAAAnE,aAEA,GAAA+B,MAAAoC,MAAAC,UACA,IAAAlE,WAAAF,YAAA,EACA,IAAA8B,SAAA9B,YAAA,EACA,IAAAoE,YAAApE,YAAA,EAEA,IAAA9B,SAAAjE,MAAAiE,SAAAgC,UAAAhC,SAAA,OAEA,KAAA4D,UAAAC,KAAA,CACAzC,KAAAa,MAAA,4DACA,QAIAiE,WAAAhG,aAAA+F,MAAA/F,cAAA,KAEAgG,YAAAjC,WAAAL,QACAsC,YAAAlE,UAAAA,UACAkE,YAAAhC,QAAAL,KACAqC,YAAApI,UAEA,IAAAmC,eAAAkG,SAAApK,MAAAkE,gBAAA+B,UAAA/B,eAAAqB,OAAA8E,UAAA,GACAnG,eAAAO,EAAA6F,SAAApG,eAAAA,cAAAqB,OAAA8E,QAEA,IAAAE,iBAAAzI,QAAA0I,GAAA,YACAN,MAAAL,OAAA,SAAAK,MAAAL,OAAA,aACA5F,UAAA,MAEA,KAAAsG,gBAAA,CACArG,cAAA,EAGAiG,WAAAzH,MAAAuB,QAAAC,cAGA2D,SAAA4C,SAAA/B,KAAAyB,WAAAZ,aAKA1B,SAAA6C,YAAAC,QAAAR,WAAAb,cAEAtJ,OAAAiD,IAAAsC,OAAAhF,OAAAkG,WAAA,WACA0D,WAAAd,SAAAxB,QAAA+C,aAGA5K,OAAAiD,IAAAsC,OAAAhF,OAAA0G,UAAA,WACAY,QAAAsB,OAAA,IACAgB,YAAAd,SAAAxB,QAAA+C,aAIA5K,OAAAiD,IAAAsC,OAAAhF,OAAAwG,MAAA,WACAoD,WAAApF,SAGA/E,OAAAiD,IAAA,WAAA,WACAgD,UAAAnB,SAAA+C,QAAAI,cC/NAlJ,SAGA,SAAAT,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAG,SAAA,cACAiM,KAAA,cAGAtM,UAAAE,GAAAqF,WAAA,sBAAA,SAAAjC,SAAA8F,OAAAmD,YAEAvJ,KAAAiB,UAAA,WAEA,GAAAlB,MAAAC,IAEA7C,SAAA8J,SAAA,OAAA,QAAA,OAAA,UAAA,SAAAuC,MACAlJ,SAAAY,GAAAsI,KAAA,cAAA,SAAAC,IACArD,OAAAhF,MAAA,cAAAoI,KAAAC,OAIArD,QAAA1E,IAAA,UAAA,WACA3B,KAAA0B,YAIAzB,MAAA0J,OAAA,WACA,MAAApJ,UAAA/B,KAAAgL,WAAAD,MAGAtJ,MAAAlB,KAAA,WACAwB,SAAAqJ,QAAA,QAGA3J,MAAAe,KAAA,WACAT,SAAAqJ,QAAA,QAGA3J,MAAAa,OAAA,WACAP,SAAAqJ,QAAA,UAGA3J,MAAAyB,QAAA,WACAnB,SAAAqJ,QAAA,aAIA3M,UAAAE,GAAAiF,UAAA,YAAA,WACA,OACAC,SAAA,IACAG,WAAA,sBACAmG,KAAA,SAAAjK,MAAA8B,SAEA,GAAAzC,WAEAW,OAAAmL,WAAA,WACArJ,QAAAoJ,QAAAxM,QAAA8C,UAAAnC,SACA+L,KAAA,gBC7DArM,SAGA,SAAAT,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAqF,WAAA,2BAAA,SAAA6D,OAAA1G,UAEAM,KAAA6H,QAAA,SAAAvB,SAEA,GAAAuB,SAAA,IACA,IAAAvB,QAAAU,UAAAnE,WAAAyE,QAAAhB,QAAAU,UAAAnE,WAAA,GAAAgF,QAAA,CACAA,QAAAvB,QAAAU,UAAAnE,WAAA,GAAAgF,YACA,CACAA,QAAA,KAIAnI,SAAA,WACA0G,OAAA0D,SAAAjC,QAAAA,YAOA7K,UAAAE,GAAAiF,UAAA,iBAAA,WACA,OACAC,SAAA,IACAG,WAAA,2BACAvE,SAAA,kEACAqE,QAAA,KACA5D,SAGAiK,KAAA,SAAAjK,OACAA,MAAAqL,SAAA5G,EAAAjD,UAAAxB,MAAAqL,UAAAjC,QAAA,KAAAnJ,GAAA,aCvCAlB,SAGA,SAAAT,MACA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAG,SAAA,wBACA0M,SACAC,QAAA,cACAC,QAAA,cACAC,MAAA,YACAC,SAAA,eACAC,KAAA,aACAC,WAAA,oBACAC,OAAA,oBAEAC,WACAC,UAAA,eACAC,eAAA,qBAEAC,WAAA,6BAGA1N,UAAAE,GAAAO,QAAA,wBAAA,SAAAkN,qBAAAjL,SAAAoE,MAEA,OAEAvD,QAAA,SAAAA,QAAA+F,SACA,GAAAA,QAAAsE,OAAA,CACArK,QAAAsK,QAAAF,qBAAAZ,QAAAM,YAAAS,YAAAH,qBAAAZ,QAAAG,WACA,CACA3J,QAAAsK,QAAAF,qBAAAZ,QAAAM,YAAAU,SAAAJ,qBAAAZ,QAAAG,SAIA1G,MAAA,SAAAjD,SACAA,QAAAsK,QAAAF,qBAAAZ,QAAAM,YAAAS,YAAAH,qBAAAZ,QAAAG,QAGArC,QAAA,SAAAtH,QAAA+F,SAEA,GAAA0E,WACA,IACAL,qBAAAZ,QAAAK,MACAa,KAAA,GAEA,IAAAC,KAAAC,EAAA5K,QAEA,IAAA6K,QAAAF,IAAAjJ,KAAA0I,qBAAAJ,UAAAC,UACAY,QAAAA,QAAAF,IAAAjJ,KAAA0I,qBAAAJ,UAAAE,eAEAW,QAAAA,OAAAD,EAAA,IAAAC,QAAAF,IAAAG,SAAAL,SAEA,IAAAI,OAAA9D,SAAA,EAAA,CACAxD,KAAAwH,KAAA,qEAAA/K,SACA,QAGA,GAAAgL,IAAAH,OAAA,EACAF,KAAA/N,QAAAoD,QAAAgL,GACA,IAAAC,YAAAN,IAAA3M,KAAAoM,qBAAAD,WACA,IAAAc,WAAA,CACAA,WAAA3D,QAAAvB,WAIAP,OAAA,SAAAjD,MAGA,GAAA2I,iBACA,IACAd,qBAAAZ,QAAAO,QACAW,KAAA,GAGA,IAAAS,QAAA,CACAP,GAAAM,gBAAAE,KAAA,WACAD,QAAAP,EAAAnL,MAAA4L,eAGA,IAAAZ,WACA,IACAL,qBAAAZ,QAAAG,MACA,UACAe,KAAA,GAEA,IAAAY,SAAAV,EAAArI,MAAAgJ,KAAAd,SACAtL,UAAA,WAEAyL,EAAA,cAAAY,SAAAC,UAAAH,QAAAH,SAAAO,IAAAP,QAAA,SACA,EAAA,aC5FAlO,SAGA,SAAAT,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAG,SAAA,kBACA6O,QAAA,yBAGAlP,UAAAE,GAAAiP,SAAA,eAAA,WAEA,GAAAC,MAAApM,IAEAA,MAAAqM,WAAA,SAAAC,SACAtM,KAAAsM,QAAAA,QAGAtM,MAAAuM,KAAA,SAAAC,eAAAC,WAEA,GAAAC,SAAA,WACA,GAAAC,aAAAP,KAAAE,SAAAE,eAAAN,OACAlM,MAAAsM,QAAAG,UAAA5O,IAAA8O,aAGA,IAAAvM,OAAAsM,QAAArM,SAEAD,OAAAG,QAAA,SAAAA,QAAA+F,SACAtG,KAAAsM,QAAA/L,QAAAA,QAAA+F,SAGAlG,OAAAoD,MAAA,SAAAjD,SACAP,KAAAsM,QAAA9I,MAAAjD,SAGAH,OAAAyH,QAAA,SAAAtH,QAAA+F,SACAtG,KAAAsM,QAAAzE,QAAAtH,QAAA+F,UAGAlG,MAAA2F,OAAA,SAAAjD,MACA9C,KAAAsM,QAAAvG,OAAAjD,MAGA,OAAA,IAAA4J,cC9CAlP,SAGA,SAAAT,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAG,SAAA,eACAmB,SACA,QACA,qBACA,qBACA,0BACA,uBACA,oBACA,YACA,aACA,WACA,gBACA,cACA,KACA,UACA,cACA,kBACA,eACA,uBACA,kBACA,kBACA,kBACA,sBACA,qBACA,wBACA,iBACA,qBACA,6BACA,gBACA,YACA,kBACA,QACA,OACA,OACA,OACA,eACA,oBACA,cACA,mBACA,oBACA,yBACA,wBACA,eACA,eACA,kBACA,mBAKAxB,UAAAE,GAAAqF,WAAA,uBAAA,SAAAjC,SAAAsM,OAAAC,MAAAC,YAAAhJ,KAAAsC,OAAA1G,SAAAqE,QAEA,GAAAhE,MAAAC,IACAA,MAAAlC,UACAkC,MAAA+M,MAAA,IACA/M,MAAAsG,QAAA,IAEAtG,MAAAS,KAAA,WAEAyC,EAAA+D,QAAA2F,OAAA,SAAApF,MAAA3D,KACA,GAAAX,EAAA8J,SAAAF,YAAAtO,QAAAqF,IAAAxB,QAAA,QAAA,KAAA,CACAtC,KAAAjC,QAAA+F,KAAAuC,OAAA6G,MAAAzF,SAIAzH,MAAAmN,SAAA/P,QAAAgQ,UAAAP,OAAAM,SAEAnN,MAAAjC,QAAAsP,cAAArN,KAAAjC,QAAAsP,eAAA,IAEA,IAAArN,KAAAjC,QAAAuP,MAAA,CAEAtN,KAAAuN,QAAAvN,KAAAjC,QAAAuP,KAEAtN,MAAAjC,QAAAuP,MAAAtN,KAAAsN,KAEAtN,MAAAjC,QAAAY,GAAAqB,KAAAwN,OAKAvN,MAAA2G,WAAA,SAAAL,SACAtG,KAAAsG,QAAAA,QAGAtG,MAAAwN,YAAA,SAAAC,OAEA,GAAA1N,KAAAjC,QAAAuP,MAAA,CACA,MAAA,GAEA,GAAAK,OAAA1N,KAAA2N,WAAAvH,OAEA,IAAAwH,OAAA1K,EAAA2K,UAAAH,MAAA,SAAAI,MACA,MAAA3Q,SAAA4Q,OAAAD,KAAAL,QAGA,OAAAG,OAWA5N,MAAAuN,MAAA,SAAAjP,QACA,MAAAA,QAAAI,GAKAsB,MAAAqN,MAAA,SAAAvP,SAEAiC,KAAAuN,QAAAxP,SAAAO,KAAA,SAAA2P,UAiBAlQ,QAAAkI,UAAAiI,KAAAD,SAAAC,KAAAnH,QAAAkH,SAAAlH,YAIA9G,MAAAkO,SAAA,WAEA,GAAAC,WAAApO,KAAAuG,QAAA+C,UACA,IAAA+E,UAAA,IACA,IAAAD,UAAA,CACAC,SAAApO,KAAAwN,YAAAW,WAIAzO,SAAA,WACAY,SACA+N,QAAA,MAAAD,WAAA,MAAAA,WAAA,YAAA,GAAAA,YAIApO,MAAAsO,iBAAA,SAAAH,WAEA,GAAArQ,SAAAkC,KAAA2N,WAAAvH,OACA,IAAAmI,WAEArL,GAAAyI,KAAAwC,UAAA,SAAAK,aACA,GAAAZ,OAAA1K,EAAA2K,UAAA/P,QAAA,SAAA0J,OACA,GAAAiH,MAAAtR,QAAAuR,KAAAF,YACA,OAAAtL,GAAAyL,QAAAF,MAAAjH,QAEA+G,SAAApH,KAAAyG,QAGA,IAAAW,QAAAjH,OAAA,EAAA,CACA6G,UAAAI,QAGA,MAAAJ,WAIAnO,MAAA4O,UAAA,WAEA,GAAAT,WAAApO,KAAAuG,QAAA+C,UAEA,KAAAlM,QAAA0R,QAAAV,WAAA,CACAA,aAGA,IAAAjL,EAAA4L,QAAAX,YAAAjL,EAAA6L,SAAAZ,UAAA,IAAA,CACAA,UAAAnO,KAAAsO,iBAAAH,WAGAzO,SAAA,WACAY,SACA+N,QAAA,MAAAF,aAIAnO,MAAAgP,UAAA,WAEAhP,KAAA+M,MAAAH,OAAAoC,UAAAjC,MAAAF,MAAAvP,WACA,KAAA0C,KAAA+M,MAAA,CACA,KAAA,IAAA7O,OAAA,oCA4CA8B,KAAAiP,UAAAlL,OAAA/D,KAAA+M,MAAA,IAAA/M,KAAA+M,MAAA,GACA/M,MAAA2N,WAAA5J,OAAA/D,KAAA+M,MAAA,GACA/M,MAAAkP,UAAAlP,KAAA+M,MAAA,IAAA/M,KAAA+M,MAAA,EACA/M,MAAAmP,QAAApL,OAAA/D,KAAA+M,MAAA,GAAA/M,KAAA+M,MAAA,GAAA/M,KAAAkP,UACAlP,MAAAoP,QAAApP,KAAA+M,MAAA,EAEA3G,QAAAiJ,iBAAArP,KAAA2N,WAAA,SAAA2B,OAAAC,QACA,GAAApS,QAAA4Q,OAAAuB,OAAAC,QAAA,CACA,OAGAxP,KAAAmO,YAEA,QAKAlR,UAAAE,GAAAiF,UAAA,aAAA,SAAAzC,SAAAoE,KAAA0L,SAEA,OACApN,SAAA,IACA+B,SAAA,UAAA,cACA5B,WAAA,uBACAmG,KAAA,SAAAjK,MAAA8B,QAAAoI,MAAAnE,aACA,GAAA8B,SAAA9B,YAAA,EACA,IAAAiL,YAAAjL,YAAA,EAEAiL,YAAA9I,WAAAL,QACAmJ,YAAAhP,MAEA,IAAAkI,MAAAqG,UAAA,CACAS,WAAAT,YAGA1I,QAAA4C,SAAA/B,KAAA,SAAAK,OACA,GAAAkI,QAAAnP,QAAAoP,MACAD,QACAE,YAAA,cAAAtJ,QAAAsE,QACAgF,YAAA,WAAAtJ,QAAAsE,QACAgF,YAAA,uBAAAtJ,QAAAsE,QACAgF,YAAA,oBAAAtJ,QAAAsE,QACAgF,YAAA,WAAAtJ,QAAAsB,QACAgI,YAAA,cAAAtJ,QAAAuJ,UACA,OAAArI,QAGAjH,SAAAW,GAAA,SAAA,SAAA4O,GAIA,GAAAL,WAAA3R,QAAAuP,MAAA,CACA3N,SAAA,WACA4G,QAAAkC,cAAAsH,EAAAC,SAIAjM,KAAAkB,KAAA8K,IAKAvP,SAAAW,GAAA,gBAAA,WACA,GAAAyH,MAAAqH,QAAA,CACAvR,MAAAwO,MAAAxO,MAAAwO,MAAAtE,MAAAqH,YAKAzP,SAAAW,GAAA,eAAA,WACA,GAAAyH,MAAAsH,OAAA,CACAxR,MAAAwO,MAAAxO,MAAAwO,MAAAtE,MAAAsH,WAKA1P,SAAAW,GAAA,eAAA,WAGA,GAAAX,QAAAsK,QAAA,mBAAAvD,OAAA,CAGA,GAAA4I,YAAA/E,EAAAnL,MAAA6K,QAAA,mBAAA,GAAAsF,UAAAC,MAAA,MAGA,KAAA,GAAAC,GAAA,EAAAA,EAAAH,WAAA5I,SAAA+I,EAAA,CACA,GAAAH,WAAAG,GAAAtD,MAAA,QAAA,CACA5B,EAAA,iBAAAJ,SAAAmF,WAAAG,QAOA,IAAAC,UAAAhK,QAAAiK,OACAjK,SAAAiK,QAAA,WACAD,UAEA,IAAAb,WAAAvC,SAAA,CACAuC,WAAAb,gBACA,CACAa,WAAAvB,YAKA,IAAAsC,KAAArT,QAAAoD,QAAAiP,QAEAgB,KAAA/K,KAAA,SAAA,WACAlF,QAAA8N,QAAA,UAGA1F,OAAA8H,SAAA,WAAA,SAAAjJ,OACAjH,QAAA8N,QAAA,UAAA7G,QAGAmB,OAAA8H,SAAA,WAAA,SAAAjJ,OACAjH,QAAA8N,QAAA,aAAA7G,QAGA/I,OAAAiD,IAAA,UAAA,WACAnB,QAAA8N,QAAA,YAGA3O,UAAA,WACAa,QAAA8N,QAAAoB,WAAA3R,iBCnXAN,SAMA,SAAAT,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAGAA,UAAAE,GAAAG,SAAA,iBACAqN,WAAA,qBACAgG,gBAAA,6BACAlS,SACA,YACA,gBACA,kBACA,gBACA,WACA,eACA,YACA,qBACA,gBACA,kBACA,UACA,aACA,SACA,SACA,qBACA,WACA,cACA,YACA,qBACA,cACA,YACA,YACA,WACA,iBACA,YACA,cACA,uBACA,mBACA,eAEAmS,UACAC,OAAA,aACAC,MAAA,KACAC,MAAA,KACAC,WAAA,MACAC,YAAA,eAIAhU,UAAAE,GAAAqF,WAAA,yBAAA,SAAAjC,SAAAsM,OAAAqE,cAAA7K,QAEA,GAAArG,MAAAC,IACAA,MAAAlC,UAEAkC,MAAAkO,SAAA,WAEA,GAAAC,WAAApO,KAAAuG,QAAA4K,WACA,IAAAxH,QAAA1J,KAAA0J,QAEA,KAAAyE,YAAAzE,OAAA,CACA,OAGAA,OAAAyH,QAAAhD,WAGAnO,MAAA2G,WAAA,SAAAL,SACAtG,KAAAsG,QAAAA,QAGAtG,MAAAoR,UAAA,WAEA,GAAA9K,SAAA,IAEA,IAAA+K,QAAA/Q,SAAAwL,KAAA,eAAAwF,SACA,IAAAD,OAAA/J,OAAA,CACAhB,QAAA+K,OAAA9S,KAAA0S,cAAAvG,WACA1K,MAAA2G,WAAAL,SAGA,MAAAA,SAGAtG,MAAAuR,YAAA,WACA,GAAApD,WAAAhD,EAAA/F,GAAAoM,WAAAC,SAAAC,WAAA3R,KAAAuG,QAAA4K,YAAAnR,KAAAjC,QAAA6T,OAAA,KACA,OAAAxD,WAGAnO,MAAA4R,YAAA,WACA,GAAAC,MAAA9R,KAAAuG,QAAA4K,WAEA,IAAAW,OAAA5J,WAAA4J,OAAA,OAAAC,OAAAC,OAAAF,MAAA,CACA,GAAAG,GAAAF,OAAAD,KACA9R,MAAAuG,QAAA4K,YAAAc,EAAA5K,UAAA4K,EAAAC,SAAA,KAGA,MAAAlS,MAAAuG,QAAA4K,YAGAlR,MAAAkS,YAAA,WACA,GAAAP,QAAAxG,EAAA/F,GAAAoM,WAAAC,SAAAU,YAAApS,KAAAjC,QAAA6T,OACA,IAAAS,SAAAjH,EAAA/F,GAAAoM,WAAAC,SAAAY,UAAAtS,KAAAuG,QAAA+C,WAAAsI,OAAA,KAEA,IAAAjI,QAAA3J,KAAA2J,QAEA,KAAAA,OAAA,CACA,OAIA,GAAA4I,WAAA5I,OAAA6I,cAAAH,QAGA,IAAArS,KAAAjC,QAAA0U,aAAAF,UAAA,CACAA,UAAAR,OAAAQ,WAAAX,OAAA5R,KAAAjC,QAAA0U,aAGA,MAAAF,WAGAtS,MAAAS,KAAA,WAEAyC,EAAA+D,QAAA2F,OAAA,SAAApF,MAAA3D,KACA,GAAAX,EAAA8J,SAAAiE,cAAAzS,QAAAqF,IAAAxB,QAAA,QAAA,KAAA,CACAtC,KAAAjC,QAAA+F,KAAAuC,OAAA6G,MAAAzF,SAMAzH,MAAAjC,QAAA2U,UAAA1S,KAAAjC,QAAA2U,UAAA1S,KAAAjC,QAAA2U,UAAAxB,cAAAN,SAAAE,KACA9Q,MAAAjC,QAAA4U,eAAA3S,KAAAjC,QAAA4U,eAAA3S,KAAAjC,QAAA4U,eAAAzB,cAAAN,SAAAG,KACA/Q,MAAAjC,QAAA6T,OAAA5R,KAAAjC,QAAA6T,OAAA5R,KAAAjC,QAAA6T,OAAAV,cAAAN,SAAAC,MACA7Q,MAAAjC,QAAA6U,WAAA5S,KAAAjC,QAAA6U,WAAA5S,KAAAjC,QAAA6U,WAAA1B,cAAAN,SAAAI,UAEA,IAAAhR,KAAAjC,QAAA0U,aAAAzS,KAAAjC,QAAA0U,YAAAI,gBAAA,UAAA,CACA7S,KAAAjC,QAAA0U,YAAAvB,cAAAN,SAAAK,aAIAhR,MAAA0J,OAAA,WACA,MAAApJ,UAAA/B,KAAA,cAGAyB,MAAAyB,QAAA,WACA,GAAAiI,QAAA1J,KAAA0J,QACA,IAAAA,OAAA,CACAA,OAAA1H,QACA1B,UAAA/B,KAAA,aAAA,OAIAyB,MAAAe,KAAA,WACA,GAAA2I,QAAA1J,KAAA0J,QACA,IAAAA,OAAA,CACAA,OAAA3I,UAKA/D,UAAAE,GAAAiF,UAAA,eAAA,SAAAqN,QAAA1L,KAAAmN,eACA,OACA7O,SAAA,IACA+B,SAAA,UAAA,gBACA5B,WAAA,yBACAmG,KAAA,SAAAjK,MAAA8B,QAAAoI,MAAAnE,aAEA,GAAA8B,SAAA9B,YAAA,EACA,IAAAqO,cAAArO,YAAA,EAEA,KAAA8B,QAAA,CACAA,QAAAuM,aAAAzB,WACA,KAAA9K,QAAA,CACAxC,KAAAa,MAAA,gCACA,SAIAkO,aAAApS,MACAoS,cAAAlM,WAAAL,QAEA/F,SAAAW,GAAA,aAAA,SAAA4O,GACAhM,KAAAkB,KAAA,+BAAA8K,KAIAxJ,SAAA4C,SAAA/B,KAAA0L,aAAAX,YAOA5L,SAAA6C,YAAAhC,KAAA0L,aAAAtB,YACAjL,SAAA6C,YAAAhC,KAAA0L,aAAAjB,YAEA,IAAAtB,UAAAhK,QAAAiK,OACAjK,SAAAiK,QAAA,WACAD,UACAuC,cAAA3E,WAGA,IAAAsC,KAAArT,QAAAoD,QAAAiP,QAEAgB,KAAA/K,KAAA,SAAA,WACAoN,aAAA9R,QAGA,IAAAqK,QAAA7K,QAAA8K,SAAA4F,cAAAP,gBACA,IAAAtF,OAAA9D,OAAA,CACA8D,OAAAlK,GAAA,mBAAA,WACA,IAAAX,QAAAuS,KAAA,YAAA,CACAvS,QAAAwS,WAKAtU,MAAAiD,IAAA,UAAA,WACAmR,aAAApR,SACA,IAAA2J,OAAA9D,OAAA,CACA8D,OAAA9F,IAAA,sBAIA7G,OAAAmL,WAAA,WACArJ,QAAAiR,WAAAqB,aAAA/U,iBCxOAN,SAGA,SAAAT,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAG,SAAA,cACA2B,QACAgU,GAAA,8BAEA1T,WACA2T,KAAA,wBACAC,QAAA,gCACAjJ,QAAA,kCAIAjN,UAAAE,GAAAiP,SAAA,iBAAA,WAEA,GAAAgH,gBACA,IAAAC,gBACA,IAAAhN,OAEApG,MAAAqT,mBAAA,SAAArV,UACAmV,gBAAAnV,SAGAgC,MAAAsT,mBAAA,SAAAtV,UACAoV,gBAAApV,SAGAgC,MAAAuM,KAAA,SAAAgH,QAAAC,WAAA/T,WAAAgU,QAAAC,UAAAhU,UAEA,GAAAiU,gBAAA,WACA3T,KAAAiB,YACAjB,MAAAgB,MAAA,KAGA,IAAAZ,OAAAuT,eAAAtT,SAEAD,OAAAK,KAAA,WAEA2F,OAAA3G,WAAAS,KAAA,KACAkG,QAAAwN,OAEA5T,MAAA6T,gBAGAzT,OAAAyT,cAAA,WAEA,GAAA9T,MAAAC,IACA,IAAA8T,UAAA,IAGAA,UAAArU,WAAAiC,IAAA6R,QAAAvU,OAAA+U,YAAA,WACAhU,KAAAiU,eAEAhU,MAAAiB,UAAAkG,KAAA2M,SAGAA,UAAArU,WAAAiC,IAAA6R,QAAAvU,OAAAiV,cAAA,WACAlU,KAAAmU,eAEAlU,MAAAiB,UAAAkG,KAAA2M,SAGAA,UAAArU,WAAAiC,IAAA6R,QAAAvU,OAAAmV,uBAAA,WACApU,KAAAqU,eAEApU,MAAAiB,UAAAkG,KAAA2M,UAIA1T,OAAAiU,iBAAA,WAEAnR,EAAAyI,KAAA3L,KAAAiB,UAAA,SAAA6S,UACAA,aAIA1T,OAAA4T,YAAA,WAEA,GAAAjU,MAAAC,IAEA,IAAAA,KAAAgB,QAAA,KAAA,CACA,OAGAoF,OAAA3G,WAAAS,KAAA,KACAkG,QAAAwN,OACAxN,QAAAwN,KAAA5V,SAAAwV,WAAAlU,UAAA2K,OAEAjK,MAAAgB,MAAA,GAAAyS,UACA3U,KAAA,KACAL,MAAA2H,OACAvH,SAAA,SACAZ,YAAAuV,WAAAlU,UAAA2T,MAGAS,WAAA5H,KAAA,QAAA5K,GAAAsS,WAAAxU,OAAAgU,GAAA,WACAjT,KAAAmU,gBAKA9T,OAAA8T,YAAA,WACA,GAAAlU,KAAAgB,MAAA,CACAhB,KAAAsU,iBACAtU,MAAAgB,MAAAD,OAGAf,KAAAgB,MAAA,KAGAZ,OAAAkU,gBAAA,WACAZ,UAAA5H,KAAA,QAAAxG,IAAAkO,WAAAxU,OAAAgU,IAGA5S,OAAAgU,YAAA,WACA,GAAArU,MAAAC,IACAA,MAAAsU,iBAEA5U,UAAA,WACA0G,OAAAwN,KAAA5V,SAAAwV,WAAAlU,UAAA4T,OACA9M,QAAAwN,KAAAW,iBAAArR,EAAAuC,KAAA1F,KAAAwU,iBAAAxU,OACA,EAAA,MAIAK,OAAAmU,iBAAA,WACA9U,WAAAwF,WAAAsO,QAAAvU,OAAAwV,0BAGA,OAAA,IAAAb,kBAMA3W,UAAAE,GAAAuX,IAAA,SAAAC,gBCjJAA,eAAAjU,WAGAjD,SAGA,SAAAT,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAG,SAAA,WACAiM,KAAA,YACAqH,UACAkB,KAAA,aACA8C,MAAA,iBACAC,IAAA,gBAIA5X,UAAAE,GAAAiF,UAAA,SAAA,SAAAqN,QAAA1L,KAAA+Q,SACA,OACAzS,SAAA,IACA+B,QAAA,UACAuE,KAAA,SAAAjK,MAAA8B,QAAAoI,OAEA,GAAAmM,UAAAD,QAAAlE,SAAAhI,MAAA,UACA,KAAAmM,SAAA,CACAA,SAAAnM,MAAA,UAGAlK,MAAAmL,WAAA,WACArJ,QAAAwU,UAAAD,WAGArW,OAAAiD,IAAA,WAAA,WACAnB,QAAAwU,UAAA,kBClCAvX,SAGA,SAAAT,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAqF,WAAA,4BAAA,SAAAjC,UAEAN,KAAAgV,UAAA,SAAAC,cACA,GAAAA,aAAA,CACA3U,SAAAwK,YAAA,UACAxK,UAAAxB,WACA,CACAwB,SAAA0B,UAIAhC,MAAAkV,QAAA,WACA5U,SAAA0B,WAKAhF,UAAAE,GAAAiF,UAAA,kBAAA,SAAAgT,sBACA,OACA/S,SAAA,KACAG,WAAA,4BACA4B,SAAA,mBACAuE,KAAA,SAAAtC,OAAA9F,SAAA8U,MAAA5Q,aAEA,GAAA6Q,iBAAA7Q,YAAA,EAEAlE,UAAAS,MAEAqF,QAAAxB,OAAAwQ,MAAAC,gBAAA,SAAAC,aAEA,IAAAnY,QAAA0R,QAAAyG,aAAA,CACAA,YAAApS,EAAAqS,MAAA,GAAAD,aAGAH,qBAAAK,gBAAAF,aAAAjX,KAAAgX,gBAAAL,UAAAK,gBAAAH,iBC3CA1X,SAGA,SAAAT,MACA,YAEA,IAAAC,UAAAD,KAAAC,QAGAA,UAAAyY,KAAAlT,WAAA,wBAAA,SAAAmT,iBAAApV,SAAAsM,OAAA+I,aAEA3V,KAAA4V,QAAA,SAAAzU,OAGA,GAAAuU,iBAAAG,eAAAjJ,QAAA,CACAzL,MAAA0E,gBACA1E,OAAA2U,kBAIA,GAAAC,YAAA7S,EAAAjD,QACA+V,MAAA,QACAN,iBAAAO,cAAArJ,SACAzL,MAAAA,MAAAmH,MAGA,IAAAvG,SAAA4T,YAAAO,WAAAH,WACAhU,SAAA,WAAA,WACA,GAAA2T,iBAAAG,eAAAjJ,QAAA,CACAuJ,SAAAC,SAAA9V,SAAA2B,KAAA,aAOAjF,UAAAyY,KAAAtT,UAAA,gBAAA,WAEA,OACAC,SAAA,IACAG,WAAA,wBACA8T,SAAA,gBACA3N,KAAA,SAAAtC,OAAA9F,SAAAsM,OAAA0J,eAEA,GAAAC,WAAA3J,OAAA0J,eAAA,OAGAhW,UAAAY,GAAAqV,UAAA,SAAApV,OACAmV,cAAAV,QAAAzU,eChDA3D,SAGA,SAAAT,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAsZ,SAAArP,KAAA,uBAEAnK,UAAAE,GAAAuZ,OAAA,SAAAC,UAEAA,SAAAC,UAAA,wBAAA,YAAA,OAAA,SAAAC,UAAA9S,MAEA,GAAA3B,WAAAyU,UAAA,EACA,IAAAC,cAAA1U,UAAAuG,IAEA,IAAAoO,SAAA,SAAArY,MAAA8B,QAAAoI,OAEA,GAAAkO,cAAA3T,EAAA8J,SAAA9J,EAAA6T,KAAApO,OAAA,UAAA,CACA7E,KAAAkB,KAAA,2EACA,YACA,IAAA6R,aAAA,CACAA,aAAAG,MAAAhX,KAAAiX,YAKA9U,WAAAiC,QAAA,WACA,MAAA0S,SAGA,OAAAF,kBCjCApZ,SAGA,SAAAT,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAG,SAAA,kBAEA6Z,SAAA,uCAGA,SAAAC,yBAAAC,QAEA,GAAArX,MAAAC,IAEA,SAAAqX,eAAAC,YAAAC,OACA,IAAAA,QAAAA,MAAAhZ,KAAA,CACA,OAGA,GAAAiZ,YAAAD,MAAAhZ,KAAAiZ,UACA,KAAAA,WAAA,CACA,OAGA,GAAAA,WAAA9H,OAAA,CACA,GAAA+H,aAAAL,OAAAvZ,IAAA2Z,WAAA9H,OAEA,IAAA+H,YAAA,CACAJ,cAAAC,YAAAG,cAGAD,WAAAD,MAAAA,MAAA/N,IACA8N,aAAAnQ,KAAAqQ,YAGAzX,KAAA2X,eAAA,WACA,GAAAJ,eACAD,eAAAC,YAAAF,OAAAO,QACA,OAAAL,cAIAH,wBAAAS,SAAA,SACA5a,UAAAE,GAAAqF,WAAA,0BAAA4U,wBAEA,SAAAU,eAAAC,gBACA,OACA1V,SAAA,KACAnE,YAAA6Z,eAAAZ,SACA3U,WAAA,0BACAmG,KAAA,SAAAjK,MAAA8B,QAAAoI,MAAAoP,yBACAtZ,MAAA6Y,YAAAS,wBAAAL,gBAEAjZ,OAAAiD,IAAA,sBAAA,WACAjD,MAAA6Y,YAAAS,wBAAAL,qBC7DAG,cAAAD,SAAA,iBACA5a,UAAAE,GAAAiF,UAAA,gBAAA0V,iBAEAra,SAGA,SAAAT,MACA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAA8a,OAAA,gBAAA,WACA,GAAAC,KAAAC,KAAAD,GACA,IAAAE,OAAAD,KAAAC,KACA,IAAAC,KAAAF,KAAAE,GACA,IAAAC,KAAAH,KAAAG,GAEA,SAAAC,OAAAC,OAAAC,WACA,GAAAC,MAAAR,IAAA,GAAAO,UACA,OAAAN,MAAAI,MAAAC,OAAAE,MAAAA,KAGA,MAAA,UAAAF,OAAAC,WACAA,UAAAA,WAAA,CACA,IAAAE,MAAAP,MAAAE,IAAAD,IAAAG,SAAAF,IAAA,KACA,IAAAM,MAAA,SAAAD,KAAA,EACA,OAAAC,MAAAL,MAAAC,OAAAN,IAAA,IAAAS,MAAAF,WAAAG,KAAAJ,QAAA,OCvBA/a,SAGA,SAAAT,MACA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAG,SAAA,YACAub,MAAA,KACAC,cAAA,QACAC,eAAA,MACA5B,SAAA,2BAGA,SAAA6B,gBAAAC,UAEA,OACAva,OACAwa,MAAA,IACAjW,MAAA,WACAkW,aAAA,KAEAjb,YAAA+a,SAAA9B,SACAxO,KAAA,SAAAjK,MAAA8B,SACA9B,MAAAwa,MAAAxa,MAAAwa,OAAAD,SAAAJ,KACAna,OAAAya,aAAAza,MAAAya,cAAAF,SAAAF,cAEA,IAAAK,WACAA,SAAAhS,KAAA6R,SAAAH,cACA,IAAApa,MAAAwa,MAAA,CACAE,QAAAhS,KAAA1I,MAAAwa,OAGA1Y,QAAAwK,SAAAoO,QAAAlO,KAAA,QCrCA8N,eAAAnB,SAAA,WACA5a,UAAAE,GAAAiF,UAAA,UAAA4W,kBAEAvb,SAGA,SAAAT,MACA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAG,SAAA,sBACA6Z,SAAA,sCAGAla,UAAAE,GAAAiF,UAAA,mBAAA,SAAAiX,oBACA,OACAnb,YAAAmb,mBAAAlC,SACA5U,WAAA,KACA7D,OACA4a,YAAA,IACAC,SAAA,KAEA5Q,KAAA,SAAAjK,MAAA8B,QAAAoI,OACApI,QAAAwK,SAAA,eACAtM,OAAA8a,YAAA,WACA,IAAA5Q,MAAA6Q,SAAA,CACA/a,MAAA6a,WAAA7a,MAAA4a,qBCxBA7b,SAGA,SAAAT,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEAA,UAAAE,GAAAG,SAAA,aAEAiC,WACAma,OAAA,iCAKAzc,UAAAE,GAAAqF,WAAA,qBAAA,SAAAjC,UAEA,GAAAP,MAAAC,IACA,IAAA0Z,OAEA1Z,MAAA2Z,MAAA,WACAD,OAAA,IACA1Z,MAAA+L,UAGA/L,MAAA+L,QAAA,WAEAzL,SACAwL,KAAA,mBACA8N,SAAA,2BAAAC,QAAA,MACAD,UAAAE,QAAA,IACAC,MAAA,IACAC,SAAA,IACAC,SAAA,WACA,GAAAP,OAAA,CACAQ,WAAA,WAAAna,KAAAgM,WAAA,SACA,CACAhM,KAAAoa;KAOAna,MAAAma,aAAA,WACA7Z,SAAAwL,KAAA,mBAAA8N,SAAA,OAAA,KACAtZ,UAAA8Z,aAGApa,MAAAqa,KAAA,WACAX,OAAA,QAKA1c,UAAAE,GAAAiF,UAAA,WAAA,SAAAmY,WACA,OACAlY,SAAA,IACAC,QAAA,KACAE,WAAA,qBACA4B,QAAA,WACAlG,YAAAqc,UAAAhb,UAAAma,OACA/Q,KAAA,SAAAjK,MAAA8B,QAAA0B,KAAAsY,UAEA,IAAAtY,KAAA8X,MAAA,CACAQ,SAAAZ,QAGAlb,MAAAiD,IAAA,WAAA,WACA6Y,SAAAF,eCvEA7c,SAGA,SAAAT,MAEA,YAEA,IAAAC,UAAAD,KAAAC,QAEA,IAAAwd,eACA,0HACA,oEACA,sCACA,6EACA,WACA,QAEAxd,UAAAE,GAAAG,SAAA,YACAiC,WACAmb,MAAA,4BAIA,IAAAC,qBAAA,SAAAC,SACA,GAAApP,IAAAJ,EAAA,mBAAAwP,QAAA,OAAAxP,EAAA,cAAAwP,QAAA,KACA,IAAApP,GAAA,CACA,MAAAA,IAAAO,KAAA,oBAAAvJ,WAAA,aAIA,IAAAqY,yBAAA,SAAAlc,GAAAmc,SAAAzV,IACA,GAAA7C,YAAAsY,SAAAC,gBACA,KAAAvY,WAAA,CACAA,WAAAmY,oBAAAhc,GACAmc,UAAAC,iBAAAvY,WAEA,GAAAA,YAAAW,EAAA7B,WAAAkB,WAAA6C,KAAA,CACA7C,WAAA6C,OAIA,IAAA2V,iBAAA,SAAArc,GAAAmc,SAAAG,OAAAC,UACAL,wBAAAlc,GAAAmc,SAAAI,SACAD,QAAAhE,MAAA6D,UAGA,IAAAK,sBAAA,SAAAxc,GAAAmc,UACA,GAAAM,aAAAN,SAAAlB,KACA,IAAAyB,YAAAP,SAAAR,IACAQ,UAAAlB,MAAA,WACAoB,gBAAArc,GAAAmc,SAAAM,YAAA,SAEAN,UAAAR,KAAA,WACAU,gBAAArc,GAAAmc,SAAAO,WAAA,QAEAP,UAAAQ,gBAAA,KAGAre,UAAAE,GAAAuX,IAAA,SAAAhI,UAAA3I,MACA,IAEA,GAAAwX,eAAA7O,UAAA5O,IAAA,gBACA,IAAA0d,SAAA9O,UAAA5O,IAAA,UACAyd,eAAAE,UAAA,KACAF,eAAAvB,MAAA,CACAuB,eAAAtd,SAAAwc,aAEA,IAAAiB,WAAAF,QAAAG,UAAA7d,GACA0d,SAAAG,UAAA7d,IAAA,SAAAa,IACA,GAAAmc,UAAAY,UAAA/c,GACA,KAAAmc,SAAAQ,gBAAA,CACAH,qBAAAxc,GAAAmc,UAEA,MAAAA,WAGA,MAAA/K,GACAhM,KAAAwH,KAAA,6CCylEG9N","file":"availity-angular-ui.min.js","sourcesContent":["/*global module*/\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity || {};\n\n  availity.MODULE_UI = 'availity.ui';\n  availity.ui = angular.module(availity.MODULE_UI, ['ng', 'ngSanitize']);\n\n  availity.ui.constant('AV_UI', {\n    // jscs: disable\n    NG_OPTIONS: /^\\s*([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?(?:\\s+group\\s+by\\s+([\\s\\S]+?))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+([\\s\\S]+?)(?:\\s+track\\s+by\\s+([\\s\\S]+?))?$/\n    // jscs: enable\n  });\n\n  if(typeof module !== 'undefined' && module.exports) {\n    module.exports = availity;\n  }\n\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.factory('avTemplateCache', function($q, $templateCache, $http) {\n\n    return {\n\n      get: function(options) {\n\n        var valid = !options.template || !options.templateUrl;\n\n        if(!valid) {\n          throw new Error('Either options.template or options.templateUrl must be defined for avTemplateCache');\n        }\n\n        return options.template ? $q.when(options.template) :\n          $http.get(options.templateUrl, {cache: $templateCache})\n            .then(function(result) {\n              return result.data;\n            });\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_MODAL', {\n\n    OPTIONS: {\n      scope: null,\n      templateUrl: null,\n      template: null,\n      id: null,\n      container: null,\n\n      // Bootstrap defaults\n      keyboard: true,\n      backdrop: true,\n      show: false,\n      remote: false\n    },\n\n    EVENTS: {\n      SHOW: 'show.av.modal',\n      SHOWN: 'shown.av.modal',\n      HIDE: 'hide.av.modal',\n      HIDDEN: 'hidden.av.modal'\n    },\n\n    BS_EVENTS:  {\n      SHOW: 'show.bs.modal',\n      SHOWN: 'shown.bs.modal',\n      HIDE: 'hide.bs.modal',\n      HIDDEN: 'hidden.bs.modal'\n    },\n\n    TEMPLATES: {\n      MODAL: 'ui/modal/modal-tpl.html'\n    }\n  });\n\n  var ModalFactory = function($rootScope, $timeout, $compile, AV_MODAL, avTemplateCache, $q) {\n\n    var Modal = function(options) {\n\n      var self = this;\n\n      this.options = angular.extend({}, AV_MODAL.OPTIONS, {scope: $rootScope.$new()}, options);\n\n      avTemplateCache.get(options).then(function(template) {\n        self.options.template = template;\n        self.create();\n      });\n\n    };\n\n    var proto = Modal.prototype;\n\n    proto.create = function() {\n\n      var self = this;\n\n      var scope = this.options.scope;\n      this.$element = angular.element(this.options.template);\n\n      this.createId();\n      this.scope();\n\n      $compile(this.$element)(scope);\n      $timeout(function() {\n        self.init();\n      }, 0, true);\n\n      // Append to container or <body>\n      this.options.container ? this.$element.appendTo(this.options.container) : this.$element.appendTo('body');\n\n    };\n\n    proto.scope = function() {\n\n      var self = this;\n      var scope = this.options.scope;\n\n      scope.modalShow = function() {\n        self.show();\n      };\n\n      scope.modalToggle = function() {\n        self.toggle();\n      };\n\n      scope.modalHide = function() {\n        self.hide();\n      };\n\n    };\n\n    proto.init = function() {\n\n      // Initialize Bootstrap jQuery plugin\n      this.$element.modal({\n        'backdrop': this.options.backdrop,\n        'keyboard': this.options.keyboard,\n        'show': this.options.show,\n        'remote': this.options.remote\n      });\n\n      this.listeners();\n    };\n\n    proto.listeners = function() {\n\n      var self = this;\n      var scope = this.options.scope;\n      var $element = this.$element;\n\n      $element.on(AV_MODAL.BS_EVENTS.SHOW, function(event) {\n        scope.$emit(AV_MODAL.EVENTS.SHOW, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.SHOWN, function(event) {\n\n        if(angular.isFunction(self.options.onShown)) {\n          self.options.onShown();\n        }\n\n        scope.$emit(AV_MODAL.EVENTS.SHOWN, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.HIDE, function(event) {\n        scope.$emit(AV_MODAL.EVENTS.HIDE, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.HIDDEN, function(event) {\n\n        if(angular.isFunction(self.options.onHidden)) {\n          self.options.onHidden.call(this);\n        }\n\n        scope.$emit(AV_MODAL.EVENTS.HIDDEN, event, self);\n\n        $timeout(function() {\n          self.destroy();\n        }, 0, true);\n\n      });\n\n      // Garbage collection\n      scope.$on('$destroy', function() {\n        self.destroy();\n      });\n    };\n\n    proto.show = function() {\n      this.$element.modal('show');\n    };\n\n    proto.hide = function() {\n      var deferred = $q.defer();\n\n      this.$element.modal('hide');\n      this.$element.one('hidden.bs.modal', function() {\n        deferred.resolve(true);\n      });\n\n      return deferred.promise;\n    };\n\n    proto.toggle = function() {\n      this.$element.data('modal').toggle();\n    };\n\n    proto.destroy =function() {\n      this.$element.remove();\n    };\n\n    proto.createId = function() {\n      // Create a unique id for the modal if not present or passed in via options\n      var id = this.$element.attr('id');\n      if(!id) {\n        // Get id from options or create a unique id\n        id = this.options.id ? this.options.id : availity.uuid('av-modal-id');\n        this.$element.attr('id', id);\n      }\n    };\n\n    return Modal;\n  };\n\n\n  availity.ui.factory('AvModal', ModalFactory);\n\n  availity.ui.directive('avModal', function(AV_MODAL) {\n    return {\n      restrict: 'A',\n      replace: true,\n      transclude: true,\n      scope: {},\n      templateUrl: AV_MODAL.TEMPLATES.MODAL\n    };\n  });\n\n})(window);\n","/**\n * 1. All fields should be pristine on first load\n * 2. If field is modified an invalid the field should be marked with an error\n *\n */\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('avValFormController', function() {\n\n    this.ngForm  = null;\n    this.rulesKey = null;\n    this.avValOn = null;\n    this.avValDebounce = null;\n    this.avValInvalid = false;\n\n    // Object that stores the unique id (key) and violation count (value) of all the form fields\n    //\n    // EX:\n    //\n    // {\n    //  avVal001: 0\n    //  avVal002: 2\n    //  avVal003: 1\n    // }\n    this.violations = {};\n\n    this.init = function(form) {\n      this.ngForm = form;\n    };\n\n    /**\n     * Records id of the form field and number of violations\n     * @param  {[type]} id    [description]\n     * @param  {[type]} count [description]\n     * @return {[type]}       [description]\n     */\n    this.record = function(id, count) {\n      this.violations[id] = count;\n\n      var violocationCount = _.reduce(this.violations, function(sum, num) {\n        return sum + num;\n      }, 0);\n\n      this.ngForm.$setValidity('av', violocationCount === 0);\n    };\n\n    this.unrecord = function(id) {\n      if(id && this.violations[id]) {\n        delete this.violations[id];\n      }\n    };\n\n    this.reset = function() {\n      this.ngForm.$setPristine();\n      this.ngForm.$submitted = false;\n    };\n\n    this.$setSubmitted = function() {\n      this.ngForm.$submitted = true;\n    };\n\n    this.setRulesKey = function(key) {\n      this.rulesKey = key;\n    };\n\n  });\n\n  // form.$error = {};\n  // form.$$success = {};\n  // form.$pending = undefined;\n  // form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);\n  // form.$dirty = false;\n  // form.$pristine = true;\n  // form.$valid = true;\n  // form.$invalid = false;\n  // form.$submitted = false;\n\n  availity.ui.directive('avValForm', function($log, $timeout, $parse, AV_VAL, avValAdapter, $rootScope) {\n    return {\n      restrict: 'A',\n      priority: 10,\n      require: ['form', 'avValForm', '?ngSubmit'],\n      controller: 'avValFormController',\n      compile: function() {\n        return {\n          pre: function(scope, iEl, iAttrs, controllers) {\n\n            var ruleFn = $parse(iAttrs.avValForm);\n            var rulesKey = ruleFn(scope);\n            rulesKey = rulesKey || iAttrs.avValForm; // interpolated rule from scope || fixed string\n\n            if(!rulesKey) {\n              $log.error('avValForm requires a rules key in order to run the proper validation rules.');\n              return;\n            }\n\n            scope.$watch(ruleFn, function(_rulesKey, _oldRulesKey) {\n              if(_rulesKey) {\n                avForm.setRulesKey(_rulesKey);\n\n                if(_rulesKey !== _oldRulesKey) {\n                  $timeout(function() {\n                    $log.info('avValForm revalidate');\n                    $rootScope.$broadcast(AV_VAL.EVENTS.REVALIDATE);\n                  });\n                }\n\n              }\n\n            });\n\n            var ngForm = controllers[0];\n            var avForm = controllers[1];\n\n            // Allow form attributes to define the validation behavior of the form fields\n            // inside it.  If `av-val-on` or `av-val-debounce` are on the form then all form\n            // fields inside the form would inherit this behavior.\n            avForm.avValOn = iAttrs.avValOn || null;\n            avForm.avValDebounce = iAttrs.avValDebounce || null;\n            // Allows fields to update with invalid data for dirty form saving\n            avForm.avValInvalid = iAttrs.avValInvalid || false;\n\n            avForm.init(ngForm);\n            avForm.setRulesKey(rulesKey);\n\n          },\n          post: function(scope, iEl, iAttrs, controllers) {\n\n            iEl.attr('novalidate', 'novalidate');  // prevent HTML5 validation from kicking in\n\n            // Disable ng-submit or ng-click handlers and store the function to call for submitting\n            var fn;\n            if(iAttrs.ngSubmit) {\n              // Disable ng-submit event\n              iEl.off('submit');\n              fn = $parse(iAttrs.ngSubmit, /* expensiveChecks */ true);\n            }else if(iAttrs.ngClick) {\n              // Disable ng-click event\n              iEl.off('click');\n              fn = $parse(iAttrs.ngClick, /* expensiveChecks */ true);\n            }\n\n            var ngForm = controllers[0];\n            var avForm = controllers[1];\n\n            scope.$on(AV_VAL.EVENTS.RESET, function () {\n              avForm.reset();\n            });\n\n            iEl.bind('submit', function(event) {\n\n              scope.$broadcast(AV_VAL.EVENTS.SUBMITTED);\n              avForm.$setSubmitted();\n\n              if(ngForm.$invalid) {\n\n                scope.$broadcast(AV_VAL.EVENTS.FAILED);\n\n                $log.info('avValForm invalid.  preventing default submit action');\n\n                event.preventDefault();\n                event.stopImmediatePropagation();\n                scope.$broadcast(event);\n\n                avValAdapter.scroll(iEl);\n                return;\n              }\n\n              ngForm.$setPristine();\n\n              if(!fn) {\n                return;\n              }\n\n              var callback = function() {\n                fn(scope, {$event:event});\n              };\n\n              scope.$apply(callback);\n\n            });\n\n          }\n        };\n      }\n    };\n  });\n\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('AvValFieldController', function($element, avValAdapter, avVal, $log, $timeout, $scope, $sniffer) {\n\n    this.ngModel = null;\n    this.rule = null;\n    this.avValForm = null;\n    this.avValInvalid = false;\n\n    var self = this;\n\n    var placeholder = $element[0].placeholder;\n    var noEvent = {};\n\n    this.createId = function() {\n      this.ngModel.avId = availity.uuid('avVal');\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.setRule = function(rule) {\n      this.rule = rule;\n    };\n\n    this.avValForm = function(avValForm) {\n      this.avValForm = avValForm;\n    };\n\n    this.updateModel = function(results) {\n\n      var self = this;\n      var validationKeys = [];\n\n      this.ngModel.avResults = results;\n\n      // set state for each violation\n      angular.forEach(results.violations, function (result) {\n        var key = 'av-' + result.contraintName;\n        validationKeys.push(key);\n        self.ngModel.$setValidity(key, result.valid);\n      });\n\n      // set overall state for validation state\n      this.ngModel.$setValidity('av', this.ngModel.avResults.isValid);\n\n      // store violations\n      this.ngModel.avViolations = this.ngModel.avResults.violations;\n\n      // record the id and violation count in the av-form controller.  this determines if the form is\n      // valid if sum of violations for all form inputs === zero\n      this.avValForm.record(this.ngModel.avId, this.ngModel.avResults.violations.length);\n\n      // remove violation keys that are no longer falsy\n      angular.forEach(this.ngModel.$error, function(value, key) {\n\n        if(_.indexOf(validationKeys, key) === -1 && key.lastIndexOf('av-', 0) === 0) {\n          self.ngModel.$setValidity(key, true);\n        }\n      });\n    };\n\n    this.updateView = function() {\n      if(this.ngModel.$dirty) {\n        avValAdapter.element($element, this.ngModel, this.ngModel.avResults.isValid);\n        avValAdapter.message($element, this.ngModel);\n      }\n    };\n\n    this.validate = function(value) {\n\n      $log.info('validating value [' + value + ']');\n\n      var rulesKey = self.avValForm.rulesKey;\n      var results = avVal.validate(rulesKey, $element, value, self.rule);\n\n      // validate function is called within the context of angular so fn.call\n      self.updateModel.call(self, results);\n      self.updateView.call(self);\n\n      return results;\n    };\n\n    this.validateModel = function(value) {\n\n      self.validate(value, true);\n      return value;\n\n    };\n\n    this.validateView = function(value) {\n\n      var results = self.validate(value);\n\n      if(self.avValForm.avValInvalid || self.avValInvalid) {\n        // allows invalid data from view to update model for dirty saving\n        return value;\n      }\n\n      // prevent invalid data from view to update model\n      return results.isValid ? value : undefined;\n\n    };\n\n    this.reset = function() {\n\n      avValAdapter.message($element, this.ngModel);\n      avValAdapter.reset($element);\n\n      var violations = this.ngModel.avResults.violations;\n      violations.splice(0, violations.length);\n\n    };\n\n    this.event = function(event, avValDebounce) {\n\n      var self = this;\n\n      $element.unbind('input');\n\n      var debounce;\n\n\n      $element.on(event, function() {\n\n        // https://github.com/angular/angular.js/blob/v1.2.27/src/ng/directive/input.js#L508\n        if($sniffer.msie <= 11 && (event || noEvent).type === 'input' && $element[0].placeholder !== placeholder) {\n          placeholder = $element[0].placeholder;\n          return;\n        }\n\n        $timeout.cancel(debounce);\n        debounce = $timeout( function() {\n          $scope.$apply(function() {\n            self.ngModel.$setViewValue($element.val());\n          });\n        }, avValDebounce);\n      });\n\n\n    };\n\n  });\n\n  // Events:\n  //\n  //  click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown\n  //  keyup keypress submit focus blur copy cut paste\n  availity.ui.directive('avValField', function($log, $timeout, avVal, avValAdapter, AV_VAL) {\n    return {\n      restrict: 'A',\n      controller: 'AvValFieldController',\n      require: ['^avValForm', '?ngModel', 'avValField'],\n      scope: {\n        avValDebounce: '@?',\n        avValOn: '@?'\n      },\n      link: function(scope, element, attrs, controllers) {\n\n        var rule = attrs.avValField; // not always string?\n        var avValForm = controllers[0];\n        var ngModel = controllers[1];\n        var avValField = controllers[2];\n\n        var avValOn = scope.avValOn || avValForm.avValOn || 'input';\n\n        if(!ngModel && !rule) {\n          $log.error('avValField requires ngModel and a validation rule to run.');\n          return;\n        }\n\n        // Allows fields to update with invalid data for dirty form saving\n        avValField.avValInvalid = attrs.avValInvalid || false;\n\n        avValField.setNgModel(ngModel);\n        avValField.avValForm(avValForm);\n        avValField.setRule(rule);\n        avValField.createId();\n\n        var avValDebounce = parseInt(scope.avValDebounce || (avValForm.avValDebounce || AV_VAL.DEBOUNCE), 10);\n        avValDebounce = _.isNumber(avValDebounce) ? avValDebounce : AV_VAL.DEBOUNCE;\n\n        var debounceAllowed = (element.is('input') &&\n          !(attrs.type === 'radio' || attrs.type === 'checkbox') &&\n          avValOn !== 'blur');\n\n        if(!debounceAllowed) {\n          avValDebounce = 0;\n        }\n\n        avValField.event(avValOn, avValDebounce);\n\n        // (view to model)\n        ngModel.$parsers.push(avValField.validateView);\n\n        // (model to view) - added to beginning of array because formatters\n        // are processed in reverse order thus allowing the model to be transformed\n        // before the validation framework check for validity.\n        ngModel.$formatters.unshift(avValField.validateModel);\n\n        scope.$on(AV_VAL.EVENTS.REVALIDATE, function() {\n          avValField.validate(ngModel.$viewValue);\n        });\n\n        scope.$on(AV_VAL.EVENTS.SUBMITTED, function() {\n          ngModel.$dirty = true;\n          avValField.validate(ngModel.$viewValue);\n        });\n\n        // Removes all errors on page, does not reset view or model values, this is to be handled by the app\n        scope.$on(AV_VAL.EVENTS.RESET, function () {\n          avValField.reset();\n        });\n\n        scope.$on('$destroy', function () {\n          avValForm.unrecord(ngModel.avId);\n        });\n\n      }\n    };\n  });\n\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_POPOVER', {\n    NAME: 'bs.popover'\n  });\n\n  availity.ui.controller('AvPopoverController', function($element, $scope, AV_POPOVER) {\n\n    this.listeners = function() {\n\n      var self = this;\n\n      angular.forEach(['show', 'shown', 'hide', 'hidden'], function(name) {\n        $element.on(name + '.bs.popover', function(ev) {\n          $scope.$emit('av:popover:' + name, ev);\n        });\n      });\n\n      $scope.$on('destroy', function() {\n        self.destroy();\n      });\n    };\n\n    this.plugin = function() {\n      return $element.data(AV_POPOVER.NAME);\n    };\n\n    this.show = function() {\n      $element.popover('show');\n    };\n\n    this.hide = function() {\n      $element.popover('hide');\n    };\n\n    this.toggle = function() {\n      $element.popover('toggle');\n    };\n\n    this.destroy = function() {\n      $element.popover('destroy');\n    };\n  });\n\n  availity.ui.directive('avPopover', function() {\n    return {\n      restrict: 'A',\n      controller: 'AvPopoverController',\n      link: function(scope, element) {\n\n        var options = {};\n\n        scope.$evalAsync(function() {\n          element.popover(angular.extend({}, options, {\n            html: true\n          }));\n        });\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('avValContainerController', function($scope, $timeout) {\n\n    this.message = function(ngModel) {\n\n      var message = null;\n      if(ngModel.avResults.violations.length && ngModel.avResults.violations[0].message) {\n        message = ngModel.avResults.violations[0].message;\n      }else {\n        message = null;\n      }\n\n      // $timeout is needed to update the UI from $broadcast events\n      $timeout(function() {\n        $scope.messages.message = message;\n      });\n\n    };\n\n  });\n\n  availity.ui.directive('avValContainer', function() {\n    return {\n      restrict: 'A',\n      controller: 'avValContainerController',\n      template: '<p class=\"help-block\" data-ng-bind-html=\"messages.message\"></p>',\n      replace: true,\n      scope: {\n\n      },\n      link: function(scope) {\n        scope.messages = _.extend({}, scope.messages, { message: null, id: null });\n      }\n    };\n  });\n\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BOOTSTRAP_ADAPTER', {\n    CLASSES: {\n      SUCCESS: 'has-success',\n      WARNING: 'has-warning',\n      ERROR: 'has-error',\n      FEEDBACK: 'has-feedback',\n      HELP: 'help-block',\n      FORM_GROUP: '.form-group:first',\n      NAVBAR: 'navbar-fixed-top'\n    },\n    SELECTORS: {\n      CONTAINER: 'container-id',\n      DATA_CONTAINER: 'data-container-id'\n    },\n    CONTROLLER: '$avValContainerController'\n  });\n\n  availity.ui.factory('avValBootstrapAdapter', function(AV_BOOTSTRAP_ADAPTER, $timeout, $log) {\n\n    return {\n\n      element: function(element, ngModel) {\n        if(ngModel.$valid) {\n          element.parents(AV_BOOTSTRAP_ADAPTER.CLASSES.FORM_GROUP).removeClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n        }else {\n          element.parents(AV_BOOTSTRAP_ADAPTER.CLASSES.FORM_GROUP).addClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n        }\n      },\n\n      reset: function(element) {\n        element.parents(AV_BOOTSTRAP_ADAPTER.CLASSES.FORM_GROUP).removeClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n      },\n\n      message: function(element, ngModel) {\n\n        var selector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.HELP\n        ].join('');\n\n        var $el = $(element);\n\n        var target = $el.attr(AV_BOOTSTRAP_ADAPTER.SELECTORS.CONTAINER);\n        target = target || $el.attr(AV_BOOTSTRAP_ADAPTER.SELECTORS.DATA_CONTAINER);\n        // default to siblings\n        target = target ? $('#' + target) : $el.siblings(selector);\n\n        if(target.length === 0) {\n          $log.warn('avValBootstrapAdapter could not find validation container for {0}', [element]);\n          return;\n        }\n\n        var el = target[0];\n        $el = angular.element(el);\n        var avValModel = $el.data(AV_BOOTSTRAP_ADAPTER.CONTROLLER); // get the av val message controller\n        if(avValModel) {\n          avValModel.message(ngModel);\n        }\n      },\n\n      scroll: function(form) {\n\n        // Bootstrap fixed navbars causes bad scroll-to offsets so find them all\n        var navbarSelector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.NAVBAR\n        ].join('');\n\n        // Add up all the heights to find the true offset\n        var offset = 0;\n        $(navbarSelector).each(function() {\n          offset += $(this).outerHeight();\n        });\n\n        var selector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR,\n          ':first'\n        ].join('');\n\n        var $target = $(form).find(selector);\n        $timeout(function() {\n          // scroll to offset top of first error minus the offset of the navbars\n          $('body, html').animate({scrollTop: $target.offset().top - offset}, 'fast');\n        }, 0, false);\n      }\n    };\n  });\n\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_VAL_ADAPTER', {\n    DEFAULT: 'avValBootstrapAdapter'\n  });\n\n  availity.ui.provider('avValAdapter', function() {\n\n    var that = this;\n\n    this.setAdapter = function(adapter) {\n      this.adapter = adapter;\n    };\n\n    this.$get = function(AV_VAL_ADAPTER, $injector) {\n\n      var Adapter = function() {\n        var adapterName = that.adapter || AV_VAL_ADAPTER.DEFAULT;\n        this.adapter = $injector.get(adapterName);\n      };\n\n      var proto = Adapter.prototype;\n\n      proto.element = function(element, ngModel) {\n        this.adapter.element(element, ngModel);\n      };\n\n      proto.reset = function(element) {\n        this.adapter.reset(element);\n      };\n\n      proto.message = function(element, ngModel) {\n        this.adapter.message(element, ngModel);\n      },\n\n      proto.scroll = function(form) {\n        this.adapter.scroll(form);\n      };\n\n      return new Adapter();\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_DROPDOWN', {\n    OPTIONS: [\n      'width',\n      'minimumInputLength',\n      'maximumInputLength',\n      'minimumResultsForSearch',\n      'maximumSelectionSize',\n      'placeholderOption',\n      'separator',\n      'allowClear',\n      'multiple',\n      'closeOnSelect',\n      'openOnEnter',\n      'id',\n      'matcher',\n      'sortResults',\n      'formatSelection',\n      'formatResult',\n      'formatResultCssClass',\n      'formatNoMatches',\n      'formatSearching',\n      'formatAjaxError',\n      'formatInputTooShort',\n      'formatInputTooLong',\n      'formatSelectionTooBig',\n      'formatLoadMore',\n      'createSearchChoice',\n      'createSearchChoicePosition',\n      'initSelection',\n      'tokenizer',\n      'tokenSeparators',\n      'query',\n      'ajax',\n      'data',\n      'tags',\n      'containerCss',\n      'containerCssClass',\n      'dropdownCss',\n      'dropdownCssClass',\n      'dropdownAutoWidth',\n      'adaptContainerCssClass',\n      'adaptDropdownCssClass',\n      'escapeMarkup',\n      'selectOnBlur',\n      'loadMorePadding',\n      'nextSearchTerm'\n    ]\n  });\n\n\n  availity.ui.controller('AvDropdownController', function($element, $attrs, AV_UI, AV_DROPDOWN, $log, $scope, $timeout, $parse) {\n\n    var self = this;\n    this.options = [];\n    this.match = null;\n    this.ngModel = null;\n\n    this.init = function() {\n\n      _.forEach($attrs, function(value, key) {\n        if(_.contains(AV_DROPDOWN.OPTIONS, key.replace('data-', ''))) {\n          self.options[key] = $scope.$eval(value);\n        }\n      });\n\n      self.multiple = angular.isDefined($attrs.multiple);\n\n      self.options.closeOnResize = self.options.closeOnResize  || true;\n\n      if(self.options.query) {\n\n        self.queryFn = self.options.query;\n        // Function used to query results for the search term.\n        self.options.query = self.query;\n        // Function used to get the id from the choice object or a string representing the key under which the id is stored.\n        self.options.id = self.getId;\n      }\n\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.getSelected = function(model) {\n\n      if(self.options.query) {\n        return 0;\n      }\n      var items = this.collection($scope);\n\n      var index = _.findIndex(items, function(item) {\n        return angular.equals(item, model);\n      });\n\n      return index;\n\n    };\n\n    // Result:\n    //\n    // {\n    //   \"code\": \"252Y00000X\",\n    //   \"value\": \"AGENCIES,EARLY INTERVENTION PROVIDER AGENCY,NOT APPLICABLE|Agency\",\n    //   \"id\": \"252Y00000X\"\n    // }\n    this.getId = function(result) {\n      return result.id;\n    };\n\n    // Wrapper around the query function for Select2.  When the promise resolves\n    // the callback\n    this.query = function(options) {\n\n      self.queryFn(options).then(function(response) {\n\n        // Callback function that should be called with the result object. The result object:\n        //\n        // result.results (object) - Array of result objects. The default renderers\n        //    expect objects with id and text keys. The id property is required,\n        //    even if custom renderers are used. The object may also contain a children\n        //    key if hierarchical data is displayed. The object may also contain a disabled\n        //    boolean property indicating whether this result can be selected.\n        //\n        // result.more (boolean) - true if more results are available for the current\n        //    search term.\n        //\n        // results.context (object) - A user-defined object that should be made available\n        //    as the context parameter to the query function on subsequent queries to load\n        //    more result pages for the same search term. See the description of\n        //    options.context parameter.\n        options.callback({more: response.more, results: response.results});\n      });\n    };\n\n    this.setValue = function() {\n\n      var viewValue = self.ngModel.$viewValue;\n      var selected = null;\n      if(viewValue) {\n        selected = this.getSelected(viewValue);\n      }\n\n      // var apply = scope.$evalAsync || $timeout;\n      $timeout(function() {\n        $element\n          .select2('val',  (selected === null || selected === 'undefined') ? '' : selected); // null === '' for Select2\n      });\n    };\n\n    this.getMultiSelected = function(viewValue) {\n\n      var options = this.collection($scope);\n      var indices = [];\n\n      _.each(viewValue, function(savedObject) {\n        var index = _.findIndex(options, function(value) {\n          var temp = angular.copy(savedObject); // remove hashkeys for comparison\n          return _.matches(temp)(value);\n        });\n        indices.push(index);\n      });\n\n      if(indices.length > 0) {\n        viewValue = indices;\n      }\n\n      return viewValue;\n\n    };\n\n    this.setValues = function() {\n\n      var viewValue = self.ngModel.$viewValue;\n\n      if(!angular.isArray(viewValue)) {\n        viewValue = [];\n      }\n\n      if(!_.isEmpty(viewValue) && _.isObject(viewValue[0])) {\n        viewValue = this.getMultiSelected(viewValue);\n      }\n\n      $timeout(function() {\n        $element\n          .select2('val', viewValue);\n      });\n    };\n\n    this.ngOptions = function() {\n\n      this.match = $attrs.ngOptions.match(AV_UI.NG_OPTIONS);\n      if(!this.match) {\n        throw new Error('Invalid ngOptions for avDropdown');\n      }\n      // AV_UI.NG_OPTIONS regex will parse into arrays like below:\n      //\n      // 0: \"state.name for state in states\"\n      // 1: \"state.name\"\n      // 2: undefined\n      // 3: undefined\n      // 4: \"state\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"states\"\n      // 8: undefined\n      //\n      // 0: \"state.id as state.name for state in states\"\n      // 1: \"state.id\"\n      // 2: \"state.name\"\n      // 3: undefined\n      // 4: \"state\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"states\"\n      // 8: undefined\n      //\n      // 0: \"state.name for state in states track by state.id\"\n      // 1: \"state.name\"\n      // 2: undefined\n      // 3: undefined\n      // 4: \"state\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"states\"\n      // 8: \"state.id\"\n      //\n      // 0: \"person.fullName as (person.lastName + ', ' + person.firstName) for person in feeScheduleModel.persons\"\n      // 1: \"person.fullName\"\n      // 2: \"(person.lastName + ', ' + person.firstName)\"\n      // 3: undefined\n      // 4: \"person\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"feeScheduleModel.persons\"\n      // 8: undefined\n      //\n      this.displayFn = $parse(this.match[2] || this.match[1]); // this is the function to retrieve the text to show as\n      this.collection = $parse(this.match[7]);\n      this.valueName = this.match[4] || this.match[6];\n      this.valueFn = $parse(this.match[2] ? this.match[1] : this.valueName);\n      this.keyName = this.match[5];\n\n      $scope.$watchCollection(this.collection, function(newVal, oldVal) {\n        if(angular.equals(newVal, oldVal)) {\n          return;\n        }\n\n        self.setValue();\n\n      }, true);\n\n    };\n  });\n\n  availity.ui.directive('avDropdown', function($timeout, $log, $window) {\n\n    return {\n      restrict: 'A',\n      require: ['ngModel', 'avDropdown'],\n      controller: 'AvDropdownController',\n      link: function(scope, element, attrs, controllers) {\n        var ngModel = controllers[0];\n        var avDropdown = controllers[1];\n\n        avDropdown.setNgModel(ngModel);\n        avDropdown.init();\n\n        if(attrs.ngOptions) {\n          avDropdown.ngOptions();\n        }\n\n        ngModel.$parsers.push(function(value) {\n          var parent = element.prev();\n          parent\n            .toggleClass('ng-invalid', !ngModel.$valid)\n            .toggleClass('ng-valid', ngModel.$valid)\n            .toggleClass('ng-invalid-required', !ngModel.$valid)\n            .toggleClass('ng-valid-required', ngModel.$valid)\n            .toggleClass('ng-dirty', ngModel.$dirty)\n            .toggleClass('ng-pristine', ngModel.$pristine);\n          return value;\n        });\n\n        element.on('change', function(e) {\n\n          // special case since the ajax handling doesn't bind to the model correctly\n          // this has to do with select2 (v3.5.2) using a hidden field instead of a select for ajax\n          if(avDropdown.options.query) {\n            $timeout(function() {\n              ngModel.$setViewValue(e.added);\n            });\n          }\n\n          $log.info(e);\n\n        });\n\n        // fires ng-focus when select2-focus fires.\n        element.on('select2-focus', function() {\n          if(attrs.ngFocus) {\n            scope.$eval(scope.$eval(attrs.ngFocus));\n          }\n        });\n\n        // fires ng-blur when select2-blur occurs.\n        element.on('select2-blur', function() {\n          if(attrs.ngBlur) {\n            scope.$eval(scope.$eval(attrs.ngBlur));\n          }\n        });\n\n        // https://github.com/t0m/select2-bootstrap-css/issues/37#issuecomment-42714589\n        element.on('select2-open', function () {\n          // look for .has-success, .has-warning, .has-error\n          // (really look for .has-* … which is good enough for the demo page, but obviously might interfere with other CSS-classes starting with \"has-\")\n          if(element.parents('[class*=\"has-\"]').length) {\n\n            // get all CSS-classes from the element where we found \"has-*\" and collect them in an array\n            var classNames = $(this).parents('[class*=\"has-\"]')[0].className.split(/\\s+/);\n\n            // go through the class names, find \"has-\"\n            for(var i = 0; i < classNames.length; ++i) {\n              if(classNames[i].match('has-')) {\n                $('#select2-drop').addClass(classNames[i]);\n              }\n            }\n          }\n        });\n\n\n        var _$render = ngModel.$render;\n        ngModel.$render = function() {\n          _$render();\n\n          if(avDropdown.multiple) {\n            avDropdown.setValues();\n          }else {\n            avDropdown.setValue();\n          }\n\n        };\n\n        var win = angular.element($window);\n\n        win.bind('resize', function() {\n          element.select2('close');\n        });\n\n        attrs.$observe('disabled', function (value) {\n          element.select2('enable', !value);\n        });\n\n        attrs.$observe('readonly', function (value) {\n          element.select2('readonly', !!value);\n        });\n\n        scope.$on('destroy', function() {\n          element.select2('destroy');\n        });\n\n        $timeout(function() {\n          element.select2(avDropdown.options);\n        });\n      }\n    };\n  });\n\n})(window);\n","/**\n * Inspiration https://github.com/mgcrea/angular-strap/blob/v0.7.8/src/directives/datepicker.js\n */\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // Options: http://bootstrap-datepicker.readthedocs.org/en/latest/options.html\n  availity.ui.constant('AV_DATEPICKER', {\n    CONTROLLER: '$ngModelController',\n    ADD_ON_SELECTOR: '[data-toggle=\"datepicker\"]',\n    OPTIONS: [\n      'autoclose',\n      'beforeShowDay',\n      'beforeShowMonth',\n      'calendarWeeks',\n      'clearBtn',\n      'toggleActive',\n      'container',\n      'daysOfWeekDisabled',\n      'datesDisabled',\n      'defaultViewDate',\n      'endDate',\n      'forceParse',\n      'format',\n      'inputs',\n      'keyboardNavigation',\n      'language',\n      'minViewMode',\n      'multidate',\n      'multidateSeparator',\n      'orientation',\n      'startDate',\n      'startView',\n      'todayBtn',\n      'todayHighlight',\n      'weekStart',\n      'showOnFocus',\n      'disableTouchKeyboard',\n      'enableOnReadonly',\n      'modelFormat'\n    ],\n    DEFAULTS: {\n      FORMAT: 'mm/dd/yyyy',\n      CLOSE: true,\n      TODAY: true,\n      FORCEPARSE: false,\n      MODELFORMAT: 'YYYY-MM-DD'\n    }\n  });\n\n  availity.ui.controller('AvDatepickerController', function($element, $attrs, AV_DATEPICKER, $scope) {\n\n    var self = this;\n    this.options = {};\n\n    this.setValue = function() {\n\n      var viewValue = self.ngModel.$modelValue;\n      var plugin = this.plugin();\n\n      if(!viewValue || !plugin) {\n        return;\n      }\n\n      plugin.setDate(viewValue);\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.findModel = function() {\n\n      var ngModel = null;\n\n      var $input = $element.find('input:first').andSelf();\n      if($input.length) {\n        ngModel = $input.data(AV_DATEPICKER.CONTROLLER);\n        this.setNgModel(ngModel);\n      }\n\n      return ngModel;\n    };\n\n    this.modelToView = function() {\n      var viewValue = $.fn.datepicker.DPGlobal.formatDate(self.ngModel.$modelValue, self.options.format, 'en');\n      return viewValue;\n    };\n\n    this.wrapIsoDate = function() {\n      var date = self.ngModel.$modelValue;\n\n      if(date !== undefined && date !== null && !moment.isDate(date)) {\n        var m = moment(date);\n        self.ngModel.$modelValue = m.isValid() ? m.toDate() : null;\n      }\n\n      return self.ngModel.$modelValue;\n    };\n\n    this.viewToModel = function() {\n      var format = $.fn.datepicker.DPGlobal.parseFormat(self.options.format);\n      var utcDate = $.fn.datepicker.DPGlobal.parseDate(self.ngModel.$viewValue, format, 'en');\n\n      var plugin = self.plugin();\n\n      if(!plugin) {\n        return;\n      }\n\n      // jscs: disable\n      var localDate = plugin._utc_to_local(utcDate);\n      // jscs: enable\n\n      if(self.options.modelFormat && localDate) {\n        localDate = moment(localDate).format(self.options.modelFormat);\n      }\n\n      return localDate;\n    };\n\n    this.init = function() {\n\n      _.forEach($attrs, function(value, key) {\n        if(_.contains(AV_DATEPICKER.OPTIONS, key.replace('data-', ''))) {\n          self.options[key] = $scope.$eval(value);\n        }\n      });\n\n      // self.options = _.extend{}, optionsDefault, userOptions);\n\n      self.options.autoclose = self.options.autoclose ? self.options.autoclose : AV_DATEPICKER.DEFAULTS.CLOSE;\n      self.options.todayHighlight = self.options.todayHighlight ? self.options.todayHighlight : AV_DATEPICKER.DEFAULTS.TODAY;\n      self.options.format = self.options.format ? self.options.format : AV_DATEPICKER.DEFAULTS.FORMAT;\n      self.options.forceParse = self.options.forceParse ? self.options.forceParse : AV_DATEPICKER.DEFAULTS.FORCEPARSE;\n\n      if(self.options.modelFormat && self.options.modelFormat.toLowerCase() === 'default') {\n        self.options.modelFormat = AV_DATEPICKER.DEFAULTS.MODELFORMAT;\n      }\n    };\n\n    this.plugin = function() {\n      return $element.data('datepicker');\n    };\n\n    this.destroy = function() {\n      var plugin = this.plugin();\n      if(plugin) {\n        plugin.remove();\n        $element.data('datepicker', null);\n      }\n    };\n\n    this.hide = function() {\n      var plugin = this.plugin();\n      if(plugin) {\n        plugin.hide();\n      }\n    };\n  });\n\n  availity.ui.directive('avDatepicker', function($window, $log, AV_DATEPICKER) {\n    return {\n      restrict: 'A',\n      require: ['ngModel', 'avDatepicker'],\n      controller: 'AvDatepickerController',\n      link: function(scope, element, attrs, controllers) {\n\n        var ngModel = controllers[0];\n        var avDatepicker = controllers[1];\n\n        if(!ngModel) {\n          ngModel = avDatepicker.findModel();\n          if(!ngModel) {\n            $log.error('avDatepicker requires ngModel');\n            return;\n          }\n        }\n\n        avDatepicker.init();\n        avDatepicker.setNgModel(ngModel);\n\n        element.on('changeDate', function(e) {\n          $log.info('avDatepicker changeDate {0}', [e]);\n        });\n\n        // (view to model)\n        ngModel.$parsers.push(avDatepicker.viewToModel);\n\n        // (model to view) - added to end of formatters array\n        // because they are processed in reverse order.\n        // if the model is in Date format and send to the validation framework\n        // prior to getting converted to the expected $viewValue format,\n        // the validation will fail.\n        ngModel.$formatters.push(avDatepicker.modelToView);\n        ngModel.$formatters.push(avDatepicker.wrapIsoDate);\n\n        var _$render = ngModel.$render;\n        ngModel.$render = function() {\n          _$render();\n          avDatepicker.setValue();\n        };\n\n        var win = angular.element($window);\n\n        win.bind('scroll', function() {\n          avDatepicker.hide();\n        });\n\n        var target = element.siblings(AV_DATEPICKER.ADD_ON_SELECTOR);\n        if(target.length) {\n          target.on('click.datepicker', function() {\n            if(!element.prop('disabled')) { // Hack check for IE 8\n              element.focus();\n            }\n          });\n        }\n\n        scope.$on('destroy', function() {\n          avDatepicker.destroy();\n          if(target.length) {\n            target.off('click.datepicker');\n          }\n        });\n\n        scope.$evalAsync(function() {\n          element.datepicker(avDatepicker.options);\n        });\n      }\n    };\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_UI_IDLE', {\n    EVENTS: {\n      OK: 'mousedown.av.idle.notifier'\n    },\n    TEMPLATES: {\n      BASE: 'ui/idle/idle-tpl.html',\n      SESSION: 'ui/idle/idle-session-tpl.html',\n      WARNING: 'ui/idle/idle-warning-tpl.html'\n    }\n  });\n\n  availity.ui.provider('avIdleNotifier', function() {\n\n    var sessionTemplate;\n    var warningTemplate;\n    var $scope;\n\n    this.setSessionTemplate = function(template) {\n      sessionTemplate = template;\n    };\n\n    this.setWarningTemplate = function(template) {\n      warningTemplate = template;\n    };\n\n    this.$get = function(AV_IDLE, AV_UI_IDLE, $rootScope, AvModal, $document, $timeout) {\n\n      var AvIdleNotifier = function() {\n        this.listeners = [];\n        this.modal = null;\n      };\n\n      var proto = AvIdleNotifier.prototype;\n\n      proto.init = function() {\n\n        $scope = $rootScope.$new(true);\n        $scope.idle = {};\n\n        this.initListeners();\n      };\n\n      proto.initListeners = function() {\n\n        var self = this;\n        var listener = null;\n\n        // ACTIVE IDLING\n        listener = $rootScope.$on(AV_IDLE.EVENTS.IDLE_ACTIVE, function() {\n          self.showWarning();\n        });\n        this.listeners.push(listener);\n\n        // INACTIVE IDLING\n        listener = $rootScope.$on(AV_IDLE.EVENTS.IDLE_INACTIVE, function() {\n          self.hideWarning();\n        });\n        this.listeners.push(listener);\n\n        // SESSION TIMEOUT OUT\n        listener = $rootScope.$on(AV_IDLE.EVENTS.SESSION_TIMEOUT_ACTIVE, function() {\n          self.showSession();\n        });\n        this.listeners.push(listener);\n\n      };\n\n      proto.destroyListeners = function() {\n        // turn off each listener @see http://stackoverflow.com/a/14898795\n        _.each(this.listeners, function(listener) {\n          listener();\n        });\n      };\n\n      proto.showWarning = function() {\n\n        var self = this;\n\n        if(this.modal !== null) {\n          return;\n        }\n\n        $scope = $rootScope.$new(true);\n        $scope.idle = {};\n        $scope.idle.template = AV_UI_IDLE.TEMPLATES.WARNING;\n\n        this.modal = new AvModal({\n          show: true,\n          scope: $scope,\n          backdrop: 'static',\n          templateUrl: AV_UI_IDLE.TEMPLATES.BASE\n        });\n\n        $document.find('body').on(AV_UI_IDLE.EVENTS.OK, function() {\n          self.hideWarning();\n        });\n\n      };\n\n      proto.hideWarning = function() {\n        if(this.modal) {\n          this.disableBackDrop();\n          this.modal.hide();\n        }\n\n        this.modal = null;\n      };\n\n      proto.disableBackDrop = function() {\n        $document.find('body').off(AV_UI_IDLE.EVENTS.OK);\n      };\n\n      proto.showSession = function() {\n        var self = this;\n        this.disableBackDrop();\n\n        $timeout(function() {\n          $scope.idle.template = AV_UI_IDLE.TEMPLATES.SESSION;\n          $scope.idle.onSessionTimeout = _.bind(self.onSessionTimeout, self);\n        }, 0, true);\n\n      };\n\n      proto.onSessionTimeout = function() {\n        $rootScope.$broadcast(AV_IDLE.EVENTS.SESSION_TIMEOUT_REDIRECT);\n      };\n\n      return new AvIdleNotifier();\n\n    };\n\n  });\n\n  availity.ui.run(function(avIdleNotifier) {\n    avIdleNotifier.init();\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_MASK', {\n    NAME: 'inputmask',\n    DEFAULTS: {\n      date: '99/99/9999',\n      phone: '(999) 999-9999',\n      SSN:'999-99-9999'\n    }\n  });\n\n  availity.ui.directive('avMask', function($window, $log, AV_MASK) {\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function(scope, element, attrs) {\n\n        var maskType = AV_MASK.DEFAULTS[attrs['avMask']];\n        if(!maskType) {\n          maskType = attrs['avMask'];\n        }\n\n        scope.$evalAsync(function() {\n          element.inputmask(maskType);\n        });\n\n        scope.$on('$destroy', function () {\n          element.inputmask('remove');\n        });\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('AvHasPermissionController', function($element) {\n\n    this.onSuccess = function(isAuthorized) {\n      if(isAuthorized) {\n        $element.removeClass('ng-hide');\n        $element.show();\n      } else {\n        $element.remove();\n      }\n    };\n\n    this.onError = function() {\n      $element.remove();\n    };\n\n  });\n\n  availity.ui.directive('avHasPermission', function(avUserAuthorizations) {\n    return {\n      restrict: 'EA',\n      controller: 'AvHasPermissionController',\n      require: ['avHasPermission'],\n      link: function($scope, $element, $attr, controllers) {\n\n        var avHasPermission = controllers[0];\n\n        $element.hide();\n\n        $scope.$watch($attr.avHasPermission, function(permissions) {\n\n          if(!angular.isArray(permissions)) {\n            permissions = _.words('' + permissions);\n          }\n\n          avUserAuthorizations.isAnyAuthorized(permissions).then(avHasPermission.onSuccess, avHasPermission.onError);\n        });\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n\n  availity.core.controller('AvAnalyticsController', function(avAnalyticsUtils, $element, $attrs, avAnalytics) {\n\n    this.onEvent = function(event) {\n\n      // If an external link is detected\n      if(avAnalyticsUtils.isExternalLink($attrs)) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      // convert the directive attributes into object with properties with sane defaults\n      var properties = _.extend({\n        level: 'info'\n      }, avAnalyticsUtils.getProperties($attrs), {\n        event: event.type\n      });\n\n      var promise = avAnalytics.trackEvent(properties);\n      promise['finally'](function() {\n        if(avAnalyticsUtils.isExternalLink($attrs)) {\n          document.location = $element.attr('href');\n        }\n      });\n    };\n\n  });\n\n  availity.core.directive('avAnalyticsOn', function() {\n\n    return {\n      restrict: 'A',\n      controller: 'AvAnalyticsController',\n      required: 'avAnalyticsOn',\n      link: function($scope, $element, $attrs, avAnalyticsOn) {\n\n        var eventType = $attrs.avAnalyticsOn || 'click';\n\n        // bind the element to the `av-analytic-on` event like `click`\n        $element.on(eventType, function (event) {\n          avAnalyticsOn.onEvent(event);\n        });\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.requires.push('ng.shims.placeholder');\n\n  availity.ui.config(function($provide) {\n\n    $provide.decorator('placeholderDirective', ['$delegate', '$log', function($delegate, $log) {\n\n      var directive = $delegate[0];\n      var originalLink = directive.link;\n\n      var newLink = function(scope, element, attrs) {\n\n        if(originalLink && _.contains(_.keys(attrs), 'avMask')) {\n          $log.info('placeholder shim not running on an element due to avMask on same element');\n          return;\n        }else if(originalLink) {\n          originalLink.apply(this, arguments);\n        }\n        //else originalLink doesn't exist\n      };\n\n      directive.compile = function() {\n        return newLink;\n      };\n\n      return $delegate;\n    }]);\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BREADCRUMBS', {\n\n    TEMPLATE: 'ui/breadcrumbs/breadcrumbs-tpl.html'\n  });\n\n  function avBreadcrumbsController($state) {\n    /*jshint validthis:true */\n    var self = this;\n\n    function getBreadcrumb(breadcrumbs, state) {\n      if(!state || !state.data) {\n        return;\n      }\n\n      var breadcrumb = state.data.breadcrumb;\n      if(!breadcrumb) {\n        return;\n      }\n\n      if(breadcrumb.parent) {\n        var parentState = $state.get(breadcrumb.parent);\n\n        if(parentState) {\n          getBreadcrumb(breadcrumbs, parentState);\n        }\n      }\n      breadcrumb.state = state.name;\n      breadcrumbs.push(breadcrumb);\n    }\n\n    self.getBreadcrumbs = function() {\n      var breadcrumbs = [];\n      getBreadcrumb(breadcrumbs, $state.current);\n      return breadcrumbs;\n    };\n  }\n\n  avBreadcrumbsController.$inject = ['$state'];\n  availity.ui.controller('AvBreadcrumbsController', avBreadcrumbsController);\n\n  function avBreadcrumbs(AV_BREADCRUMBS) {\n    return {\n      restrict: 'EA',\n      templateUrl: AV_BREADCRUMBS.TEMPLATE,\n      controller: 'AvBreadcrumbsController',\n      link: function(scope, element, attrs, AvBreadcrumbsController) {\n        scope.breadcrumbs = AvBreadcrumbsController.getBreadcrumbs();\n\n        scope.$on('$stateChangeSuccess', function() {\n          scope.breadcrumbs = AvBreadcrumbsController.getBreadcrumbs();\n        });\n      }\n    };\n  }\n\n  avBreadcrumbs.$inject = ['AV_BREADCRUMBS'];\n  availity.ui.directive('avBreadcrumbs', avBreadcrumbs);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.filter('avApproximate', function() {\n    var pow = Math.pow;\n    var floor = Math.floor;\n    var abs = Math.abs;\n    var log = Math.log;\n\n    function round(number, precision) {\n      var prec = pow(10, precision);\n      return Math.round(number * prec) / prec;\n    }\n\n    return function (number, precision) {\n      precision = precision || 0;\n      var base = floor(log(abs(number)) / log(1000));\n      var unit = 'kMGTPE'[base - 1];\n      return unit ? round(number / pow(1000, base), precision) + unit : (number || 0);\n    };\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BADGE', {\n    COLOR: null,\n    DEFAULT_CLASS: 'badge',\n    SHOW_WHEN_ZERO: false,\n    TEMPLATE: 'ui/badge/badge-tpl.html'\n  });\n\n  function badgeDirective(AV_BADGE) {\n\n    return {\n      scope: {\n        color: '@',\n        count: '=avBadge',\n        showWhenZero: '@'\n      },\n      templateUrl: AV_BADGE.TEMPLATE,\n      link: function(scope, element) {\n        scope.color = scope.color || AV_BADGE.COLOR;\n        scope.showWhenZero = scope.showWhenZero || AV_BADGE.SHOW_WHEN_ZERO;\n\n        var classes = [];\n        classes.push(AV_BADGE.DEFAULT_CLASS);\n        if(scope.color) {\n          classes.push(scope.color);\n        }\n\n        element.addClass(classes.join(' '));\n      }\n    };\n  }\n\n  badgeDirective.$inject = ['AV_BADGE'];\n  availity.ui.directive('avBadge', badgeDirective);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_REMOVABLE_LABEL', {\n    TEMPLATE: 'ui/labels/removable-label-tpl.html'\n  });\n\n  availity.ui.directive('avRemovableLabel', function(AV_REMOVABLE_LABEL) {\n    return {\n      templateUrl: AV_REMOVABLE_LABEL.TEMPLATE,\n      transclude: true,\n      scope: {\n        removeValue: '=',\n        onRemove: '&'\n      },\n      link: function(scope, element, attrs) {\n        element.addClass('label-remove');\n        scope.removeLabel = function() {\n          if(!attrs.disabled) {\n            scope.onRemove()(scope.removeValue);\n          }\n        };\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_LOADER', {\n\n    TEMPLATES: {\n      LOADER: 'ui/animation/loader-tpl.html'\n    }\n\n  });\n\n  availity.ui.controller('AvLoaderController', function($element) {\n\n    var self = this;\n    var active;\n\n    this.start = function() {\n      active = true;\n      this.animate();\n    };\n\n    this.animate = function() {\n\n      $element\n        .find('.loading-bullet')\n        .velocity('transition.slideRightIn', { stagger: 250 })\n        .velocity({ opacity: 0 }, {\n          delay: 750,\n          duration: 500,\n          complete: function() {\n            if(active) {\n              setTimeout(function() {self.animate();}, 500);\n            } else {\n              self.endAnimation();\n            }\n          }\n        });\n\n    };\n\n    this.endAnimation = function() {\n      $element.find('.loading-bullet').velocity('stop', true);\n      $element.removeData();\n    };\n\n    this.stop = function() {\n      active = false;\n    };\n\n  });\n\n  availity.ui.directive('avLoader', function(AV_LOADER) {\n    return {\n      restrict: 'A',\n      replace: true,\n      controller: 'AvLoaderController',\n      require: 'avLoader',\n      templateUrl: AV_LOADER.TEMPLATES.LOADER,\n      link: function(scope, element, attr, avLoader) {\n\n        if(!attr.delay) {\n          avLoader.start();\n        }\n\n        scope.$on('$destroy', function() {\n          avLoader.stop();\n        });\n\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var blockTemplate =\n    '<div ng-show=\"state.blockCount > 0\" class=\"block-ui-overlay\" ng-class=\"{ \\'block-ui-visible\\': state.blocking }\"></div>' +\n    '<div ng-show=\"state.blocking\" class=\"block-ui-message-container\">' +\n    '  <div class=\"av-block-ui-message\">' +\n    '    <div data-av-loader data-delay=\"true\" class=\"loading-indicator\"></div>' +\n    '  </div>' +\n    '</div>';\n\n  availity.ui.constant('AV_BLOCK', {\n    TEMPLATES: {\n      BLOCK: 'ui/modal/modal-tpl.html'\n    }\n  });\n\n  var getLoaderController = function(blockId) {\n    var el = $('[data-block-ui=\"' + blockId + '\"]') || $('[block-ui=\"' + blockId + '\"]');\n    if(el) {\n      return el.find('[data-av-loader]').controller('avLoader');\n    }\n  };\n\n  var triggerLoaderController = function(id, instance, fn) {\n    var controller = instance.loaderController;\n    if(!controller) {\n      controller = getLoaderController(id);\n      instance.loaderController = controller;\n    }\n    if(controller && _.isFunction(controller[fn])) {\n      controller[fn]();\n    }\n  };\n\n  var triggerInstance = function(id, instance, origFn, loaderFn) {\n    triggerLoaderController(id, instance, loaderFn);\n    origFn.apply(instance);\n  };\n\n  var modifyBlockInstances = function(id, instance) {\n    var origStartFn = instance.start;\n    var origStopFn = instance.stop;\n    instance.start = function() {\n      triggerInstance(id, instance, origStartFn, 'start');\n    };\n    instance.stop = function() {\n      triggerInstance(id, instance, origStopFn, 'stop');\n    };\n    instance.avModifications = true;\n  };\n\n  availity.ui.run(function($injector, $log) {\n    try {\n\n      var blockUIConfig = $injector.get('blockUIConfig');\n      var blockUI = $injector.get('blockUI');\n      blockUIConfig.autoBlock = false;\n      blockUIConfig.delay = 0;\n      blockUIConfig.template = blockTemplate;\n\n      var origGetFn = blockUI.instances.get;\n      blockUI.instances.get = function(id) {\n        var instance = origGetFn(id);\n        if(!instance.avModifications) {\n          modifyBlockInstances(id, instance);\n        }\n        return instance;\n      };\n\n    } catch(e) {\n      $log.warn('blockUI is required to use av block.');\n    }\n  });\n\n})(window);\n","/**\n * availity-angular v0.16.0 -- September-09\n * Copyright 2015 Availity, LLC \n */\n\n// Source: /lib/ui/index.js\n\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity || {};\n\n  availity.MODULE_UI = 'availity.ui';\n  availity.ui = angular.module(availity.MODULE_UI, ['ng', 'ngSanitize']);\n\n  availity.ui.constant('AV_UI', {\n    // jscs: disable\n    NG_OPTIONS: /^\\s*([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?(?:\\s+group\\s+by\\s+([\\s\\S]+?))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+([\\s\\S]+?)(?:\\s+track\\s+by\\s+([\\s\\S]+?))?$/\n    // jscs: enable\n  });\n\n  if(typeof module !== 'undefined' && module.exports) {\n    module.exports = availity;\n  }\n\n\n})(window);\n\n// Source: /lib/ui/templates/template.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.factory('avTemplateCache', function($q, $templateCache, $http) {\n\n    return {\n\n      get: function(options) {\n\n        var valid = !options.template || !options.templateUrl;\n\n        if(!valid) {\n          throw new Error('Either options.template or options.templateUrl must be defined for avTemplateCache');\n        }\n\n        return options.template ? $q.when(options.template) :\n          $http.get(options.templateUrl, {cache: $templateCache})\n            .then(function(result) {\n              return result.data;\n            });\n      }\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/modal/modal.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_MODAL', {\n\n    OPTIONS: {\n      scope: null,\n      templateUrl: null,\n      template: null,\n      id: null,\n      container: null,\n\n      // Bootstrap defaults\n      keyboard: true,\n      backdrop: true,\n      show: false,\n      remote: false\n    },\n\n    EVENTS: {\n      SHOW: 'show.av.modal',\n      SHOWN: 'shown.av.modal',\n      HIDE: 'hide.av.modal',\n      HIDDEN: 'hidden.av.modal'\n    },\n\n    BS_EVENTS:  {\n      SHOW: 'show.bs.modal',\n      SHOWN: 'shown.bs.modal',\n      HIDE: 'hide.bs.modal',\n      HIDDEN: 'hidden.bs.modal'\n    },\n\n    TEMPLATES: {\n      MODAL: 'ui/modal/modal-tpl.html'\n    }\n  });\n\n  var ModalFactory = function($rootScope, $timeout, $compile, AV_MODAL, avTemplateCache, $q) {\n\n    var Modal = function(options) {\n\n      var self = this;\n\n      this.options = angular.extend({}, AV_MODAL.OPTIONS, {scope: $rootScope.$new()}, options);\n\n      avTemplateCache.get(options).then(function(template) {\n        self.options.template = template;\n        self.create();\n      });\n\n    };\n\n    var proto = Modal.prototype;\n\n    proto.create = function() {\n\n      var self = this;\n\n      var scope = this.options.scope;\n      this.$element = angular.element(this.options.template);\n\n      this.createId();\n      this.scope();\n\n      $compile(this.$element)(scope);\n      $timeout(function() {\n        self.init();\n      }, 0, true);\n\n      // Append to container or <body>\n      this.options.container ? this.$element.appendTo(this.options.container) : this.$element.appendTo('body');\n\n    };\n\n    proto.scope = function() {\n\n      var self = this;\n      var scope = this.options.scope;\n\n      scope.modalShow = function() {\n        self.show();\n      };\n\n      scope.modalToggle = function() {\n        self.toggle();\n      };\n\n      scope.modalHide = function() {\n        self.hide();\n      };\n\n    };\n\n    proto.init = function() {\n\n      // Initialize Bootstrap jQuery plugin\n      this.$element.modal({\n        'backdrop': this.options.backdrop,\n        'keyboard': this.options.keyboard,\n        'show': this.options.show,\n        'remote': this.options.remote\n      });\n\n      this.listeners();\n    };\n\n    proto.listeners = function() {\n\n      var self = this;\n      var scope = this.options.scope;\n      var $element = this.$element;\n\n      $element.on(AV_MODAL.BS_EVENTS.SHOW, function(event) {\n        scope.$emit(AV_MODAL.EVENTS.SHOW, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.SHOWN, function(event) {\n\n        if(angular.isFunction(self.options.onShown)) {\n          self.options.onShown();\n        }\n\n        scope.$emit(AV_MODAL.EVENTS.SHOWN, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.HIDE, function(event) {\n        scope.$emit(AV_MODAL.EVENTS.HIDE, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.HIDDEN, function(event) {\n\n        if(angular.isFunction(self.options.onHidden)) {\n          self.options.onHidden.call(this);\n        }\n\n        scope.$emit(AV_MODAL.EVENTS.HIDDEN, event, self);\n\n        $timeout(function() {\n          self.destroy();\n        }, 0, true);\n\n      });\n\n      // Garbage collection\n      scope.$on('$destroy', function() {\n        self.destroy();\n      });\n    };\n\n    proto.show = function() {\n      this.$element.modal('show');\n    };\n\n    proto.hide = function() {\n      var deferred = $q.defer();\n\n      this.$element.modal('hide');\n      this.$element.one('hidden.bs.modal', function() {\n        deferred.resolve(true);\n      });\n\n      return deferred.promise;\n    };\n\n    proto.toggle = function() {\n      this.$element.data('modal').toggle();\n    };\n\n    proto.destroy =function() {\n      this.$element.remove();\n    };\n\n    proto.createId = function() {\n      // Create a unique id for the modal if not present or passed in via options\n      var id = this.$element.attr('id');\n      if(!id) {\n        // Get id from options or create a unique id\n        id = this.options.id ? this.options.id : availity.uuid('av-modal-id');\n        this.$element.attr('id', id);\n      }\n    };\n\n    return Modal;\n  };\n\n\n  availity.ui.factory('AvModal', ModalFactory);\n\n  availity.ui.directive('avModal', function(AV_MODAL) {\n    return {\n      restrict: 'A',\n      replace: true,\n      transclude: true,\n      scope: {},\n      templateUrl: AV_MODAL.TEMPLATES.MODAL\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/validation/form.js\n/**\n * 1. All fields should be pristine on first load\n * 2. If field is modified an invalid the field should be marked with an error\n *\n */\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('avValFormController', function() {\n\n    this.ngForm  = null;\n    this.rulesKey = null;\n    this.avValOn = null;\n    this.avValDebounce = null;\n    this.avValInvalid = false;\n\n    // Object that stores the unique id (key) and violation count (value) of all the form fields\n    //\n    // EX:\n    //\n    // {\n    //  avVal001: 0\n    //  avVal002: 2\n    //  avVal003: 1\n    // }\n    this.violations = {};\n\n    this.init = function(form) {\n      this.ngForm = form;\n    };\n\n    /**\n     * Records id of the form field and number of violations\n     * @param  {[type]} id    [description]\n     * @param  {[type]} count [description]\n     * @return {[type]}       [description]\n     */\n    this.record = function(id, count) {\n      this.violations[id] = count;\n\n      var violocationCount = _.reduce(this.violations, function(sum, num) {\n        return sum + num;\n      }, 0);\n\n      this.ngForm.$setValidity('av', violocationCount === 0);\n    };\n\n    this.unrecord = function(id) {\n      if(id && this.violations[id]) {\n        delete this.violations[id];\n      }\n    };\n\n    this.reset = function() {\n      this.ngForm.$setPristine();\n      this.ngForm.$submitted = false;\n    };\n\n    this.$setSubmitted = function() {\n      this.ngForm.$submitted = true;\n    };\n\n    this.setRulesKey = function(key) {\n      this.rulesKey = key;\n    };\n\n  });\n\n  // form.$error = {};\n  // form.$$success = {};\n  // form.$pending = undefined;\n  // form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);\n  // form.$dirty = false;\n  // form.$pristine = true;\n  // form.$valid = true;\n  // form.$invalid = false;\n  // form.$submitted = false;\n\n  availity.ui.directive('avValForm', function($log, $timeout, $parse, AV_VAL, avValAdapter, $rootScope) {\n    return {\n      restrict: 'A',\n      priority: 10,\n      require: ['form', 'avValForm', '?ngSubmit'],\n      controller: 'avValFormController',\n      compile: function() {\n        return {\n          pre: function(scope, iEl, iAttrs, controllers) {\n\n            var ruleFn = $parse(iAttrs.avValForm);\n            var rulesKey = ruleFn(scope);\n            rulesKey = rulesKey || iAttrs.avValForm; // interpolated rule from scope || fixed string\n\n            if(!rulesKey) {\n              $log.error('avValForm requires a rules key in order to run the proper validation rules.');\n              return;\n            }\n\n            scope.$watch(ruleFn, function(_rulesKey, _oldRulesKey) {\n              if(_rulesKey) {\n                avForm.setRulesKey(_rulesKey);\n\n                if(_rulesKey !== _oldRulesKey) {\n                  $timeout(function() {\n                    $log.info('avValForm revalidate');\n                    $rootScope.$broadcast(AV_VAL.EVENTS.REVALIDATE);\n                  });\n                }\n\n              }\n\n            });\n\n            var ngForm = controllers[0];\n            var avForm = controllers[1];\n\n            // Allow form attributes to define the validation behavior of the form fields\n            // inside it.  If `av-val-on` or `av-val-debounce` are on the form then all form\n            // fields inside the form would inherit this behavior.\n            avForm.avValOn = iAttrs.avValOn || null;\n            avForm.avValDebounce = iAttrs.avValDebounce || null;\n            // Allows fields to update with invalid data for dirty form saving\n            avForm.avValInvalid = iAttrs.avValInvalid || false;\n\n            avForm.init(ngForm);\n            avForm.setRulesKey(rulesKey);\n\n          },\n          post: function(scope, iEl, iAttrs, controllers) {\n\n            iEl.attr('novalidate', 'novalidate');  // prevent HTML5 validation from kicking in\n\n            // Disable ng-submit or ng-click handlers and store the function to call for submitting\n            var fn;\n            if(iAttrs.ngSubmit) {\n              // Disable ng-submit event\n              iEl.off('submit');\n              fn = $parse(iAttrs.ngSubmit, /* expensiveChecks */ true);\n            }else if(iAttrs.ngClick) {\n              // Disable ng-click event\n              iEl.off('click');\n              fn = $parse(iAttrs.ngClick, /* expensiveChecks */ true);\n            }\n\n            var ngForm = controllers[0];\n            var avForm = controllers[1];\n\n            scope.$on(AV_VAL.EVENTS.RESET, function () {\n              avForm.reset();\n            });\n\n            iEl.bind('submit', function(event) {\n\n              scope.$broadcast(AV_VAL.EVENTS.SUBMITTED);\n              avForm.$setSubmitted();\n\n              if(ngForm.$invalid) {\n\n                scope.$broadcast(AV_VAL.EVENTS.FAILED);\n\n                $log.info('avValForm invalid.  preventing default submit action');\n\n                event.preventDefault();\n                event.stopImmediatePropagation();\n                scope.$broadcast(event);\n\n                avValAdapter.scroll(iEl);\n                return;\n              }\n\n              ngForm.$setPristine();\n\n              if(!fn) {\n                return;\n              }\n\n              var callback = function() {\n                fn(scope, {$event:event});\n              };\n\n              scope.$apply(callback);\n\n            });\n\n          }\n        };\n      }\n    };\n  });\n\n\n})(window);\n\n// Source: /lib/ui/validation/field.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('AvValFieldController', function($element, avValAdapter, avVal, $log, $timeout, $scope, $sniffer) {\n\n    this.ngModel = null;\n    this.rule = null;\n    this.avValForm = null;\n    this.avValInvalid = false;\n\n    var self = this;\n\n    var placeholder = $element[0].placeholder;\n    var noEvent = {};\n\n    this.createId = function() {\n      this.ngModel.avId = availity.uuid('avVal');\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.setRule = function(rule) {\n      this.rule = rule;\n    };\n\n    this.avValForm = function(avValForm) {\n      this.avValForm = avValForm;\n    };\n\n    this.updateModel = function(results) {\n\n      var self = this;\n      var validationKeys = [];\n\n      this.ngModel.avResults = results;\n\n      // set state for each violation\n      angular.forEach(results.violations, function (result) {\n        var key = 'av-' + result.contraintName;\n        validationKeys.push(key);\n        self.ngModel.$setValidity(key, result.valid);\n      });\n\n      // set overall state for validation state\n      this.ngModel.$setValidity('av', this.ngModel.avResults.isValid);\n\n      // store violations\n      this.ngModel.avViolations = this.ngModel.avResults.violations;\n\n      // record the id and violation count in the av-form controller.  this determines if the form is\n      // valid if sum of violations for all form inputs === zero\n      this.avValForm.record(this.ngModel.avId, this.ngModel.avResults.violations.length);\n\n      // remove violation keys that are no longer falsy\n      angular.forEach(this.ngModel.$error, function(value, key) {\n\n        if(_.indexOf(validationKeys, key) === -1 && key.lastIndexOf('av-', 0) === 0) {\n          self.ngModel.$setValidity(key, true);\n        }\n      });\n    };\n\n    this.updateView = function() {\n      if(this.ngModel.$dirty) {\n        avValAdapter.element($element, this.ngModel, this.ngModel.avResults.isValid);\n        avValAdapter.message($element, this.ngModel);\n      }\n    };\n\n    this.validate = function(value) {\n\n      $log.info('validating value [' + value + ']');\n\n      var rulesKey = self.avValForm.rulesKey;\n      var results = avVal.validate(rulesKey, $element, value, self.rule);\n\n      // validate function is called within the context of angular so fn.call\n      self.updateModel.call(self, results);\n      self.updateView.call(self);\n\n      return results;\n    };\n\n    this.validateModel = function(value) {\n\n      self.validate(value, true);\n      return value;\n\n    };\n\n    this.validateView = function(value) {\n\n      var results = self.validate(value);\n\n      if(self.avValForm.avValInvalid || self.avValInvalid) {\n        // allows invalid data from view to update model for dirty saving\n        return value;\n      }\n\n      // prevent invalid data from view to update model\n      return results.isValid ? value : undefined;\n\n    };\n\n    this.reset = function() {\n\n      avValAdapter.message($element, this.ngModel);\n      avValAdapter.reset($element);\n\n      var violations = this.ngModel.avResults.violations;\n      violations.splice(0, violations.length);\n\n    };\n\n    this.event = function(event, avValDebounce) {\n\n      var self = this;\n\n      $element.unbind('input');\n\n      var debounce;\n\n\n      $element.on(event, function() {\n\n        // https://github.com/angular/angular.js/blob/v1.2.27/src/ng/directive/input.js#L508\n        if($sniffer.msie <= 11 && (event || noEvent).type === 'input' && $element[0].placeholder !== placeholder) {\n          placeholder = $element[0].placeholder;\n          return;\n        }\n\n        $timeout.cancel(debounce);\n        debounce = $timeout( function() {\n          $scope.$apply(function() {\n            self.ngModel.$setViewValue($element.val());\n          });\n        }, avValDebounce);\n      });\n\n\n    };\n\n  });\n\n  // Events:\n  //\n  //  click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown\n  //  keyup keypress submit focus blur copy cut paste\n  availity.ui.directive('avValField', function($log, $timeout, avVal, avValAdapter, AV_VAL) {\n    return {\n      restrict: 'A',\n      controller: 'AvValFieldController',\n      require: ['^avValForm', '?ngModel', 'avValField'],\n      scope: {\n        avValDebounce: '@?',\n        avValOn: '@?'\n      },\n      link: function(scope, element, attrs, controllers) {\n\n        var rule = attrs.avValField; // not always string?\n        var avValForm = controllers[0];\n        var ngModel = controllers[1];\n        var avValField = controllers[2];\n\n        var avValOn = scope.avValOn || avValForm.avValOn || 'input';\n\n        if(!ngModel && !rule) {\n          $log.error('avValField requires ngModel and a validation rule to run.');\n          return;\n        }\n\n        // Allows fields to update with invalid data for dirty form saving\n        avValField.avValInvalid = attrs.avValInvalid || false;\n\n        avValField.setNgModel(ngModel);\n        avValField.avValForm(avValForm);\n        avValField.setRule(rule);\n        avValField.createId();\n\n        var avValDebounce = parseInt(scope.avValDebounce || (avValForm.avValDebounce || AV_VAL.DEBOUNCE), 10);\n        avValDebounce = _.isNumber(avValDebounce) ? avValDebounce : AV_VAL.DEBOUNCE;\n\n        var debounceAllowed = (element.is('input') &&\n          !(attrs.type === 'radio' || attrs.type === 'checkbox') &&\n          avValOn !== 'blur');\n\n        if(!debounceAllowed) {\n          avValDebounce = 0;\n        }\n\n        avValField.event(avValOn, avValDebounce);\n\n        // (view to model)\n        ngModel.$parsers.push(avValField.validateView);\n\n        // (model to view) - added to beginning of array because formatters\n        // are processed in reverse order thus allowing the model to be transformed\n        // before the validation framework check for validity.\n        ngModel.$formatters.unshift(avValField.validateModel);\n\n        scope.$on(AV_VAL.EVENTS.REVALIDATE, function() {\n          avValField.validate(ngModel.$viewValue);\n        });\n\n        scope.$on(AV_VAL.EVENTS.SUBMITTED, function() {\n          ngModel.$dirty = true;\n          avValField.validate(ngModel.$viewValue);\n        });\n\n        // Removes all errors on page, does not reset view or model values, this is to be handled by the app\n        scope.$on(AV_VAL.EVENTS.RESET, function () {\n          avValField.reset();\n        });\n\n        scope.$on('$destroy', function () {\n          avValForm.unrecord(ngModel.avId);\n        });\n\n      }\n    };\n  });\n\n\n})(window);\n\n// Source: /lib/ui/popover/popover.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_POPOVER', {\n    NAME: 'bs.popover'\n  });\n\n  availity.ui.controller('AvPopoverController', function($element, $scope, AV_POPOVER) {\n\n    this.listeners = function() {\n\n      var self = this;\n\n      angular.forEach(['show', 'shown', 'hide', 'hidden'], function(name) {\n        $element.on(name + '.bs.popover', function(ev) {\n          $scope.$emit('av:popover:' + name, ev);\n        });\n      });\n\n      $scope.$on('destroy', function() {\n        self.destroy();\n      });\n    };\n\n    this.plugin = function() {\n      return $element.data(AV_POPOVER.NAME);\n    };\n\n    this.show = function() {\n      $element.popover('show');\n    };\n\n    this.hide = function() {\n      $element.popover('hide');\n    };\n\n    this.toggle = function() {\n      $element.popover('toggle');\n    };\n\n    this.destroy = function() {\n      $element.popover('destroy');\n    };\n  });\n\n  availity.ui.directive('avPopover', function() {\n    return {\n      restrict: 'A',\n      controller: 'AvPopoverController',\n      link: function(scope, element) {\n\n        var options = {};\n\n        scope.$evalAsync(function() {\n          element.popover(angular.extend({}, options, {\n            html: true\n          }));\n        });\n      }\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/validation/messages.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('avValContainerController', function($scope, $timeout) {\n\n    this.message = function(ngModel) {\n\n      var message = null;\n      if(ngModel.avResults.violations.length && ngModel.avResults.violations[0].message) {\n        message = ngModel.avResults.violations[0].message;\n      }else {\n        message = null;\n      }\n\n      // $timeout is needed to update the UI from $broadcast events\n      $timeout(function() {\n        $scope.messages.message = message;\n      });\n\n    };\n\n  });\n\n  availity.ui.directive('avValContainer', function() {\n    return {\n      restrict: 'A',\n      controller: 'avValContainerController',\n      template: '<p class=\"help-block\" data-ng-bind-html=\"messages.message\"></p>',\n      replace: true,\n      scope: {\n\n      },\n      link: function(scope) {\n        scope.messages = _.extend({}, scope.messages, { message: null, id: null });\n      }\n    };\n  });\n\n\n})(window);\n\n// Source: /lib/ui/validation/adapter-bootstrap.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BOOTSTRAP_ADAPTER', {\n    CLASSES: {\n      SUCCESS: 'has-success',\n      WARNING: 'has-warning',\n      ERROR: 'has-error',\n      FEEDBACK: 'has-feedback',\n      HELP: 'help-block',\n      FORM_GROUP: '.form-group:first',\n      NAVBAR: 'navbar-fixed-top'\n    },\n    SELECTORS: {\n      CONTAINER: 'container-id',\n      DATA_CONTAINER: 'data-container-id'\n    },\n    CONTROLLER: '$avValContainerController'\n  });\n\n  availity.ui.factory('avValBootstrapAdapter', function(AV_BOOTSTRAP_ADAPTER, $timeout, $log) {\n\n    return {\n\n      element: function(element, ngModel) {\n        if(ngModel.$valid) {\n          element.parents(AV_BOOTSTRAP_ADAPTER.CLASSES.FORM_GROUP).removeClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n        }else {\n          element.parents(AV_BOOTSTRAP_ADAPTER.CLASSES.FORM_GROUP).addClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n        }\n      },\n\n      reset: function(element) {\n        element.parents(AV_BOOTSTRAP_ADAPTER.CLASSES.FORM_GROUP).removeClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n      },\n\n      message: function(element, ngModel) {\n\n        var selector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.HELP\n        ].join('');\n\n        var $el = $(element);\n\n        var target = $el.attr(AV_BOOTSTRAP_ADAPTER.SELECTORS.CONTAINER);\n        target = target || $el.attr(AV_BOOTSTRAP_ADAPTER.SELECTORS.DATA_CONTAINER);\n        // default to siblings\n        target = target ? $('#' + target) : $el.siblings(selector);\n\n        if(target.length === 0) {\n          $log.warn('avValBootstrapAdapter could not find validation container for {0}', [element]);\n          return;\n        }\n\n        var el = target[0];\n        $el = angular.element(el);\n        var avValModel = $el.data(AV_BOOTSTRAP_ADAPTER.CONTROLLER); // get the av val message controller\n        if(avValModel) {\n          avValModel.message(ngModel);\n        }\n      },\n\n      scroll: function(form) {\n\n        // Bootstrap fixed navbars causes bad scroll-to offsets so find them all\n        var navbarSelector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.NAVBAR\n        ].join('');\n\n        // Add up all the heights to find the true offset\n        var offset = 0;\n        $(navbarSelector).each(function() {\n          offset += $(this).outerHeight();\n        });\n\n        var selector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR,\n          ':first'\n        ].join('');\n\n        var $target = $(form).find(selector);\n        $timeout(function() {\n          // scroll to offset top of first error minus the offset of the navbars\n          $('body, html').animate({scrollTop: $target.offset().top - offset}, 'fast');\n        }, 0, false);\n      }\n    };\n  });\n\n\n})(window);\n\n// Source: /lib/ui/validation/adapter.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_VAL_ADAPTER', {\n    DEFAULT: 'avValBootstrapAdapter'\n  });\n\n  availity.ui.provider('avValAdapter', function() {\n\n    var that = this;\n\n    this.setAdapter = function(adapter) {\n      this.adapter = adapter;\n    };\n\n    this.$get = function(AV_VAL_ADAPTER, $injector) {\n\n      var Adapter = function() {\n        var adapterName = that.adapter || AV_VAL_ADAPTER.DEFAULT;\n        this.adapter = $injector.get(adapterName);\n      };\n\n      var proto = Adapter.prototype;\n\n      proto.element = function(element, ngModel) {\n        this.adapter.element(element, ngModel);\n      };\n\n      proto.reset = function(element) {\n        this.adapter.reset(element);\n      };\n\n      proto.message = function(element, ngModel) {\n        this.adapter.message(element, ngModel);\n      },\n\n      proto.scroll = function(form) {\n        this.adapter.scroll(form);\n      };\n\n      return new Adapter();\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/dropdown/dropdown.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_DROPDOWN', {\n    OPTIONS: [\n      'width',\n      'minimumInputLength',\n      'maximumInputLength',\n      'minimumResultsForSearch',\n      'maximumSelectionSize',\n      'placeholderOption',\n      'separator',\n      'allowClear',\n      'multiple',\n      'closeOnSelect',\n      'openOnEnter',\n      'id',\n      'matcher',\n      'sortResults',\n      'formatSelection',\n      'formatResult',\n      'formatResultCssClass',\n      'formatNoMatches',\n      'formatSearching',\n      'formatAjaxError',\n      'formatInputTooShort',\n      'formatInputTooLong',\n      'formatSelectionTooBig',\n      'formatLoadMore',\n      'createSearchChoice',\n      'createSearchChoicePosition',\n      'initSelection',\n      'tokenizer',\n      'tokenSeparators',\n      'query',\n      'ajax',\n      'data',\n      'tags',\n      'containerCss',\n      'containerCssClass',\n      'dropdownCss',\n      'dropdownCssClass',\n      'dropdownAutoWidth',\n      'adaptContainerCssClass',\n      'adaptDropdownCssClass',\n      'escapeMarkup',\n      'selectOnBlur',\n      'loadMorePadding',\n      'nextSearchTerm'\n    ]\n  });\n\n\n  availity.ui.controller('AvDropdownController', function($element, $attrs, AV_UI, AV_DROPDOWN, $log, $scope, $timeout, $parse) {\n\n    var self = this;\n    this.options = [];\n    this.match = null;\n    this.ngModel = null;\n\n    this.init = function() {\n\n      _.forEach($attrs, function(value, key) {\n        if(_.contains(AV_DROPDOWN.OPTIONS, key.replace('data-', ''))) {\n          self.options[key] = $scope.$eval(value);\n        }\n      });\n\n      self.multiple = angular.isDefined($attrs.multiple);\n\n      self.options.closeOnResize = self.options.closeOnResize  || true;\n\n      if(self.options.query) {\n\n        self.queryFn = self.options.query;\n        // Function used to query results for the search term.\n        self.options.query = self.query;\n        // Function used to get the id from the choice object or a string representing the key under which the id is stored.\n        self.options.id = self.getId;\n      }\n\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.getSelected = function(model) {\n\n      if(self.options.query) {\n        return 0;\n      }\n      var items = this.collection($scope);\n\n      var index = _.findIndex(items, function(item) {\n        return angular.equals(item, model);\n      });\n\n      return index;\n\n    };\n\n    // Result:\n    //\n    // {\n    //   \"code\": \"252Y00000X\",\n    //   \"value\": \"AGENCIES,EARLY INTERVENTION PROVIDER AGENCY,NOT APPLICABLE|Agency\",\n    //   \"id\": \"252Y00000X\"\n    // }\n    this.getId = function(result) {\n      return result.id;\n    };\n\n    // Wrapper around the query function for Select2.  When the promise resolves\n    // the callback\n    this.query = function(options) {\n\n      self.queryFn(options).then(function(response) {\n\n        // Callback function that should be called with the result object. The result object:\n        //\n        // result.results (object) - Array of result objects. The default renderers\n        //    expect objects with id and text keys. The id property is required,\n        //    even if custom renderers are used. The object may also contain a children\n        //    key if hierarchical data is displayed. The object may also contain a disabled\n        //    boolean property indicating whether this result can be selected.\n        //\n        // result.more (boolean) - true if more results are available for the current\n        //    search term.\n        //\n        // results.context (object) - A user-defined object that should be made available\n        //    as the context parameter to the query function on subsequent queries to load\n        //    more result pages for the same search term. See the description of\n        //    options.context parameter.\n        options.callback({more: response.more, results: response.results});\n      });\n    };\n\n    this.setValue = function() {\n\n      var viewValue = self.ngModel.$viewValue;\n      var selected = null;\n      if(viewValue) {\n        selected = this.getSelected(viewValue);\n      }\n\n      // var apply = scope.$evalAsync || $timeout;\n      $timeout(function() {\n        $element\n          .select2('val',  (selected === null || selected === 'undefined') ? '' : selected); // null === '' for Select2\n      });\n    };\n\n    this.getMultiSelected = function(viewValue) {\n\n      var options = this.collection($scope);\n      var indices = [];\n\n      _.each(viewValue, function(savedObject) {\n        var index = _.findIndex(options, function(value) {\n          var temp = angular.copy(savedObject); // remove hashkeys for comparison\n          return _.matches(temp)(value);\n        });\n        indices.push(index);\n      });\n\n      if(indices.length > 0) {\n        viewValue = indices;\n      }\n\n      return viewValue;\n\n    };\n\n    this.setValues = function() {\n\n      var viewValue = self.ngModel.$viewValue;\n\n      if(!angular.isArray(viewValue)) {\n        viewValue = [];\n      }\n\n      if(!_.isEmpty(viewValue) && _.isObject(viewValue[0])) {\n        viewValue = this.getMultiSelected(viewValue);\n      }\n\n      $timeout(function() {\n        $element\n          .select2('val', viewValue);\n      });\n    };\n\n    this.ngOptions = function() {\n\n      this.match = $attrs.ngOptions.match(AV_UI.NG_OPTIONS);\n      if(!this.match) {\n        throw new Error('Invalid ngOptions for avDropdown');\n      }\n      // AV_UI.NG_OPTIONS regex will parse into arrays like below:\n      //\n      // 0: \"state.name for state in states\"\n      // 1: \"state.name\"\n      // 2: undefined\n      // 3: undefined\n      // 4: \"state\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"states\"\n      // 8: undefined\n      //\n      // 0: \"state.id as state.name for state in states\"\n      // 1: \"state.id\"\n      // 2: \"state.name\"\n      // 3: undefined\n      // 4: \"state\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"states\"\n      // 8: undefined\n      //\n      // 0: \"state.name for state in states track by state.id\"\n      // 1: \"state.name\"\n      // 2: undefined\n      // 3: undefined\n      // 4: \"state\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"states\"\n      // 8: \"state.id\"\n      //\n      // 0: \"person.fullName as (person.lastName + ', ' + person.firstName) for person in feeScheduleModel.persons\"\n      // 1: \"person.fullName\"\n      // 2: \"(person.lastName + ', ' + person.firstName)\"\n      // 3: undefined\n      // 4: \"person\"\n      // 5: undefined\n      // 6: undefined\n      // 7: \"feeScheduleModel.persons\"\n      // 8: undefined\n      //\n      this.displayFn = $parse(this.match[2] || this.match[1]); // this is the function to retrieve the text to show as\n      this.collection = $parse(this.match[7]);\n      this.valueName = this.match[4] || this.match[6];\n      this.valueFn = $parse(this.match[2] ? this.match[1] : this.valueName);\n      this.keyName = this.match[5];\n\n      $scope.$watchCollection(this.collection, function(newVal, oldVal) {\n        if(angular.equals(newVal, oldVal)) {\n          return;\n        }\n\n        self.setValue();\n\n      }, true);\n\n    };\n  });\n\n  availity.ui.directive('avDropdown', function($timeout, $log, $window) {\n\n    return {\n      restrict: 'A',\n      require: ['ngModel', 'avDropdown'],\n      controller: 'AvDropdownController',\n      link: function(scope, element, attrs, controllers) {\n        var ngModel = controllers[0];\n        var avDropdown = controllers[1];\n\n        avDropdown.setNgModel(ngModel);\n        avDropdown.init();\n\n        if(attrs.ngOptions) {\n          avDropdown.ngOptions();\n        }\n\n        ngModel.$parsers.push(function(value) {\n          var parent = element.prev();\n          parent\n            .toggleClass('ng-invalid', !ngModel.$valid)\n            .toggleClass('ng-valid', ngModel.$valid)\n            .toggleClass('ng-invalid-required', !ngModel.$valid)\n            .toggleClass('ng-valid-required', ngModel.$valid)\n            .toggleClass('ng-dirty', ngModel.$dirty)\n            .toggleClass('ng-pristine', ngModel.$pristine);\n          return value;\n        });\n\n        element.on('change', function(e) {\n\n          // special case since the ajax handling doesn't bind to the model correctly\n          // this has to do with select2 (v3.5.2) using a hidden field instead of a select for ajax\n          if(avDropdown.options.query) {\n            $timeout(function() {\n              ngModel.$setViewValue(e.added);\n            });\n          }\n\n          $log.info(e);\n\n        });\n\n        // fires ng-focus when select2-focus fires.\n        element.on('select2-focus', function() {\n          if(attrs.ngFocus) {\n            scope.$eval(scope.$eval(attrs.ngFocus));\n          }\n        });\n\n        // fires ng-blur when select2-blur occurs.\n        element.on('select2-blur', function() {\n          if(attrs.ngBlur) {\n            scope.$eval(scope.$eval(attrs.ngBlur));\n          }\n        });\n\n        // https://github.com/t0m/select2-bootstrap-css/issues/37#issuecomment-42714589\n        element.on('select2-open', function () {\n          // look for .has-success, .has-warning, .has-error\n          // (really look for .has-* … which is good enough for the demo page, but obviously might interfere with other CSS-classes starting with \"has-\")\n          if(element.parents('[class*=\"has-\"]').length) {\n\n            // get all CSS-classes from the element where we found \"has-*\" and collect them in an array\n            var classNames = $(this).parents('[class*=\"has-\"]')[0].className.split(/\\s+/);\n\n            // go through the class names, find \"has-\"\n            for(var i = 0; i < classNames.length; ++i) {\n              if(classNames[i].match('has-')) {\n                $('#select2-drop').addClass(classNames[i]);\n              }\n            }\n          }\n        });\n\n\n        var _$render = ngModel.$render;\n        ngModel.$render = function() {\n          _$render();\n\n          if(avDropdown.multiple) {\n            avDropdown.setValues();\n          }else {\n            avDropdown.setValue();\n          }\n\n        };\n\n        var win = angular.element($window);\n\n        win.bind('resize', function() {\n          element.select2('close');\n        });\n\n        attrs.$observe('disabled', function (value) {\n          element.select2('enable', !value);\n        });\n\n        attrs.$observe('readonly', function (value) {\n          element.select2('readonly', !!value);\n        });\n\n        scope.$on('destroy', function() {\n          element.select2('destroy');\n        });\n\n        $timeout(function() {\n          element.select2(avDropdown.options);\n        });\n      }\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/datepicker/datepicker.js\n/**\n * Inspiration https://github.com/mgcrea/angular-strap/blob/v0.7.8/src/directives/datepicker.js\n */\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // Options: http://bootstrap-datepicker.readthedocs.org/en/latest/options.html\n  availity.ui.constant('AV_DATEPICKER', {\n    CONTROLLER: '$ngModelController',\n    ADD_ON_SELECTOR: '[data-toggle=\"datepicker\"]',\n    OPTIONS: [\n      'autoclose',\n      'beforeShowDay',\n      'beforeShowMonth',\n      'calendarWeeks',\n      'clearBtn',\n      'toggleActive',\n      'container',\n      'daysOfWeekDisabled',\n      'datesDisabled',\n      'defaultViewDate',\n      'endDate',\n      'forceParse',\n      'format',\n      'inputs',\n      'keyboardNavigation',\n      'language',\n      'minViewMode',\n      'multidate',\n      'multidateSeparator',\n      'orientation',\n      'startDate',\n      'startView',\n      'todayBtn',\n      'todayHighlight',\n      'weekStart',\n      'showOnFocus',\n      'disableTouchKeyboard',\n      'enableOnReadonly',\n      'modelFormat'\n    ],\n    DEFAULTS: {\n      FORMAT: 'mm/dd/yyyy',\n      CLOSE: true,\n      TODAY: true,\n      FORCEPARSE: false,\n      MODELFORMAT: 'YYYY-MM-DD'\n    }\n  });\n\n  availity.ui.controller('AvDatepickerController', function($element, $attrs, AV_DATEPICKER, $scope) {\n\n    var self = this;\n    this.options = {};\n\n    this.setValue = function() {\n\n      var viewValue = self.ngModel.$modelValue;\n      var plugin = this.plugin();\n\n      if(!viewValue || !plugin) {\n        return;\n      }\n\n      plugin.setDate(viewValue);\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.findModel = function() {\n\n      var ngModel = null;\n\n      var $input = $element.find('input:first').andSelf();\n      if($input.length) {\n        ngModel = $input.data(AV_DATEPICKER.CONTROLLER);\n        this.setNgModel(ngModel);\n      }\n\n      return ngModel;\n    };\n\n    this.modelToView = function() {\n      var viewValue = $.fn.datepicker.DPGlobal.formatDate(self.ngModel.$modelValue, self.options.format, 'en');\n      return viewValue;\n    };\n\n    this.wrapIsoDate = function() {\n      var date = self.ngModel.$modelValue;\n\n      if(date !== undefined && date !== null && !moment.isDate(date)) {\n        var m = moment(date);\n        self.ngModel.$modelValue = m.isValid() ? m.toDate() : null;\n      }\n\n      return self.ngModel.$modelValue;\n    };\n\n    this.viewToModel = function() {\n      var format = $.fn.datepicker.DPGlobal.parseFormat(self.options.format);\n      var utcDate = $.fn.datepicker.DPGlobal.parseDate(self.ngModel.$viewValue, format, 'en');\n\n      var plugin = self.plugin();\n\n      if(!plugin) {\n        return;\n      }\n\n      // jscs: disable\n      var localDate = plugin._utc_to_local(utcDate);\n      // jscs: enable\n\n      if(self.options.modelFormat && localDate) {\n        localDate = moment(localDate).format(self.options.modelFormat);\n      }\n\n      return localDate;\n    };\n\n    this.init = function() {\n\n      _.forEach($attrs, function(value, key) {\n        if(_.contains(AV_DATEPICKER.OPTIONS, key.replace('data-', ''))) {\n          self.options[key] = $scope.$eval(value);\n        }\n      });\n\n      // self.options = _.extend{}, optionsDefault, userOptions);\n\n      self.options.autoclose = self.options.autoclose ? self.options.autoclose : AV_DATEPICKER.DEFAULTS.CLOSE;\n      self.options.todayHighlight = self.options.todayHighlight ? self.options.todayHighlight : AV_DATEPICKER.DEFAULTS.TODAY;\n      self.options.format = self.options.format ? self.options.format : AV_DATEPICKER.DEFAULTS.FORMAT;\n      self.options.forceParse = self.options.forceParse ? self.options.forceParse : AV_DATEPICKER.DEFAULTS.FORCEPARSE;\n\n      if(self.options.modelFormat && self.options.modelFormat.toLowerCase() === 'default') {\n        self.options.modelFormat = AV_DATEPICKER.DEFAULTS.MODELFORMAT;\n      }\n    };\n\n    this.plugin = function() {\n      return $element.data('datepicker');\n    };\n\n    this.destroy = function() {\n      var plugin = this.plugin();\n      if(plugin) {\n        plugin.remove();\n        $element.data('datepicker', null);\n      }\n    };\n\n    this.hide = function() {\n      var plugin = this.plugin();\n      if(plugin) {\n        plugin.hide();\n      }\n    };\n  });\n\n  availity.ui.directive('avDatepicker', function($window, $log, AV_DATEPICKER) {\n    return {\n      restrict: 'A',\n      require: ['ngModel', 'avDatepicker'],\n      controller: 'AvDatepickerController',\n      link: function(scope, element, attrs, controllers) {\n\n        var ngModel = controllers[0];\n        var avDatepicker = controllers[1];\n\n        if(!ngModel) {\n          ngModel = avDatepicker.findModel();\n          if(!ngModel) {\n            $log.error('avDatepicker requires ngModel');\n            return;\n          }\n        }\n\n        avDatepicker.init();\n        avDatepicker.setNgModel(ngModel);\n\n        element.on('changeDate', function(e) {\n          $log.info('avDatepicker changeDate {0}', [e]);\n        });\n\n        // (view to model)\n        ngModel.$parsers.push(avDatepicker.viewToModel);\n\n        // (model to view) - added to end of formatters array\n        // because they are processed in reverse order.\n        // if the model is in Date format and send to the validation framework\n        // prior to getting converted to the expected $viewValue format,\n        // the validation will fail.\n        ngModel.$formatters.push(avDatepicker.modelToView);\n        ngModel.$formatters.push(avDatepicker.wrapIsoDate);\n\n        var _$render = ngModel.$render;\n        ngModel.$render = function() {\n          _$render();\n          avDatepicker.setValue();\n        };\n\n        var win = angular.element($window);\n\n        win.bind('scroll', function() {\n          avDatepicker.hide();\n        });\n\n        var target = element.siblings(AV_DATEPICKER.ADD_ON_SELECTOR);\n        if(target.length) {\n          target.on('click.datepicker', function() {\n            if(!element.prop('disabled')) { // Hack check for IE 8\n              element.focus();\n            }\n          });\n        }\n\n        scope.$on('destroy', function() {\n          avDatepicker.destroy();\n          if(target.length) {\n            target.off('click.datepicker');\n          }\n        });\n\n        scope.$evalAsync(function() {\n          element.datepicker(avDatepicker.options);\n        });\n      }\n    };\n  });\n})(window);\n\n// Source: /lib/ui/idle/idle-notifier.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_UI_IDLE', {\n    EVENTS: {\n      OK: 'mousedown.av.idle.notifier'\n    },\n    TEMPLATES: {\n      BASE: 'ui/idle/idle-tpl.html',\n      SESSION: 'ui/idle/idle-session-tpl.html',\n      WARNING: 'ui/idle/idle-warning-tpl.html'\n    }\n  });\n\n  availity.ui.provider('avIdleNotifier', function() {\n\n    var sessionTemplate;\n    var warningTemplate;\n    var $scope;\n\n    this.setSessionTemplate = function(template) {\n      sessionTemplate = template;\n    };\n\n    this.setWarningTemplate = function(template) {\n      warningTemplate = template;\n    };\n\n    this.$get = function(AV_IDLE, AV_UI_IDLE, $rootScope, AvModal, $document, $timeout) {\n\n      var AvIdleNotifier = function() {\n        this.listeners = [];\n        this.modal = null;\n      };\n\n      var proto = AvIdleNotifier.prototype;\n\n      proto.init = function() {\n\n        $scope = $rootScope.$new(true);\n        $scope.idle = {};\n\n        this.initListeners();\n      };\n\n      proto.initListeners = function() {\n\n        var self = this;\n        var listener = null;\n\n        // ACTIVE IDLING\n        listener = $rootScope.$on(AV_IDLE.EVENTS.IDLE_ACTIVE, function() {\n          self.showWarning();\n        });\n        this.listeners.push(listener);\n\n        // INACTIVE IDLING\n        listener = $rootScope.$on(AV_IDLE.EVENTS.IDLE_INACTIVE, function() {\n          self.hideWarning();\n        });\n        this.listeners.push(listener);\n\n        // SESSION TIMEOUT OUT\n        listener = $rootScope.$on(AV_IDLE.EVENTS.SESSION_TIMEOUT_ACTIVE, function() {\n          self.showSession();\n        });\n        this.listeners.push(listener);\n\n      };\n\n      proto.destroyListeners = function() {\n        // turn off each listener @see http://stackoverflow.com/a/14898795\n        _.each(this.listeners, function(listener) {\n          listener();\n        });\n      };\n\n      proto.showWarning = function() {\n\n        var self = this;\n\n        if(this.modal !== null) {\n          return;\n        }\n\n        $scope = $rootScope.$new(true);\n        $scope.idle = {};\n        $scope.idle.template = AV_UI_IDLE.TEMPLATES.WARNING;\n\n        this.modal = new AvModal({\n          show: true,\n          scope: $scope,\n          backdrop: 'static',\n          templateUrl: AV_UI_IDLE.TEMPLATES.BASE\n        });\n\n        $document.find('body').on(AV_UI_IDLE.EVENTS.OK, function() {\n          self.hideWarning();\n        });\n\n      };\n\n      proto.hideWarning = function() {\n        if(this.modal) {\n          this.disableBackDrop();\n          this.modal.hide();\n        }\n\n        this.modal = null;\n      };\n\n      proto.disableBackDrop = function() {\n        $document.find('body').off(AV_UI_IDLE.EVENTS.OK);\n      };\n\n      proto.showSession = function() {\n        var self = this;\n        this.disableBackDrop();\n\n        $timeout(function() {\n          $scope.idle.template = AV_UI_IDLE.TEMPLATES.SESSION;\n          $scope.idle.onSessionTimeout = _.bind(self.onSessionTimeout, self);\n        }, 0, true);\n\n      };\n\n      proto.onSessionTimeout = function() {\n        $rootScope.$broadcast(AV_IDLE.EVENTS.SESSION_TIMEOUT_REDIRECT);\n      };\n\n      return new AvIdleNotifier();\n\n    };\n\n  });\n\n  availity.ui.run(function(avIdleNotifier) {\n    avIdleNotifier.init();\n  });\n\n})(window);\n\n// Source: /lib/ui/mask/mask.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_MASK', {\n    NAME: 'inputmask',\n    DEFAULTS: {\n      date: '99/99/9999',\n      phone: '(999) 999-9999',\n      SSN:'999-99-9999'\n    }\n  });\n\n  availity.ui.directive('avMask', function($window, $log, AV_MASK) {\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function(scope, element, attrs) {\n\n        var maskType = AV_MASK.DEFAULTS[attrs['avMask']];\n        if(!maskType) {\n          maskType = attrs['avMask'];\n        }\n\n        scope.$evalAsync(function() {\n          element.inputmask(maskType);\n        });\n\n        scope.$on('$destroy', function () {\n          element.inputmask('remove');\n        });\n      }\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/permissions/has-permission.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('AvHasPermissionController', function($element) {\n\n    this.onSuccess = function(isAuthorized) {\n      if(isAuthorized) {\n        $element.removeClass('ng-hide');\n        $element.show();\n      } else {\n        $element.remove();\n      }\n    };\n\n    this.onError = function() {\n      $element.remove();\n    };\n\n  });\n\n  availity.ui.directive('avHasPermission', function(avUserAuthorizations) {\n    return {\n      restrict: 'EA',\n      controller: 'AvHasPermissionController',\n      require: ['avHasPermission'],\n      link: function($scope, $element, $attr, controllers) {\n\n        var avHasPermission = controllers[0];\n\n        $element.hide();\n\n        $scope.$watch($attr.avHasPermission, function(permissions) {\n\n          if(!angular.isArray(permissions)) {\n            permissions = _.words('' + permissions);\n          }\n\n          avUserAuthorizations.isAnyAuthorized(permissions).then(avHasPermission.onSuccess, avHasPermission.onError);\n        });\n      }\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/analytics/analytics.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n\n  availity.core.controller('AvAnalyticsController', function(avAnalyticsUtils, $element, $attrs, avAnalytics) {\n\n    this.onEvent = function(event) {\n\n      // If an external link is detected\n      if(avAnalyticsUtils.isExternalLink($attrs)) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      // convert the directive attributes into object with properties with sane defaults\n      var properties = _.extend({\n        level: 'info'\n      }, avAnalyticsUtils.getProperties($attrs), {\n        event: event.type\n      });\n\n      var promise = avAnalytics.trackEvent(properties);\n      promise['finally'](function() {\n        if(avAnalyticsUtils.isExternalLink($attrs)) {\n          document.location = $element.attr('href');\n        }\n      });\n    };\n\n  });\n\n  availity.core.directive('avAnalyticsOn', function() {\n\n    return {\n      restrict: 'A',\n      controller: 'AvAnalyticsController',\n      required: 'avAnalyticsOn',\n      link: function($scope, $element, $attrs, avAnalyticsOn) {\n\n        var eventType = $attrs.avAnalyticsOn || 'click';\n\n        // bind the element to the `av-analytic-on` event like `click`\n        $element.on(eventType, function (event) {\n          avAnalyticsOn.onEvent(event);\n        });\n      }\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/placeholder/placeholder.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.requires.push('ng.shims.placeholder');\n\n  availity.ui.config(function($provide) {\n\n    $provide.decorator('placeholderDirective', ['$delegate', '$log', function($delegate, $log) {\n\n      var directive = $delegate[0];\n      var originalLink = directive.link;\n\n      var newLink = function(scope, element, attrs) {\n\n        if(originalLink && _.contains(_.keys(attrs), 'avMask')) {\n          $log.info('placeholder shim not running on an element due to avMask on same element');\n          return;\n        }else if(originalLink) {\n          originalLink.apply(this, arguments);\n        }\n        //else originalLink doesn't exist\n      };\n\n      directive.compile = function() {\n        return newLink;\n      };\n\n      return $delegate;\n    }]);\n\n  });\n})(window);\n\n// Source: /lib/ui/breadcrumbs/breadcrumbs.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BREADCRUMBS', {\n\n    TEMPLATE: 'ui/breadcrumbs/breadcrumbs-tpl.html'\n  });\n\n  function avBreadcrumbsController($state) {\n    \n    var self = this;\n\n    function getBreadcrumb(breadcrumbs, state) {\n      if(!state || !state.data) {\n        return;\n      }\n\n      var breadcrumb = state.data.breadcrumb;\n      if(!breadcrumb) {\n        return;\n      }\n\n      if(breadcrumb.parent) {\n        var parentState = $state.get(breadcrumb.parent);\n\n        if(parentState) {\n          getBreadcrumb(breadcrumbs, parentState);\n        }\n      }\n      breadcrumb.state = state.name;\n      breadcrumbs.push(breadcrumb);\n    }\n\n    self.getBreadcrumbs = function() {\n      var breadcrumbs = [];\n      getBreadcrumb(breadcrumbs, $state.current);\n      return breadcrumbs;\n    };\n  }\n\n  avBreadcrumbsController.$inject = ['$state'];\n  availity.ui.controller('AvBreadcrumbsController', avBreadcrumbsController);\n\n  function avBreadcrumbs(AV_BREADCRUMBS) {\n    return {\n      restrict: 'EA',\n      templateUrl: AV_BREADCRUMBS.TEMPLATE,\n      controller: 'AvBreadcrumbsController',\n      link: function(scope, element, attrs, AvBreadcrumbsController) {\n        scope.breadcrumbs = AvBreadcrumbsController.getBreadcrumbs();\n\n        scope.$on('$stateChangeSuccess', function() {\n          scope.breadcrumbs = AvBreadcrumbsController.getBreadcrumbs();\n        });\n      }\n    };\n  }\n\n  avBreadcrumbs.$inject = ['AV_BREADCRUMBS'];\n  availity.ui.directive('avBreadcrumbs', avBreadcrumbs);\n\n})(window);\n\n// Source: /lib/ui/filters/approximate.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.filter('avApproximate', function() {\n    var pow = Math.pow;\n    var floor = Math.floor;\n    var abs = Math.abs;\n    var log = Math.log;\n\n    function round(number, precision) {\n      var prec = pow(10, precision);\n      return Math.round(number * prec) / prec;\n    }\n\n    return function (number, precision) {\n      precision = precision || 0;\n      var base = floor(log(abs(number)) / log(1000));\n      var unit = 'kMGTPE'[base - 1];\n      return unit ? round(number / pow(1000, base), precision) + unit : (number || 0);\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/badge/badge.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BADGE', {\n    COLOR: null,\n    DEFAULT_CLASS: 'badge',\n    SHOW_WHEN_ZERO: false,\n    TEMPLATE: 'ui/badge/badge-tpl.html'\n  });\n\n  function badgeDirective(AV_BADGE) {\n\n    return {\n      scope: {\n        color: '@',\n        count: '=avBadge',\n        showWhenZero: '@'\n      },\n      templateUrl: AV_BADGE.TEMPLATE,\n      link: function(scope, element) {\n        scope.color = scope.color || AV_BADGE.COLOR;\n        scope.showWhenZero = scope.showWhenZero || AV_BADGE.SHOW_WHEN_ZERO;\n\n        var classes = [];\n        classes.push(AV_BADGE.DEFAULT_CLASS);\n        if(scope.color) {\n          classes.push(scope.color);\n        }\n\n        element.addClass(classes.join(' '));\n      }\n    };\n  }\n\n  badgeDirective.$inject = ['AV_BADGE'];\n  availity.ui.directive('avBadge', badgeDirective);\n\n})(window);\n\n// Source: /lib/ui/labels/removable-label.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_REMOVABLE_LABEL', {\n    TEMPLATE: 'ui/labels/removable-label-tpl.html'\n  });\n\n  availity.ui.directive('avRemovableLabel', function(AV_REMOVABLE_LABEL) {\n    return {\n      templateUrl: AV_REMOVABLE_LABEL.TEMPLATE,\n      transclude: true,\n      scope: {\n        removeValue: '=',\n        onRemove: '&'\n      },\n      link: function(scope, element, attrs) {\n        element.addClass('label-remove');\n        scope.removeLabel = function() {\n          if(!attrs.disabled) {\n            scope.onRemove()(scope.removeValue);\n          }\n        };\n      }\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/animation/loader.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_LOADER', {\n\n    TEMPLATES: {\n      LOADER: 'ui/animation/loader-tpl.html'\n    }\n\n  });\n\n  availity.ui.controller('AvLoaderController', function($element) {\n\n    var self = this;\n    var active;\n\n    this.start = function() {\n      active = true;\n      this.animate();\n    };\n\n    this.animate = function() {\n\n      $element\n        .find('.loading-bullet')\n        .velocity('transition.slideRightIn', { stagger: 250 })\n        .velocity({ opacity: 0 }, {\n          delay: 750,\n          duration: 500,\n          complete: function() {\n            if(active) {\n              setTimeout(function() {self.animate();}, 500);\n            } else {\n              self.endAnimation();\n            }\n          }\n        });\n\n    };\n\n    this.endAnimation = function() {\n      $element.find('.loading-bullet').velocity('stop', true);\n      $element.removeData();\n    };\n\n    this.stop = function() {\n      active = false;\n    };\n\n  });\n\n  availity.ui.directive('avLoader', function(AV_LOADER) {\n    return {\n      restrict: 'A',\n      replace: true,\n      controller: 'AvLoaderController',\n      require: 'avLoader',\n      templateUrl: AV_LOADER.TEMPLATES.LOADER,\n      link: function(scope, element, attr, avLoader) {\n\n        if(!attr.delay) {\n          avLoader.start();\n        }\n\n        scope.$on('$destroy', function() {\n          avLoader.stop();\n        });\n\n      }\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/block/block.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  var blockTemplate =\n    '<div ng-show=\"state.blockCount > 0\" class=\"block-ui-overlay\" ng-class=\"{ \\'block-ui-visible\\': state.blocking }\"></div>' +\n    '<div ng-show=\"state.blocking\" class=\"block-ui-message-container\">' +\n    '  <div class=\"av-block-ui-message\">' +\n    '    <div data-av-loader data-delay=\"true\" class=\"loading-indicator\"></div>' +\n    '  </div>' +\n    '</div>';\n\n  availity.ui.constant('AV_BLOCK', {\n    TEMPLATES: {\n      BLOCK: 'ui/modal/modal-tpl.html'\n    }\n  });\n\n  var getLoaderController = function(blockId) {\n    var el = $('[data-block-ui=\"' + blockId + '\"]') || $('[block-ui=\"' + blockId + '\"]');\n    if(el) {\n      return el.find('[data-av-loader]').controller('avLoader');\n    }\n  };\n\n  var triggerLoaderController = function(id, instance, fn) {\n    var controller = instance.loaderController;\n    if(!controller) {\n      controller = getLoaderController(id);\n      instance.loaderController = controller;\n    }\n    if(controller && _.isFunction(controller[fn])) {\n      controller[fn]();\n    }\n  };\n\n  var triggerInstance = function(id, instance, origFn, loaderFn) {\n    triggerLoaderController(id, instance, loaderFn);\n    origFn.apply(instance);\n  };\n\n  var modifyBlockInstances = function(id, instance) {\n    var origStartFn = instance.start;\n    var origStopFn = instance.stop;\n    instance.start = function() {\n      triggerInstance(id, instance, origStartFn, 'start');\n    };\n    instance.stop = function() {\n      triggerInstance(id, instance, origStopFn, 'stop');\n    };\n    instance.avModifications = true;\n  };\n\n  availity.ui.run(function($injector, $log) {\n    try {\n\n      var blockUIConfig = $injector.get('blockUIConfig');\n      var blockUI = $injector.get('blockUI');\n      blockUIConfig.autoBlock = false;\n      blockUIConfig.delay = 0;\n      blockUIConfig.template = blockTemplate;\n\n      var origGetFn = blockUI.instances.get;\n      blockUI.instances.get = function(id) {\n        var instance = origGetFn(id);\n        if(!instance.avModifications) {\n          modifyBlockInstances(id, instance);\n        }\n        return instance;\n      };\n\n    } catch(e) {\n      $log.warn('blockUI is required to use av block.');\n    }\n  });\n\n})(window);\n\n//# sourceMappingURL=maps/availity-angular-ui.js.map"],"sourceRoot":"/source/"}