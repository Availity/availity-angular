{"version":3,"sources":["availity-angular-ui.js","/source/index.js","/source/template.js","/source/modal.js","/source/form.js","/source/field.js","/source/popover.js","/source/container.js","/source/adapter-bootstrap.js","/source/adapter.js","/source/dropdown.js","/source/datepicker.js","/source/idle-notifier.js","/source/mask.js","/source/has-permission.js","/source/analytics.js","/source/placeholder.js","/source/breadcrumbs.js","/source/approximate.js","/source/badge.js","/source/removable-label.js","/source/loader.js","/source/block.js","/source/block-directive.js","/source/tabs.js","/source/scroll-pagination.js"],"names":["root","availity","MODULE_UI","ui","angular","module","constant","NG_OPTIONS","exports","window","factory","$q","$templateCache","$http","get","options","valid","template","templateUrl","Error","when","cache","then","result","data","OPTIONS","scope","id","container","keyboard","backdrop","show","remote","EVENTS","SHOW","SHOWN","HIDE","HIDDEN","NAMESPACE","MODAL","BS_EVENTS","TEMPLATES","AvModalManager","this","instances","proto","prototype","add","push","remove","_","without","closeAll","forEach","$el","$","bsModal","removeBackdrop","$body","removeClass","resetAdjustments","resetScrollbar","avModal","destroy","ModalFactory","$rootScope","$timeout","$compile","AV_MODAL","avTemplateCache","avModalManager","Modal","self","templateDefer","defer","templatePromise","promise","extend","$new","_build","create","$element","element","_createId","_scope","_init","appendTo","resolve","modal","_listeners","modalShow","modalToggle","toggle","modalHide","hide","animationShowDefer","animationHideDefer","on","event","$emit","isFunction","onShown","onHidden","call","$evalAsync","$on","_id","isShown","attr","uuid","directive","restrict","replace","transclude","size","controller","ngForm","rulesKey","avValOn","avValDebounce","avValInvalid","violations","init","form","record","count","violocationCount","reduce","sum","num","$setValidity","unrecord","reset","$setPristine","$submitted","$setSubmitted","setRulesKey","key","$log","$parse","AV_VAL","avValAdapter","priority","require","compile","pre","iEl","iAttrs","controllers","ruleFn","avValForm","avForm","error","$watch","_rulesKey","_oldRulesKey","info","$broadcast","REVALIDATE","post","fn","ngSubmit","off","ngClick","RESET","bind","SUBMITTED","$invalid","FAILED","preventDefault","stopImmediatePropagation","scroll","callback","$event","$apply","$attrs","avVal","$scope","$sniffer","ngModel","rule","placeholder","noEvent","createId","avId","setNgModel","setRule","updateModel","results","validationKeys","avResults","contraintName","isValid","avViolations","length","$error","value","indexOf","lastIndexOf","updateView","$dirty","avValShow","message","validate","validateModel","validateView","undefined","onDebounce","val","trim","isCheckbox","$setViewValue","checked","isRadio","is","type","splice","unbind","debounce","msie","cancel","link","attrs","avValField","parseInt","DEBOUNCE","isNumber","debounceAllowed","$parsers","$formatters","unshift","$viewValue","provider","config","showOnLoadHideDelay","set","$get","copy","NAME","AV_POPOVER","avPopoverConfig","listeners","name","ev","plugin","popover","delay","showDelay","avPopover","html","messages","CLASSES","SUCCESS","WARNING","ERROR","FEEDBACK","HELP","FORM_GROUP","NAVBAR","SELECTORS","CONTAINER","DATA_CONTAINER","CONTROLLER","AV_BOOTSTRAP_ADAPTER","$valid","parents","addClass","selector","join","target","siblings","warn","el","avValModel","navbarSelector","offset","each","outerHeight","$target","find","animate","scrollTop","top","DEFAULT","that","setAdapter","adapter","AV_VAL_ADAPTER","$injector","Adapter","adapterName","closeOnResize","dropdownAutoWidth","minimumResultsForSearch","theme","AV_UI","AV_DROPDOWN","avDropdownConfig","match","contains","$eval","multiple","isDefined","$window","avDropdown","win","select2","newVal","oldVal","trigger","autoclose","todayHighlight","format","forceParse","ADD_ON_SELECTOR","DEFAULTS","MODELFORMAT","AV_DATEPICKER","avDatepickerConfig","setValue","viewValue","setDate","findModel","$input","andSelf","modelToView","isoWrap","datepicker","DPGlobal","formatDate","wrapIsoDate","date","$modelValue","m","moment","toDate","viewToModel","parseFormat","utcDate","parseDate","localDate","_utc_to_local","modelFormat","toLowerCase","avDatepicker","e","_$render","$render","prop","focus","OK","BASE","SESSION","AV_IDLE","AV_UI_IDLE","AvModal","$document","AvIdleNotifier","idle","initListeners","listener","IDLE_ACTIVE","showWarning","IDLE_INACTIVE","hideWarning","SESSION_TIMEOUT_ACTIVE","showSession","destroyListeners","disableBackDrop","onSessionTimeout","SESSION_TIMEOUT_REDIRECT","run","avIdleNotifier","phone","SSN","AV_MASK","maskType","avMask","inputmask","onSuccess","isAuthorized","onError","avUserAuthorizations","$attr","avHasPermission","_permissions","permissions","isArray","words","isAnyAuthorized","getOptions","avAnalyticsUtils","avAnalytics","onEvent","properties","level","isExternalLink","stopPropagation","trackEvent","finally","document","location","AV_ANALYTICS","childCtrl","parentCtrl","parentOptions","getProperties","eventType","avAnalyticsOn","requires","$provide","decorator","$delegate","originalLink","newLink","keys","apply","arguments","TEMPLATE","AvBreadcrumbsController","$state","getBreadcrumb","breadcrumbs","state","breadcrumb","parent","parentState","getBreadcrumbs","current","$inject","avBreadcrumbs","AV_BREADCRUMBS","avBreadcrumbsCtrl","filter","pow","Math","floor","abs","log","round","number","precision","prec","_precision","base","unit","COLOR","DEFAULT_CLASS","SHOW_WHEN_ZERO","badgeDirective","AV_BADGE","color","showWhenZero","classes","AV_REMOVABLE_LABEL","removeValue","onRemove","removeLabel","disabled","LOADER","active","start","velocity","stagger","opacity","duration","complete","setTimeout","endAnimation","removeData","stop","AV_LOADER","avLoader","BLOCK","getLoaderController","blockId","triggerLoaderController","instance","loaderController","triggerInstance","origFn","loaderFn","modifyBlockInstances","origStartFn","origStopFn","startLoader","avModifications","AV_BLOCK","blockUIConfig","blockUI","autoBlock","origGetFn","avBlockUi","blockCount","TABS","TAB","TabsController","tabs","addTab","tab","selectTab","removeTab","index","newActiveIndex","selectedTab","onDeselect","onSelect","TabsDirective","AV_TABS","justified","tabType","vertical","isUndefined","padContent","TabDirective","heading","tabsController","transcludeFn","select","$parent","disable","TabPaneDirective","avTabPane","append","contents","node","DEFAULT_OPTIONS","limit","maxCached","loadMoreText","entryIdAttribute","apiParams","AV_SCROLL_PAGINATION","_options","lowOffset","highOffset","updateButtonVisibilityFlags","showNext","totalCount","showPrev","loadEntries","prepend","block","avScrollPagination","params","apiResource","query","response","responseData","getResponseData","resourceId","addEntries","responseKey","split","nestedData","noData","entries","oldEntries","diff","trackedElementId","slice","autoscroll","trackedElement","trackedElementTop","newScrollTop","loadPrev","loadNext"],"mappings":"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","file":"availity-angular-ui.min.js","sourcesContent":["/**\n * availity-angular v2.0.0-beta.0 -- January-13\n * Copyright 2016 Availity, LLC \n */\n\n// Source: /lib/ui/index.js\n\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity || {};\n\n  availity.MODULE_UI = 'availity.ui';\n  availity.ui = angular.module(availity.MODULE_UI, ['ng', 'ngSanitize']);\n\n  availity.ui.constant('AV_UI', {\n    // jscs: disable\n    NG_OPTIONS: /^\\s*([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?(?:\\s+group\\s+by\\s+([\\s\\S]+?))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+([\\s\\S]+?)(?:\\s+track\\s+by\\s+([\\s\\S]+?))?$/\n    // jscs: enable\n  });\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = availity;\n  }\n\n\n})(window);\n\n// Source: /lib/ui/templates/template.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.factory('avTemplateCache', function($q, $templateCache, $http) {\n\n    return {\n\n      get: function(options) {\n\n        var valid = !options.template || !options.templateUrl;\n\n        if (!valid) {\n          throw new Error('Either options.template or options.templateUrl must be defined for avTemplateCache');\n        }\n\n        return options.template ? $q.when(options.template) :\n          $http.get(options.templateUrl, {cache: $templateCache})\n            .then(function(result) {\n              return result.data;\n            });\n      }\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/modal/modal.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_MODAL', {\n\n    OPTIONS: {\n      scope: null,\n      templateUrl: null,\n      template: null,\n      id: null,\n      container: null,\n\n      // Bootstrap defaults\n      keyboard: true,\n      backdrop: true,\n      show: false,\n      remote: false\n    },\n\n    EVENTS: {\n      SHOW: 'show.av.modal',\n      SHOWN: 'shown.av.modal',\n      HIDE: 'hide.av.modal',\n      HIDDEN: 'hidden.av.modal'\n    },\n\n    NAMESPACE: {\n      MODAL: 'bs.modal'\n    },\n\n    BS_EVENTS: {\n      SHOW: 'show.bs.modal',\n      SHOWN: 'shown.bs.modal',\n      HIDE: 'hide.bs.modal',\n      HIDDEN: 'hidden.bs.modal'\n    },\n\n    TEMPLATES: {\n      MODAL: 'ui/modal/modal-tpl.html'\n    }\n  });\n\n  availity.ui.factory('avModalManager', function() {\n\n    var AvModalManager = function() {\n      this.instances = [];\n    };\n\n    var proto = AvModalManager.prototype;\n\n    proto.add = function(id) {\n      this.instances.push(id);\n    };\n\n    proto.remove = function(id) {\n      this.instances = _.without(this.instances, id);\n    };\n\n    proto.closeAll = function() {\n\n      _.forEach(this.instances, function(id) {\n\n        var $el = $('#' + id);\n\n        if (!$el) {\n          return;\n        }\n\n        var bsModal = $el.data('bs.modal');\n        if (bsModal) {\n          bsModal.removeBackdrop();\n          bsModal.$body.removeClass('modal-open');\n          bsModal.resetAdjustments();\n          bsModal.resetScrollbar();\n        }\n\n        var avModal = $el.data('AvModal');\n        if (avModal) {\n          avModal.destroy();\n        }\n\n      });\n    };\n\n    return new AvModalManager();\n\n  });\n\n  var ModalFactory = function($rootScope, $timeout, $compile, AV_MODAL, avTemplateCache, $q, avModalManager) {\n\n    var Modal = function(options) {\n\n      var self = this;\n\n      this.templateDefer = $q.defer();\n      this.templatePromise = this.templateDefer.promise;\n\n      this.options = angular.extend({}, AV_MODAL.OPTIONS, {scope: $rootScope.$new()}, options);\n\n      avTemplateCache.get(options).then(function(template) {\n        self.options.template = template;\n        self._build();\n      });\n\n    };\n\n    Modal.create = function(options) {\n      return new Modal(options);\n    };\n\n    var proto = Modal.prototype;\n\n    proto._build = function() {\n\n      var self = this;\n\n      var scope = this.options.scope;\n      this.$element = angular.element(this.options.template);\n\n      this._createId();\n\n      this._scope();\n\n      $compile(this.$element)(scope);\n\n      $timeout(function() {\n        self._init();\n      }, 0, true);\n\n      // Append to container or <body>\n      this.options.container ? this.$element.appendTo(this.options.container) : this.$element.appendTo('body');\n\n    };\n\n    proto._init = function() {\n\n      this.$element.data('AvModal', this);\n\n      this.templateDefer.resolve(true);\n\n      // Initialize Bootstrap jQuery plugin\n      this.$element.modal({\n        'backdrop': this.options.backdrop,\n        'keyboard': this.options.keyboard,\n        'show': this.options.show,\n        'remote': this.options.remote\n      });\n\n      this._listeners();\n    };\n\n    // Add helpers to scope so clients can call internal methods\n    proto._scope = function() {\n\n      var self = this;\n      var scope = this.options.scope;\n\n      scope.modalShow = function() {\n        return self.show();\n      };\n\n      scope.modalToggle = function() {\n        return self.toggle();\n      };\n\n      scope.modalHide = function() {\n        return self.hide();\n      };\n\n    };\n\n    proto._listeners = function() {\n\n      var self = this;\n      var scope = this.options.scope;\n      var $element = this.$element;\n\n      this.animationShowDefer = $q.defer();\n      this.animationHideDefer = $q.defer();\n\n      $element.on(AV_MODAL.BS_EVENTS.SHOW, function(event) {\n        scope.$emit(AV_MODAL.EVENTS.SHOW, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.SHOWN, function(event) {\n\n        if (angular.isFunction(self.options.onShown)) {\n          self.options.onShown();\n        }\n\n        self.animationShowDefer.resolve(true);\n\n        scope.$emit(AV_MODAL.EVENTS.SHOWN, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.HIDE, function(event) {\n        scope.$emit(AV_MODAL.EVENTS.HIDE, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.HIDDEN, function(event) {\n\n        if (angular.isFunction(self.options.onHidden)) {\n          self.options.onHidden.call(this);\n        }\n\n        self.animationHideDefer.resolve(true);\n        scope.$emit(AV_MODAL.EVENTS.HIDDEN, event, self);\n\n        scope.$evalAsync(function() {\n          self.destroy();\n        });\n\n      });\n\n      // Garbage collection\n      scope.$on('$destroy', function() {\n        avModalManager.remove(self._id);\n        self.destroy();\n      });\n\n    };\n\n    proto.show = function() {\n\n      var self = this;\n      this.animationShowDefer = $q.defer();\n\n      this.templatePromise.then(function() {\n        self.isShown() ? self.animationShowDefer.resolve(true) : self.$element.modal('show');\n      });\n\n      return this.animationShowDefer.promise;\n\n    };\n\n    proto.hide = function() {\n\n      var self = this;\n      this.animationHideDefer = $q.defer();\n\n      this.templatePromise.then(function() {\n        !self.isShown() ? self.animationHideDefer.resolve(true) : self.$element.modal('hide');\n      });\n\n      return this.animationHideDefer.promise;\n    };\n\n    proto.isShown = function() {\n      return this.$element.data(AV_MODAL.NAMESPACE.MODAL).isShown;\n    };\n\n    proto.toggle = function() {\n\n      var self = this;\n\n      return this.templatePromise.then(function() {\n        return self.isShown() ? self.hide() : self.show();\n      });\n\n    };\n\n    proto.destroy = function() {\n\n      var self = this;\n\n      return this.templatePromise.then(function() {\n        self.$element.data('AvModal', null);\n        self.$element.remove();\n      });\n\n    };\n\n    proto._createId = function() {\n      // Create a unique id for the modal if not present or passed in via options\n      var id = this.$element.attr('id');\n      if (!id) {\n        // Get id from options or create a unique id\n        id = this.options.id ? this.options.id : availity.uuid('av-modal-id');\n        this.$element.attr('id', id);\n      }\n\n      this._id = id;\n\n      avModalManager.add(id);\n    };\n\n    return Modal;\n  };\n\n  availity.ui.factory('AvModal', ModalFactory);\n\n  availity.ui.directive('avModal', function(AV_MODAL) {\n    return {\n      restrict: 'AE',\n      replace: true,\n      transclude: true,\n      scope: {\n        size: '@'\n      },\n      templateUrl: AV_MODAL.TEMPLATES.MODAL\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/validation/form.js\n/**\n * 1. All fields should be pristine on first load\n * 2. If field is modified an invalid the field should be marked with an error\n *\n */\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('avValFormController', function() {\n\n    this.ngForm  = null;\n    this.rulesKey = null;\n    this.avValOn = null;\n    this.avValDebounce = null;\n    this.avValInvalid = false;\n\n    // Object that stores the unique id (key) and violation count (value) of all the form fields\n    //\n    // EX:\n    //\n    // {\n    //  avVal001: 0\n    //  avVal002: 2\n    //  avVal003: 1\n    // }\n    this.violations = {};\n\n    this.init = function(form) {\n      this.ngForm = form;\n    };\n\n    /**\n     * Records id of the form field and number of violations\n     * @param  {[type]} id    [description]\n     * @param  {[type]} count [description]\n     * @return {[type]}       [description]\n     */\n    this.record = function(id, count) {\n      this.violations[id] = count;\n\n      var violocationCount = _.reduce(this.violations, function(sum, num) {\n        return sum + num;\n      }, 0);\n\n      this.ngForm.$setValidity('av', violocationCount === 0);\n    };\n\n    this.unrecord = function(id) {\n      if (id && this.violations[id]) {\n        delete this.violations[id];\n      }\n    };\n\n    this.reset = function() {\n      this.ngForm.$setPristine();\n      this.ngForm.$submitted = false;\n    };\n\n    this.$setSubmitted = function() {\n      this.ngForm.$submitted = true;\n    };\n\n    this.setRulesKey = function(key) {\n      this.rulesKey = key;\n    };\n\n  });\n\n  // form.$error = {};\n  // form.$$success = {};\n  // form.$pending = undefined;\n  // form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);\n  // form.$dirty = false;\n  // form.$pristine = true;\n  // form.$valid = true;\n  // form.$invalid = false;\n  // form.$submitted = false;\n\n  availity.ui.directive('avValForm', function($log, $timeout, $parse, AV_VAL, avValAdapter, $rootScope) {\n    return {\n      restrict: 'A',\n      priority: 10,\n      require: ['form', 'avValForm'],\n      controller: 'avValFormController',\n      compile: function() {\n        return {\n          pre: function(scope, iEl, iAttrs, controllers) {\n\n            var ruleFn = $parse(iAttrs.avValForm);\n            var rulesKey = ruleFn(scope);\n\n            var ngForm = controllers[0];\n            var avForm = controllers[1];\n\n            rulesKey = rulesKey || iAttrs.avValForm; // interpolated rule from scope || fixed string\n\n            if (!rulesKey) {\n              $log.error('avValForm requires a rules key in order to run the proper validation rules.');\n              return;\n            }\n\n            scope.$watch(ruleFn, function(_rulesKey, _oldRulesKey) {\n\n              if (_rulesKey) {\n\n                avForm.setRulesKey(_rulesKey);\n\n                if (_rulesKey !== _oldRulesKey) {\n                  $timeout(function() {\n                    $log.info('avValForm revalidate');\n                    $rootScope.$broadcast(AV_VAL.EVENTS.REVALIDATE);\n                  });\n                }\n\n              }\n\n            });\n\n            // Allow form attributes to define the validation behavior of the form fields\n            // inside it.  If `av-val-on` or `av-val-debounce` are on the form then all form\n            // fields inside the form would inherit this behavior.\n            avForm.avValOn = iAttrs.avValOn || null;\n            avForm.avValDebounce = iAttrs.avValDebounce || null;\n            // Allows fields to update with invalid data for dirty form saving\n            avForm.avValInvalid = iAttrs.avValInvalid || false;\n\n            avForm.init(ngForm);\n            avForm.setRulesKey(rulesKey);\n\n          },\n          post: function(scope, iEl, iAttrs, controllers) {\n\n            iEl.attr('novalidate', 'novalidate');  // prevent HTML5 validation from kicking in\n\n            // Disable ng-submit or ng-click handlers and store the function to call for submitting\n            var fn;\n            if (iAttrs.ngSubmit) {\n              // Disable ng-submit event\n              iEl.off('submit');\n              fn = $parse(iAttrs.ngSubmit, /* interceptorFn */ null, /* expensiveChecks */ true);\n            }else if (iAttrs.ngClick) {\n              // Disable ng-click event\n              iEl.off('click');\n              fn = $parse(iAttrs.ngClick, /* interceptorFn */ null, /* expensiveChecks */ true);\n            }\n\n            var ngForm = controllers[0];\n            var avForm = controllers[1];\n\n            scope.$on(AV_VAL.EVENTS.RESET, function() {\n              avForm.reset();\n            });\n\n            iEl.bind('submit', function(event) {\n\n              scope.$broadcast(AV_VAL.EVENTS.SUBMITTED);\n              avForm.$setSubmitted();\n\n              if (ngForm.$invalid) {\n\n                scope.$broadcast(AV_VAL.EVENTS.FAILED);\n\n                $log.info('avValForm invalid.  preventing default submit action');\n\n                event.preventDefault();\n                event.stopImmediatePropagation();\n                scope.$broadcast(event);\n\n                avValAdapter.scroll(iEl);\n                return;\n              }\n\n              ngForm.$setPristine();\n\n              if (!fn) {\n                return;\n              }\n\n              var callback = function() {\n                fn(scope, {$event: event});\n              };\n\n              scope.$apply(callback);\n\n            });\n\n          }\n        };\n      }\n    };\n  });\n\n\n})(window);\n\n// Source: /lib/ui/validation/field.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('AvValFieldController', function($element, avValAdapter, $attrs, avVal, $log, $timeout, $scope, $sniffer) {\n\n    this.ngModel = null;\n    this.rule = null;\n    this.avValForm = null;\n    this.avValInvalid = false;\n\n    var self = this;\n\n    var placeholder = $element[0].placeholder;\n    var noEvent = {};\n\n    this.createId = function() {\n      this.ngModel.avId = availity.uuid('avVal');\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.setRule = function(rule) {\n      this.rule = rule;\n    };\n\n    this.avValForm = function(avValForm) {\n      this.avValForm = avValForm;\n    };\n\n    this.updateModel = function(results) {\n\n      var validationKeys = [];\n\n      this.ngModel.avResults = results;\n\n      // set state for each violation\n      angular.forEach(results.violations, function(result) {\n\n        var key = 'av-' + result.contraintName;\n        validationKeys.push(key);\n        self.ngModel.$setValidity(key, result.valid);\n\n      });\n\n      // set overall state for validation state\n      this.ngModel.$setValidity('av', this.ngModel.avResults.isValid);\n\n      // store violations\n      this.ngModel.avViolations = this.ngModel.avResults.violations;\n\n      // record the id and violation count in the av-form controller.  this determines if the form is\n      // valid if sum of violations for all form inputs === zero\n      this.avValForm.record(this.ngModel.avId, this.ngModel.avResults.violations.length);\n\n      // remove violation keys that are no longer falsy\n      angular.forEach(this.ngModel.$error, function(value, key) {\n\n        if (_.indexOf(validationKeys, key) === -1 && key.lastIndexOf('av-', 0) === 0) {\n          self.ngModel.$setValidity(key, true);\n        }\n      });\n    };\n\n    this.updateView = function() {\n      if (this.ngModel.$dirty || $scope.avValShow) {\n        avValAdapter.element($element, this.ngModel, this.ngModel.avResults.isValid);\n        avValAdapter.message($element, this.ngModel);\n      }\n    };\n\n    this.validate = function(value) {\n\n      $log.info('validating value [' + value + ']');\n\n      var rulesKey = self.avValForm.rulesKey;\n      var results = avVal.validate(rulesKey, $element, value, self.rule);\n\n      // validate function is called within the context of angular so fn.call and set the context\n      // to \"this\"\n      self.updateModel.call(self, results);\n      self.updateView.call(self);\n\n      return results;\n    };\n\n    this.validateModel = function(value) {\n\n      self.validate(value, true);\n      return value;\n\n    };\n\n    this.validateView = function(value) {\n\n      var results = self.validate(value);\n\n      if (self.avValForm.avValInvalid || self.avValInvalid) {\n        // allows invalid data from view to update model for dirty saving\n        return value;\n      }\n\n      // prevent invalid data from view to update model\n      return results.isValid ? value : undefined;\n\n    };\n\n    this.onDebounce = function() {\n\n      var value = $element.val().trim();\n\n      if (this.isCheckbox()) {\n        this.ngModel.$setViewValue($element[0].checked);\n      } else if (this.isRadio()) {\n        this.ngModel.$setViewValue($attrs.value);\n      }else {\n        this.ngModel.$setViewValue(value);\n      }\n\n    };\n\n    this.isRadio = function() {\n      return $element.is('input') && $attrs.type === 'radio';\n    };\n\n    this.isCheckbox = function() {\n      return $element.is('input') && $attrs.type === 'checkbox';\n    };\n\n    this.reset = function() {\n\n      var violations = this.ngModel.avResults.violations;\n      violations.splice(0, violations.length);\n\n      avValAdapter.message($element, this.ngModel);\n      avValAdapter.reset($element);\n\n    };\n\n    this.event = function(event, avValDebounce) {\n\n      $element.unbind('input');\n\n      var debounce;\n\n      $element.on(event, function() {\n\n        // https://github.com/angular/angular.js/blob/v1.2.27/src/ng/directive/input.js#L508\n        if ($sniffer.msie <= 11 && (event || noEvent).type === 'input' && $element[0].placeholder !== placeholder) {\n          placeholder = $element[0].placeholder;\n          return;\n        }\n\n        $timeout.cancel(debounce);\n        debounce = $timeout(function() {\n          $scope.$apply(function() {\n            self.onDebounce();\n          });\n        }, avValDebounce);\n\n      });\n\n    };\n\n  });\n\n  // Events:\n  //\n  //  click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown\n  //  keyup keypress submit focus blur copy cut paste\n  availity.ui.directive('avValField', function($log, $timeout, avVal, avValAdapter, AV_VAL) {\n    return {\n      restrict: 'A',\n      controller: 'AvValFieldController',\n      require: ['^avValForm', 'ngModel', 'avValField'],\n      scope: {\n        avValDebounce: '@?',\n        avValOn: '@?',\n        avValShow: '=?'\n      },\n      link: function(scope, element, attrs, controllers) {\n\n        var rule = attrs.avValField;\n        var avValForm = controllers[0];\n        var ngModel = controllers[1];\n        var avValField = controllers[2];\n\n        var avValOn = scope.avValOn || avValForm.avValOn || 'input';\n\n        if (!ngModel && !rule) {\n          $log.error('avValField requires ngModel and a validation rule to run.');\n          return;\n        }\n\n        // Allows fields to update with invalid data for dirty form saving\n        avValField.avValInvalid = attrs.avValInvalid || false;\n\n        // CACHE THE MODEL\n        avValField.setNgModel(ngModel);\n\n        avValField.avValForm(avValForm);\n\n        avValField.setRule(rule);\n\n        avValField.createId();\n\n        // DEBOUNCE\n        var avValDebounce = parseInt(scope.avValDebounce || (avValForm.avValDebounce || AV_VAL.DEBOUNCE), 10);\n        avValDebounce = _.isNumber(avValDebounce) ? avValDebounce : AV_VAL.DEBOUNCE;\n\n        var debounceAllowed = !avValField.isRadio() && !avValField.isCheckbox() && avValOn !== 'blur';\n\n        if (!debounceAllowed) {\n          avValDebounce = 0;\n        }\n\n        // EVENT LISTENER\n        avValField.event(avValOn, avValDebounce);\n\n        // (view to model)\n        ngModel.$parsers.push(avValField.validateView);\n\n        // (model to view) - added to beginning of array because formatters\n        // are processed in reverse order thus allowing the model to be transformed\n        // before the validation framework check for validity.\n        ngModel.$formatters.unshift(avValField.validateModel);\n\n        scope.$on(AV_VAL.EVENTS.REVALIDATE, function() {\n          avValField.validate(ngModel.$viewValue);\n        });\n\n        // SUBMITTED EVENT\n        scope.$on(AV_VAL.EVENTS.SUBMITTED, function() {\n          ngModel.$dirty = true;\n          avValField.validate(ngModel.$viewValue);\n        });\n\n        // - Removes all errors on page,\n        // - does not reset view or model values.  This is to be handled by the app.\n        scope.$on(AV_VAL.EVENTS.RESET, function() {\n          avValField.reset();\n        });\n\n        scope.$on('$destroy', function() {\n          avValForm.unrecord(ngModel.avId);\n        });\n\n      }\n    };\n  });\n\n\n})(window);\n\n// Source: /lib/ui/popover/popover.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.provider('avPopoverConfig', function() {\n\n    var config = {\n      showOnLoadHideDelay: 10000\n    };\n\n    this.set = function(options) {\n      angular.extend(config, options);\n    };\n\n    this.$get = function() {\n      return angular.copy(config);\n    };\n  });\n\n  availity.ui.constant('AV_POPOVER', {\n    NAME: 'bs.popover'\n  });\n\n  availity.ui.controller('AvPopoverController', function($element, $scope, AV_POPOVER, $timeout, avPopoverConfig) {\n    this.options = angular.extend({}, avPopoverConfig);\n\n    this.listeners = function() {\n\n      var self = this;\n\n      angular.forEach(['show', 'shown', 'hide', 'hidden'], function(name) {\n        $element.on(name + '.bs.popover', function(ev) {\n          $scope.$emit('av:popover:' + name, ev);\n        });\n      });\n\n      $scope.$on('destroy', function() {\n        self.destroy();\n      });\n    };\n\n    this.plugin = function() {\n      return $element.data(AV_POPOVER.NAME);\n    };\n\n    this.show = function() {\n      $element.popover('show');\n    };\n\n    this.hide = function() {\n      $element.popover('hide');\n    };\n\n    this.toggle = function() {\n      $element.popover('toggle');\n    };\n\n    this.destroy = function() {\n      $element.popover('destroy');\n    };\n\n\n    this.init = function() {\n\n      this.listeners();\n\n      if ($scope.show) {\n\n        this.show();\n\n        if ($scope.delay && $scope.delay.hide) {\n          $timeout(this.hide, $scope.delay.hide, false);\n          return;\n        }\n        // If no delay is found or cannot be parsed, set a default timeout so that the popover doesn't stick around forever\n        $timeout(this.hide, this.options.showDelay, false);\n      }\n    };\n\n\n  });\n\n  availity.ui.directive('avPopover', function() {\n    return {\n      restrict: 'A',\n      controller: 'AvPopoverController',\n      scope: {\n        show: '=',\n        delay: '='\n      },\n      link: function(scope, element, attrs, avPopover) {\n\n        var options = {};\n\n        scope.$evalAsync(function() {\n          element.popover(angular.extend({}, options, {\n            html: true\n          }));\n          avPopover.init();\n        });\n      }\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/validation/container.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('avValContainerController', function($scope, $timeout) {\n\n    this.message = function(ngModel) {\n\n      var message = null;\n      if (ngModel.avResults.violations.length && ngModel.avResults.violations[0].message) {\n        message = ngModel.avResults.violations[0].message;\n      }else {\n        message = null;\n      }\n\n      // $timeout is needed to update the UI from $broadcast events\n      $timeout(function() {\n        $scope.messages.message = message;\n      });\n\n    };\n\n  });\n\n  availity.ui.directive('avValContainer', function() {\n    return {\n      restrict: 'A',\n      controller: 'avValContainerController',\n      template: '<p class=\"help-block\" data-ng-bind-html=\"messages.message\"></p>',\n      replace: true,\n      scope: {\n\n      },\n      link: function(scope) {\n        scope.messages = _.extend({}, scope.messages, { message: null, id: null });\n      }\n    };\n  });\n\n\n})(window);\n\n// Source: /lib/ui/validation/adapter-bootstrap.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BOOTSTRAP_ADAPTER', {\n    CLASSES: {\n      SUCCESS: 'has-success',\n      WARNING: 'has-warning',\n      ERROR: 'has-error',\n      FEEDBACK: 'has-feedback',\n      HELP: 'help-block',\n      FORM_GROUP: '.form-group:first',\n      NAVBAR: 'navbar-fixed-top'\n    },\n    SELECTORS: {\n      CONTAINER: 'container-id',\n      DATA_CONTAINER: 'data-container-id'\n    },\n    CONTROLLER: '$avValContainerController'\n  });\n\n  availity.ui.factory('avValBootstrapAdapter', function(AV_BOOTSTRAP_ADAPTER, $timeout, $log) {\n\n    return {\n\n      element: function(element, ngModel) {\n        if (ngModel.$valid) {\n          element.parents(AV_BOOTSTRAP_ADAPTER.CLASSES.FORM_GROUP).removeClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n        }else {\n          element.parents(AV_BOOTSTRAP_ADAPTER.CLASSES.FORM_GROUP).addClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n        }\n      },\n\n      reset: function(element) {\n        element.parents(AV_BOOTSTRAP_ADAPTER.CLASSES.FORM_GROUP).removeClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n      },\n\n      message: function(element, ngModel) {\n\n        var selector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.HELP\n        ].join('');\n\n        var $el = $(element);\n\n        var target = $el.attr(AV_BOOTSTRAP_ADAPTER.SELECTORS.CONTAINER);\n        target = target || $el.attr(AV_BOOTSTRAP_ADAPTER.SELECTORS.DATA_CONTAINER);\n        // default to siblings\n        target = target ? $('#' + target) : $el.siblings(selector);\n\n        if (target.length === 0) {\n          $log.warn('avValBootstrapAdapter could not find validation container for {0}', [element]);\n          return;\n        }\n\n        var el = target[0];\n        $el = angular.element(el);\n        var avValModel = $el.data(AV_BOOTSTRAP_ADAPTER.CONTROLLER); // get the av val message controller\n        if (avValModel) {\n          avValModel.message(ngModel);\n        }\n      },\n\n      scroll: function(form) {\n\n        // Bootstrap fixed navbars causes bad scroll-to offsets so find them all\n        var navbarSelector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.NAVBAR\n        ].join('');\n\n        // Add up all the heights to find the true offset\n        var offset = 0;\n        $(navbarSelector).each(function() {\n          offset += $(this).outerHeight();\n        });\n\n        var selector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR,\n          ':first'\n        ].join('');\n\n        var $target = $(form).find(selector);\n        $timeout(function() {\n          // scroll to offset top of first error minus the offset of the navbars\n          $('body, html').animate({scrollTop: $target.offset().top - offset}, 'fast');\n        }, 0, false);\n      }\n    };\n  });\n\n\n})(window);\n\n// Source: /lib/ui/validation/adapter.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_VAL_ADAPTER', {\n    DEFAULT: 'avValBootstrapAdapter'\n  });\n\n  availity.ui.provider('avValAdapter', function() {\n\n    var that = this;\n\n    this.setAdapter = function(adapter) {\n      this.adapter = adapter;\n    };\n\n    this.$get = function(AV_VAL_ADAPTER, $injector) {\n\n      var Adapter = function() {\n        var adapterName = that.adapter || AV_VAL_ADAPTER.DEFAULT;\n        this.adapter = $injector.get(adapterName);\n      };\n\n      var proto = Adapter.prototype;\n\n      proto.element = function(element, ngModel) {\n        this.adapter.element(element, ngModel);\n      };\n\n      proto.reset = function(element) {\n        this.adapter.reset(element);\n      };\n\n      proto.message = function(element, ngModel) {\n        this.adapter.message(element, ngModel);\n      };\n\n      proto.scroll = function(form) {\n        this.adapter.scroll(form);\n      };\n\n      return new Adapter();\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/dropdown/dropdown.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.provider('avDropdownConfig', function() {\n\n    var config = {\n      closeOnResize: true,\n      dropdownAutoWidth: true,\n      minimumResultsForSearch: 5,\n      theme: 'bootstrap'\n    };\n\n    this.set = function(options) {\n      angular.extend(config, options);\n    };\n\n    this.$get = function() {\n      return angular.copy(config);\n    };\n\n  });\n\n  availity.ui.constant('AV_DROPDOWN', {\n    OPTIONS: [\n      'width',\n      'minimumInputLength',\n      'maximumInputLength',\n      'minimumResultsForSearch',\n      'maximumSelectionSize',\n      'separator',\n      'allowClear',\n      'multiple',\n      'closeOnSelect',\n      'openOnEnter',\n      'id',\n      'matcher',\n      'sorter',\n      'templateSelection',\n      'templateResult',\n      'formatResultCssClass',\n      'formatNoMatches',\n      'formatSearching',\n      'formatAjaxError',\n      'formatInputTooShort',\n      'formatInputTooLong',\n      'formatSelectionTooBig',\n      'formatLoadMore',\n      'createTag',\n      'createSearchChoicePosition',\n      'initSelection',\n      'tokenizer',\n      'tokenSeparators',\n      'query',\n      'ajax',\n      'data',\n      'tags',\n      'containerCss',\n      'containerCssClass',\n      'dropdownCss',\n      'dropdownCssClass',\n      'dropdownAutoWidth',\n      'adaptContainerCssClass',\n      'adaptDropdownCssClass',\n      'escapeMarkup',\n      'selectOnClose',\n      'loadMorePadding',\n      'nextSearchTerm'\n    ]\n  });\n\n\n  availity.ui.controller('AvDropdownController', function($element, $attrs, AV_UI, AV_DROPDOWN, avDropdownConfig, $log, $scope) {\n\n    var self = this;\n    this.options = {};\n    this.match = null;\n    this.ngModel = null;\n\n    this.init = function() {\n\n      self.options = angular.extend({}, avDropdownConfig);\n\n      _.forEach($attrs, function(value, key) {\n        if (_.contains(AV_DROPDOWN.OPTIONS, key.replace('data-', ''))) {\n          self.options[key] = $scope.$eval(value);\n        }\n      });\n\n      self.multiple = angular.isDefined($attrs.multiple);\n\n    };\n\n\n  });\n\n  availity.ui.directive('avDropdown', function($timeout, $log, $window) {\n\n    return {\n      restrict: 'AE',\n      require: ['ngModel', 'avDropdown'],\n      controller: 'AvDropdownController',\n      link: function(scope, element, attrs, controllers) {\n\n        var avDropdown = controllers[1];\n        avDropdown.init();\n\n        var win = angular.element($window);\n\n        win.bind('resize', function() {\n          element.select2('close');\n        });\n\n        scope.$watch(attrs.ngModel, function(newVal, oldVal) {\n\n          if (newVal === oldVal) {\n            return;\n          }\n\n          $timeout(function() {\n            element.trigger('change.select2');\n          });\n\n        });\n\n        scope.$on('destroy', function() {\n          element.select2('destroy');\n        });\n\n        scope.$evalAsync(function() {\n          element.select2(avDropdown.options);\n        });\n      }\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/datepicker/datepicker.js\n/**\n * Inspiration https://github.com/mgcrea/angular-strap/blob/v0.7.8/src/directives/datepicker.js\n */\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.provider('avDatepickerConfig', function() {\n\n    var config = {\n      autoclose: true,\n      todayHighlight: true,\n      format: 'mm/dd/yyyy',\n      forceParse: false\n    };\n\n    this.set = function(options) {\n      angular.extend(config, options);\n    };\n\n    this.$get = function() {\n      return angular.copy(config);\n    };\n\n  });\n\n  // Options: http://bootstrap-datepicker.readthedocs.org/en/latest/options.html\n  availity.ui.constant('AV_DATEPICKER', {\n    CONTROLLER: '$ngModelController',\n    ADD_ON_SELECTOR: '[data-toggle=\"datepicker\"]',\n    OPTIONS: [\n      'autoclose',\n      'beforeShowDay',\n      'beforeShowMonth',\n      'calendarWeeks',\n      'clearBtn',\n      'toggleActive',\n      'container',\n      'daysOfWeekDisabled',\n      'datesDisabled',\n      'defaultViewDate',\n      'endDate',\n      'forceParse',\n      'format',\n      'inputs',\n      'keyboardNavigation',\n      'language',\n      'minViewMode',\n      'multidate',\n      'multidateSeparator',\n      'orientation',\n      'startDate',\n      'startView',\n      'todayBtn',\n      'todayHighlight',\n      'weekStart',\n      'showOnFocus',\n      'disableTouchKeyboard',\n      'enableOnReadonly',\n      'modelFormat'\n    ],\n    DEFAULTS: {\n      MODELFORMAT: 'YYYY-MM-DD'\n    }\n  });\n\n  availity.ui.controller('AvDatepickerController', function($element, $attrs, AV_DATEPICKER, $scope, avDatepickerConfig) {\n\n    var self = this;\n    this.options = {};\n\n    this.setValue = function() {\n\n      var viewValue = self.ngModel.$viewValue;\n      var plugin = this.plugin();\n\n      if (!viewValue || !plugin) {\n        return;\n      }\n\n      plugin.setDate(viewValue);\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.findModel = function() {\n\n      var ngModel = null;\n\n      var $input = $element.find('input:first').andSelf();\n      if ($input.length) {\n        ngModel = $input.data(AV_DATEPICKER.CONTROLLER);\n        this.setNgModel(ngModel);\n      }\n\n      return ngModel;\n    };\n\n    this.modelToView = function(isoWrap) {\n      var viewValue = $.fn.datepicker.DPGlobal.formatDate(isoWrap, self.options.format, 'en');\n      return viewValue;\n    };\n\n    this.wrapIsoDate = function() {\n\n      var date = self.ngModel.$modelValue;\n      var isoWrap;\n\n      if (date !== undefined && date !== null) {\n        var m = moment(date);\n        isoWrap = m.isValid() ? m.toDate() : null;\n      }\n\n      return isoWrap;\n    };\n\n    this.viewToModel = function() {\n\n      var plugin = self.plugin();\n\n      if (!plugin) {\n        return null;\n      }\n\n      var format = $.fn.datepicker.DPGlobal.parseFormat(self.options.format);\n      var utcDate = $.fn.datepicker.DPGlobal.parseDate(self.ngModel.$viewValue, format, 'en');\n\n      // jscs: disable\n      var localDate = plugin._utc_to_local(utcDate);\n      // jscs: enable\n\n      if (self.options.modelFormat && localDate) {\n        localDate = moment(localDate).format(self.options.modelFormat);\n      }\n\n      return localDate;\n    };\n\n    this.init = function() {\n\n      self.options = angular.extend({}, avDatepickerConfig);\n\n      _.forEach($attrs, function(value, key) {\n        if (_.contains(AV_DATEPICKER.OPTIONS, key.replace('data-', ''))) {\n          self.options[key] = $scope.$eval(value);\n        }\n      });\n\n      if (self.options.modelFormat && self.options.modelFormat.toLowerCase() === 'default') {\n        self.options.modelFormat = AV_DATEPICKER.DEFAULTS.MODELFORMAT;\n      }\n    };\n\n    this.plugin = function() {\n      return $element.data('datepicker');\n    };\n\n    this.destroy = function() {\n      var plugin = this.plugin();\n      if (plugin) {\n        plugin.remove();\n        $element.data('datepicker', null);\n      }\n    };\n\n    this.hide = function() {\n      var plugin = this.plugin();\n      if (plugin) {\n        plugin.hide();\n      }\n    };\n  });\n\n  availity.ui.directive('avDatepicker', function($window, $log, AV_DATEPICKER) {\n    return {\n      restrict: 'A',\n      require: ['ngModel', 'avDatepicker'],\n      controller: 'AvDatepickerController',\n      link: function(scope, element, attrs, controllers) {\n\n        var ngModel = controllers[0];\n        var avDatepicker = controllers[1];\n\n        if (!ngModel) {\n          ngModel = avDatepicker.findModel();\n          if (!ngModel) {\n            $log.error('avDatepicker requires ngModel');\n            return;\n          }\n        }\n\n        avDatepicker.init();\n        avDatepicker.setNgModel(ngModel);\n\n        element.on('changeDate', function(e) {\n          $log.info('avDatepicker changeDate {0}', [e]);\n        });\n\n        // (view to model)\n        ngModel.$parsers.push(avDatepicker.viewToModel);\n\n        // (model to view) - added to end of formatters array\n        // because they are processed in reverse order.\n        // if the model is in Date format and send to the validation framework\n        // prior to getting converted to the expected $viewValue format,\n        // the validation will fail.\n        ngModel.$formatters.push(avDatepicker.modelToView);\n        ngModel.$formatters.push(avDatepicker.wrapIsoDate);\n\n        var _$render = ngModel.$render;\n        ngModel.$render = function() {\n          _$render();\n          avDatepicker.setValue();\n        };\n\n        var win = angular.element($window);\n\n        win.bind('scroll', function() {\n          avDatepicker.hide();\n        });\n\n        var target = element.siblings(AV_DATEPICKER.ADD_ON_SELECTOR);\n        if (target.length) {\n          target.on('click.datepicker', function() {\n            if (!element.prop('disabled')) { // Hack check for IE 8\n              element.focus();\n            }\n          });\n        }\n\n        scope.$on('destroy', function() {\n          avDatepicker.destroy();\n          if (target.length) {\n            target.off('click.datepicker');\n          }\n        });\n\n        scope.$evalAsync(function() {\n          element.datepicker(avDatepicker.options);\n        });\n      }\n    };\n  });\n})(window);\n\n// Source: /lib/ui/idle/idle-notifier.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_UI_IDLE', {\n    EVENTS: {\n      OK: 'mousedown.av.idle.notifier'\n    },\n    TEMPLATES: {\n      BASE: 'ui/idle/idle-tpl.html',\n      SESSION: 'ui/idle/idle-session-tpl.html',\n      WARNING: 'ui/idle/idle-warning-tpl.html'\n    }\n  });\n\n  availity.ui.provider('avIdleNotifier', function() {\n\n    this.$get = function(AV_IDLE, AV_UI_IDLE, $rootScope, AvModal, $document, $timeout) {\n\n      var $scope;\n\n      var AvIdleNotifier = function() {\n        this.listeners = [];\n        this.modal = null;\n      };\n\n      var proto = AvIdleNotifier.prototype;\n\n      proto.init = function() {\n\n        $scope = $rootScope.$new(true);\n        $scope.idle = {};\n\n        this.initListeners();\n      };\n\n      proto.initListeners = function() {\n\n        var self = this;\n        var listener = null;\n\n        // ACTIVE IDLING\n        listener = $rootScope.$on(AV_IDLE.EVENTS.IDLE_ACTIVE, function() {\n          self.showWarning();\n        });\n        this.listeners.push(listener);\n\n        // INACTIVE IDLING\n        listener = $rootScope.$on(AV_IDLE.EVENTS.IDLE_INACTIVE, function() {\n          self.hideWarning();\n        });\n        this.listeners.push(listener);\n\n        // SESSION TIMEOUT OUT\n        listener = $rootScope.$on(AV_IDLE.EVENTS.SESSION_TIMEOUT_ACTIVE, function() {\n          self.showSession();\n        });\n        this.listeners.push(listener);\n\n      };\n\n      proto.destroyListeners = function() {\n        // turn off each listener @see http://stackoverflow.com/a/14898795\n        _.each(this.listeners, function(listener) {\n          listener();\n        });\n      };\n\n      proto.showWarning = function() {\n\n        var self = this;\n\n        if (this.modal !== null) {\n          return;\n        }\n\n        $scope = $rootScope.$new(true);\n        $scope.idle = {};\n        $scope.idle.template = AV_UI_IDLE.TEMPLATES.WARNING;\n\n        this.modal = new AvModal({\n          show: true,\n          scope: $scope,\n          backdrop: 'static',\n          templateUrl: AV_UI_IDLE.TEMPLATES.BASE\n        });\n\n        $document.find('body').on(AV_UI_IDLE.EVENTS.OK, function() {\n          self.hideWarning();\n        });\n\n      };\n\n      proto.hideWarning = function() {\n\n        if (this.modal) {\n          this.disableBackDrop();\n          this.modal.hide();\n        }\n\n        this.modal = null;\n      };\n\n      proto.disableBackDrop = function() {\n        $document.find('body').off(AV_UI_IDLE.EVENTS.OK);\n      };\n\n      proto.showSession = function() {\n        var self = this;\n        this.disableBackDrop();\n\n        $timeout(function() {\n          $scope.idle.template = AV_UI_IDLE.TEMPLATES.SESSION;\n          $scope.idle.onSessionTimeout = _.bind(self.onSessionTimeout, self);\n        }, 0, true);\n\n      };\n\n      proto.onSessionTimeout = function() {\n        $rootScope.$broadcast(AV_IDLE.EVENTS.SESSION_TIMEOUT_REDIRECT);\n      };\n\n      return new AvIdleNotifier();\n\n    };\n\n  });\n\n  availity.ui.run(function(avIdleNotifier) {\n    avIdleNotifier.init();\n  });\n\n})(window);\n\n// Source: /lib/ui/mask/mask.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_MASK', {\n    NAME: 'inputmask',\n    DEFAULTS: {\n      date: '99/99/9999',\n      phone: '(999) 999-9999',\n      SSN: '999-99-9999'\n    }\n  });\n\n  availity.ui.directive('avMask', function($window, $log, AV_MASK) {\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function(scope, element, attrs) {\n\n        var maskType = AV_MASK.DEFAULTS[attrs.avMask];\n        if (!maskType) {\n          maskType = attrs.avMask;\n        }\n\n        scope.$evalAsync(function() {\n          element.inputmask(maskType);\n        });\n\n        scope.$on('$destroy', function() {\n          element.inputmask('remove');\n        });\n      }\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/permissions/has-permission.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('AvHasPermissionController', function($element) {\n\n    this.onSuccess = function(isAuthorized) {\n      if (isAuthorized) {\n        $element.removeClass('ng-hide');\n        $element.show();\n      } else {\n        $element.remove();\n      }\n    };\n\n    this.onError = function() {\n      $element.remove();\n    };\n\n  });\n\n  availity.ui.directive('avHasPermission', function(avUserAuthorizations) {\n    return {\n      restrict: 'EA',\n      controller: 'AvHasPermissionController',\n      require: ['avHasPermission'],\n      link: function($scope, $element, $attr, controllers) {\n\n        var avHasPermission = controllers[0];\n\n        $element.hide();\n\n        $scope.$watch($attr.avHasPermission, function(_permissions) {\n\n          var permissions = _permissions;\n\n          if (!angular.isArray(permissions)) {\n            permissions = _.words('' + permissions);\n          }\n\n          avUserAuthorizations.isAnyAuthorized(permissions).then(avHasPermission.onSuccess, avHasPermission.onError);\n        });\n      }\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/analytics/analytics.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.directive('avAnalytics', function() {\n    return {\n      scope: {\n        options: '=avAnalytics'\n      },\n      controller: function($scope) {\n        this.getOptions = function() {\n          return $scope.options;\n        };\n      }\n    };\n  });\n\n  availity.ui.controller('AvAnalyticsController', function(avAnalyticsUtils, avAnalytics) {\n\n    this.onEvent = function(event, element, options) {\n\n      // convert the directive attributes into object with properties with sane defaults\n      var properties = angular.extend(\n        {\n          level: 'info'\n        },\n        options,\n        {\n          event: event.type\n        }\n      );\n\n      // If an external link is detected\n      if (avAnalyticsUtils.isExternalLink(properties)) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      var promise = avAnalytics.trackEvent(properties);\n      promise.finally(function() {\n        if (avAnalyticsUtils.isExternalLink(properties)) {\n          document.location = element.attr('href');\n        }\n      });\n    };\n  });\n\n  availity.ui.directive('avAnalyticsOn', function(AV_ANALYTICS, avAnalyticsUtils) {\n    return {\n      restrict: 'A',\n      controller: 'AvAnalyticsController',\n      require: ['avAnalyticsOn', '?^avAnalytics'],\n      link: function(scope, element, attrs, controllers) {\n        var childCtrl = controllers[0];\n        var parentCtrl = {};\n        var parentOptions = {};\n\n        if (controllers[1])  {\n          parentCtrl = controllers[1];\n          parentOptions = parentCtrl.getOptions();\n        }\n\n        var options = angular.extend(\n          {},\n          parentOptions,\n          avAnalyticsUtils.getProperties(attrs)\n        );\n\n        var eventType = attrs.avAnalyticsOn || AV_ANALYTICS.EVENTS.DEFAULT;\n\n        element.on(eventType, function(event) {\n          childCtrl.onEvent(event, element, options);\n        });\n      }\n    };\n  });\n})(window);\n\n// Source: /lib/ui/placeholder/placeholder.js\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.requires.push('ng.shims.placeholder');\n\n  availity.ui.config(function($provide) {\n\n    $provide.decorator('placeholderDirective', ['$delegate', '$log', function($delegate, $log) {\n\n      var directive = $delegate[0];\n      var originalLink = directive.link;\n\n      var newLink = function(scope, element, attrs) {\n\n        if (originalLink && _.contains(_.keys(attrs), 'avMask')) {\n          $log.info('placeholder shim not running on an element due to avMask on same element');\n          return;\n        }else if (originalLink) {\n          originalLink.apply(this, arguments);\n        }\n      };\n\n      directive.compile = function() {\n        return newLink;\n      };\n\n      return $delegate;\n    }]);\n\n  });\n})(window);\n\n// Source: /lib/ui/breadcrumbs/breadcrumbs.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BREADCRUMBS', {\n\n    TEMPLATE: 'ui/breadcrumbs/breadcrumbs-tpl.html'\n  });\n\n  function AvBreadcrumbsController($state) {\n\n    this.getBreadcrumb = function(breadcrumbs, state) {\n      if (!state || !state.data) {\n        return;\n      }\n\n      var breadcrumb = state.data.breadcrumb;\n      if (!breadcrumb) {\n        return;\n      }\n\n      if (breadcrumb.parent) {\n        var parentState = $state.get(breadcrumb.parent);\n\n        if (parentState) {\n          this.getBreadcrumb(breadcrumbs, parentState);\n        }\n      }\n      breadcrumb.state = state.name;\n      breadcrumbs.push(breadcrumb);\n    };\n\n    this.getBreadcrumbs = function() {\n      var breadcrumbs = [];\n      this.getBreadcrumb(breadcrumbs, $state.current);\n      return breadcrumbs;\n    };\n\n  }\n\n  AvBreadcrumbsController.$inject = ['$state'];\n  availity.ui.controller('AvBreadcrumbsController', AvBreadcrumbsController);\n\n  function avBreadcrumbs(AV_BREADCRUMBS) {\n\n    return {\n      restrict: 'EA',\n      replace: true,\n      templateUrl: AV_BREADCRUMBS.TEMPLATE,\n      controller: 'AvBreadcrumbsController',\n      link: function(scope, element, attrs, avBreadcrumbsCtrl) {\n\n        scope.breadcrumbs = avBreadcrumbsCtrl.getBreadcrumbs();\n\n        scope.$on('$stateChangeSuccess', function() {\n          scope.breadcrumbs = avBreadcrumbsCtrl.getBreadcrumbs();\n        });\n      }\n    };\n  }\n\n  avBreadcrumbs.$inject = ['AV_BREADCRUMBS'];\n  availity.ui.directive('avBreadcrumbs', avBreadcrumbs);\n\n})(window);\n\n// Source: /lib/ui/filters/approximate.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.filter('avApproximate', function() {\n\n    var pow = Math.pow;\n    var floor = Math.floor;\n    var abs = Math.abs;\n    var log = Math.log;\n\n    function round(number, precision) {\n\n      var prec = pow(10, precision);\n      return Math.round(number * prec) / prec;\n\n    }\n\n    return function(number, _precision) {\n\n      var precision = _precision || 0;\n      var base = floor(log(abs(number)) / log(1000));\n      var unit = 'kMGTPE'[base - 1];\n      return unit ? round(number / pow(1000, base), precision) + unit : (number || 0);\n\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/badge/badge.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BADGE', {\n    COLOR: null,\n    DEFAULT_CLASS: 'badge',\n    SHOW_WHEN_ZERO: false,\n    TEMPLATE: 'ui/badge/badge-tpl.html'\n  });\n\n  function badgeDirective(AV_BADGE) {\n\n    return {\n      scope: {\n        color: '@',\n        count: '=avBadge',\n        showWhenZero: '@'\n      },\n      templateUrl: AV_BADGE.TEMPLATE,\n      link: function(scope, element) {\n\n        scope.color = scope.color || AV_BADGE.COLOR;\n        scope.showWhenZero = scope.showWhenZero || AV_BADGE.SHOW_WHEN_ZERO;\n\n        var classes = [];\n        classes.push(AV_BADGE.DEFAULT_CLASS);\n        if (scope.color) {\n          classes.push(scope.color);\n        }\n\n        element.addClass(classes.join(' '));\n      }\n    };\n  }\n\n  badgeDirective.$inject = ['AV_BADGE'];\n  availity.ui.directive('avBadge', badgeDirective);\n\n})(window);\n\n// Source: /lib/ui/labels/removable-label.js\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_REMOVABLE_LABEL', {\n    TEMPLATE: 'ui/labels/removable-label-tpl.html'\n  });\n\n  availity.ui.directive('avRemovableLabel', function(AV_REMOVABLE_LABEL) {\n    return {\n      templateUrl: AV_REMOVABLE_LABEL.TEMPLATE,\n      transclude: true,\n      scope: {\n        removeValue: '=',\n        onRemove: '&'\n      },\n      link: function(scope, element, attrs) {\n        element.addClass('label-remove');\n        scope.removeLabel = function() {\n          if (!attrs.disabled) {\n            scope.onRemove()(scope.removeValue);\n          }\n        };\n      }\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/animation/loader.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_LOADER', {\n\n    TEMPLATES: {\n      LOADER: 'ui/animation/loader-tpl.html'\n    }\n\n  });\n\n  availity.ui.controller('AvLoaderController', function($element) {\n\n    var self = this;\n    var active;\n\n    this.start = function() {\n      active = true;\n      this.animate();\n    };\n\n    this.animate = function() {\n\n      $element\n        .find('.loading-bullet')\n        .velocity('transition.slideRightIn', { stagger: 250 })\n        .velocity({ opacity: 0 }, {\n          delay: 750,\n          duration: 500,\n          complete: function() {\n            if (active) {\n              setTimeout(function() {self.animate();}, 500);\n            } else {\n              self.endAnimation();\n            }\n          }\n        });\n\n    };\n\n    this.endAnimation = function() {\n      $element.find('.loading-bullet').velocity('stop', true);\n      $element.removeData();\n    };\n\n    this.stop = function() {\n      active = false;\n    };\n\n  });\n\n  availity.ui.directive('avLoader', function(AV_LOADER) {\n    return {\n      restrict: 'AE',\n      replace: true,\n      controller: 'AvLoaderController',\n      require: 'avLoader',\n      templateUrl: AV_LOADER.TEMPLATES.LOADER,\n      link: function(scope, element, attr, avLoader) {\n\n        if (!attr.delay) {\n          avLoader.start();\n        }\n\n        scope.$on('$destroy', function() {\n          avLoader.stop();\n        });\n\n      }\n    };\n  });\n\n})(window);\n\n// Source: /lib/ui/block/block.js\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BLOCK', {\n    TEMPLATES: {\n      BLOCK: 'ui/block/block-tpl.html'\n    }\n  });\n\n  var getLoaderController = function(blockId) {\n    var el = $('[data-block-ui=\"' + blockId + '\"]') || $('[block-ui=\"' + blockId + '\"]');\n    if (el) {\n      return el.find('[data-av-loader]').controller('avLoader');\n    }\n  };\n\n  var triggerLoaderController = function(id, instance, fn) {\n\n    var controller = instance.loaderController;\n    if (!controller) {\n      controller = getLoaderController(id);\n      instance.loaderController = controller;\n    }\n    if (controller && _.isFunction(controller[fn])) {\n      controller[fn]();\n    }\n\n  };\n\n  var triggerInstance = function(id, instance, origFn, loaderFn) {\n    triggerLoaderController(id, instance, loaderFn);\n    origFn.apply(instance);\n  };\n\n  var modifyBlockInstances = function(id, instance) {\n\n    var origStartFn = instance.start;\n    var origStopFn = instance.stop;\n\n    instance.start = function() {\n      triggerInstance(id, instance, origStartFn, 'start');\n    };\n\n    instance.stop = function() {\n      triggerInstance(id, instance, origStopFn, 'stop');\n    };\n\n    instance.startLoader = function() {\n      triggerLoaderController(id, instance, 'start');\n    };\n\n    instance.avModifications = true;\n  };\n\n  availity.ui.run(function($injector, $log, AV_BLOCK) {\n\n    try {\n\n      var blockUIConfig = $injector.get('blockUIConfig');\n      var blockUI = $injector.get('blockUI');\n      blockUIConfig.autoBlock = false;\n      blockUIConfig.delay = 0;\n      blockUIConfig.templateUrl = AV_BLOCK.TEMPLATES.BLOCK;\n\n      var origGetFn = blockUI.instances.get;\n      blockUI.instances.get = function(id) {\n        var instance = origGetFn(id);\n        if (!instance.avModifications) {\n          modifyBlockInstances(id, instance);\n        }\n        return instance;\n      };\n\n    } catch (e) {\n      $log.warn('blockUI is required to use av block.');\n    }\n  });\n\n})(window);\n\n// Source: /lib/ui/block/block-directive.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // Helper directive that hooks into block-ui's start-up lifecycle and starts the loader\n  availity.ui.directive('avBlockUi', function(blockUI) {\n\n    return {\n      restrict: 'A',\n      link: function($scope, $element, $attrs) {\n\n        var blockId = $attrs.avBlockUi;\n        var blockCount = $attrs.blockCount;\n        var instance = blockUI.instances.get(blockId);\n        if (blockCount > 0) {\n          instance.startLoader();\n        }\n      }\n    };\n\n  });\n\n})(window);\n\n// Source: /lib/ui/tabs/tabs.js\n\n// Inspired by https://github.com/angular-ui/bootstrap/blob/master/src/tabs/tabs.js\n\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_TABS', {\n    TEMPLATES: {\n      TABS: 'ui/tabs/tabs-tpl.html',\n      TAB: 'ui/tabs/tab-tpl.html'\n    }\n  });\n\n  function TabsController($scope) {\n\n    var self = this;\n\n    $scope.tabs = [];\n    self.tabs = $scope.tabs;\n\n    this.addTab = function(tab) {\n      self.tabs.push(tab);\n\n      if (self.tabs.length === 1) {\n        tab.active = true;\n      } else if (tab.active) {\n        self.selectTab(tab);\n      } else {\n        tab.active = false;\n      }\n    };\n\n    this.removeTab = function(tab) {\n      var index = self.tabs.indexOf(tab);\n\n      if (tab.active && self.tabs.length > 1) {\n        // If this is the last tab, select the previous tab. else, the next tab.\n        var newActiveIndex = index === self.tabs.length - 1 ? index - 1 : index + 1;\n        self.selectTab(self.tabs[newActiveIndex]);\n      }\n\n      self.tabs.splice(index, 1);\n    };\n\n    this.selectTab = function(selectedTab) {\n      angular.forEach(self.tabs, function(tab) {\n        if (tab.active && tab !== selectedTab) {\n          tab.active = false;\n          tab.onDeselect();\n        }\n      });\n\n      selectedTab.active = true;\n      selectedTab.onSelect();\n    };\n  }\n\n  TabsController.$inject = ['$scope'];\n  availity.ui.controller('AvTabsController', TabsController);\n\n  function TabsDirective(AV_TABS) {\n    return {\n      restrict: 'AE',\n      templateUrl: AV_TABS.TEMPLATES.TABS,\n      transclude: true,\n      replace: true,\n      controller: 'AvTabsController',\n      scope: true,\n      link: function(scope, element, attrs) {\n        scope.justified = !!attrs.justified;\n        scope.tabType = attrs.tabType;\n        scope.vertical = !!attrs.vertical;\n\n        if (angular.isUndefined(attrs.padContent)) {\n          scope.padContent = true;\n        }\n      }\n    };\n  }\n\n  TabsDirective.$inject = ['AV_TABS'];\n  availity.ui.directive('avTabs', TabsDirective);\n\n  function TabDirective(AV_TABS) {\n    return {\n      restrict: 'AE',\n      templateUrl: AV_TABS.TEMPLATES.TAB,\n      replace: true,\n      require: '^avTabs',\n      transclude: true,\n      scope: {\n        heading: '@',\n        template: '=',\n        templateUrl: '=',\n        onSelect: '&select',\n        onDeselect: '&deselect'\n      },\n      controller: function() {\n        // Allow avTabs to be required by other directives\n      },\n      link: function(scope, element, attrs, tabsController, transclude) {\n        scope.transcludeFn = transclude;\n\n        tabsController.addTab(scope);\n\n        scope.$on('destroy', function() {\n          tabsController.removeTab(scope);\n        });\n\n        scope.select = function() {\n          if (!scope.disabled) {\n            tabsController.selectTab(scope);\n          }\n        };\n\n        scope.$watch('active', function(active) {\n          if (active) {\n            tabsController.selectTab(scope);\n          }\n        });\n\n        if (angular.isDefined(attrs.active)) {\n          scope.active = attrs.active;\n\n          scope.$parent.$watch(attrs.active, function(active) {\n            if (active) {\n              tabsController.selectTab(scope);\n            }\n          });\n        }\n\n        if (angular.isDefined(attrs.disable)) {\n          scope.$parent.$watch(attrs.disable, function(disabled) {\n            scope.disabled = !!disabled;\n          });\n        }\n      }\n    };\n  }\n\n  TabDirective.$inject = ['AV_TABS'];\n  availity.ui.directive('avTab', TabDirective);\n\n  function TabPaneDirective(avTemplateCache, $compile) {\n    return {\n      restrict: 'AE',\n      require: '^avTabs',\n      link: function(scope, element, attrs) {\n\n        var tab = scope.$eval(attrs.avTabPane);\n\n        if (angular.isDefined(tab.template) || angular.isDefined(tab.templateUrl)) {\n          avTemplateCache.get(tab)\n          .then(function(template) {\n            element.append($compile(template)(scope));\n          });\n        } else {\n          tab.transcludeFn(tab.$parent, function(contents) {\n            angular.forEach(contents, function(node) {\n              element.append(node);\n            });\n          });\n        }\n      }\n    };\n  }\n\n  TabPaneDirective.$inject = ['avTemplateCache', '$compile'];\n  availity.ui.directive('avTabPane', TabPaneDirective);\n\n})(window);\n\n// Source: /lib/ui/scroll-pagination/scroll-pagination.js\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_SCROLL_PAGINATION', {\n    TEMPLATE: 'ui/scroll-pagination/scroll-pagination-tpl.html',\n    DEFAULT_OPTIONS: {\n      limit: 50,\n      offset: 0,\n      maxCached: 100,\n      loadMoreText: 'Load more items',\n      entryIdAttribute: 'id',\n      apiParams: {}\n    }\n  });\n\n\n  availity.ui.controller('AvScrollPaginationController', function($scope, $element, $timeout, $log, AV_SCROLL_PAGINATION, blockUI) {\n    $scope._options = {};\n    _.extend($scope._options, AV_SCROLL_PAGINATION.DEFAULT_OPTIONS, $scope.options || {});\n    $scope._options.lowOffset = $scope._options.offset;\n    $scope._options.highOffset = $scope._options.offset;\n    var self = this;\n\n    this.updateButtonVisibilityFlags = function(data) {\n      $scope.showNext = $scope._options.highOffset + data.count < data.totalCount;\n      $scope.showPrev = $scope._options.lowOffset > 0;\n    };\n\n    this.loadEntries = function(prepend) {\n      var block = blockUI.instances.get('scroll-pagination-block-' + $scope.avScrollPagination);\n      block.start();\n      var params = {};\n      _.extend(params, $scope._options.apiParams, {limit: $scope._options.limit, offset: $scope._options.offset});\n      $scope.apiResource.query({params: params}).then(function(response) {\n        var responseData = self.getResponseData(response);\n        if (responseData && responseData[$scope._options.resourceId]) {\n          self.addEntries(responseData[$scope._options.resourceId], prepend);\n        }\n        self.updateButtonVisibilityFlags(responseData);\n        block.stop();\n      }, function() {\n        $log.error('API call failed');\n        block.stop();\n      });\n    };\n\n    this.getResponseData = function(data) {\n      if (data) {\n        var result;\n        if ($scope._options.responseKey) {\n          var keys = $scope._options.responseKey.split('.');\n          var nestedData = data;\n          var noData = false;\n          _.each(keys, function(key) {\n            if (!noData) {\n              nestedData = nestedData[key];\n              if (!nestedData) {\n                noData = true;\n              }\n            }\n          });\n          result = noData ? [] : nestedData;\n        } else {\n          result = data;\n        }\n        return result;\n      }\n      return [];\n    };\n\n    this.addEntries = function(entries, prepend) {\n      var oldEntries = angular.copy($scope.entries);\n      if (prepend) {\n        $scope.entries.unshift.apply($scope.entries, entries);\n      } else {\n        $scope.entries.push.apply($scope.entries, entries);\n      }\n      if ($scope.entries.length > $scope._options.maxCached) {\n        var diff = $scope.entries.length - $scope._options.maxCached;\n        var trackedElementId;\n        if (prepend) {\n          $scope.entries = $scope.entries.slice(0, $scope._options.maxCached);\n          $scope._options.highOffset -= diff;\n          trackedElementId = oldEntries[oldEntries.length - diff - 1] ? oldEntries[oldEntries.length - diff - 1][$scope._options.entryIdAttribute] : undefined;\n        } else {\n          $scope.entries = $scope.entries.slice(diff, $scope.entries.length);\n          $scope._options.lowOffset += diff;\n          trackedElementId = oldEntries[diff] ? oldEntries[diff][$scope._options.entryIdAttribute] : undefined;\n        }\n        self.autoscroll(trackedElementId, prepend);\n      }\n    };\n\n    this.autoscroll = function(trackedElementId, prepend) {\n      if (trackedElementId) {\n        var trackedElement = $element.find('#' + trackedElementId);\n        var trackedElementTop = trackedElement.offset().top;\n        $timeout(function() {\n          var newScrollTop = $element.scrollTop() + trackedElement.offset().top - trackedElementTop;\n          $element.animate({scrollTop: newScrollTop}, 0);\n        }, 0, false);\n      } else {\n        $timeout(function() {\n          if (prepend) {\n            $element.animate({scrollTop: $element.prop('scrollHeight')}, 0);\n          } else {\n            $element.animate({scrollTop: 0}, 0);\n          }\n        }, 0, false);\n      }\n    };\n\n    this.loadPrev = function() {\n      $scope._options.lowOffset -= $scope._options.limit;\n      $scope._options.offset = $scope._options.lowOffset;\n      self.loadEntries(true);\n    };\n\n    this.loadNext = function() {\n      $scope._options.highOffset += $scope._options.limit;\n      $scope._options.offset = $scope._options.highOffset;\n      self.loadEntries();\n    };\n\n    $scope.loadPrev = self.loadPrev;\n    $scope.loadNext = self.loadNext;\n\n    this.loadEntries();\n  });\n\n\n  availity.ui.directive('avScrollPagination', function($log, AV_SCROLL_PAGINATION) {\n    return {\n      restrict: 'A',\n      controller: 'AvScrollPaginationController',\n      transclude: true,\n      templateUrl: AV_SCROLL_PAGINATION.TEMPLATE,\n      scope: {\n        apiResource: '=',\n        entries: '=',\n        options: '=',\n        avScrollPagination: '@'\n      },\n      link: function($scope) {\n        if (!$scope.avScrollPagination) {\n          $log.error('Directive must include an id');\n        }\n      }\n    };\n  });\n\n})(window);\n\n//# sourceMappingURL=maps/availity-angular-ui.js.map\n","/* global module*/\n\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity || {};\n\n  availity.MODULE_UI = 'availity.ui';\n  availity.ui = angular.module(availity.MODULE_UI, ['ng', 'ngSanitize']);\n\n  availity.ui.constant('AV_UI', {\n    // jscs: disable\n    NG_OPTIONS: /^\\s*([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?(?:\\s+group\\s+by\\s+([\\s\\S]+?))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+([\\s\\S]+?)(?:\\s+track\\s+by\\s+([\\s\\S]+?))?$/\n    // jscs: enable\n  });\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = availity;\n  }\n\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.factory('avTemplateCache', function($q, $templateCache, $http) {\n\n    return {\n\n      get: function(options) {\n\n        var valid = !options.template || !options.templateUrl;\n\n        if (!valid) {\n          throw new Error('Either options.template or options.templateUrl must be defined for avTemplateCache');\n        }\n\n        return options.template ? $q.when(options.template) :\n          $http.get(options.templateUrl, {cache: $templateCache})\n            .then(function(result) {\n              return result.data;\n            });\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_MODAL', {\n\n    OPTIONS: {\n      scope: null,\n      templateUrl: null,\n      template: null,\n      id: null,\n      container: null,\n\n      // Bootstrap defaults\n      keyboard: true,\n      backdrop: true,\n      show: false,\n      remote: false\n    },\n\n    EVENTS: {\n      SHOW: 'show.av.modal',\n      SHOWN: 'shown.av.modal',\n      HIDE: 'hide.av.modal',\n      HIDDEN: 'hidden.av.modal'\n    },\n\n    NAMESPACE: {\n      MODAL: 'bs.modal'\n    },\n\n    BS_EVENTS: {\n      SHOW: 'show.bs.modal',\n      SHOWN: 'shown.bs.modal',\n      HIDE: 'hide.bs.modal',\n      HIDDEN: 'hidden.bs.modal'\n    },\n\n    TEMPLATES: {\n      MODAL: 'ui/modal/modal-tpl.html'\n    }\n  });\n\n  availity.ui.factory('avModalManager', function() {\n\n    var AvModalManager = function() {\n      this.instances = [];\n    };\n\n    var proto = AvModalManager.prototype;\n\n    proto.add = function(id) {\n      this.instances.push(id);\n    };\n\n    proto.remove = function(id) {\n      this.instances = _.without(this.instances, id);\n    };\n\n    proto.closeAll = function() {\n\n      _.forEach(this.instances, function(id) {\n\n        var $el = $('#' + id);\n\n        if (!$el) {\n          return;\n        }\n\n        var bsModal = $el.data('bs.modal');\n        if (bsModal) {\n          bsModal.removeBackdrop();\n          bsModal.$body.removeClass('modal-open');\n          bsModal.resetAdjustments();\n          bsModal.resetScrollbar();\n        }\n\n        var avModal = $el.data('AvModal');\n        if (avModal) {\n          avModal.destroy();\n        }\n\n      });\n    };\n\n    return new AvModalManager();\n\n  });\n\n  var ModalFactory = function($rootScope, $timeout, $compile, AV_MODAL, avTemplateCache, $q, avModalManager) {\n\n    var Modal = function(options) {\n\n      var self = this;\n\n      this.templateDefer = $q.defer();\n      this.templatePromise = this.templateDefer.promise;\n\n      this.options = angular.extend({}, AV_MODAL.OPTIONS, {scope: $rootScope.$new()}, options);\n\n      avTemplateCache.get(options).then(function(template) {\n        self.options.template = template;\n        self._build();\n      });\n\n    };\n\n    Modal.create = function(options) {\n      return new Modal(options);\n    };\n\n    var proto = Modal.prototype;\n\n    proto._build = function() {\n\n      var self = this;\n\n      var scope = this.options.scope;\n      this.$element = angular.element(this.options.template);\n\n      this._createId();\n\n      this._scope();\n\n      $compile(this.$element)(scope);\n\n      $timeout(function() {\n        self._init();\n      }, 0, true);\n\n      // Append to container or <body>\n      this.options.container ? this.$element.appendTo(this.options.container) : this.$element.appendTo('body');\n\n    };\n\n    proto._init = function() {\n\n      this.$element.data('AvModal', this);\n\n      this.templateDefer.resolve(true);\n\n      // Initialize Bootstrap jQuery plugin\n      this.$element.modal({\n        'backdrop': this.options.backdrop,\n        'keyboard': this.options.keyboard,\n        'show': this.options.show,\n        'remote': this.options.remote\n      });\n\n      this._listeners();\n    };\n\n    // Add helpers to scope so clients can call internal methods\n    proto._scope = function() {\n\n      var self = this;\n      var scope = this.options.scope;\n\n      scope.modalShow = function() {\n        return self.show();\n      };\n\n      scope.modalToggle = function() {\n        return self.toggle();\n      };\n\n      scope.modalHide = function() {\n        return self.hide();\n      };\n\n    };\n\n    proto._listeners = function() {\n\n      var self = this;\n      var scope = this.options.scope;\n      var $element = this.$element;\n\n      this.animationShowDefer = $q.defer();\n      this.animationHideDefer = $q.defer();\n\n      $element.on(AV_MODAL.BS_EVENTS.SHOW, function(event) {\n        scope.$emit(AV_MODAL.EVENTS.SHOW, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.SHOWN, function(event) {\n\n        if (angular.isFunction(self.options.onShown)) {\n          self.options.onShown();\n        }\n\n        self.animationShowDefer.resolve(true);\n\n        scope.$emit(AV_MODAL.EVENTS.SHOWN, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.HIDE, function(event) {\n        scope.$emit(AV_MODAL.EVENTS.HIDE, event, self);\n      });\n\n      $element.on(AV_MODAL.BS_EVENTS.HIDDEN, function(event) {\n\n        if (angular.isFunction(self.options.onHidden)) {\n          self.options.onHidden.call(this);\n        }\n\n        self.animationHideDefer.resolve(true);\n        scope.$emit(AV_MODAL.EVENTS.HIDDEN, event, self);\n\n        scope.$evalAsync(function() {\n          self.destroy();\n        });\n\n      });\n\n      // Garbage collection\n      scope.$on('$destroy', function() {\n        avModalManager.remove(self._id);\n        self.destroy();\n      });\n\n    };\n\n    proto.show = function() {\n\n      var self = this;\n      this.animationShowDefer = $q.defer();\n\n      this.templatePromise.then(function() {\n        self.isShown() ? self.animationShowDefer.resolve(true) : self.$element.modal('show');\n      });\n\n      return this.animationShowDefer.promise;\n\n    };\n\n    proto.hide = function() {\n\n      var self = this;\n      this.animationHideDefer = $q.defer();\n\n      this.templatePromise.then(function() {\n        !self.isShown() ? self.animationHideDefer.resolve(true) : self.$element.modal('hide');\n      });\n\n      return this.animationHideDefer.promise;\n    };\n\n    proto.isShown = function() {\n      return this.$element.data(AV_MODAL.NAMESPACE.MODAL).isShown;\n    };\n\n    proto.toggle = function() {\n\n      var self = this;\n\n      return this.templatePromise.then(function() {\n        return self.isShown() ? self.hide() : self.show();\n      });\n\n    };\n\n    proto.destroy = function() {\n\n      var self = this;\n\n      return this.templatePromise.then(function() {\n        self.$element.data('AvModal', null);\n        self.$element.remove();\n      });\n\n    };\n\n    proto._createId = function() {\n      // Create a unique id for the modal if not present or passed in via options\n      var id = this.$element.attr('id');\n      if (!id) {\n        // Get id from options or create a unique id\n        id = this.options.id ? this.options.id : availity.uuid('av-modal-id');\n        this.$element.attr('id', id);\n      }\n\n      this._id = id;\n\n      avModalManager.add(id);\n    };\n\n    return Modal;\n  };\n\n  availity.ui.factory('AvModal', ModalFactory);\n\n  availity.ui.directive('avModal', function(AV_MODAL) {\n    return {\n      restrict: 'AE',\n      replace: true,\n      transclude: true,\n      scope: {\n        size: '@'\n      },\n      templateUrl: AV_MODAL.TEMPLATES.MODAL\n    };\n  });\n\n})(window);\n","/**\n * 1. All fields should be pristine on first load\n * 2. If field is modified an invalid the field should be marked with an error\n *\n */\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('avValFormController', function() {\n\n    this.ngForm  = null;\n    this.rulesKey = null;\n    this.avValOn = null;\n    this.avValDebounce = null;\n    this.avValInvalid = false;\n\n    // Object that stores the unique id (key) and violation count (value) of all the form fields\n    //\n    // EX:\n    //\n    // {\n    //  avVal001: 0\n    //  avVal002: 2\n    //  avVal003: 1\n    // }\n    this.violations = {};\n\n    this.init = function(form) {\n      this.ngForm = form;\n    };\n\n    /**\n     * Records id of the form field and number of violations\n     * @param  {[type]} id    [description]\n     * @param  {[type]} count [description]\n     * @return {[type]}       [description]\n     */\n    this.record = function(id, count) {\n      this.violations[id] = count;\n\n      var violocationCount = _.reduce(this.violations, function(sum, num) {\n        return sum + num;\n      }, 0);\n\n      this.ngForm.$setValidity('av', violocationCount === 0);\n    };\n\n    this.unrecord = function(id) {\n      if (id && this.violations[id]) {\n        delete this.violations[id];\n      }\n    };\n\n    this.reset = function() {\n      this.ngForm.$setPristine();\n      this.ngForm.$submitted = false;\n    };\n\n    this.$setSubmitted = function() {\n      this.ngForm.$submitted = true;\n    };\n\n    this.setRulesKey = function(key) {\n      this.rulesKey = key;\n    };\n\n  });\n\n  // form.$error = {};\n  // form.$$success = {};\n  // form.$pending = undefined;\n  // form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);\n  // form.$dirty = false;\n  // form.$pristine = true;\n  // form.$valid = true;\n  // form.$invalid = false;\n  // form.$submitted = false;\n\n  availity.ui.directive('avValForm', function($log, $timeout, $parse, AV_VAL, avValAdapter, $rootScope) {\n    return {\n      restrict: 'A',\n      priority: 10,\n      require: ['form', 'avValForm'],\n      controller: 'avValFormController',\n      compile: function() {\n        return {\n          pre: function(scope, iEl, iAttrs, controllers) {\n\n            var ruleFn = $parse(iAttrs.avValForm);\n            var rulesKey = ruleFn(scope);\n\n            var ngForm = controllers[0];\n            var avForm = controllers[1];\n\n            rulesKey = rulesKey || iAttrs.avValForm; // interpolated rule from scope || fixed string\n\n            if (!rulesKey) {\n              $log.error('avValForm requires a rules key in order to run the proper validation rules.');\n              return;\n            }\n\n            scope.$watch(ruleFn, function(_rulesKey, _oldRulesKey) {\n\n              if (_rulesKey) {\n\n                avForm.setRulesKey(_rulesKey);\n\n                if (_rulesKey !== _oldRulesKey) {\n                  $timeout(function() {\n                    $log.info('avValForm revalidate');\n                    $rootScope.$broadcast(AV_VAL.EVENTS.REVALIDATE);\n                  });\n                }\n\n              }\n\n            });\n\n            // Allow form attributes to define the validation behavior of the form fields\n            // inside it.  If `av-val-on` or `av-val-debounce` are on the form then all form\n            // fields inside the form would inherit this behavior.\n            avForm.avValOn = iAttrs.avValOn || null;\n            avForm.avValDebounce = iAttrs.avValDebounce || null;\n            // Allows fields to update with invalid data for dirty form saving\n            avForm.avValInvalid = iAttrs.avValInvalid || false;\n\n            avForm.init(ngForm);\n            avForm.setRulesKey(rulesKey);\n\n          },\n          post: function(scope, iEl, iAttrs, controllers) {\n\n            iEl.attr('novalidate', 'novalidate');  // prevent HTML5 validation from kicking in\n\n            // Disable ng-submit or ng-click handlers and store the function to call for submitting\n            var fn;\n            if (iAttrs.ngSubmit) {\n              // Disable ng-submit event\n              iEl.off('submit');\n              fn = $parse(iAttrs.ngSubmit, /* interceptorFn */ null, /* expensiveChecks */ true);\n            }else if (iAttrs.ngClick) {\n              // Disable ng-click event\n              iEl.off('click');\n              fn = $parse(iAttrs.ngClick, /* interceptorFn */ null, /* expensiveChecks */ true);\n            }\n\n            var ngForm = controllers[0];\n            var avForm = controllers[1];\n\n            scope.$on(AV_VAL.EVENTS.RESET, function() {\n              avForm.reset();\n            });\n\n            iEl.bind('submit', function(event) {\n\n              scope.$broadcast(AV_VAL.EVENTS.SUBMITTED);\n              avForm.$setSubmitted();\n\n              if (ngForm.$invalid) {\n\n                scope.$broadcast(AV_VAL.EVENTS.FAILED);\n\n                $log.info('avValForm invalid.  preventing default submit action');\n\n                event.preventDefault();\n                event.stopImmediatePropagation();\n                scope.$broadcast(event);\n\n                avValAdapter.scroll(iEl);\n                return;\n              }\n\n              ngForm.$setPristine();\n\n              if (!fn) {\n                return;\n              }\n\n              var callback = function() {\n                fn(scope, {$event: event});\n              };\n\n              scope.$apply(callback);\n\n            });\n\n          }\n        };\n      }\n    };\n  });\n\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('AvValFieldController', function($element, avValAdapter, $attrs, avVal, $log, $timeout, $scope, $sniffer) {\n\n    this.ngModel = null;\n    this.rule = null;\n    this.avValForm = null;\n    this.avValInvalid = false;\n\n    var self = this;\n\n    var placeholder = $element[0].placeholder;\n    var noEvent = {};\n\n    this.createId = function() {\n      this.ngModel.avId = availity.uuid('avVal');\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.setRule = function(rule) {\n      this.rule = rule;\n    };\n\n    this.avValForm = function(avValForm) {\n      this.avValForm = avValForm;\n    };\n\n    this.updateModel = function(results) {\n\n      var validationKeys = [];\n\n      this.ngModel.avResults = results;\n\n      // set state for each violation\n      angular.forEach(results.violations, function(result) {\n\n        var key = 'av-' + result.contraintName;\n        validationKeys.push(key);\n        self.ngModel.$setValidity(key, result.valid);\n\n      });\n\n      // set overall state for validation state\n      this.ngModel.$setValidity('av', this.ngModel.avResults.isValid);\n\n      // store violations\n      this.ngModel.avViolations = this.ngModel.avResults.violations;\n\n      // record the id and violation count in the av-form controller.  this determines if the form is\n      // valid if sum of violations for all form inputs === zero\n      this.avValForm.record(this.ngModel.avId, this.ngModel.avResults.violations.length);\n\n      // remove violation keys that are no longer falsy\n      angular.forEach(this.ngModel.$error, function(value, key) {\n\n        if (_.indexOf(validationKeys, key) === -1 && key.lastIndexOf('av-', 0) === 0) {\n          self.ngModel.$setValidity(key, true);\n        }\n      });\n    };\n\n    this.updateView = function() {\n      if (this.ngModel.$dirty || $scope.avValShow) {\n        avValAdapter.element($element, this.ngModel, this.ngModel.avResults.isValid);\n        avValAdapter.message($element, this.ngModel);\n      }\n    };\n\n    this.validate = function(value) {\n\n      $log.info('validating value [' + value + ']');\n\n      var rulesKey = self.avValForm.rulesKey;\n      var results = avVal.validate(rulesKey, $element, value, self.rule);\n\n      // validate function is called within the context of angular so fn.call and set the context\n      // to \"this\"\n      self.updateModel.call(self, results);\n      self.updateView.call(self);\n\n      return results;\n    };\n\n    this.validateModel = function(value) {\n\n      self.validate(value, true);\n      return value;\n\n    };\n\n    this.validateView = function(value) {\n\n      var results = self.validate(value);\n\n      if (self.avValForm.avValInvalid || self.avValInvalid) {\n        // allows invalid data from view to update model for dirty saving\n        return value;\n      }\n\n      // prevent invalid data from view to update model\n      return results.isValid ? value : undefined;\n\n    };\n\n    this.onDebounce = function() {\n\n      var value = $element.val().trim();\n\n      if (this.isCheckbox()) {\n        this.ngModel.$setViewValue($element[0].checked);\n      } else if (this.isRadio()) {\n        this.ngModel.$setViewValue($attrs.value);\n      }else {\n        this.ngModel.$setViewValue(value);\n      }\n\n    };\n\n    this.isRadio = function() {\n      return $element.is('input') && $attrs.type === 'radio';\n    };\n\n    this.isCheckbox = function() {\n      return $element.is('input') && $attrs.type === 'checkbox';\n    };\n\n    this.reset = function() {\n\n      var violations = this.ngModel.avResults.violations;\n      violations.splice(0, violations.length);\n\n      avValAdapter.message($element, this.ngModel);\n      avValAdapter.reset($element);\n\n    };\n\n    this.event = function(event, avValDebounce) {\n\n      $element.unbind('input');\n\n      var debounce;\n\n      $element.on(event, function() {\n\n        // https://github.com/angular/angular.js/blob/v1.2.27/src/ng/directive/input.js#L508\n        if ($sniffer.msie <= 11 && (event || noEvent).type === 'input' && $element[0].placeholder !== placeholder) {\n          placeholder = $element[0].placeholder;\n          return;\n        }\n\n        $timeout.cancel(debounce);\n        debounce = $timeout(function() {\n          $scope.$apply(function() {\n            self.onDebounce();\n          });\n        }, avValDebounce);\n\n      });\n\n    };\n\n  });\n\n  // Events:\n  //\n  //  click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown\n  //  keyup keypress submit focus blur copy cut paste\n  availity.ui.directive('avValField', function($log, $timeout, avVal, avValAdapter, AV_VAL) {\n    return {\n      restrict: 'A',\n      controller: 'AvValFieldController',\n      require: ['^avValForm', 'ngModel', 'avValField'],\n      scope: {\n        avValDebounce: '@?',\n        avValOn: '@?',\n        avValShow: '=?'\n      },\n      link: function(scope, element, attrs, controllers) {\n\n        var rule = attrs.avValField;\n        var avValForm = controllers[0];\n        var ngModel = controllers[1];\n        var avValField = controllers[2];\n\n        var avValOn = scope.avValOn || avValForm.avValOn || 'input';\n\n        if (!ngModel && !rule) {\n          $log.error('avValField requires ngModel and a validation rule to run.');\n          return;\n        }\n\n        // Allows fields to update with invalid data for dirty form saving\n        avValField.avValInvalid = attrs.avValInvalid || false;\n\n        // CACHE THE MODEL\n        avValField.setNgModel(ngModel);\n\n        avValField.avValForm(avValForm);\n\n        avValField.setRule(rule);\n\n        avValField.createId();\n\n        // DEBOUNCE\n        var avValDebounce = parseInt(scope.avValDebounce || (avValForm.avValDebounce || AV_VAL.DEBOUNCE), 10);\n        avValDebounce = _.isNumber(avValDebounce) ? avValDebounce : AV_VAL.DEBOUNCE;\n\n        var debounceAllowed = !avValField.isRadio() && !avValField.isCheckbox() && avValOn !== 'blur';\n\n        if (!debounceAllowed) {\n          avValDebounce = 0;\n        }\n\n        // EVENT LISTENER\n        avValField.event(avValOn, avValDebounce);\n\n        // (view to model)\n        ngModel.$parsers.push(avValField.validateView);\n\n        // (model to view) - added to beginning of array because formatters\n        // are processed in reverse order thus allowing the model to be transformed\n        // before the validation framework check for validity.\n        ngModel.$formatters.unshift(avValField.validateModel);\n\n        scope.$on(AV_VAL.EVENTS.REVALIDATE, function() {\n          avValField.validate(ngModel.$viewValue);\n        });\n\n        // SUBMITTED EVENT\n        scope.$on(AV_VAL.EVENTS.SUBMITTED, function() {\n          ngModel.$dirty = true;\n          avValField.validate(ngModel.$viewValue);\n        });\n\n        // - Removes all errors on page,\n        // - does not reset view or model values.  This is to be handled by the app.\n        scope.$on(AV_VAL.EVENTS.RESET, function() {\n          avValField.reset();\n        });\n\n        scope.$on('$destroy', function() {\n          avValForm.unrecord(ngModel.avId);\n        });\n\n      }\n    };\n  });\n\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.provider('avPopoverConfig', function() {\n\n    var config = {\n      showOnLoadHideDelay: 10000\n    };\n\n    this.set = function(options) {\n      angular.extend(config, options);\n    };\n\n    this.$get = function() {\n      return angular.copy(config);\n    };\n  });\n\n  availity.ui.constant('AV_POPOVER', {\n    NAME: 'bs.popover'\n  });\n\n  availity.ui.controller('AvPopoverController', function($element, $scope, AV_POPOVER, $timeout, avPopoverConfig) {\n    this.options = angular.extend({}, avPopoverConfig);\n\n    this.listeners = function() {\n\n      var self = this;\n\n      angular.forEach(['show', 'shown', 'hide', 'hidden'], function(name) {\n        $element.on(name + '.bs.popover', function(ev) {\n          $scope.$emit('av:popover:' + name, ev);\n        });\n      });\n\n      $scope.$on('destroy', function() {\n        self.destroy();\n      });\n    };\n\n    this.plugin = function() {\n      return $element.data(AV_POPOVER.NAME);\n    };\n\n    this.show = function() {\n      $element.popover('show');\n    };\n\n    this.hide = function() {\n      $element.popover('hide');\n    };\n\n    this.toggle = function() {\n      $element.popover('toggle');\n    };\n\n    this.destroy = function() {\n      $element.popover('destroy');\n    };\n\n\n    this.init = function() {\n\n      this.listeners();\n\n      if ($scope.show) {\n\n        this.show();\n\n        if ($scope.delay && $scope.delay.hide) {\n          $timeout(this.hide, $scope.delay.hide, false);\n          return;\n        }\n        // If no delay is found or cannot be parsed, set a default timeout so that the popover doesn't stick around forever\n        $timeout(this.hide, this.options.showDelay, false);\n      }\n    };\n\n\n  });\n\n  availity.ui.directive('avPopover', function() {\n    return {\n      restrict: 'A',\n      controller: 'AvPopoverController',\n      scope: {\n        show: '=',\n        delay: '='\n      },\n      link: function(scope, element, attrs, avPopover) {\n\n        var options = {};\n\n        scope.$evalAsync(function() {\n          element.popover(angular.extend({}, options, {\n            html: true\n          }));\n          avPopover.init();\n        });\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('avValContainerController', function($scope, $timeout) {\n\n    this.message = function(ngModel) {\n\n      var message = null;\n      if (ngModel.avResults.violations.length && ngModel.avResults.violations[0].message) {\n        message = ngModel.avResults.violations[0].message;\n      }else {\n        message = null;\n      }\n\n      // $timeout is needed to update the UI from $broadcast events\n      $timeout(function() {\n        $scope.messages.message = message;\n      });\n\n    };\n\n  });\n\n  availity.ui.directive('avValContainer', function() {\n    return {\n      restrict: 'A',\n      controller: 'avValContainerController',\n      template: '<p class=\"help-block\" data-ng-bind-html=\"messages.message\"></p>',\n      replace: true,\n      scope: {\n\n      },\n      link: function(scope) {\n        scope.messages = _.extend({}, scope.messages, { message: null, id: null });\n      }\n    };\n  });\n\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BOOTSTRAP_ADAPTER', {\n    CLASSES: {\n      SUCCESS: 'has-success',\n      WARNING: 'has-warning',\n      ERROR: 'has-error',\n      FEEDBACK: 'has-feedback',\n      HELP: 'help-block',\n      FORM_GROUP: '.form-group:first',\n      NAVBAR: 'navbar-fixed-top'\n    },\n    SELECTORS: {\n      CONTAINER: 'container-id',\n      DATA_CONTAINER: 'data-container-id'\n    },\n    CONTROLLER: '$avValContainerController'\n  });\n\n  availity.ui.factory('avValBootstrapAdapter', function(AV_BOOTSTRAP_ADAPTER, $timeout, $log) {\n\n    return {\n\n      element: function(element, ngModel) {\n        if (ngModel.$valid) {\n          element.parents(AV_BOOTSTRAP_ADAPTER.CLASSES.FORM_GROUP).removeClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n        }else {\n          element.parents(AV_BOOTSTRAP_ADAPTER.CLASSES.FORM_GROUP).addClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n        }\n      },\n\n      reset: function(element) {\n        element.parents(AV_BOOTSTRAP_ADAPTER.CLASSES.FORM_GROUP).removeClass(AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR);\n      },\n\n      message: function(element, ngModel) {\n\n        var selector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.HELP\n        ].join('');\n\n        var $el = $(element);\n\n        var target = $el.attr(AV_BOOTSTRAP_ADAPTER.SELECTORS.CONTAINER);\n        target = target || $el.attr(AV_BOOTSTRAP_ADAPTER.SELECTORS.DATA_CONTAINER);\n        // default to siblings\n        target = target ? $('#' + target) : $el.siblings(selector);\n\n        if (target.length === 0) {\n          $log.warn('avValBootstrapAdapter could not find validation container for {0}', [element]);\n          return;\n        }\n\n        var el = target[0];\n        $el = angular.element(el);\n        var avValModel = $el.data(AV_BOOTSTRAP_ADAPTER.CONTROLLER); // get the av val message controller\n        if (avValModel) {\n          avValModel.message(ngModel);\n        }\n      },\n\n      scroll: function(form) {\n\n        // Bootstrap fixed navbars causes bad scroll-to offsets so find them all\n        var navbarSelector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.NAVBAR\n        ].join('');\n\n        // Add up all the heights to find the true offset\n        var offset = 0;\n        $(navbarSelector).each(function() {\n          offset += $(this).outerHeight();\n        });\n\n        var selector = [\n          '.',\n          AV_BOOTSTRAP_ADAPTER.CLASSES.ERROR,\n          ':first'\n        ].join('');\n\n        var $target = $(form).find(selector);\n        $timeout(function() {\n          // scroll to offset top of first error minus the offset of the navbars\n          $('body, html').animate({scrollTop: $target.offset().top - offset}, 'fast');\n        }, 0, false);\n      }\n    };\n  });\n\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_VAL_ADAPTER', {\n    DEFAULT: 'avValBootstrapAdapter'\n  });\n\n  availity.ui.provider('avValAdapter', function() {\n\n    var that = this;\n\n    this.setAdapter = function(adapter) {\n      this.adapter = adapter;\n    };\n\n    this.$get = function(AV_VAL_ADAPTER, $injector) {\n\n      var Adapter = function() {\n        var adapterName = that.adapter || AV_VAL_ADAPTER.DEFAULT;\n        this.adapter = $injector.get(adapterName);\n      };\n\n      var proto = Adapter.prototype;\n\n      proto.element = function(element, ngModel) {\n        this.adapter.element(element, ngModel);\n      };\n\n      proto.reset = function(element) {\n        this.adapter.reset(element);\n      };\n\n      proto.message = function(element, ngModel) {\n        this.adapter.message(element, ngModel);\n      };\n\n      proto.scroll = function(form) {\n        this.adapter.scroll(form);\n      };\n\n      return new Adapter();\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.provider('avDropdownConfig', function() {\n\n    var config = {\n      closeOnResize: true,\n      dropdownAutoWidth: true,\n      minimumResultsForSearch: 5,\n      theme: 'bootstrap'\n    };\n\n    this.set = function(options) {\n      angular.extend(config, options);\n    };\n\n    this.$get = function() {\n      return angular.copy(config);\n    };\n\n  });\n\n  availity.ui.constant('AV_DROPDOWN', {\n    OPTIONS: [\n      'width',\n      'minimumInputLength',\n      'maximumInputLength',\n      'minimumResultsForSearch',\n      'maximumSelectionSize',\n      'separator',\n      'allowClear',\n      'multiple',\n      'closeOnSelect',\n      'openOnEnter',\n      'id',\n      'matcher',\n      'sorter',\n      'templateSelection',\n      'templateResult',\n      'formatResultCssClass',\n      'formatNoMatches',\n      'formatSearching',\n      'formatAjaxError',\n      'formatInputTooShort',\n      'formatInputTooLong',\n      'formatSelectionTooBig',\n      'formatLoadMore',\n      'createTag',\n      'createSearchChoicePosition',\n      'initSelection',\n      'tokenizer',\n      'tokenSeparators',\n      'query',\n      'ajax',\n      'data',\n      'tags',\n      'containerCss',\n      'containerCssClass',\n      'dropdownCss',\n      'dropdownCssClass',\n      'dropdownAutoWidth',\n      'adaptContainerCssClass',\n      'adaptDropdownCssClass',\n      'escapeMarkup',\n      'selectOnClose',\n      'loadMorePadding',\n      'nextSearchTerm'\n    ]\n  });\n\n\n  availity.ui.controller('AvDropdownController', function($element, $attrs, AV_UI, AV_DROPDOWN, avDropdownConfig, $log, $scope) {\n\n    var self = this;\n    this.options = {};\n    this.match = null;\n    this.ngModel = null;\n\n    this.init = function() {\n\n      self.options = angular.extend({}, avDropdownConfig);\n\n      _.forEach($attrs, function(value, key) {\n        if (_.contains(AV_DROPDOWN.OPTIONS, key.replace('data-', ''))) {\n          self.options[key] = $scope.$eval(value);\n        }\n      });\n\n      self.multiple = angular.isDefined($attrs.multiple);\n\n    };\n\n\n  });\n\n  availity.ui.directive('avDropdown', function($timeout, $log, $window) {\n\n    return {\n      restrict: 'AE',\n      require: ['ngModel', 'avDropdown'],\n      controller: 'AvDropdownController',\n      link: function(scope, element, attrs, controllers) {\n\n        var avDropdown = controllers[1];\n        avDropdown.init();\n\n        var win = angular.element($window);\n\n        win.bind('resize', function() {\n          element.select2('close');\n        });\n\n        scope.$watch(attrs.ngModel, function(newVal, oldVal) {\n\n          if (newVal === oldVal) {\n            return;\n          }\n\n          $timeout(function() {\n            element.trigger('change.select2');\n          });\n\n        });\n\n        scope.$on('destroy', function() {\n          element.select2('destroy');\n        });\n\n        scope.$evalAsync(function() {\n          element.select2(avDropdown.options);\n        });\n      }\n    };\n  });\n\n})(window);\n","/**\n * Inspiration https://github.com/mgcrea/angular-strap/blob/v0.7.8/src/directives/datepicker.js\n */\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.provider('avDatepickerConfig', function() {\n\n    var config = {\n      autoclose: true,\n      todayHighlight: true,\n      format: 'mm/dd/yyyy',\n      forceParse: false\n    };\n\n    this.set = function(options) {\n      angular.extend(config, options);\n    };\n\n    this.$get = function() {\n      return angular.copy(config);\n    };\n\n  });\n\n  // Options: http://bootstrap-datepicker.readthedocs.org/en/latest/options.html\n  availity.ui.constant('AV_DATEPICKER', {\n    CONTROLLER: '$ngModelController',\n    ADD_ON_SELECTOR: '[data-toggle=\"datepicker\"]',\n    OPTIONS: [\n      'autoclose',\n      'beforeShowDay',\n      'beforeShowMonth',\n      'calendarWeeks',\n      'clearBtn',\n      'toggleActive',\n      'container',\n      'daysOfWeekDisabled',\n      'datesDisabled',\n      'defaultViewDate',\n      'endDate',\n      'forceParse',\n      'format',\n      'inputs',\n      'keyboardNavigation',\n      'language',\n      'minViewMode',\n      'multidate',\n      'multidateSeparator',\n      'orientation',\n      'startDate',\n      'startView',\n      'todayBtn',\n      'todayHighlight',\n      'weekStart',\n      'showOnFocus',\n      'disableTouchKeyboard',\n      'enableOnReadonly',\n      'modelFormat'\n    ],\n    DEFAULTS: {\n      MODELFORMAT: 'YYYY-MM-DD'\n    }\n  });\n\n  availity.ui.controller('AvDatepickerController', function($element, $attrs, AV_DATEPICKER, $scope, avDatepickerConfig) {\n\n    var self = this;\n    this.options = {};\n\n    this.setValue = function() {\n\n      var viewValue = self.ngModel.$viewValue;\n      var plugin = this.plugin();\n\n      if (!viewValue || !plugin) {\n        return;\n      }\n\n      plugin.setDate(viewValue);\n    };\n\n    this.setNgModel = function(ngModel) {\n      this.ngModel = ngModel;\n    };\n\n    this.findModel = function() {\n\n      var ngModel = null;\n\n      var $input = $element.find('input:first').andSelf();\n      if ($input.length) {\n        ngModel = $input.data(AV_DATEPICKER.CONTROLLER);\n        this.setNgModel(ngModel);\n      }\n\n      return ngModel;\n    };\n\n    this.modelToView = function(isoWrap) {\n      var viewValue = $.fn.datepicker.DPGlobal.formatDate(isoWrap, self.options.format, 'en');\n      return viewValue;\n    };\n\n    this.wrapIsoDate = function() {\n\n      var date = self.ngModel.$modelValue;\n      var isoWrap;\n\n      if (date !== undefined && date !== null) {\n        var m = moment(date);\n        isoWrap = m.isValid() ? m.toDate() : null;\n      }\n\n      return isoWrap;\n    };\n\n    this.viewToModel = function() {\n\n      var plugin = self.plugin();\n\n      if (!plugin) {\n        return null;\n      }\n\n      var format = $.fn.datepicker.DPGlobal.parseFormat(self.options.format);\n      var utcDate = $.fn.datepicker.DPGlobal.parseDate(self.ngModel.$viewValue, format, 'en');\n\n      // jscs: disable\n      var localDate = plugin._utc_to_local(utcDate);\n      // jscs: enable\n\n      if (self.options.modelFormat && localDate) {\n        localDate = moment(localDate).format(self.options.modelFormat);\n      }\n\n      return localDate;\n    };\n\n    this.init = function() {\n\n      self.options = angular.extend({}, avDatepickerConfig);\n\n      _.forEach($attrs, function(value, key) {\n        if (_.contains(AV_DATEPICKER.OPTIONS, key.replace('data-', ''))) {\n          self.options[key] = $scope.$eval(value);\n        }\n      });\n\n      if (self.options.modelFormat && self.options.modelFormat.toLowerCase() === 'default') {\n        self.options.modelFormat = AV_DATEPICKER.DEFAULTS.MODELFORMAT;\n      }\n    };\n\n    this.plugin = function() {\n      return $element.data('datepicker');\n    };\n\n    this.destroy = function() {\n      var plugin = this.plugin();\n      if (plugin) {\n        plugin.remove();\n        $element.data('datepicker', null);\n      }\n    };\n\n    this.hide = function() {\n      var plugin = this.plugin();\n      if (plugin) {\n        plugin.hide();\n      }\n    };\n  });\n\n  availity.ui.directive('avDatepicker', function($window, $log, AV_DATEPICKER) {\n    return {\n      restrict: 'A',\n      require: ['ngModel', 'avDatepicker'],\n      controller: 'AvDatepickerController',\n      link: function(scope, element, attrs, controllers) {\n\n        var ngModel = controllers[0];\n        var avDatepicker = controllers[1];\n\n        if (!ngModel) {\n          ngModel = avDatepicker.findModel();\n          if (!ngModel) {\n            $log.error('avDatepicker requires ngModel');\n            return;\n          }\n        }\n\n        avDatepicker.init();\n        avDatepicker.setNgModel(ngModel);\n\n        element.on('changeDate', function(e) {\n          $log.info('avDatepicker changeDate {0}', [e]);\n        });\n\n        // (view to model)\n        ngModel.$parsers.push(avDatepicker.viewToModel);\n\n        // (model to view) - added to end of formatters array\n        // because they are processed in reverse order.\n        // if the model is in Date format and send to the validation framework\n        // prior to getting converted to the expected $viewValue format,\n        // the validation will fail.\n        ngModel.$formatters.push(avDatepicker.modelToView);\n        ngModel.$formatters.push(avDatepicker.wrapIsoDate);\n\n        var _$render = ngModel.$render;\n        ngModel.$render = function() {\n          _$render();\n          avDatepicker.setValue();\n        };\n\n        var win = angular.element($window);\n\n        win.bind('scroll', function() {\n          avDatepicker.hide();\n        });\n\n        var target = element.siblings(AV_DATEPICKER.ADD_ON_SELECTOR);\n        if (target.length) {\n          target.on('click.datepicker', function() {\n            if (!element.prop('disabled')) { // Hack check for IE 8\n              element.focus();\n            }\n          });\n        }\n\n        scope.$on('destroy', function() {\n          avDatepicker.destroy();\n          if (target.length) {\n            target.off('click.datepicker');\n          }\n        });\n\n        scope.$evalAsync(function() {\n          element.datepicker(avDatepicker.options);\n        });\n      }\n    };\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_UI_IDLE', {\n    EVENTS: {\n      OK: 'mousedown.av.idle.notifier'\n    },\n    TEMPLATES: {\n      BASE: 'ui/idle/idle-tpl.html',\n      SESSION: 'ui/idle/idle-session-tpl.html',\n      WARNING: 'ui/idle/idle-warning-tpl.html'\n    }\n  });\n\n  availity.ui.provider('avIdleNotifier', function() {\n\n    this.$get = function(AV_IDLE, AV_UI_IDLE, $rootScope, AvModal, $document, $timeout) {\n\n      var $scope;\n\n      var AvIdleNotifier = function() {\n        this.listeners = [];\n        this.modal = null;\n      };\n\n      var proto = AvIdleNotifier.prototype;\n\n      proto.init = function() {\n\n        $scope = $rootScope.$new(true);\n        $scope.idle = {};\n\n        this.initListeners();\n      };\n\n      proto.initListeners = function() {\n\n        var self = this;\n        var listener = null;\n\n        // ACTIVE IDLING\n        listener = $rootScope.$on(AV_IDLE.EVENTS.IDLE_ACTIVE, function() {\n          self.showWarning();\n        });\n        this.listeners.push(listener);\n\n        // INACTIVE IDLING\n        listener = $rootScope.$on(AV_IDLE.EVENTS.IDLE_INACTIVE, function() {\n          self.hideWarning();\n        });\n        this.listeners.push(listener);\n\n        // SESSION TIMEOUT OUT\n        listener = $rootScope.$on(AV_IDLE.EVENTS.SESSION_TIMEOUT_ACTIVE, function() {\n          self.showSession();\n        });\n        this.listeners.push(listener);\n\n      };\n\n      proto.destroyListeners = function() {\n        // turn off each listener @see http://stackoverflow.com/a/14898795\n        _.each(this.listeners, function(listener) {\n          listener();\n        });\n      };\n\n      proto.showWarning = function() {\n\n        var self = this;\n\n        if (this.modal !== null) {\n          return;\n        }\n\n        $scope = $rootScope.$new(true);\n        $scope.idle = {};\n        $scope.idle.template = AV_UI_IDLE.TEMPLATES.WARNING;\n\n        this.modal = new AvModal({\n          show: true,\n          scope: $scope,\n          backdrop: 'static',\n          templateUrl: AV_UI_IDLE.TEMPLATES.BASE\n        });\n\n        $document.find('body').on(AV_UI_IDLE.EVENTS.OK, function() {\n          self.hideWarning();\n        });\n\n      };\n\n      proto.hideWarning = function() {\n\n        if (this.modal) {\n          this.disableBackDrop();\n          this.modal.hide();\n        }\n\n        this.modal = null;\n      };\n\n      proto.disableBackDrop = function() {\n        $document.find('body').off(AV_UI_IDLE.EVENTS.OK);\n      };\n\n      proto.showSession = function() {\n        var self = this;\n        this.disableBackDrop();\n\n        $timeout(function() {\n          $scope.idle.template = AV_UI_IDLE.TEMPLATES.SESSION;\n          $scope.idle.onSessionTimeout = _.bind(self.onSessionTimeout, self);\n        }, 0, true);\n\n      };\n\n      proto.onSessionTimeout = function() {\n        $rootScope.$broadcast(AV_IDLE.EVENTS.SESSION_TIMEOUT_REDIRECT);\n      };\n\n      return new AvIdleNotifier();\n\n    };\n\n  });\n\n  availity.ui.run(function(avIdleNotifier) {\n    avIdleNotifier.init();\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_MASK', {\n    NAME: 'inputmask',\n    DEFAULTS: {\n      date: '99/99/9999',\n      phone: '(999) 999-9999',\n      SSN: '999-99-9999'\n    }\n  });\n\n  availity.ui.directive('avMask', function($window, $log, AV_MASK) {\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function(scope, element, attrs) {\n\n        var maskType = AV_MASK.DEFAULTS[attrs.avMask];\n        if (!maskType) {\n          maskType = attrs.avMask;\n        }\n\n        scope.$evalAsync(function() {\n          element.inputmask(maskType);\n        });\n\n        scope.$on('$destroy', function() {\n          element.inputmask('remove');\n        });\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.controller('AvHasPermissionController', function($element) {\n\n    this.onSuccess = function(isAuthorized) {\n      if (isAuthorized) {\n        $element.removeClass('ng-hide');\n        $element.show();\n      } else {\n        $element.remove();\n      }\n    };\n\n    this.onError = function() {\n      $element.remove();\n    };\n\n  });\n\n  availity.ui.directive('avHasPermission', function(avUserAuthorizations) {\n    return {\n      restrict: 'EA',\n      controller: 'AvHasPermissionController',\n      require: ['avHasPermission'],\n      link: function($scope, $element, $attr, controllers) {\n\n        var avHasPermission = controllers[0];\n\n        $element.hide();\n\n        $scope.$watch($attr.avHasPermission, function(_permissions) {\n\n          var permissions = _permissions;\n\n          if (!angular.isArray(permissions)) {\n            permissions = _.words('' + permissions);\n          }\n\n          avUserAuthorizations.isAnyAuthorized(permissions).then(avHasPermission.onSuccess, avHasPermission.onError);\n        });\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.directive('avAnalytics', function() {\n    return {\n      scope: {\n        options: '=avAnalytics'\n      },\n      controller: function($scope) {\n        this.getOptions = function() {\n          return $scope.options;\n        };\n      }\n    };\n  });\n\n  availity.ui.controller('AvAnalyticsController', function(avAnalyticsUtils, avAnalytics) {\n\n    this.onEvent = function(event, element, options) {\n\n      // convert the directive attributes into object with properties with sane defaults\n      var properties = angular.extend(\n        {\n          level: 'info'\n        },\n        options,\n        {\n          event: event.type\n        }\n      );\n\n      // If an external link is detected\n      if (avAnalyticsUtils.isExternalLink(properties)) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      var promise = avAnalytics.trackEvent(properties);\n      promise.finally(function() {\n        if (avAnalyticsUtils.isExternalLink(properties)) {\n          document.location = element.attr('href');\n        }\n      });\n    };\n  });\n\n  availity.ui.directive('avAnalyticsOn', function(AV_ANALYTICS, avAnalyticsUtils) {\n    return {\n      restrict: 'A',\n      controller: 'AvAnalyticsController',\n      require: ['avAnalyticsOn', '?^avAnalytics'],\n      link: function(scope, element, attrs, controllers) {\n        var childCtrl = controllers[0];\n        var parentCtrl = {};\n        var parentOptions = {};\n\n        if (controllers[1])  {\n          parentCtrl = controllers[1];\n          parentOptions = parentCtrl.getOptions();\n        }\n\n        var options = angular.extend(\n          {},\n          parentOptions,\n          avAnalyticsUtils.getProperties(attrs)\n        );\n\n        var eventType = attrs.avAnalyticsOn || AV_ANALYTICS.EVENTS.DEFAULT;\n\n        element.on(eventType, function(event) {\n          childCtrl.onEvent(event, element, options);\n        });\n      }\n    };\n  });\n})(window);\n","/* global _ */\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.requires.push('ng.shims.placeholder');\n\n  availity.ui.config(function($provide) {\n\n    $provide.decorator('placeholderDirective', ['$delegate', '$log', function($delegate, $log) {\n\n      var directive = $delegate[0];\n      var originalLink = directive.link;\n\n      var newLink = function(scope, element, attrs) {\n\n        if (originalLink && _.contains(_.keys(attrs), 'avMask')) {\n          $log.info('placeholder shim not running on an element due to avMask on same element');\n          return;\n        }else if (originalLink) {\n          originalLink.apply(this, arguments);\n        }\n      };\n\n      directive.compile = function() {\n        return newLink;\n      };\n\n      return $delegate;\n    }]);\n\n  });\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BREADCRUMBS', {\n\n    TEMPLATE: 'ui/breadcrumbs/breadcrumbs-tpl.html'\n  });\n\n  function AvBreadcrumbsController($state) {\n\n    this.getBreadcrumb = function(breadcrumbs, state) {\n      if (!state || !state.data) {\n        return;\n      }\n\n      var breadcrumb = state.data.breadcrumb;\n      if (!breadcrumb) {\n        return;\n      }\n\n      if (breadcrumb.parent) {\n        var parentState = $state.get(breadcrumb.parent);\n\n        if (parentState) {\n          this.getBreadcrumb(breadcrumbs, parentState);\n        }\n      }\n      breadcrumb.state = state.name;\n      breadcrumbs.push(breadcrumb);\n    };\n\n    this.getBreadcrumbs = function() {\n      var breadcrumbs = [];\n      this.getBreadcrumb(breadcrumbs, $state.current);\n      return breadcrumbs;\n    };\n\n  }\n\n  AvBreadcrumbsController.$inject = ['$state'];\n  availity.ui.controller('AvBreadcrumbsController', AvBreadcrumbsController);\n\n  function avBreadcrumbs(AV_BREADCRUMBS) {\n\n    return {\n      restrict: 'EA',\n      replace: true,\n      templateUrl: AV_BREADCRUMBS.TEMPLATE,\n      controller: 'AvBreadcrumbsController',\n      link: function(scope, element, attrs, avBreadcrumbsCtrl) {\n\n        scope.breadcrumbs = avBreadcrumbsCtrl.getBreadcrumbs();\n\n        scope.$on('$stateChangeSuccess', function() {\n          scope.breadcrumbs = avBreadcrumbsCtrl.getBreadcrumbs();\n        });\n      }\n    };\n  }\n\n  avBreadcrumbs.$inject = ['AV_BREADCRUMBS'];\n  availity.ui.directive('avBreadcrumbs', avBreadcrumbs);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.filter('avApproximate', function() {\n\n    var pow = Math.pow;\n    var floor = Math.floor;\n    var abs = Math.abs;\n    var log = Math.log;\n\n    function round(number, precision) {\n\n      var prec = pow(10, precision);\n      return Math.round(number * prec) / prec;\n\n    }\n\n    return function(number, _precision) {\n\n      var precision = _precision || 0;\n      var base = floor(log(abs(number)) / log(1000));\n      var unit = 'kMGTPE'[base - 1];\n      return unit ? round(number / pow(1000, base), precision) + unit : (number || 0);\n\n    };\n  });\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BADGE', {\n    COLOR: null,\n    DEFAULT_CLASS: 'badge',\n    SHOW_WHEN_ZERO: false,\n    TEMPLATE: 'ui/badge/badge-tpl.html'\n  });\n\n  function badgeDirective(AV_BADGE) {\n\n    return {\n      scope: {\n        color: '@',\n        count: '=avBadge',\n        showWhenZero: '@'\n      },\n      templateUrl: AV_BADGE.TEMPLATE,\n      link: function(scope, element) {\n\n        scope.color = scope.color || AV_BADGE.COLOR;\n        scope.showWhenZero = scope.showWhenZero || AV_BADGE.SHOW_WHEN_ZERO;\n\n        var classes = [];\n        classes.push(AV_BADGE.DEFAULT_CLASS);\n        if (scope.color) {\n          classes.push(scope.color);\n        }\n\n        element.addClass(classes.join(' '));\n      }\n    };\n  }\n\n  badgeDirective.$inject = ['AV_BADGE'];\n  availity.ui.directive('avBadge', badgeDirective);\n\n})(window);\n","(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_REMOVABLE_LABEL', {\n    TEMPLATE: 'ui/labels/removable-label-tpl.html'\n  });\n\n  availity.ui.directive('avRemovableLabel', function(AV_REMOVABLE_LABEL) {\n    return {\n      templateUrl: AV_REMOVABLE_LABEL.TEMPLATE,\n      transclude: true,\n      scope: {\n        removeValue: '=',\n        onRemove: '&'\n      },\n      link: function(scope, element, attrs) {\n        element.addClass('label-remove');\n        scope.removeLabel = function() {\n          if (!attrs.disabled) {\n            scope.onRemove()(scope.removeValue);\n          }\n        };\n      }\n    };\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_LOADER', {\n\n    TEMPLATES: {\n      LOADER: 'ui/animation/loader-tpl.html'\n    }\n\n  });\n\n  availity.ui.controller('AvLoaderController', function($element) {\n\n    var self = this;\n    var active;\n\n    this.start = function() {\n      active = true;\n      this.animate();\n    };\n\n    this.animate = function() {\n\n      $element\n        .find('.loading-bullet')\n        .velocity('transition.slideRightIn', { stagger: 250 })\n        .velocity({ opacity: 0 }, {\n          delay: 750,\n          duration: 500,\n          complete: function() {\n            if (active) {\n              setTimeout(function() {self.animate();}, 500);\n            } else {\n              self.endAnimation();\n            }\n          }\n        });\n\n    };\n\n    this.endAnimation = function() {\n      $element.find('.loading-bullet').velocity('stop', true);\n      $element.removeData();\n    };\n\n    this.stop = function() {\n      active = false;\n    };\n\n  });\n\n  availity.ui.directive('avLoader', function(AV_LOADER) {\n    return {\n      restrict: 'AE',\n      replace: true,\n      controller: 'AvLoaderController',\n      require: 'avLoader',\n      templateUrl: AV_LOADER.TEMPLATES.LOADER,\n      link: function(scope, element, attr, avLoader) {\n\n        if (!attr.delay) {\n          avLoader.start();\n        }\n\n        scope.$on('$destroy', function() {\n          avLoader.stop();\n        });\n\n      }\n    };\n  });\n\n})(window);\n","/* global _ */\n(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_BLOCK', {\n    TEMPLATES: {\n      BLOCK: 'ui/block/block-tpl.html'\n    }\n  });\n\n  var getLoaderController = function(blockId) {\n    var el = $('[data-block-ui=\"' + blockId + '\"]') || $('[block-ui=\"' + blockId + '\"]');\n    if (el) {\n      return el.find('[data-av-loader]').controller('avLoader');\n    }\n  };\n\n  var triggerLoaderController = function(id, instance, fn) {\n\n    var controller = instance.loaderController;\n    if (!controller) {\n      controller = getLoaderController(id);\n      instance.loaderController = controller;\n    }\n    if (controller && _.isFunction(controller[fn])) {\n      controller[fn]();\n    }\n\n  };\n\n  var triggerInstance = function(id, instance, origFn, loaderFn) {\n    triggerLoaderController(id, instance, loaderFn);\n    origFn.apply(instance);\n  };\n\n  var modifyBlockInstances = function(id, instance) {\n\n    var origStartFn = instance.start;\n    var origStopFn = instance.stop;\n\n    instance.start = function() {\n      triggerInstance(id, instance, origStartFn, 'start');\n    };\n\n    instance.stop = function() {\n      triggerInstance(id, instance, origStopFn, 'stop');\n    };\n\n    instance.startLoader = function() {\n      triggerLoaderController(id, instance, 'start');\n    };\n\n    instance.avModifications = true;\n  };\n\n  availity.ui.run(function($injector, $log, AV_BLOCK) {\n\n    try {\n\n      var blockUIConfig = $injector.get('blockUIConfig');\n      var blockUI = $injector.get('blockUI');\n      blockUIConfig.autoBlock = false;\n      blockUIConfig.delay = 0;\n      blockUIConfig.templateUrl = AV_BLOCK.TEMPLATES.BLOCK;\n\n      var origGetFn = blockUI.instances.get;\n      blockUI.instances.get = function(id) {\n        var instance = origGetFn(id);\n        if (!instance.avModifications) {\n          modifyBlockInstances(id, instance);\n        }\n        return instance;\n      };\n\n    } catch (e) {\n      $log.warn('blockUI is required to use av block.');\n    }\n  });\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  // Helper directive that hooks into block-ui's start-up lifecycle and starts the loader\n  availity.ui.directive('avBlockUi', function(blockUI) {\n\n    return {\n      restrict: 'A',\n      link: function($scope, $element, $attrs) {\n\n        var blockId = $attrs.avBlockUi;\n        var blockCount = $attrs.blockCount;\n        var instance = blockUI.instances.get(blockId);\n        if (blockCount > 0) {\n          instance.startLoader();\n        }\n      }\n    };\n\n  });\n\n})(window);\n","/* global angular */\n// Inspired by https://github.com/angular-ui/bootstrap/blob/master/src/tabs/tabs.js\n\n(function(root) {\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_TABS', {\n    TEMPLATES: {\n      TABS: 'ui/tabs/tabs-tpl.html',\n      TAB: 'ui/tabs/tab-tpl.html'\n    }\n  });\n\n  function TabsController($scope) {\n\n    var self = this;\n\n    $scope.tabs = [];\n    self.tabs = $scope.tabs;\n\n    this.addTab = function(tab) {\n      self.tabs.push(tab);\n\n      if (self.tabs.length === 1) {\n        tab.active = true;\n      } else if (tab.active) {\n        self.selectTab(tab);\n      } else {\n        tab.active = false;\n      }\n    };\n\n    this.removeTab = function(tab) {\n      var index = self.tabs.indexOf(tab);\n\n      if (tab.active && self.tabs.length > 1) {\n        // If this is the last tab, select the previous tab. else, the next tab.\n        var newActiveIndex = index === self.tabs.length - 1 ? index - 1 : index + 1;\n        self.selectTab(self.tabs[newActiveIndex]);\n      }\n\n      self.tabs.splice(index, 1);\n    };\n\n    this.selectTab = function(selectedTab) {\n      angular.forEach(self.tabs, function(tab) {\n        if (tab.active && tab !== selectedTab) {\n          tab.active = false;\n          tab.onDeselect();\n        }\n      });\n\n      selectedTab.active = true;\n      selectedTab.onSelect();\n    };\n  }\n\n  TabsController.$inject = ['$scope'];\n  availity.ui.controller('AvTabsController', TabsController);\n\n  function TabsDirective(AV_TABS) {\n    return {\n      restrict: 'AE',\n      templateUrl: AV_TABS.TEMPLATES.TABS,\n      transclude: true,\n      replace: true,\n      controller: 'AvTabsController',\n      scope: true,\n      link: function(scope, element, attrs) {\n        scope.justified = !!attrs.justified;\n        scope.tabType = attrs.tabType;\n        scope.vertical = !!attrs.vertical;\n\n        if (angular.isUndefined(attrs.padContent)) {\n          scope.padContent = true;\n        }\n      }\n    };\n  }\n\n  TabsDirective.$inject = ['AV_TABS'];\n  availity.ui.directive('avTabs', TabsDirective);\n\n  function TabDirective(AV_TABS) {\n    return {\n      restrict: 'AE',\n      templateUrl: AV_TABS.TEMPLATES.TAB,\n      replace: true,\n      require: '^avTabs',\n      transclude: true,\n      scope: {\n        heading: '@',\n        template: '=',\n        templateUrl: '=',\n        onSelect: '&select',\n        onDeselect: '&deselect'\n      },\n      controller: function() {\n        // Allow avTabs to be required by other directives\n      },\n      link: function(scope, element, attrs, tabsController, transclude) {\n        scope.transcludeFn = transclude;\n\n        tabsController.addTab(scope);\n\n        scope.$on('destroy', function() {\n          tabsController.removeTab(scope);\n        });\n\n        scope.select = function() {\n          if (!scope.disabled) {\n            tabsController.selectTab(scope);\n          }\n        };\n\n        scope.$watch('active', function(active) {\n          if (active) {\n            tabsController.selectTab(scope);\n          }\n        });\n\n        if (angular.isDefined(attrs.active)) {\n          scope.active = attrs.active;\n\n          scope.$parent.$watch(attrs.active, function(active) {\n            if (active) {\n              tabsController.selectTab(scope);\n            }\n          });\n        }\n\n        if (angular.isDefined(attrs.disable)) {\n          scope.$parent.$watch(attrs.disable, function(disabled) {\n            scope.disabled = !!disabled;\n          });\n        }\n      }\n    };\n  }\n\n  TabDirective.$inject = ['AV_TABS'];\n  availity.ui.directive('avTab', TabDirective);\n\n  function TabPaneDirective(avTemplateCache, $compile) {\n    return {\n      restrict: 'AE',\n      require: '^avTabs',\n      link: function(scope, element, attrs) {\n\n        var tab = scope.$eval(attrs.avTabPane);\n\n        if (angular.isDefined(tab.template) || angular.isDefined(tab.templateUrl)) {\n          avTemplateCache.get(tab)\n          .then(function(template) {\n            element.append($compile(template)(scope));\n          });\n        } else {\n          tab.transcludeFn(tab.$parent, function(contents) {\n            angular.forEach(contents, function(node) {\n              element.append(node);\n            });\n          });\n        }\n      }\n    };\n  }\n\n  TabPaneDirective.$inject = ['avTemplateCache', '$compile'];\n  availity.ui.directive('avTabPane', TabPaneDirective);\n\n})(window);\n","(function(root) {\n\n  'use strict';\n\n  var availity = root.availity;\n\n  availity.ui.constant('AV_SCROLL_PAGINATION', {\n    TEMPLATE: 'ui/scroll-pagination/scroll-pagination-tpl.html',\n    DEFAULT_OPTIONS: {\n      limit: 50,\n      offset: 0,\n      maxCached: 100,\n      loadMoreText: 'Load more items',\n      entryIdAttribute: 'id',\n      apiParams: {}\n    }\n  });\n\n\n  availity.ui.controller('AvScrollPaginationController', function($scope, $element, $timeout, $log, AV_SCROLL_PAGINATION, blockUI) {\n    $scope._options = {};\n    _.extend($scope._options, AV_SCROLL_PAGINATION.DEFAULT_OPTIONS, $scope.options || {});\n    $scope._options.lowOffset = $scope._options.offset;\n    $scope._options.highOffset = $scope._options.offset;\n    var self = this;\n\n    this.updateButtonVisibilityFlags = function(data) {\n      $scope.showNext = $scope._options.highOffset + data.count < data.totalCount;\n      $scope.showPrev = $scope._options.lowOffset > 0;\n    };\n\n    this.loadEntries = function(prepend) {\n      var block = blockUI.instances.get('scroll-pagination-block-' + $scope.avScrollPagination);\n      block.start();\n      var params = {};\n      _.extend(params, $scope._options.apiParams, {limit: $scope._options.limit, offset: $scope._options.offset});\n      $scope.apiResource.query({params: params}).then(function(response) {\n        var responseData = self.getResponseData(response);\n        if (responseData && responseData[$scope._options.resourceId]) {\n          self.addEntries(responseData[$scope._options.resourceId], prepend);\n        }\n        self.updateButtonVisibilityFlags(responseData);\n        block.stop();\n      }, function() {\n        $log.error('API call failed');\n        block.stop();\n      });\n    };\n\n    this.getResponseData = function(data) {\n      if (data) {\n        var result;\n        if ($scope._options.responseKey) {\n          var keys = $scope._options.responseKey.split('.');\n          var nestedData = data;\n          var noData = false;\n          _.each(keys, function(key) {\n            if (!noData) {\n              nestedData = nestedData[key];\n              if (!nestedData) {\n                noData = true;\n              }\n            }\n          });\n          result = noData ? [] : nestedData;\n        } else {\n          result = data;\n        }\n        return result;\n      }\n      return [];\n    };\n\n    this.addEntries = function(entries, prepend) {\n      var oldEntries = angular.copy($scope.entries);\n      if (prepend) {\n        $scope.entries.unshift.apply($scope.entries, entries);\n      } else {\n        $scope.entries.push.apply($scope.entries, entries);\n      }\n      if ($scope.entries.length > $scope._options.maxCached) {\n        var diff = $scope.entries.length - $scope._options.maxCached;\n        var trackedElementId;\n        if (prepend) {\n          $scope.entries = $scope.entries.slice(0, $scope._options.maxCached);\n          $scope._options.highOffset -= diff;\n          trackedElementId = oldEntries[oldEntries.length - diff - 1] ? oldEntries[oldEntries.length - diff - 1][$scope._options.entryIdAttribute] : undefined;\n        } else {\n          $scope.entries = $scope.entries.slice(diff, $scope.entries.length);\n          $scope._options.lowOffset += diff;\n          trackedElementId = oldEntries[diff] ? oldEntries[diff][$scope._options.entryIdAttribute] : undefined;\n        }\n        self.autoscroll(trackedElementId, prepend);\n      }\n    };\n\n    this.autoscroll = function(trackedElementId, prepend) {\n      if (trackedElementId) {\n        var trackedElement = $element.find('#' + trackedElementId);\n        var trackedElementTop = trackedElement.offset().top;\n        $timeout(function() {\n          var newScrollTop = $element.scrollTop() + trackedElement.offset().top - trackedElementTop;\n          $element.animate({scrollTop: newScrollTop}, 0);\n        }, 0, false);\n      } else {\n        $timeout(function() {\n          if (prepend) {\n            $element.animate({scrollTop: $element.prop('scrollHeight')}, 0);\n          } else {\n            $element.animate({scrollTop: 0}, 0);\n          }\n        }, 0, false);\n      }\n    };\n\n    this.loadPrev = function() {\n      $scope._options.lowOffset -= $scope._options.limit;\n      $scope._options.offset = $scope._options.lowOffset;\n      self.loadEntries(true);\n    };\n\n    this.loadNext = function() {\n      $scope._options.highOffset += $scope._options.limit;\n      $scope._options.offset = $scope._options.highOffset;\n      self.loadEntries();\n    };\n\n    $scope.loadPrev = self.loadPrev;\n    $scope.loadNext = self.loadNext;\n\n    this.loadEntries();\n  });\n\n\n  availity.ui.directive('avScrollPagination', function($log, AV_SCROLL_PAGINATION) {\n    return {\n      restrict: 'A',\n      controller: 'AvScrollPaginationController',\n      transclude: true,\n      templateUrl: AV_SCROLL_PAGINATION.TEMPLATE,\n      scope: {\n        apiResource: '=',\n        entries: '=',\n        options: '=',\n        avScrollPagination: '@'\n      },\n      link: function($scope) {\n        if (!$scope.avScrollPagination) {\n          $log.error('Directive must include an id');\n        }\n      }\n    };\n  });\n\n})(window);\n"],"sourceRoot":"/source/"}